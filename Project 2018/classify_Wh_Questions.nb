(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1650577,      30310]
NotebookOptionsPosition[   1638195,      30091]
NotebookOutlinePosition[   1638550,      30107]
CellTagsIndexPosition[   1638507,      30104]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Extracting all lines from scripts", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"cab4ee65-639b-4750-a1e4-975f2577e569"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740083890074869*^9, 3.74008389667279*^9}, 
   3.740157035555481*^9},
 CellLabel->"In[58]:=",ExpressionUUID->"d71059b3-665b-4950-867f-9bf72a6d367d"],

Cell[BoxData["\<\"/Users/jofre/Documents/GitHub/Summer2018Zhamilya/Project \
2018\"\>"], "Output",
 CellChangeTimes->{3.7401570360338697`*^9, 3.740157095267673*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"d07504cd-4cf9-458b-bdb7-008023386f33"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{"\"\<movie_lines.tsv\>\"", ",", "\"\<Text\>\""}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\\t\>\"", ",", "\"\<\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{3.740084055896326*^9, 3.740157117273651*^9},
 CellLabel->"In[60]:=",ExpressionUUID->"8413af67-812f-44eb-acb6-871039fc40cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lines", "=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Partition", "[", 
       RowBox[{"data", ",", "5"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", 
        RowBox[{"-", "1"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\\\"\>\"", "\[Rule]", "\"\<\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"18054f2b-965c-49cb-8804-2a7fbfca729b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"linesJoined", "=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"Riffle", "[", 
     RowBox[{"lines", ",", "\"\< \>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.740083962319407*^9, {3.740084014544158*^9, 3.740084017213212*^9}, 
   3.740157130797942*^9},
 CellLabel->"In[62]:=",ExpressionUUID->"6106833c-4a76-4063-a956-dec4209f4060"],

Cell[BoxData[
 RowBox[{"Riffle", "[", 
  RowBox[{"lines", ",", "\"\< \>\""}], "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"eb2ff9fe-4247-4574-abae-11656fdb5bbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lines", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.740084019805112*^9, 3.740084041028945*^9}, {
  3.7400840985562553`*^9, 3.740084099470685*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"14e880f6-e239-45e4-9145-3be8f2c8060e"],

Cell[BoxData["304894"], "Output",
 CellChangeTimes->{{3.740084025857532*^9, 3.74008404152601*^9}, {
  3.74008409311901*^9, 3.740084099902487*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"2dd5deed-1af9-4aab-bf7e-c1bae71d6c03"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"sentences", "=", 
   RowBox[{"TextCases", "[", 
    RowBox[{"linesJoined", ",", "\"\<Sentence\>\""}], "]"}]}], ";"}]], "Input",\

 CellLabel->"In[63]:=",ExpressionUUID->"3fd53a69-1c65-49c9-91ca-518a28b4a4dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extracting and modifying questions from lines", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"b49d2da7-adc3-45f2-b7b6-c68f0e7ec730"],

Cell["Replacing \[OpenCurlyDoubleQuote]?\[CloseCurlyDoubleQuote] for \
\[OpenCurlyDoubleQuote].\[CloseCurlyDoubleQuote] and making letters of lower \
case", "Text",ExpressionUUID->"92a8c79e-daf1-4081-b17e-f49b05eabc91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questionsWithQuestionMark", " ", "=", " ", 
  RowBox[{"Select", "[", 
   RowBox[{"sentences", ",", 
    RowBox[{
     RowBox[{"StringContainsQ", "[", 
      RowBox[{"#", ",", "\"\<?\>\""}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740157951329094*^9, 3.740157962320059*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"dedd85af-eeb0-43cf-80b7-74bc2f15bb0a"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"She okay?\"\>", 
           ",", "\<\"You know how sometimes you just become this \
persona?\"\>", ",", "\<\"And you don't know how to quit?\"\>", 
           ",", "\<\"Like my fear of wearing pastels?\"\>", 
           ",", "\<\"What good stuff?\"\>", ",", "\<\"What crap?\"\>", ",", 
           TemplateBox[{"19642"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"Well what's the point of waiting?\"\>", 
           ",", "\<\"It's sixth century B.C.  Do you like the period?\"\>", 
           ",", "\<\"Dance?\"\>", ",", "\<\"Okay?\"\>", 
           ",", "\<\"What are you going to do?\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 73, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 73, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 73, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[73], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740157962825688*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"1cd8f8d6-5d36-4fe5-9e2b-af900e0ba35d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questions", "=", 
  RowBox[{"ToUpperCase", "[", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"sentences", ",", 
       RowBox[{
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"#", ",", "\"\<?\>\""}], "]"}], "&"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<?\>\"", "\[Rule]", "\"\<.\>\""}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740157246024006*^9, 3.740157249015265*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"c5e8a140-ec24-4682-b35a-20a6f28713cc"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"SHE OKAY.\"\>", 
           ",", "\<\"YOU KNOW HOW SOMETIMES YOU JUST BECOME THIS \
PERSONA.\"\>", ",", "\<\"AND YOU DON'T KNOW HOW TO QUIT.\"\>", 
           ",", "\<\"LIKE MY FEAR OF WEARING PASTELS.\"\>", 
           ",", "\<\"WHAT GOOD STUFF.\"\>", ",", "\<\"WHAT CRAP.\"\>", ",", 
           TemplateBox[{"19642"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"WELL WHAT'S THE POINT OF WAITING.\"\>", 
           ",", "\<\"IT'S SIXTH CENTURY B.C.  DO YOU LIKE THE PERIOD.\"\>", 
           ",", "\<\"DANCE.\"\>", ",", "\<\"OKAY.\"\>", 
           ",", "\<\"WHAT ARE YOU GOING TO DO.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 64, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 64, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 64, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[64], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084173714202*^9, 3.7401572922733927`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"fbe5d00d-94d5-4e4c-b98b-102d3458e57d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extracting and modifying normal sentences from lines", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"7b6c53ad-8577-466a-bfed-e5f158adc6fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"normalLines", "=", 
  RowBox[{"ToUpperCase", "[", 
   RowBox[{
    RowBox[{"Complement", "[", 
     RowBox[{"sentences", ",", "questionsWithQuestionMark"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"80", ";;", "64213"}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740157296738432*^9, 3.74015729927142*^9}, {
  3.7401579854680557`*^9, 3.7401579860627728`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"a7b6d6cc-7ef0-467e-9dde-60e19e6c7fe6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"AAA!\"\>", ",", "\<\"AAAAAAAAAA!\"\>", 
           ",", "\<\"AAAGH!\"\>", ",", "\<\"AAAHGHHH!\"\>", 
           ",", "\<\"AAAWW SHIT!...\"\>", ",", "\<\"AAH!\"\>", 
           ",", "\<\"A B...\"\>", ",", "\<\"A B-24 LIBERATOR.\"\>", ",", 
           TemplateBox[{"64118"},
            "OutputSizeLimit`Skeleton"], ",", "\<\"ZEKE.\"\>", 
           ",", "\<\"ZERELDA DID.\"\>", 
           ",", "\<\"ZERELDA IT'S NO COINCIDENCE.\"\>", 
           ",", "\<\"ZERO...\"\>", ",", "\<\"ZERO DISTORTION SIR.\"\>", 
           ",", "\<\"ZOD.\"\>", 
           ",", "\<\"ZOE COME SAY HELLO TO YOUR FATHER..\"\>", 
           ",", "\<\"ZOR-EL BUT WHAT CAN YOU A MERE GIRL- SUPERMAN WILL \
RETURN IT.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 74, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 74, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 74, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[74], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.74008417904668*^9, 3.7401573060679903`*^9, 
  3.7401579874821243`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"9a4341fb-1f3f-4ad4-81f1-7ccd6cf748df"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"normalLines1", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"normalLines", ",", "19653"}], "]"}]}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"262ad8a5-14f2-4740-b5c7-783cf07c0df5"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"I DON'T THINK I'LL BE HAVING SEX EVER AGAIN.\"\>", 
           ",", "\<\"BREE -- MY GOD I THOUGHT IT WAS OVER.\"\>", 
           ",", "\<\"I GOTTA HAVE A JOB WHERE I COME TO WORK AT ELEVEN -- GO \
TO LUNCH AT TWELVE -- AND QUIT AT ONE.\"\>", ",", 
           TemplateBox[{"19648"},
            "OutputSizeLimit`Skeleton"], ",", "\<\"THE FIT ISN'T RIGHT.\"\>", 
           ",", "\<\"THE BET'S OFF.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 76, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 76, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 76, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[76], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084182989924*^9, 3.740157584268127*^9, 
  3.740157999212657*^9, 3.740158039702961*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"c540d6ec-14c7-46f2-9753-7539db0ebb43"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random Sample", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"df29d1d5-fc99-48cd-ba8c-31b7c9564335"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"trainquestions1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"questions", ",", "13757"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7400792720916224`*^9, 3.740079273377097*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"f5a5e964-4f0a-4b95-af97-34c669344325"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"DID YA GET THE LICENSE NUMBER.\"\>", 
           ",", "\<\"YOU GONNA PULL.\"\>", 
           ",", "\<\"WE'VE KNOWN DEBBIE WHAT SINCE THE EIGHTH GRADE.\"\>", 
           ",", "\<\"JOYCE GIVE THE ASSISTANT CHIEF INSPECTOR A DRINK WOULD \
YOU.\"\>", ",", 
           TemplateBox[{"13749"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"MISS WOLLSTEN SHARES THE ROOM WITH YOU.\"\>", 
           ",", "\<\"WHAT DO YOU WANT TO KNOW EVAN.\"\>", 
           ",", "\<\"WILL THESE BOARDS HOLD.\"\>", 
           ",", "\<\"LIKE MY FEAR OF WEARING PASTELS.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 77, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 77, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 77, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[77], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084189185034*^9, 3.7401573461542387`*^9, 
  3.740157599633017*^9, 3.7401580425672903`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"9254a232-b237-409f-82e1-f249b2e9a6da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"trainnonquestions1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"normalLines1", ",", "13757"}], "]"}]}]}]], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"d2d17123-2450-4c92-8bfd-9e4f335ae4d6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"JUST.\"\>", ",", "\<\"I HAVEN'T GOT NO CLASS.\"\>", 
           ",", "\<\"AND I'LL BE OUTTA A JOB.\"\>", 
           ",", "\<\"YOU'RE AN INSPIRATION LLOYD; YOU SHOULD GO ON THE SEVEN \
HUNDRED CLUB OR SOMETHING.\"\>", ",", 
           TemplateBox[{"13749"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"I'M SORRY IF I SEEM OVER-ANXIOUS TO YOU.\"\>", 
           ",", "\<\"YOU'RE UNDER AGE.\"\>", 
           ",", "\<\"YOU NEWSHOUNDS'VE BEEN AFTER ME AND MY FOLKS EVER SINCE \
I WON THAT DUMB CONTEST.\"\>", ",", "\<\"THREE...\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 78, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 78, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 78, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[78], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084191268667*^9, 3.7401573515036383`*^9, 
  3.740157602227317*^9, 3.740158048061103*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"9d0c226a-1f98-46de-8e8b-e53c969185f2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"validationq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"questions", ",", "trainquestions1"}], "]"}], ",", "2000"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7400792151545753`*^9, 3.740079215829104*^9}, {
   3.740079284827704*^9, 3.740079285582086*^9}, 3.7401580578637943`*^9},
 CellLabel->"In[82]:=",ExpressionUUID->"e9a06111-4bd6-4f73-a69f-7b65f263d0ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"validationnonq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"normalLines1", ",", "trainnonquestions1"}], "]"}], ",", 
     "2000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740079217560535*^9, 3.740079218146028*^9}, 
   3.740158059941605*^9},
 CellLabel->"In[80]:=",ExpressionUUID->"e81c76ef-496b-451f-8f6b-f779b847fb8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"testq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"questions", ",", "trainquestions1", ",", "validationq1"}], 
      "]"}], ",", "2600"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740079220841104*^9, 3.7400792214794273`*^9}, {
  3.7400792915082273`*^9, 3.740079292142103*^9}, {3.740158064044731*^9, 
  3.740158065084379*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"f56e3b0e-2dc7-4fd9-ae0b-89a1a7a7f4f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"testnonq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{
      "normalLines1", ",", "trainnonquestions1", ",", "validationnonq1"}], 
      "]"}], ",", "2600"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740079223822283*^9, 3.740079224376918*^9}, 
   3.740158106943109*^9},
 CellLabel->"In[84]:=",ExpressionUUID->"cf5afbb1-9047-4c6c-8417-4e467840f6f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Changing parts of speech to numbers", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"0ef2d266-dca6-4b95-9309-5085c4fdc9e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", " ", "=", " ", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", " ", "\[Rule]", 
      RowBox[{"First", "[", "#2", " ", "]"}]}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adjective\>\"", ",", "\"\<Adverb\>\"", ",", "\"\<Conjunction\>\"", 
      ",", "\"\<Determiner\>\"", ",", "\"\<Interjection\>\"", ",", 
      "\"\<Missing\>\"", ",", "\"\<Noun\>\"", ",", "\"\<Numeral\>\"", ",", 
      "\"\<Particle\>\"", ",", "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", 
      ",", "\"\<ProperNoun\>\"", ",", "\"\<Punctuation\>\"", ",", 
      "\"\<Symbol\>\"", ",", "\"\<Verb\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.740085705554276*^9},
 CellLabel->"In[69]:=",ExpressionUUID->"2e3d1310-7455-4cb5-b6e5-7872be0dac8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Adjective\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Adverb\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"Conjunction\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"Determiner\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"Interjection\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"Missing\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"Noun\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"Numeral\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"Particle\"\>", "\[Rule]", "9"}], ",", 
   RowBox[{"\<\"Preposition\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"Pronoun\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"ProperNoun\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"Punctuation\"\>", "\[Rule]", "13"}], ",", 
   RowBox[{"\<\"Symbol\"\>", "\[Rule]", "14"}], ",", 
   RowBox[{"\<\"Verb\"\>", "\[Rule]", "15"}]}], "}"}]], "Output",
 CellChangeTimes->{3.740085709225148*^9, 3.740157408809452*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"23240653-ded3-4eef-a54c-0d0f01276396"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classify", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"c3e68d7b-1c05-456d-a16e-0a3835c9a007"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Classify", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Not a question\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<like my fear of wearing pastels.\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"",
             ",", "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", 
            "\"\<Noun\>\"", ",", "\"\<Punctuation\>\""}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<like your fear of wearing pastels.\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"",
             ",", "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", 
            "\"\<Noun\>\"", ",", "\"\<Punctuation\>\""}], "}"}]}], "}"}]}], 
       "}"}]}], ",", 
     RowBox[{"\"\<Question\>\"", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<like my fer of wearing pastels.\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"",
             ",", "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", 
            "\"\<Noun\>\"", ",", "\"\<Punctuation\>\""}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<like your fear of pearing pastels.\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"",
             ",", "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", 
            "\"\<Noun\>\"", ",", "\"\<Punctuation\>\""}], "}"}]}], "}"}]}], 
       "}"}]}]}], "|>"}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], "]"}]], "Input",\

 CellLabel->"In[24]:=",ExpressionUUID->"16520970-9419-43f2-9f32-e3c5b48f5c56"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", 
                    TemplateBox[{"\"NominalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "7", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not a question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", 
                    TemplateBox[{"\"NominalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "7", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not a question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 4, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NominalVector", "Length" -> 7]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NominalVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NominalVector"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
           "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 7, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3139720177438361802, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5643421565728107793, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", ":", ";", "\"", 
                "'", "(", ")", "$", "%", "&", "@", "*", "-", "+", "=", "[", 
                "]", "{", "}", "\\", "|", "\\", "<", ">", "/", "~", "`", "#", 
                "^"}}, "Method" -> "WordSegment", "Version" -> {11.3, 0}, 
             "ID" -> 3051290048872824615, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "Input" -> Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {-8848930558111478767, -2320075283768740418, \
-2159536488856785732, 2935186855750808727, 3054608430639883892, 
                 3266755832598616625, 3287432777910049379, 
                 5538390546289211935, 5771009867652686929, 
                 6180448655478833230, 7843075611497459573}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
             "InverseDocumentFrequency" -> {-2.3978952727983707`, \
-1.2992829841302609`, -1.0116009116784799`, -1.0116009116784799`, \
-1.2992829841302609`, -1.0116009116784799`, -1.0116009116784799`, \
-1.7047480922384253`, -1.7047480922384253`, -1.0116009116784799`, \
-2.3978952727983707`}, "Version" -> {11.3, 0}, "ID" -> 24534574848248429, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Preposition" -> 1], 
               Association["Pronoun" -> 1], 
               Association["Noun" -> 1], 
               Association["Preposition" -> 1], 
               Association["Verb" -> 1], 
               Association["Noun" -> 1], 
               Association["Punctuation" -> 1]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 162007647621428153, "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6693038715456136576]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not a question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             6697000108911617603, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4810585743643111211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Not a question" -> 0.5, "Question" -> 0.5]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Speed", "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{
             0.00019817041174974293`, -0.00010737776756286621`, \
-3.8641170818642934`*^-10, -3.8641170818642934`*^-10, \
-0.00010737776756286621`, -3.8641170818642934`*^-10, -1.932058513176571*^-9, \
-3.255901659393601*^-10, -3.255901659393601*^-10, -3.8641170818642934`*^-10, 
             0.00019817041174974293`, -4.554690846703124*^-9, \
-4.909905371164314*^-9, 6.5709335750341324`*^-9, -4.659931107653392*^-9, 
             6.45454783371191*^-12, -3.0385724492099087`*^-10, \
-1.5827114063782233`*^-9}}], "Biases" -> 
           RawArray["Real32",{4.621962368389632*^-9}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 18, 
           "$InputDimensions" -> {18}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], "f1" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association[
            "Weight" -> {0.09090909090909091, 0.09090909090909091, 
              0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 
              0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 
              0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 
              0.14285714285714285`, 0.14285714285714285`, 
              0.14285714285714285`, 0.14285714285714285`, 
              0.14285714285714285`, 0.14285714285714285`, 
              0.14285714285714285`}, "Type" -> "NumericalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1]}, "Output" -> 
             Association[
              "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0.}, {-0.9854452013969421}}, {{
              0.}, {-1.0622987747192383`}}, {{0.}, {1.4216760396957397`}}, {{
              0.}, {-1.0082148313522339`}}, {{0.}, {
              0.0013964950339868665`}}, {{0.}, {-0.06574203819036484}}, {{
              0.}, {-0.34243276715278625`}}}, "Version" -> {11.3, 0}, "ID" -> 
             2333481148792975998]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], "Spans" -> {
               Span[1, 11], 
               Span[12, 18]}, "Wrappers" -> {SparseArray, Identity}, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association[
                "Weight" -> {0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.14285714285714285`, 
                  0.14285714285714285`, 0.14285714285714285`, 
                  0.14285714285714285`, 0.14285714285714285`, 
                  0.14285714285714285`, 0.14285714285714285`}, "Type" -> 
                 "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             4285093444708854555]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Weight" -> {0.5000000000000001, 0.06313131313131312, 
                0.06313131313131312, 0.06313131313131312, 0.06313131313131312,
                 0.06313131313131312, 0.06313131313131312, 
                0.06313131313131312, 0.06313131313131312, 0.06313131313131312,
                 0.06313131313131312, 0.06313131313131312, 
                0.11507936507936506`, 0.11507936507936506`, 
                0.11507936507936506`, 0.11507936507936506`, 
                0.11507936507936506`, 0.11507936507936506`, 
                0.11507936507936506`}, "Type" -> "NumericalVector"], "Key" -> 
             "(f1f2)", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 1000., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.695598380709432, 0.14342257826175991`], "Accuracy" -> 
         PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
         0.00037425, "TestSize" -> 3, "TrainingSize" -> 3, "TrainingTime" -> 
         0.015543000000000001`, "TrainingMemory" -> 79996., "ModelMemory" -> 
         25720., "ExperimentCount" -> 3, "ModelUtility" -> 
         2.7538591986148355`, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6953357751419658, 0.2482276752359793], 
           PlusMinus[0.6964306140523696, 0.24900283531371764`], 
           PlusMinus[0.6950348929414186, 0.2480150689783879]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1000., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 4], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 39221783820242]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7995360840040289, 0.6378232507658711], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.0005005, "TestSize" -> 3, "TrainingSize" -> 3, "TrainingTime" -> 
              0.0424635, "TrainingMemory" -> 129888., "ModelMemory" -> 25720.,
               "ExperimentCount" -> 3, "ModelUtility" -> 1.9740864104797267`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7329711260403222, 0.27611873193017594`], 
                PlusMinus[2.465639503708361, 1.9536841463046588`], 
                PlusMinus[2.4653026850917605`, 1.9533486907634487`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005005, "MeanCrossEntropy" -> 
             PlusMinus[0.7995360840040289, 0.6378232507658711], "ModelMemory" -> 
             25720., "TrainingMemory" -> 129888., "TrainingTime" -> 
             0.04416204], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.165335455020172, 0.7373003995764799], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00041075, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.01443275, "TrainingMemory" -> 128042., 
              "ModelMemory" -> 35680., "ExperimentCount" -> 3, "ModelUtility" -> 
              1.4781300968889908`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9977154585647222, 0.5090882411578134], 
                PlusMinus[2.669205911874957, 2.156504476797367], 
                PlusMinus[2.669205911874957, 2.156504476797367]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00041075, "MeanCrossEntropy" -> 
             PlusMinus[1.165335455020172, 0.7373003995764799], "ModelMemory" -> 
             35680., "TrainingMemory" -> 128042., "TrainingTime" -> 
             0.015010059999999999`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8047189562170501, 0.19319228048029433`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00048425000000000003`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.025072249999999997`, "TrainingMemory" -> 
              376602., "ModelMemory" -> 20072., "ExperimentCount" -> 3, 
              "ModelUtility" -> 2.1914557357709175`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00048425000000000003`, "MeanCrossEntropy" -> 
             PlusMinus[0.8047189562170501, 0.19319228048029433`], 
             "ModelMemory" -> 20072., "TrainingMemory" -> 376602., 
             "TrainingTime" -> 0.026075139999999997`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8149596418465576, 0.3210937508932569], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00048824999999999997`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.011786000000000001`, "TrainingMemory" -> 
              78392., "ModelMemory" -> 23120., "ExperimentCount" -> 3, 
              "ModelUtility" -> 2.0970453976402053`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7135581778200729, 0.26142723870256185`], 
                PlusMinus[1.354025100551105, 0.8524412814527432], 
                PlusMinus[1.354025100551105, 0.8524412814527432]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00048824999999999997`, "MeanCrossEntropy" -> 
             PlusMinus[0.8149596418465576, 0.3210937508932569], "ModelMemory" -> 
             23120., "TrainingMemory" -> 78392., "TrainingTime" -> 
             0.012257440000000001`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8083657905927571, 0.22200612985620763`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.0031752500000000006`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.03160325, "TrainingMemory" -> 
              128439.99999999999`, "ModelMemory" -> 55944., "ExperimentCount" -> 
              3, "ModelUtility" -> 1.2352270563361794`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.724084882418989, 0.26931953425155675`], 
                PlusMinus[0.8714846525293116, 0.3930203449888541], 
                PlusMinus[1.020110414263277, 0.5301655003041122]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0031752500000000006`, "MeanCrossEntropy" -> 
             PlusMinus[0.8083657905927571, 0.22200612985620763`], 
             "ModelMemory" -> 55944., "TrainingMemory" -> 128439.99999999999`,
              "TrainingTime" -> 0.03286738], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.695598380709432, 0.14342257826175991`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00037425, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.015543000000000001`, "TrainingMemory" -> 
              79996., "ModelMemory" -> 25720., "ExperimentCount" -> 3, 
              "ModelUtility" -> 2.7538591986148355`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6953357751419658, 0.2482276752359793], 
                PlusMinus[0.6964306140523696, 0.24900283531371764`], 
                PlusMinus[0.6950348929414186, 0.2480150689783879]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00037425, "MeanCrossEntropy" -> 
             PlusMinus[0.695598380709432, 0.14342257826175991`], 
             "ModelMemory" -> 25720., "TrainingMemory" -> 79996., 
             "TrainingTime" -> 0.01616472], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9514444696616864, 0.2757461820927579], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00036024999999999995`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.0348825, "TrainingMemory" -> 93718., 
              "ModelMemory" -> 25720., "ExperimentCount" -> 3, "ModelUtility" -> 
              2.0039225527996862`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.87784884774458, 0.39872434777991117`], 
                PlusMinus[1.014909473068421, 0.525260854753658], 
                PlusMinus[1.015935630418495, 0.5262281017347197]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00036024999999999995`, "MeanCrossEntropy" -> 
             PlusMinus[0.9514444696616864, 0.2757461820927579], "ModelMemory" -> 
             25720., "TrainingMemory" -> 93718., "TrainingTime" -> 0.0362778],
            "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1420190587082646`, 1.5460008116363808`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00033425, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.034795999999999994`, "TrainingMemory" -> 
              93752., "ModelMemory" -> 25720., "ExperimentCount" -> 3, 
              "ModelUtility" -> 1.4209844611790323`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0305768472925478`, 0.5400524703976681], 
                PlusMinus[4.317349661617614, 3.8015457605020577`], 
                PlusMinus[5.969480428595851, 5.452447522107792]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00033425, "MeanCrossEntropy" -> 
             PlusMinus[1.1420190587082646`, 1.5460008116363808`], 
             "ModelMemory" -> 25720., "TrainingMemory" -> 93752., 
             "TrainingTime" -> 0.03618783999999999], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7865475065939536, 0.18535327474502863`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00035775, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.0198905, "TrainingMemory" -> 85278., 
              "ModelMemory" -> 25720., "ExperimentCount" -> 3, "ModelUtility" -> 
              2.454150101879178, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7837188940725727, 0.3169332405150179], 
                PlusMinus[0.8172208431792554, 0.34532391778413923`], 
                PlusMinus[0.7656485831037451, 0.30205496929468423`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00035775, "MeanCrossEntropy" -> 
             PlusMinus[0.7865475065939536, 0.18535327474502863`], 
             "ModelMemory" -> 25720., "TrainingMemory" -> 85278., 
             "TrainingTime" -> 0.02068612], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931750900460314, 0.14243519403056443`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00041575, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.015983, "TrainingMemory" -> 78412., 
              "ModelMemory" -> 25720., "ExperimentCount" -> 3, "ModelUtility" -> 
              2.679310603674436, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931746745353708, 0.24670470033331182`], 
                PlusMinus[0.6931887323578674, 0.24671457639790279`], 
                PlusMinus[0.6931618653018429, 0.24669570179518652`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00041575, "MeanCrossEntropy" -> 
             PlusMinus[0.6931750900460314, 0.14243519403056443`], 
             "ModelMemory" -> 25720., "TrainingMemory" -> 78412., 
             "TrainingTime" -> 0.01662232], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.04], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471805599452, 0.34886581868923816`], "Accuracy" -> 
              PlusMinus[0.25, 0.35355339059327384`], "EvaluationTime" -> 
              0.000477, "TestSize" -> 1, "TrainingSize" -> 3, "TrainingTime" -> 
              0.050269, "TrainingMemory" -> 96704, "ModelMemory" -> 33552, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.4333568497561187`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471805599452, 0.24668538611935686`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000477, "MeanCrossEntropy" -> 
             PlusMinus[0.6931471805599452, 0.34886581868923816`], 
             "ModelMemory" -> 33552, "TrainingMemory" -> 96704, 
             "TrainingTime" -> 0.05227976], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 39217488852946]], "MaxTrainingSize" -> 4, 
      "LastReportingTime" -> 3.739996369297718`16.325446169757566*^9, 
      "PreprocessorEvaluationTime" -> 7.45751953125`2.*^-6, 
      "PreprocessorMemory" -> 40584, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 3, "TimeBudgets" -> 1.1, "ElapsedTimes" -> 
          1.465705, "ExperimentCounts" -> 31]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[39226078787538]], "ID" -> 39230373754834]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {"like your fear of wearing pastels."}, "ID" -> 
           7806654962102425149], "f2" -> 
         Association[
          "Type" -> "NominalVector", "Weight" -> 1, 
           "Values" -> {{
             "Preposition", "Pronoun", "Noun", "Preposition", "Verb", "Noun", 
              "Punctuation"}}, "ID" -> 5814909113149441914]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 2.983102, "MaxTrainingMemory" -> 23050696, 
      "DataMemory" -> 2512, "FunctionMemory" -> 198176, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 7, 23, 52, 49.529395`8.447437998916495}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"6fc05414-ce14-4584-bdf7-97ac005af35e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"categories", " ", "=", " ", 
  RowBox[{"Union", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"TextStructure", "[", 
               RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{
               "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
               "]"}], "]"}], ")"}], "/.", 
            RowBox[{
             RowBox[{"Missing", "[", "]"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}], 
          ")"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", ",", 
      RowBox[{"questions", "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740085609136063*^9, 3.74008565224747*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"ed243bc7-b166-488c-96c2-e32ab1bcf9e8"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.740085687052244*^9, 3.7401581379770737`*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"7f97979a-1d63-4317-aa9c-b7a27750bdde"]
}, Open  ]],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"partsOfSpeechNumbers", " ", "[", " ", "x_", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Transpose", "[", "\n", 
      RowBox[{"{", " ", 
       RowBox[{"x", ",", "\n", 
        RowBox[{
         RowBox[{"Map", "[", "\n", 
          RowBox[{
           RowBox[{
            RowBox[{"(", "\n", " ", 
             RowBox[{
              RowBox[{"(", "\n", "  ", 
               RowBox[{"(", "\n", "   ", 
                RowBox[{
                 RowBox[{"(", "\n", "     ", 
                  RowBox[{
                   RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], "\n", "    ", ")"}], "/.", 
                 RowBox[{
                  RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                "\n", "   ", ")"}], "\n", "  ", ")"}], "\n", "  ", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "2"}], "]"}], "]"}], "\n", ")"}], " ", 
            "\n", "&"}], " ", ",", " ", "x"}], " ", "]"}], "\n", "/.", " ", 
         "rules"}]}], "}"}], "]"}]}], " ", ";"}], "\n"}], "Code"], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"createClasses", " ", "[", " ", "x_", "]"}], " ", ":=", " ", 
    RowBox[{"Transpose", "[", "\n", 
     RowBox[{"{", " ", 
      RowBox[{"x", ",", "\n", 
       RowBox[{
        RowBox[{"Map", "[", "\n", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "\n", " ", 
            RowBox[{
             RowBox[{"(", "\n", "  ", 
              RowBox[{"(", "\n", "   ", 
               RowBox[{
                RowBox[{"(", "\n", "     ", 
                 RowBox[{
                  RowBox[{"TextStructure", "[", 
                   RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{
                   "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
                   "]"}], "]"}], "\n", "    ", ")"}], "/.", 
                RowBox[{
                 RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
               "\n", "   ", ")"}], "\n", "  ", ")"}], "\n", "  ", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "\n", ")"}], " ", "\n",
            "&"}], " ", ",", " ", "x"}], " ", "]"}], "\n", "/.", " ", 
        "rules"}], ",", "\n", "\n", 
       RowBox[{
        RowBox[{"whQuestionsChecker", " ", "[", " ", "x", " ", "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"True", "\[Rule]", "1"}], ",", 
          RowBox[{"False", " ", "\[Rule]", "0"}]}], "}"}]}]}], "}"}], "]"}]}],
    " ", ";"}], "Code"], "\n"
 StyleBox[, "Code"]}], "Code",
 CellChangeTimes->{{3.740085880916667*^9, 3.7400861347557087`*^9}, {
  3.740086331080839*^9, 3.740086334656097*^9}, {3.740086948951529*^9, 
  3.740086952140627*^9}, {3.740087333034587*^9, 3.740087340185684*^9}, {
  3.7401593177545567`*^9, 3.7401593741683702`*^9}},
 CellLabel->
  "In[105]:=",ExpressionUUID->"f24b21c2-f4e4-4ce9-adab-28ec9139ee26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"questions", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "10"}], "]"}], "]"}], ",", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"TextStructure", "[", 
                RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
                "]"}], "]"}], ")"}], "/.", 
             RowBox[{
              RowBox[{"Missing", "[", "]"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}],
            ")"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", ",", 
       RowBox[{"questions", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "10"}], "]"}], "]"}]}], "]"}], "/.", "rules"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7400842525186567`*^9, 3.740084280645115*^9}, {
  3.740084314312044*^9, 3.740084317173037*^9}, {3.7400857395478888`*^9, 
  3.740085759673088*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"e5881c42-c5f6-4ba6-a1de-87adfe55fb2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"SHE OKAY.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "12", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"YOU KNOW HOW SOMETIMES YOU JUST BECOME THIS PERSONA.\"\>", 
     ",", 
     RowBox[{"{", 
      RowBox[{
      "11", ",", "15", ",", "7", ",", "2", ",", "11", ",", "2", ",", "15", 
       ",", "7", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AND YOU DON'T KNOW HOW TO QUIT.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "11", ",", "15", ",", "2", ",", "12", ",", "12", ",", "10", 
       ",", "12", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"LIKE MY FEAR OF WEARING PASTELS.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "10", ",", "12", ",", "7", ",", "10", ",", "15", ",", "7", ",", "13"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"WHAT GOOD STUFF.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"WHAT CRAP.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DO YOU LISTEN TO THIS CRAP.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "12", ",", "11", ",", "15", ",", "10", ",", "12", ",", "12", ",", 
       "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"YOU ALWAYS BEEN THIS SELFISH.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "2", ",", "15", ",", "7", ",", "1", ",", "13"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"YOU NEVER WANTED TO GO OUT WITH 'ME DID YOU.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "11", ",", "2", ",", "15", ",", "10", ",", "12", ",", "12", ",", "10", 
       ",", "13", ",", "12", ",", "12", ",", "11", ",", "13"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"I WAS.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "15", ",", "13"}], "}"}]}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{
  3.740084286458425*^9, 3.7400843179520197`*^9, {3.7400857441644163`*^9, 
   3.740085760682178*^9}, 3.740158159019251*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"bf186162-f187-4f7b-a97d-bf9ad8f4bfd7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "1000"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"questions", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "1000"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"normalLines1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}]}], " ", "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"54f1815f-e286-4c78-b929-24096a8edd1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"questions", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"normalLines1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}]}], " ", "|>"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
  3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
  3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"dd5bebd2-95f7-460e-81d7-b41b2e84a9a0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NominalSequence\""}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NominalSequence\""}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 14240096, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10529582893065609946752054009641029904123381341629919333888, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904123381341629919333888,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740085352583025*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"6b90ff0b-125c-4cbf-9b27-462161bafb5a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"testq1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testnonq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"testnonq1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], " ", "|>"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084572853097*^9, 3.740084657768157*^9}, {
  3.740084695059907*^9, 3.7400846987130327`*^9}, {3.7400848003789387`*^9, 
  3.740084802640071*^9}, {3.740085174101098*^9, 3.74008519280921*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"92773ba6-c513-48fc-b7e8-6215dd347448"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["200", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["200", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.6500000000000000222`3.9561720165653536", 
                    "\[PlusMinus]", "0.0338114785302568513`2."}], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierMeasurementsObject, 14378040, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierMeasurementsObject, 
            10529582893065609946752054009641029904141828085704066753744, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904141828085704066753744,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740084662824913*^9, 3.7400847033442373`*^9, 
  3.74008538891745*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"f4d27a2a-681d-4304-90a6-cddc7955eef6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.740084702672556*^9, 3.740084741556716*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"e12b0564-1f3c-4105-a841-3f359f8fa3f0"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9163480218129639, 0.8023450701347736, 0.4932672899550227}, {
   1., 0.42, 0.}}, {{0.9016438148630552, 0.5177044980841545, 
   0.004896879264460649}, {0.8796675025019278, 0.6437767836873812, 
   0.1740093775089338}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["57", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "57", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6785714285714286`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.57`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6195652173913043`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{57, " examples of ", "Not Question", " correctly classified"}], 
         
         Row[{"Precision = ", 0.6785714285714286}], 
         Row[{"Recall = ", 0.57}], 
         Row[{"FScore = ", 0.6195652173913043}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["27", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "27", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.32142857142857145`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.27`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          27, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.32142857142857145`}], 
         Row[{"Row fraction = ", 0.27}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["43", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "43", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3706896551724138`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.43`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          43, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.3706896551724138}], 
         Row[{"Row fraction = ", 0.43}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["73", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "73", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6293103448275862`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.73`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6759259259259258`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{73, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.6293103448275862}], 
         Row[{"Recall = ", 0.73}], 
         Row[{"FScore = ", 0.6759259259259258}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.57`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.57}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.73`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.73}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "84", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6785714285714286`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{84, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.6785714285714286}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "116", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6293103448275862`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{116, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.6293103448275862}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["100", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["84", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["116", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7400847419678593`*^9, 3.740085395517992*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"b7314f76-072f-4d8c-b6f1-700665964a8f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["With Vector Numbers", "Subsection",
 CellChangeTimes->{{3.740085570283942*^9, 
  3.740085575475913*^9}},ExpressionUUID->"4f87d1e5-e9c2-400c-b56b-\
14ca6ccffed4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", " ", "=", " ", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", " ", "\[Rule]", 
      RowBox[{"First", "[", "#2", " ", "]"}]}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adjective\>\"", ",", "\"\<Adverb\>\"", ",", "\"\<Conjunction\>\"", 
      ",", "\"\<Determiner\>\"", ",", "\"\<Interjection\>\"", ",", 
      "\"\<Missing\>\"", ",", "\"\<Noun\>\"", ",", "\"\<Numeral\>\"", ",", 
      "\"\<Particle\>\"", ",", "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", 
      ",", "\"\<ProperNoun\>\"", ",", "\"\<Punctuation\>\"", ",", 
      "\"\<Symbol\>\"", ",", "\"\<Verb\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.740085705554276*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"ab593a78-068a-4748-ad79-479c6bfcab2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Adjective\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Adverb\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"Conjunction\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"Determiner\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"Interjection\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"Missing\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"Noun\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"Numeral\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"Particle\"\>", "\[Rule]", "9"}], ",", 
   RowBox[{"\<\"Preposition\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"Pronoun\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"ProperNoun\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"Punctuation\"\>", "\[Rule]", "13"}], ",", 
   RowBox[{"\<\"Symbol\"\>", "\[Rule]", "14"}], ",", 
   RowBox[{"\<\"Verb\"\>", "\[Rule]", "15"}]}], "}"}]], "Output",
 CellChangeTimes->{3.740085709225148*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"da6a0587-bc3d-4810-b62f-a1e1ad284771"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"questions", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"normalLines1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                   ")"}], ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
              ",", 
              RowBox[{"validationq1", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}], "/.", 
            "rules"}]}], "}"}], "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                   ")"}], ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
              ",", 
              RowBox[{"validationnonq1", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}], "/.", 
            "rules"}]}], "}"}], "]"}]}]}], " ", "|>"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, 3.74015750254681*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"7c99db0d-c727-4d26-826f-ec0910fc5904"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1000, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
              "], "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
             9.465786466929034, "StandardDeviation" -> 4.511821128433264, 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", ":", ";", 
                    "\"", "'", "(", ")", "$", "%", "&", "@", "*", "-", "+", 
                    "=", "[", "]", "{", "}", "\\", "|", "\\", "<", ">", "/", 
                    "~", "`", "#", "^"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUnONjtShe8AMafZAAtAct8soSRGLIEBEiMGsDM2yHlOOuL9qSqqbvh7
M512ONoT4X/5j//+9//8v7//66//+bu//vrr3/7rf/73b/+s//Gvt9V66rz3
zlPHXbOUN1DXGWu3WVdbrfVabw70tU8f7cxzxjwzB8Ztc+j/9mij3dl/A+us
XmYvRX+/9A8xUE/vd5x9jyYx6t45UEZfpe5zbr+39vhFuWeJMsfdS7/oI6Zb
jh7V6tj7lNP0g/PHQNFHMNJXq6vmwNIHltY13db7Lr9H6a/G1ufV0vUxN1++
m758TP13PbPulb9oPL/xrHluPS1fXvup+3b9+4y2yo4lKaXrA8rSJ6za9olZ
He3EaZqzxrQ09e4cWFtjRSt2u6a3+o6BUbTwRf8959pVU4gBNq2XzSqOMrVb
MdBGnVouvWhqd1e+49xdZpl3bL18ztpLDLBWp3Z2uO6q/8TAKmVv9muxGefG
O2COPke5Wzs1tCa/AX2IFn5oZepuZ+U7xDW1tLt701DTnr0BHn+GFmoPkfW2
eDn/855ZxLtzLL3lxsDQamgHNxs1xKs9Bqq46ex15p5VXFJirZa+vY5T5u5i
Em3kygFNS3OpYpetCbabA9pVcdSY4hE98MSsxN9d+zTmGlXL1kv+Qg+ZdTb9
n14g9v4NFK1V0VIO7Zh4tMXAvGVoJfpdlwOx8xf9lMKbzuy7ajdrDmgq9Vy+
Q8tVxvoNNFh6rMk2aslioG3xgNj8NHGQViRfXsvW09vUNtY1/5gVm61Xa2Mk
BEqZIwb046Xjqe/QYSi3999A1RqKu25bc/ZkhrnhTB3mAeuWVuIX2k9OoFa8
w/XawxjoeoO4QQu5Kv8zZjXb0KHRrusUnDLKiv0Qsx598Gj6wSn1zpIDElE6
hbtKqExtef5Cf6VVmRcReEev+YvCqdR6HO2sREfyrhZPKzeGBMfRV7QafDV2
FdM1SSbRYKAcGLuwkvqgzt/niRo6l10yY1Z99tSux9ZKpOqPR2dpJCBWyF0N
iBuQYlMf0bX7sR/iJi13sXg/rWk1Y0D7cMWGlTO1YNQcgN936TojkhI9uUQL
NeBGydipRf/Jq64dLUvcXuF2sW+8QwJvF8mRdiSEmj48HyU5NvmP1gmJkWsl
idikVvrUTPUOidscGPpHHbap/4i1cj86B2DoLIupmza55Dv0Eu2S2FFHR5w4
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

                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJzFGn1o1VX0bW8fbe4939x8usbCTBglFUQW8aCFOYeSyIRl5SS1JxkmQW2y
wlCHlSvCzGXLxMfqGWKCSyFSCd/STbZHNgqD0fpY1lZKwaLCFbX+eef34Pw4
nHPuvW/9dbj397v3fNzzfe+NG55atTEvEAicLAoEwrXdO8YGalL7ur5PNd07
NwVjDOH70Le9824oqPYgfH9g7I/Rq/Eq3zwFuf9OvNCxeHJ4JksHhyeciLbf
lIimPjl3OP/Lh+ew/wMfHN1S/GPrrtscf6lCjZeig6PPll7p+Uj/o/QK86Gl
T0oPuW9GLyh6OHtwBaMrPtpZW1fO/tdxePn9E1OV7LniMccHJR+8jtpXq49t
r1VeWpYX9c1Ptf/12Fe/z/LhWXrf6a4vloTJdVJ9wPLDY60/0PKt9Y+m9ujK
fgD+k/fg7FOtEXYd6MPSReOL6y9m9XnTK6PJljsqSXnhc6D8PpZjU2Nw/att
s0m75uzCVp5tnx56Pp0/yxtDfAFI2Z0xXuSvpH4VQ6Dvs+6TZx7/JiTWW8D3
7MWaa4eGi631lMofOLvh9qf8OLU/PjdKr6X+ltRL5P+eLp/3VnJohtp/YLo9
/4j0Uep3bf2E1p9QcmX3R/rvmn4Yc3K0jQPavCK4tWbhmZ5SnxynKx5gfdPK
V00n4b+l+KV+/9EXiyuSPWFj+lyfsynU6t9I+plfR/eXpBYuya8/9mQ5Kaf1
ex9q3h6KiOMJjHH81vp5GOM8Qqt/pnpiWl/h+TmlC/L6TmT9CM5zGjp/u7Zl
T+m02S+GEKe0dTHkc5zeU/UDZxeAB8PNVeMfd8ey8RLopuIazLuyww9XPnHX
yoO0vWDI2YGtHQNfXekD57c2BXOuL+WxHR3NR+X5CsDYskWtO2PZ/seq8XcT
PS3++KrNz6Fe5OTJ2bltHcjpt+m547wb72N6Hhz92nho2leDdaZ4KbvX7ofp
6tuyILm2pUCel1pCSn6AB9cTnLwpfzc8WT94YUXItz9nJ6Z8H6m6ecbB3ghr
p9Q5eGOUbwEdUr2T1uGX3hu8sqnx77O25ymNj1J/ZeuXAJ9p/Qf7Y3mnC++8
5+tgodoflG249erItlBq17b+d0KdlT5+W9cd3dX3M5934nN8/4PBs3Wfl6jt
FdNr26fDMF73b/qNEj9dGM9U7enrBxv5Ppv23PC5Y7zUd0qPYB3Ecan+SeOs
9Lxd7cP1a7T7UXUEJ1dKLyn9oSCum6T4PJjxt5RctPkMxTfOC7Xn3lK2PVb0
nL9+l+oH9tMU3ZQ/x3jmv3lud/xKwDpvuBBPJP88IPd/UnlBPcrlp9gfYjuR
1vMAcd0krcfAX0jvs7h8xtSOpets76fwPCVvDmJ5g51I10vfAYA+UfTZ6q/a
b2UglVeY7iv1Z2oo7CMOrb57/pphv58Euil75fTMFR9gp6D/ua6b4L5Dm/9j
u+bu3aXy8exeeT/BykOqH5Z9S+hTua5rKbrw/HcN+5svd/3g1V17C/ujE6sv
++owjs+XHzm1u6AhW4/Y9v2k8qDqB+n/HD6uz6F9N+ThyegX5GF4Xsu3a70x
xuv4npCUn5BeWz/bG6suqLjdXxe6el8wtDbRHr0l2/ew7T9wfX6o//F3rb1i
Ojk7ocbc+URGZvZPRvj8SZp3cvGx+ra5xb0/hcXyoOwBz0PcpPjm6Mf9Wufv
W5h9AL+pPeH7JNf+AeM58vrE+c63y4z9HP4O/RbX+RVV73D0e+uJ/JSyR9fy
p97X2srDFX14P7Bvbp20j++afnx/a/ruhOPT24/QH4ofiB/4P3iv4OqcbNfb
2il7/5npF2vpdtWHxX2x6X6PRMmb48/VewAcr6Fvh/0c1Fdcn1eKN1fv5m3l
AH0X032ouPB/8wdw+cbGfQM/Fqn5kN6PePxm/OEvewbWHC8KenLl7oFd3Vvh
vh7XVwX64V2ZFI9W73P9ni5XeSFlr5C3UOf1H3AqPUk=
                    "], 
                    "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
               Span[1, 1715], 
               Span[1716, 1716]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                  "], "Type" -> 
                 "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             821998144885263164]]}, "Invertibility" -> "Impossible", 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4779017560470115588]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             2739954230257633601, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7071693056549462440]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "Not Question" -> 0.49999999999999994`, "Question" -> 
        0.49999999999999994`]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Speed", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> 
         RawArray["Integer16",{20, 20, 29, 77, 96, 113, 118, 211, 246, 256, 
           256, 263, 313, 373, 373, 447, 496, 536, 556, 556, 569, 569, 569, 
           589, 619, 632, 632, 632, 632, 675, 675, 675, 675, 675, 733, 738, 
           738, 738, 738, 751, 776, 776, 776, 813, 818, 818, 840, 881, 885, 
           928, 938, 938, 938, 938, 938, 938, 973, 1019, 1111, 1153, 1169, 
           1169, 1169, 1169, 1169, 1169, 1169, 1171, 1171, 1171, 1171, 1171, 
           1171, 1171, 1171, 1171, 1171, 1171, 1178, 1178, 1178, 1243, 1281, 
           1295, 1317, 1317, 1388, 1398, 1463, 1475, 1484, 1484, 1498, 1578, 
           1581, 1638, 1638, 1652, 1652, 1674, 1716, 1716, 1716, 1716, 1716, 
           1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
           1716, 1716, 1716, 1716, 1716, 1716}], 
         "NumericalThresholds" -> CompressedData["
1:eJwdkFtIEwAYhdfQtSgTI8NSgzmaLRXGMnFTtqZ7qKwlTseESKcoodOhXYbT
6IJhtsJmcxv2IDirSZqDHhpr/xEmTDCTYGCBZoXOVmbTdVGELtsevsM55+Hn
53BqdGX1TAaDcZEdkTKNXtbaqmlTsqKhTqM9KtRui1hDhLjmDGhdFlKqE8eF
yfNoTEnDy5UMzLlvwawI0oW0vXjyrhLbxUokc6yo2K0Cy5uA1VA/LfzZosyk
BHza8sNuyEeDPUgfvTbkcgXIr3pN9Z9tCIgZ403lvYjyMEeA96E9+F2txsyY
CMVZm2Rc+0a5VQ76XtOP0QM5MLge0eKwlkY8a5547wZ1+CQoV6SjXDVLu4Jq
YvPMEPKYKAp8id1eH5mkIV8W4kNNEFWrkL4uxPme/dhsZ2GiVk7HSty4tjCA
n3YrDYivYqrwBjoauPgXZkKJQTrXeZPeGvlU8ZfjKXp1G6XO6zhx6DKe1+rw
TFYXY1FwBtPhU5H+F02Hp+jSrI2OHHQg9bAMga5OOr60Qj3yZRp7+oIqd+hg
0ktxutQa+1FecBYzSQ8gmp9AX4cdVW+GoYAFjn1JYKSYwN6ZF9nGAp4rG/da
SmC+kjcuVz3GV54Npo1u6O7r0X0nER+a/NTm7KfGvl4a9XVR5nIxTS41e+62
bxbwnT8KtwZ5kihzAbnEcNIjca/6JTUtcVIjN1XK52dL/wNL/RDu
          "], 
         "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVkVOUFQAARG/ebNu23Xay283eajM3959t27Zt27Ztd3t9zMy5Z/5mMrbt
GdIhMtAnKGAhYQOCIyLCBoXGDED1Hn3DO4ZHFCzW6X8/OKD/WZ/4bDcmf03N
ShPxx9/OsRCVGEQsSrHR0lz3mnFpRD8O+8yn9iYBt8zLSU+YkUwsMj87TUMw
KelLf36ZgeKk54yZGWkqRtiWKuRgk+HssSlXvGwHFvvFMhwwLQWpyDHrcc6z
tiIeJcjFDjvz0ZL89IdhlOeJj41GMi543osmZK4dWW0XdpuYSYbwyIf2YZjV
+e4Kl7vUJeYhCm9tzVXbsMoYvLM9LyzMTW/YnAb04rijHWX2wBLZ0IUusBs1
+ewnt7rFiU7wg+99bh2mOdUgulKWN5bjgUc94n6bcMfbjnWMLYjNV0NJx10b
0pgI8rHLZlSlHdtsyTe788pabHC9WUhBbrJSlzjkpCjDLcJmB/DSSKwxOfPs
QTVmGpVidKIAy+zJfe85w+nWDjw321lWJimHPOhpT1mBSw51iFOc7D73moSB
rHOt4x1ndOZbg9f+A4C//o8=
          "], "LeafValues" -> 
         RawArray["UnsignedInteger8",{{101, 1}, {3, 1}, {2, 2}, {1, 8}, {1, 
           5}, {1, 4}, {3, 1}, {1, 58}, {1, 11}, {1, 12}, {1, 3}, {3, 1}, {1, 
           2}, {3, 1}, {1, 3}, {2, 1}, {1, 3}, {3, 1}, {5, 23}, {1, 4}, {1, 
           4}, {1, 3}, {4, 2}, {1, 3}, {3, 1}, {1, 9}, {1, 3}, {4, 1}, {3, 
           1}, {17, 30}, {8, 10}, {1, 4}, {7, 2}, {4, 2}, {3, 1}, {1, 3}, {2, 
           2}, {12, 1}, {7, 4}, {1, 3}, {2, 1}, {2, 2}, {2, 2}, {1, 7}, {1, 
           5}, {1, 6}, {2, 2}, {18, 1}, {1, 4}, {3, 1}, {2, 2}, {4, 1}, {1, 
           2}, {3, 1}, {1, 14}, {2, 2}, {2, 2}, {3, 2}, {4, 1}, {75, 1}, {1, 
           3}, {2, 1}, {6, 1}, {2, 2}, {2, 2}, {7, 1}, {3, 1}, {7, 1}, {2, 
           2}, {3, 1}, {1, 4}, {1, 3}, {2, 2}, {3, 1}, {1, 2}, {3, 3}, {3, 
           1}, {1, 3}, {2, 2}, {1, 172}, {2, 13}, {2, 2}, {3, 1}, {1, 3}, {1, 
           3}, {1, 3}, {1, 4}, {2, 1}, {12, 1}, {3, 1}, {1, 3}, {1, 10}, {1, 
           3}, {1, 3}, {3, 1}, {1, 2}, {3, 8}, {1, 3}, {2, 2}, {5, 1}, {1, 
           4}, {2, 3}, {6, 1}, {1, 2}, {2, 7}, {2, 1}, {1, 3}, {5, 1}, {2, 
           2}, {9, 3}, {9, 3}, {1, 6}, {6, 1}, {2, 2}, {80, 1}, {3, 1}, {1, 
           3}, {2, 2}, {2, 2}, {2, 2}, {28, 1}, {2, 2}, {6, 1}}], "RootIndex" -> 
         67, "NominalDimension" -> 0]], "Processor" -> 
      MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
              "], "Type" -> 
             "NumericalVector"]], "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "DecisionTree", "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
         PlusMinus[0.5000000000000003, 0.07070378035792256], "EvaluationTime" -> 
         9.430000000000001*^-6, "TestSize" -> 100, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.007552, "TrainingMemory" -> 335168, 
         "ModelMemory" -> 61032, "ExperimentCount" -> 1, "ModelUtility" -> 
         7.558128955599508, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.5000000000000003, 0.04999512254661126]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 1000], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 115637842022351]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3537612653541005`, 0.4268209940989989], "Accuracy" -> 
              PlusMinus[0.4504950495049506, 0.07029074724332993], 
              "EvaluationTime" -> 0.00017394, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.049436, 
              "TrainingMemory" -> 1798504, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.0277203671043191`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3537612653541005`, 0.30180801928018547`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4504950495049506, 0.04970306403042821]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.9460780805399367`, 0.4700942872939521], "Accuracy" -> 
              PlusMinus[0.5495049504950499, 0.07042869408830647], 
              "EvaluationTime" -> 0.00007187, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044369, 
              "TrainingMemory" -> 2623752, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.5857390060963248`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.9460780805399367`, 0.3324068583426106]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007187, "MeanCrossEntropy" -> 
             PlusMinus[1.9460780805399367`, 0.4700942872939521], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2623752, 
             "TrainingTime" -> 0.493126], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
              "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
              "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8989142600866946, 0.13704963816025623`], "Accuracy" -> 
              PlusMinus[0.5792079207920797, 0.06993081195248246], 
              "EvaluationTime" -> 0.0000132, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.025237, 
              "TrainingMemory" -> 1173760, "ModelMemory" -> 61288, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.41050219998442, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8989142600866946, 0.09690872850227981]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792079207920797, 0.049448551345481616`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8839677178889411, 0.1363000854895791], "Accuracy" -> 
              PlusMinus[0.5891089108910896, 0.06970838956395264], 
              "EvaluationTime" -> 9.05*^-6, "TestSize" -> 100, "TrainingSize" -> 
              200, "TrainingTime" -> 0.105235, "TrainingMemory" -> 5610600, 
              "ModelMemory" -> 61672, "ExperimentCount" -> 1, "ModelUtility" -> 
              5.9552267103014485`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8839677178889411, 0.09637871472598751]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5891089108910896, 0.04929127496626447]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8790576051810061, 0.1391686208427838], "Accuracy" -> 
              PlusMinus[0.6980198019801988, 0.04615937631985702], 
              "EvaluationTime" -> 9.67*^-6, "TestSize" -> 100, "TrainingSize" -> 
              800, "TrainingTime" -> 0.366333, "TrainingMemory" -> 22203896, 
              "ModelMemory" -> 62184, "ExperimentCount" -> 1, "ModelUtility" -> 
              5.9046782235633435`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8790576051810061, 0.1391686208427838]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6980198019801988, 0.04615937631985702]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.67*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.8790576051810061, 0.1391686208427838], "ModelMemory" -> 
             62184, "TrainingMemory" -> 22203896, "TrainingTime" -> 
             0.46546825000000003`], "Index" -> 2], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1957511596862074`, 0.1977836145849986], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00027889, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.095126, 
              "TrainingMemory" -> 1509424, "ModelMemory" -> 907992, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.7442260702596155`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1957511596862074`, 0.13985413508063904`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7828022084623473, 0.11953129778999334`], "Accuracy" -> 
              PlusMinus[0.6188118811881194, 0.06886790804030904], 
              "EvaluationTime" -> 0.00031985, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.123381, 
              "TrainingMemory" -> 3615960, "ModelMemory" -> 930576, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.558301033503622, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7828022084623473, 0.08452139123133287]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6188118811881194, 0.04869696478143408]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8893877217879478, 0.14717185742548708`], "Accuracy" -> 
              PlusMinus[0.6089108910891095, 0.06917727028697561], 
              "EvaluationTime" -> 0.00027361000000000003`, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.35569, 
              "TrainingMemory" -> 14782992, "ModelMemory" -> 1002280, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.3349029480800123`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8893877217879478, 0.10406621838538166`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00027361000000000003`, "MeanCrossEntropy" -> 
             PlusMinus[0.8893877217879478, 0.14717185742548708`], 
             "ModelMemory" -> 1002280, "TrainingMemory" -> 14782992, 
             "TrainingTime" -> 1.8735760000000001`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0877927578820954`, 0.11578452595789275`], 
              "Accuracy" -> 
              PlusMinus[0.4405940594059407, 0.07012485283032993], 
              "EvaluationTime" -> 0.00001992, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.005608, 
              "TrainingMemory" -> 441360, "ModelMemory" -> 194904, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.098094668170411, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0877927578820954`, 0.0818720234612958]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4405940594059407, 0.049585758966034954`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.697264809214688, 0.016444209057147805`], "Accuracy" -> 
              PlusMinus[0.49009900990099037`, 0.07067631991204443], 
              "EvaluationTime" -> 0.00001918, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.006398, 
              "TrainingMemory" -> 1719984, "ModelMemory" -> 607016, 
              "ExperimentCount" -> 1, "ModelUtility" -> 6.558222836541349, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.697264809214688, 0.011627811735558456`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49009900990099037`, 0.049975705079116424`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6752594838450804, 0.017892797895458255`], 
              "Accuracy" -> 
              PlusMinus[0.5594059405940598, 0.07029074724332998], 
              "EvaluationTime" -> 0.00003977, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.021239, 
              "TrainingMemory" -> 8369328, "ModelMemory" -> 2805008, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.907995567002972, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6752594838450804, 0.012652118726278918`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5594059405940598, 0.04970306403042825]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6664964540845267, 0.024419892990284724`], 
              "Accuracy" -> PlusMinus[0.53960396039604, 0.04987850435483753], 
              "EvaluationTime" -> 0.00009492, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.1285, 
              "TrainingMemory" -> 40493304, "ModelMemory" -> 11047408, 
              "ExperimentCount" -> 1, "ModelUtility" -> 3.3088928276812233`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6664964540845267, 0.024419892990284724`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009492, "MeanCrossEntropy" -> 
             PlusMinus[0.6664964540845267, 0.024419892990284724`], 
             "ModelMemory" -> 11047408, "TrainingMemory" -> 40493304, 
             "TrainingTime" -> 0.16623300000000002`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7006895037945174, 0.01809996825054025], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00005207, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009567, 
              "TrainingMemory" -> 275728, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.02624508864541, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7006895037945174, 0.01279861028921822]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471805599441, 0.007931464032162798], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00005703, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.012973, 
              "TrainingMemory" -> 892576, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.968608843187345, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471805599441, 0.005608392001879511]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6853665275369779, 0.008626479616410363], "Accuracy" -> 
              PlusMinus[0.5990099009900995, 0.06945731300787833], 
              "EvaluationTime" -> 0.0000532, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.018989, 
              "TrainingMemory" -> 4195256, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.121708545780134, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6853665275369779, 0.006099842234531295]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6640144502285039, 0.012013546486100838`], 
              "Accuracy" -> 
              PlusMinus[0.6188118811881194, 0.04869696478143408], 
              "EvaluationTime" -> 0.000056449999999999997`, "TestSize" -> 100,
               "TrainingSize" -> 800, "TrainingTime" -> 0.089167, 
              "TrainingMemory" -> 16575312, "ModelMemory" -> 94856, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.194467022712934, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6640144502285039, 0.012013546486100838`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6188118811881194, 0.04869696478143408]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000056449999999999997`, "MeanCrossEntropy" -> 
             PlusMinus[0.6640144502285039, 0.012013546486100838`], 
             "ModelMemory" -> 94856, "TrainingMemory" -> 16575312, 
             "TrainingTime" -> 0.12102575], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6930015408367505, 0.008033609595306624], "Accuracy" -> 
              PlusMinus[0.5099009900990102, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007264, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.020734, 
              "TrainingMemory" -> 2047584, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.643378809353513, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6930015408367505, 0.005680619822246629]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6774722561923496, 0.007949511510513176], "Accuracy" -> 
              PlusMinus[0.5792079207920797, 0.049448551345481616`], 
              "EvaluationTime" -> 0.00007502, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.142276, 
              "TrainingMemory" -> 33037040, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.706532734515695, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6774722561923496, 0.007949511510513176]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792079207920797, 0.049448551345481616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007502, "MeanCrossEntropy" -> 
             PlusMinus[0.6774722561923496, 0.007949511510513176], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 33037040, 
             "TrainingTime" -> 0.198579], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931473692179523, 0.007931467415980243], "Accuracy" -> 
              PlusMinus[0.5099009900990102, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007371, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012086, 
              "TrainingMemory" -> 819128, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.6233731878017, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931473692179523, 0.005608394394599773]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931470003552032, 0.007931461097753533], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007227, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.01372, 
              "TrainingMemory" -> 1719016, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.649251627473916, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931470003552032, 0.005608389926938821]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931429420431708, 0.007931391729037679], "Accuracy" -> 
              PlusMinus[0.5990099009900995, 0.06945731300787833], 
              "EvaluationTime" -> 0.00006929000000000001, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.024599, 
              "TrainingMemory" -> 8312392, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.704885827765168, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931429420431708, 0.005608340875849439]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931250973081593, 0.005608132011087476], "Accuracy" -> 
              PlusMinus[0.5891089108910896, 0.04929127496626447], 
              "EvaluationTime" -> 0.00007280000000000001, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.076196, 
              "TrainingMemory" -> 33036976, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.642906850599569, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931250973081593, 0.005608132011087476]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5891089108910896, 0.04929127496626447]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007280000000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.6931250973081593, 0.005608132011087476], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 33036976, 
             "TrainingTime" -> 0.107331], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.386515473602657, 0.2997892319886574], "Accuracy" -> 
              PlusMinus[0.5495049504950499, 0.07042869408830647], 
              "EvaluationTime" -> 0.00007381, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044131, 
              "TrainingMemory" -> 2623816, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.219730236973486, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.386515473602657, 0.2119829988658867]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007381, "MeanCrossEntropy" -> 
             PlusMinus[1.386515473602657, 0.2997892319886574], "ModelMemory" -> 
             67960, "TrainingMemory" -> 2623816, "TrainingTime" -> 
             0.48544099999999996`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.089296570443798, 0.14314641718813728`], "Accuracy" -> 
              PlusMinus[0.47029702970297055`, 0.0705388573294967], 
              "EvaluationTime" -> 0.00007462, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.042066, 
              "TrainingMemory" -> 1798608, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.8632244547037793`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.089296570443798, 0.10121980229629043`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.47029702970297055`, 0.04987850435483752]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.923233311946536, 0.13899405586179253`], "Accuracy" -> 
              PlusMinus[0.53960396039604, 0.07053885732949673], 
              "EvaluationTime" -> 0.00006934, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044614, 
              "TrainingMemory" -> 2624112, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 3.43622132558719, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.923233311946536, 0.09828363944449528]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006934, "MeanCrossEntropy" -> 
             PlusMinus[0.923233311946536, 0.13899405586179253`], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2624112, 
             "TrainingTime" -> 0.48820600000000003`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6921895658482664, 0.009975115719036007], "Accuracy" -> 
              PlusMinus[0.5594059405940598, 0.07029074724332998], 
              "EvaluationTime" -> 0.00007347, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.030915, 
              "TrainingMemory" -> 2566128, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.631302998719581, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6921895658482664, 0.007053471968050884]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5594059405940598, 0.04970306403042825]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007347, "MeanCrossEntropy" -> 
             PlusMinus[0.6921895658482664, 0.009975115719036007], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2566128, 
             "TrainingTime" -> 0.340065], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.665745175663856, 0.028409115411534402`], "Accuracy" -> 
              PlusMinus[0.6089108910891095, 0.06917727028697561], 
              "EvaluationTime" -> 0.0006139100000000001, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.398711, 
              "TrainingMemory" -> 1816256, "ModelMemory" -> 214576, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.5686112991718506`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.665745175663856, 0.02008827815500723]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006139100000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.665745175663856, 0.028409115411534402`], 
             "ModelMemory" -> 214576, "TrainingMemory" -> 1816256, 
             "TrainingTime" -> 4.385821], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 115633547055055]], "MaxTrainingSize" -> 1000, 
      "LastReportingTime" -> 3.740068046705079`16.325454492975325*^9, 
      "PreprocessorEvaluationTime" -> 4.68115234375`2.*^-6, 
      "PreprocessorMemory" -> 195984, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.5120000000000001, 
          "ElapsedTimes" -> 0.49161, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.64, "ElapsedTimes" -> 
          1.467996, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 200, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          0.866427, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 800, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.95418, "ExperimentCounts" -> 5]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[115642136989647]], "ID" -> 
         115646431956943]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "would you rather be ravished by a pirate or a british rear \
admiral."}, "ID" -> 2944923201742380288], "f2" -> 
         Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{15, 11, 2, 15, 15, 10, 4, 7, 3, 4, 1, 1, 7, 13}}, 
           "ID" -> 1880470000636944807]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 5.895246, "MaxTrainingMemory" -> 58779792, 
      "DataMemory" -> 356264, "FunctionMemory" -> 431496, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 8, 19, 47, 27.511215`8.192084752706696}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740086047537242*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"6c670d68-be30-4e1a-9524-065c42da0c60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"testq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testnonq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"testnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}]}], " ", "|>"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740086199001491*^9, 3.7400862121608133`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"d078db54-3fb5-4f7d-a830-7291119b8496"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7199999999999999734`4.118883216782667", "\[PlusMinus]", 
                    "0.0318286871647759928`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 1000, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    7263179337424669307]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    114010418416267986]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                9.465786466929034, "StandardDeviation" -> 4.511821128433264, 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", ":", ";", 
                    "\"", "'", "(", ")", "$", "%", "&", "@", "*", "-", "+", 
                    "=", "[", "]", "{", "}", "\\", "|", "\\", "<", ">", "/", 
                    "~", "`", "#", "^"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUnONjtShe8AMafZAAtAct8soSRGLIEBEiMGsDM2yHlOOuL9qSqqbvh7
M512ONoT4X/5j//+9//8v7//66//+bu//vrr3/7rf/73b/+s//Gvt9V66rz3
zlPHXbOUN1DXGWu3WVdbrfVabw70tU8f7cxzxjwzB8Ztc+j/9mij3dl/A+us
XmYvRX+/9A8xUE/vd5x9jyYx6t45UEZfpe5zbr+39vhFuWeJMsfdS7/oI6Zb
jh7V6tj7lNP0g/PHQNFHMNJXq6vmwNIHltY13db7Lr9H6a/G1ufV0vUxN1++
m758TP13PbPulb9oPL/xrHluPS1fXvup+3b9+4y2yo4lKaXrA8rSJ6za9olZ
He3EaZqzxrQ09e4cWFtjRSt2u6a3+o6BUbTwRf8959pVU4gBNq2XzSqOMrVb
MdBGnVouvWhqd1e+49xdZpl3bL18ztpLDLBWp3Z2uO6q/8TAKmVv9muxGefG
O2COPke5Wzs1tCa/AX2IFn5oZepuZ+U7xDW1tLt701DTnr0BHn+GFmoPkfW2
eDn/855ZxLtzLL3lxsDQamgHNxs1xKs9Bqq46ex15p5VXFJirZa+vY5T5u5i
Em3kygFNS3OpYpetCbabA9pVcdSY4hE98MSsxN9d+zTmGlXL1kv+Qg+ZdTb9
n14g9v4NFK1V0VIO7Zh4tMXAvGVoJfpdlwOx8xf9lMKbzuy7ajdrDmgq9Vy+
Q8tVxvoNNFh6rMk2aslioG3xgNj8NHGQViRfXsvW09vUNtY1/5gVm61Xa2Mk
BEqZIwb046Xjqe/QYSi3999A1RqKu25bc/ZkhrnhTB3mAeuWVuIX2k9OoFa8
w/XawxjoeoO4QQu5Kv8zZjXb0KHRrusUnDLKiv0Qsx598Gj6wSn1zpIDElE6
hbtKqExtef5Cf6VVmRcReEev+YvCqdR6HO2sREfyrhZPKzeGBMfRV7QafDV2
FdM1SSbRYKAcGLuwkvqgzt/niRo6l10yY1Z99tSux9ZKpOqPR2dpJCBWyF0N
iBuQYlMf0bX7sR/iJi13sXg/rWk1Y0D7cMWGlTO1YNQcgN936TojkhI9uUQL
NeBGydipRf/Jq64dLUvcXuF2sW+8QwJvF8mRdiSEmj48HyU5NvmP1gmJkWsl
idikVvrUTPUOidscGPpHHbap/4i1cj86B2DoLIupmza55Dv0Eu2S2FFHR5w4
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

                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJzFGn1o1VX0bW8fbe4939x8usbCTBglFUQW8aCFOYeSyIRl5SS1JxkmQW2y
wlCHlSvCzGXLxMfqGWKCSyFSCd/STbZHNgqD0fpY1lZKwaLCFbX+eef34Pw4
nHPuvW/9dbj397v3fNzzfe+NG55atTEvEAicLAoEwrXdO8YGalL7ur5PNd07
NwVjDOH70Le9824oqPYgfH9g7I/Rq/Eq3zwFuf9OvNCxeHJ4JksHhyeciLbf
lIimPjl3OP/Lh+ew/wMfHN1S/GPrrtscf6lCjZeig6PPll7p+Uj/o/QK86Gl
T0oPuW9GLyh6OHtwBaMrPtpZW1fO/tdxePn9E1OV7LniMccHJR+8jtpXq49t
r1VeWpYX9c1Ptf/12Fe/z/LhWXrf6a4vloTJdVJ9wPLDY60/0PKt9Y+m9ujK
fgD+k/fg7FOtEXYd6MPSReOL6y9m9XnTK6PJljsqSXnhc6D8PpZjU2Nw/att
s0m75uzCVp5tnx56Pp0/yxtDfAFI2Z0xXuSvpH4VQ6Dvs+6TZx7/JiTWW8D3
7MWaa4eGi631lMofOLvh9qf8OLU/PjdKr6X+ltRL5P+eLp/3VnJohtp/YLo9
/4j0Uep3bf2E1p9QcmX3R/rvmn4Yc3K0jQPavCK4tWbhmZ5SnxynKx5gfdPK
V00n4b+l+KV+/9EXiyuSPWFj+lyfsynU6t9I+plfR/eXpBYuya8/9mQ5Kaf1
ex9q3h6KiOMJjHH81vp5GOM8Qqt/pnpiWl/h+TmlC/L6TmT9CM5zGjp/u7Zl
T+m02S+GEKe0dTHkc5zeU/UDZxeAB8PNVeMfd8ey8RLopuIazLuyww9XPnHX
yoO0vWDI2YGtHQNfXekD57c2BXOuL+WxHR3NR+X5CsDYskWtO2PZ/seq8XcT
PS3++KrNz6Fe5OTJ2bltHcjpt+m547wb72N6Hhz92nho2leDdaZ4KbvX7ofp
6tuyILm2pUCel1pCSn6AB9cTnLwpfzc8WT94YUXItz9nJ6Z8H6m6ecbB3ghr
p9Q5eGOUbwEdUr2T1uGX3hu8sqnx77O25ymNj1J/ZeuXAJ9p/Qf7Y3mnC++8
5+tgodoflG249erItlBq17b+d0KdlT5+W9cd3dX3M5934nN8/4PBs3Wfl6jt
FdNr26fDMF73b/qNEj9dGM9U7enrBxv5Ppv23PC5Y7zUd0qPYB3Ecan+SeOs
9Lxd7cP1a7T7UXUEJ1dKLyn9oSCum6T4PJjxt5RctPkMxTfOC7Xn3lK2PVb0
nL9+l+oH9tMU3ZQ/x3jmv3lud/xKwDpvuBBPJP88IPd/UnlBPcrlp9gfYjuR
1vMAcd0krcfAX0jvs7h8xtSOpets76fwPCVvDmJ5g51I10vfAYA+UfTZ6q/a
b2UglVeY7iv1Z2oo7CMOrb57/pphv58Euil75fTMFR9gp6D/ua6b4L5Dm/9j
u+bu3aXy8exeeT/BykOqH5Z9S+hTua5rKbrw/HcN+5svd/3g1V17C/ujE6sv
++owjs+XHzm1u6AhW4/Y9v2k8qDqB+n/HD6uz6F9N+ThyegX5GF4Xsu3a70x
xuv4npCUn5BeWz/bG6suqLjdXxe6el8wtDbRHr0l2/ew7T9wfX6o//F3rb1i
Ojk7ocbc+URGZvZPRvj8SZp3cvGx+ra5xb0/hcXyoOwBz0PcpPjm6Mf9Wufv
W5h9AL+pPeH7JNf+AeM58vrE+c63y4z9HP4O/RbX+RVV73D0e+uJ/JSyR9fy
p97X2srDFX14P7Bvbp20j++afnx/a/ruhOPT24/QH4ofiB/4P3iv4OqcbNfb
2il7/5npF2vpdtWHxX2x6X6PRMmb48/VewAcr6Fvh/0c1Fdcn1eKN1fv5m3l
AH0X032ouPB/8wdw+cbGfQM/Fqn5kN6PePxm/OEvewbWHC8KenLl7oFd3Vvh
vh7XVwX64V2ZFI9W73P9ni5XeSFlr5C3UOf1H3AqPUk=
                    "], 
                    "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Spans" -> {
                  Span[1, 1715], 
                  Span[1716, 1716]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                    "], 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 821998144885263164]]}, "Invertibility" -> 
            "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4779017560470115588]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                2739954230257633601, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7071693056549462440]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "Not Question" -> 0.49999999999999994`, "Question" -> 
           0.49999999999999994`]], "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Speed", "BatchProcessing" -> Automatic, "Model" -> 
       Association["Tree" -> MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> 
            RawArray["Integer16",{20, 20, 29, 77, 96, 113, 118, 211, 246, 256,
               256, 263, 313, 373, 373, 447, 496, 536, 556, 556, 569, 569, 
              569, 589, 619, 632, 632, 632, 632, 675, 675, 675, 675, 675, 733,
               738, 738, 738, 738, 751, 776, 776, 776, 813, 818, 818, 840, 
              881, 885, 928, 938, 938, 938, 938, 938, 938, 973, 1019, 1111, 
              1153, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1171, 1171, 
              1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1178, 
              1178, 1178, 1243, 1281, 1295, 1317, 1317, 1388, 1398, 1463, 
              1475, 1484, 1484, 1498, 1578, 1581, 1638, 1638, 1652, 1652, 
              1674, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
              1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
              1716, 1716, 1716}], "NumericalThresholds" -> CompressedData["
1:eJwdkFtIEwAYhdfQtSgTI8NSgzmaLRXGMnFTtqZ7qKwlTseESKcoodOhXYbT
6IJhtsJmcxv2IDirSZqDHhpr/xEmTDCTYGCBZoXOVmbTdVGELtsevsM55+Hn
53BqdGX1TAaDcZEdkTKNXtbaqmlTsqKhTqM9KtRui1hDhLjmDGhdFlKqE8eF
yfNoTEnDy5UMzLlvwawI0oW0vXjyrhLbxUokc6yo2K0Cy5uA1VA/LfzZosyk
BHza8sNuyEeDPUgfvTbkcgXIr3pN9Z9tCIgZ403lvYjyMEeA96E9+F2txsyY
CMVZm2Rc+0a5VQ76XtOP0QM5MLge0eKwlkY8a5547wZ1+CQoV6SjXDVLu4Jq
YvPMEPKYKAp8id1eH5mkIV8W4kNNEFWrkL4uxPme/dhsZ2GiVk7HSty4tjCA
n3YrDYivYqrwBjoauPgXZkKJQTrXeZPeGvlU8ZfjKXp1G6XO6zhx6DKe1+rw
TFYXY1FwBtPhU5H+F02Hp+jSrI2OHHQg9bAMga5OOr60Qj3yZRp7+oIqd+hg
0ktxutQa+1FecBYzSQ8gmp9AX4cdVW+GoYAFjn1JYKSYwN6ZF9nGAp4rG/da
SmC+kjcuVz3GV54Npo1u6O7r0X0nER+a/NTm7KfGvl4a9XVR5nIxTS41e+62
bxbwnT8KtwZ5kihzAbnEcNIjca/6JTUtcVIjN1XK52dL/wNL/RDu
             "], 
            "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVkVOUFQAARG/ebNu23Xay283eajM3959t27Zt27Ztd3t9zMy5Z/5mMrbt
GdIhMtAnKGAhYQOCIyLCBoXGDED1Hn3DO4ZHFCzW6X8/OKD/WZ/4bDcmf03N
ShPxx9/OsRCVGEQsSrHR0lz3mnFpRD8O+8yn9iYBt8zLSU+YkUwsMj87TUMw
KelLf36ZgeKk54yZGWkqRtiWKuRgk+HssSlXvGwHFvvFMhwwLQWpyDHrcc6z
tiIeJcjFDjvz0ZL89IdhlOeJj41GMi543osmZK4dWW0XdpuYSYbwyIf2YZjV
+e4Kl7vUJeYhCm9tzVXbsMoYvLM9LyzMTW/YnAb04rijHWX2wBLZ0IUusBs1
+ewnt7rFiU7wg+99bh2mOdUgulKWN5bjgUc94n6bcMfbjnWMLYjNV0NJx10b
0pgI8rHLZlSlHdtsyTe788pabHC9WUhBbrJSlzjkpCjDLcJmB/DSSKwxOfPs
QTVmGpVidKIAy+zJfe85w+nWDjw321lWJimHPOhpT1mBSw51iFOc7D73moSB
rHOt4x1ndOZbg9f+A4C//o8=
             "], "LeafValues" -> 
            RawArray["UnsignedInteger8",{{101, 1}, {3, 1}, {2, 2}, {1, 8}, {1,
               5}, {1, 4}, {3, 1}, {1, 58}, {1, 11}, {1, 12}, {1, 3}, {3, 
              1}, {1, 2}, {3, 1}, {1, 3}, {2, 1}, {1, 3}, {3, 1}, {5, 23}, {1,
               4}, {1, 4}, {1, 3}, {4, 2}, {1, 3}, {3, 1}, {1, 9}, {1, 3}, {4,
               1}, {3, 1}, {17, 30}, {8, 10}, {1, 4}, {7, 2}, {4, 2}, {3, 
              1}, {1, 3}, {2, 2}, {12, 1}, {7, 4}, {1, 3}, {2, 1}, {2, 2}, {2,
               2}, {1, 7}, {1, 5}, {1, 6}, {2, 2}, {18, 1}, {1, 4}, {3, 1}, {
              2, 2}, {4, 1}, {1, 2}, {3, 1}, {1, 14}, {2, 2}, {2, 2}, {3, 
              2}, {4, 1}, {75, 1}, {1, 3}, {2, 1}, {6, 1}, {2, 2}, {2, 2}, {7,
               1}, {3, 1}, {7, 1}, {2, 2}, {3, 1}, {1, 4}, {1, 3}, {2, 2}, {3,
               1}, {1, 2}, {3, 3}, {3, 1}, {1, 3}, {2, 2}, {1, 172}, {2, 
              13}, {2, 2}, {3, 1}, {1, 3}, {1, 3}, {1, 3}, {1, 4}, {2, 1}, {
              12, 1}, {3, 1}, {1, 3}, {1, 10}, {1, 3}, {1, 3}, {3, 1}, {1, 
              2}, {3, 8}, {1, 3}, {2, 2}, {5, 1}, {1, 4}, {2, 3}, {6, 1}, {1, 
              2}, {2, 7}, {2, 1}, {1, 3}, {5, 1}, {2, 2}, {9, 3}, {9, 3}, {1, 
              6}, {6, 1}, {2, 2}, {80, 1}, {3, 1}, {1, 3}, {2, 2}, {2, 2}, {2,
               2}, {28, 1}, {2, 2}, {6, 1}}], "RootIndex" -> 67, 
            "NominalDimension" -> 0]], "Processor" -> 
         MachineLearning`MLProcessor["Values", 
           Association[
           "Info" -> Association[
             "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                 "], "Type" -> 
                "NumericalVector"]], "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "Method" -> "DecisionTree", "Options" -> 
         Association[
          "DistributionSmoothing" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
            PlusMinus[0.5000000000000003, 0.07070378035792256], 
            "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100, 
            "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
            "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
            "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.5000000000000003, 0.04999512254661126]}, 
            "Configuration" -> {
             "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
              1}, "FinalTrainingSize" -> 1000], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 115637842022351]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.3537612653541005`, 0.4268209940989989], 
                 "Accuracy" -> 
                 PlusMinus[0.4504950495049506, 0.07029074724332993], 
                 "EvaluationTime" -> 0.00017394, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.049436, 
                 "TrainingMemory" -> 1798504, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.0277203671043191`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.3537612653541005`, 0.30180801928018547`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4504950495049506, 0.04970306403042821]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.9460780805399367`, 0.4700942872939521], 
                 "Accuracy" -> 
                 PlusMinus[0.5495049504950499, 0.07042869408830647], 
                 "EvaluationTime" -> 0.00007187, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044369, 
                 "TrainingMemory" -> 2623752, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.5857390060963248`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.9460780805399367`, 0.3324068583426106]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007187, "MeanCrossEntropy" -> 
                PlusMinus[1.9460780805399367`, 0.4700942872939521], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2623752, 
                "TrainingTime" -> 0.493126], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7070931592563307, 0.02504363914845967], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100,
                  "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
                 "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8989142600866946, 0.13704963816025623`], 
                 "Accuracy" -> 
                 PlusMinus[0.5792079207920797, 0.06993081195248246], 
                 "EvaluationTime" -> 0.0000132, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.025237, 
                 "TrainingMemory" -> 1173760, "ModelMemory" -> 61288, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.41050219998442, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8989142600866946, 0.09690872850227981]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5792079207920797, 0.049448551345481616`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8839677178889411, 0.1363000854895791], 
                 "Accuracy" -> 
                 PlusMinus[0.5891089108910896, 0.06970838956395264], 
                 "EvaluationTime" -> 9.05*^-6, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.105235, 
                 "TrainingMemory" -> 5610600, "ModelMemory" -> 61672, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 5.9552267103014485`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8839677178889411, 0.09637871472598751]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5891089108910896, 0.04929127496626447]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8790576051810061, 0.1391686208427838], 
                 "Accuracy" -> 
                 PlusMinus[0.6980198019801988, 0.04615937631985702], 
                 "EvaluationTime" -> 9.67*^-6, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.366333, 
                 "TrainingMemory" -> 22203896, "ModelMemory" -> 62184, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 5.9046782235633435`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8790576051810061, 0.1391686208427838]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6980198019801988, 0.04615937631985702]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.67*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.8790576051810061, 0.1391686208427838], 
                "ModelMemory" -> 62184, "TrainingMemory" -> 22203896, 
                "TrainingTime" -> 0.46546825000000003`], "Index" -> 2], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.1957511596862074`, 0.1977836145849986], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00027889, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.095126, 
                 "TrainingMemory" -> 1509424, "ModelMemory" -> 907992, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.7442260702596155`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.1957511596862074`, 0.13985413508063904`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7828022084623473, 0.11953129778999334`], 
                 "Accuracy" -> 
                 PlusMinus[0.6188118811881194, 0.06886790804030904], 
                 "EvaluationTime" -> 0.00031985, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.123381, 
                 "TrainingMemory" -> 3615960, "ModelMemory" -> 930576, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 2.558301033503622, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7828022084623473, 0.08452139123133287]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6188118811881194, 0.04869696478143408]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8893877217879478, 0.14717185742548708`], 
                 "Accuracy" -> 
                 PlusMinus[0.6089108910891095, 0.06917727028697561], 
                 "EvaluationTime" -> 0.00027361000000000003`, "TestSize" -> 
                 100, "TrainingSize" -> 200, "TrainingTime" -> 0.35569, 
                 "TrainingMemory" -> 14782992, "ModelMemory" -> 1002280, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.3349029480800123`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8893877217879478, 0.10406621838538166`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00027361000000000003`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.8893877217879478, 0.14717185742548708`], 
                "ModelMemory" -> 1002280, "TrainingMemory" -> 14782992, 
                "TrainingTime" -> 1.8735760000000001`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0877927578820954`, 0.11578452595789275`], 
                 "Accuracy" -> 
                 PlusMinus[0.4405940594059407, 0.07012485283032993], 
                 "EvaluationTime" -> 0.00001992, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.005608, 
                 "TrainingMemory" -> 441360, "ModelMemory" -> 194904, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.098094668170411, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0877927578820954`, 0.0818720234612958]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4405940594059407, 0.049585758966034954`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.697264809214688, 0.016444209057147805`], 
                 "Accuracy" -> 
                 PlusMinus[0.49009900990099037`, 0.07067631991204443], 
                 "EvaluationTime" -> 0.00001918, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.006398, 
                 "TrainingMemory" -> 1719984, "ModelMemory" -> 607016, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 6.558222836541349, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.697264809214688, 0.011627811735558456`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.49009900990099037`, 0.049975705079116424`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6752594838450804, 0.017892797895458255`], 
                 "Accuracy" -> 
                 PlusMinus[0.5594059405940598, 0.07029074724332998], 
                 "EvaluationTime" -> 0.00003977, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.021239, 
                 "TrainingMemory" -> 8369328, "ModelMemory" -> 2805008, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.907995567002972, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6752594838450804, 0.012652118726278918`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5594059405940598, 0.04970306403042825]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6664964540845267, 0.024419892990284724`], 
                 "Accuracy" -> 
                 PlusMinus[0.53960396039604, 0.04987850435483753], 
                 "EvaluationTime" -> 0.00009492, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.1285, 
                 "TrainingMemory" -> 40493304, "ModelMemory" -> 11047408, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 3.3088928276812233`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6664964540845267, 0.024419892990284724`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00009492, "MeanCrossEntropy" -> 
                PlusMinus[0.6664964540845267, 0.024419892990284724`], 
                "ModelMemory" -> 11047408, "TrainingMemory" -> 40493304, 
                "TrainingTime" -> 0.16623300000000002`], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7006895037945174, 0.01809996825054025], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00005207, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.009567, 
                 "TrainingMemory" -> 275728, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.02624508864541, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7006895037945174, 0.01279861028921822]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931471805599441, 0.007931464032162798], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00005703, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.012973, 
                 "TrainingMemory" -> 892576, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.968608843187345, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931471805599441, 0.005608392001879511]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6853665275369779, 0.008626479616410363], 
                 "Accuracy" -> 
                 PlusMinus[0.5990099009900995, 0.06945731300787833], 
                 "EvaluationTime" -> 0.0000532, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.018989, 
                 "TrainingMemory" -> 4195256, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.121708545780134, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6853665275369779, 0.006099842234531295]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6640144502285039, 0.012013546486100838`], 
                 "Accuracy" -> 
                 PlusMinus[0.6188118811881194, 0.04869696478143408], 
                 "EvaluationTime" -> 0.000056449999999999997`, "TestSize" -> 
                 100, "TrainingSize" -> 800, "TrainingTime" -> 0.089167, 
                 "TrainingMemory" -> 16575312, "ModelMemory" -> 94856, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.194467022712934, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6640144502285039, 0.012013546486100838`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6188118811881194, 0.04869696478143408]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000056449999999999997`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6640144502285039, 0.012013546486100838`], 
                "ModelMemory" -> 94856, "TrainingMemory" -> 16575312, 
                "TrainingTime" -> 0.12102575], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6930015408367505, 0.008033609595306624], 
                 "Accuracy" -> 
                 PlusMinus[0.5099009900990102, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007264, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.020734, 
                 "TrainingMemory" -> 2047584, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.643378809353513, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6930015408367505, 0.005680619822246629]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6774722561923496, 0.007949511510513176], 
                 "Accuracy" -> 
                 PlusMinus[0.5792079207920797, 0.049448551345481616`], 
                 "EvaluationTime" -> 0.00007502, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.142276, 
                 "TrainingMemory" -> 33037040, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.706532734515695, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6774722561923496, 0.007949511510513176]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5792079207920797, 0.049448551345481616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007502, "MeanCrossEntropy" -> 
                PlusMinus[0.6774722561923496, 0.007949511510513176], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 33037040, 
                "TrainingTime" -> 0.198579], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931473692179523, 0.007931467415980243], 
                 "Accuracy" -> 
                 PlusMinus[0.5099009900990102, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007371, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.012086, 
                 "TrainingMemory" -> 819128, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.6233731878017, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931473692179523, 0.005608394394599773]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931470003552032, 0.007931461097753533], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007227, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.01372, 
                 "TrainingMemory" -> 1719016, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.649251627473916, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931470003552032, 0.005608389926938821]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931429420431708, 0.007931391729037679], 
                 "Accuracy" -> 
                 PlusMinus[0.5990099009900995, 0.06945731300787833], 
                 "EvaluationTime" -> 0.00006929000000000001, "TestSize" -> 
                 100, "TrainingSize" -> 200, "TrainingTime" -> 0.024599, 
                 "TrainingMemory" -> 8312392, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.704885827765168, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931429420431708, 0.005608340875849439]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931250973081593, 0.005608132011087476], 
                 "Accuracy" -> 
                 PlusMinus[0.5891089108910896, 0.04929127496626447], 
                 "EvaluationTime" -> 0.00007280000000000001, "TestSize" -> 
                 100, "TrainingSize" -> 800, "TrainingTime" -> 0.076196, 
                 "TrainingMemory" -> 33036976, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.642906850599569, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931250973081593, 0.005608132011087476]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5891089108910896, 0.04929127496626447]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007280000000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.6931250973081593, 0.005608132011087476], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 33036976, 
                "TrainingTime" -> 0.107331], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.386515473602657, 0.2997892319886574], "Accuracy" -> 
                 PlusMinus[0.5495049504950499, 0.07042869408830647], 
                 "EvaluationTime" -> 0.00007381, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044131, 
                 "TrainingMemory" -> 2623816, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 2.219730236973486, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.386515473602657, 0.2119829988658867]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007381, "MeanCrossEntropy" -> 
                PlusMinus[1.386515473602657, 0.2997892319886574], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2623816, 
                "TrainingTime" -> 0.48544099999999996`], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.089296570443798, 0.14314641718813728`], 
                 "Accuracy" -> 
                 PlusMinus[0.47029702970297055`, 0.0705388573294967], 
                 "EvaluationTime" -> 0.00007462, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.042066, 
                 "TrainingMemory" -> 1798608, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.8632244547037793`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.089296570443798, 0.10121980229629043`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.47029702970297055`, 0.04987850435483752]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.923233311946536, 0.13899405586179253`], 
                 "Accuracy" -> 
                 PlusMinus[0.53960396039604, 0.07053885732949673], 
                 "EvaluationTime" -> 0.00006934, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044614, 
                 "TrainingMemory" -> 2624112, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 3.43622132558719, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.923233311946536, 0.09828363944449528]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006934, "MeanCrossEntropy" -> 
                PlusMinus[0.923233311946536, 0.13899405586179253`], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2624112, 
                "TrainingTime" -> 0.48820600000000003`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6921895658482664, 0.009975115719036007], 
                 "Accuracy" -> 
                 PlusMinus[0.5594059405940598, 0.07029074724332998], 
                 "EvaluationTime" -> 0.00007347, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.030915, 
                 "TrainingMemory" -> 2566128, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.631302998719581, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6921895658482664, 0.007053471968050884]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5594059405940598, 0.04970306403042825]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007347, "MeanCrossEntropy" -> 
                PlusMinus[0.6921895658482664, 0.009975115719036007], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2566128, 
                "TrainingTime" -> 0.340065], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.2], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.665745175663856, 0.028409115411534402`], 
                 "Accuracy" -> 
                 PlusMinus[0.6089108910891095, 0.06917727028697561], 
                 "EvaluationTime" -> 0.0006139100000000001, "TestSize" -> 100,
                  "TrainingSize" -> 40, "TrainingTime" -> 0.398711, 
                 "TrainingMemory" -> 1816256, "ModelMemory" -> 214576, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.5686112991718506`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.665745175663856, 0.02008827815500723]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0006139100000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.665745175663856, 0.028409115411534402`], 
                "ModelMemory" -> 214576, "TrainingMemory" -> 1816256, 
                "TrainingTime" -> 4.385821], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 115633547055055]], "MaxTrainingSize" -> 1000, 
         "LastReportingTime" -> 3.740068046705079`16.325454492975325*^9, 
         "PreprocessorEvaluationTime" -> 4.68115234375`2.*^-6, 
         "PreprocessorMemory" -> 195984, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.5120000000000001, 
             "ElapsedTimes" -> 0.49161, "ExperimentCounts" -> 7], 
            Association[
            "TrainingSizes" -> 40, "TimeBudgets" -> 0.64, "ElapsedTimes" -> 
             1.467996, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 200, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             0.866427, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 800, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             0.95418, "ExperimentCounts" -> 5]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[115642136989647]], "ID" -> 
            115646431956943]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {
               "would you rather be ravished by a pirate or a british rear \
admiral."}, "ID" -> 2944923201742380288], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{15, 11, 2, 15, 15, 10, 4, 7, 3, 4, 1, 1, 7, 13}}, 
              "ID" -> 1880470000636944807]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 5.895246, "MaxTrainingMemory" -> 
         58779792, "DataMemory" -> 356264, "FunctionMemory" -> 431496, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 8, 19, 47, 27.511215`8.192084752706696}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"you dumb bitch.", {11, 1, 7, 13}}, {
        "and you could stand to get a little smarter ain't that right you \
dumb blonde fuck.", {3, 11, 15, 15, 10, 15, 4, 1, 2, 15, 2, 10, 7, 11, 1, 1, 
         7, 13}}, {"an italian right.", {4, 1, 7, 13}}, {
        "major what do you think could have done this.", {1, 11, 15, 11, 15, 
         15, 15, 15, 4, 13}}, {"you saw this.", {11, 15, 4, 13}}, {
        "how can you be here and say this.", {2, 15, 11, 15, 2, 3, 15, 4, 
         13}}, {"natalie who.", {7, 11, 13}}, {
        "where will my toys be.", {2, 15, 11, 7, 15, 13}}, {
        "the car or debbie.", {4, 7, 3, 7, 13}}, {
        "that ' s who you want me to bend my rules for.", {10, 13, 7, 11, 11, 
         15, 11, 10, 15, 11, 7, 10, 13}}, {
        "i've never gotten a letter like this have you.", {6, 15, 2, 15, 4, 7,
          10, 4, 15, 11, 13}}, {
        "you don't think so.", {11, 15, 2, 15, 2, 13}}, {
        "i believe we share an art instructor you know chastity.", {6, 15, 11,
          15, 4, 7, 7, 11, 15, 7, 13}}, {"call that fresh.", {7, 4, 1, 13}}, {
        "oh shut up huh.", {5, 15, 9, 2, 13}}, {"the poet.", {4, 7, 13}}, {
        "why doesn't she just hang up and call the police.", {2, 15, 2, 11, 2,
          15, 9, 3, 15, 4, 7, 13}}, {
        "if you need to come to where i live ok.", {10, 11, 15, 10, 15, 10, 2,
          6, 1, 7, 13}}, {"who will you kill.", {11, 15, 11, 15, 13}}, {
        "who is dead.", {11, 15, 1, 13}}, {
        "you remember him from high school.", {11, 15, 11, 10, 1, 7, 13}}, {
        "you hungry or thirsty or both.", {11, 1, 3, 1, 3, 4, 13}}, {
        "how often do you see mr. kramer and his son.", {2, 2, 15, 11, 15, 12,
          12, 3, 11, 7, 13}}, {
        "who's mr. jocularity.", {11, 15, 12, 7, 13}}, {
        "so now where were we here.", {2, 2, 2, 15, 11, 2, 13}}, {
        "charge set.", {7, 7, 13}}, {
        "you serve martinis doncha.", {11, 15, 7, 7, 13}}, {
        "goin' dove huntin'.", {7, 13, 15, 7, 13, 13}}, {
        "and mademoiselle.", {3, 7, 13}}, {
        "is it that bad.", {15, 11, 10, 1, 13}}, {
        "they're trying to unnerve us. why did they do that.", {11, 15, 15, 
         10, 15, 11, 13, 2, 15, 11, 15, 4, 13}}, {
        "what number did you tear out.", {4, 7, 15, 11, 15, 9, 13}}, {
        "just a little joke miss farmer. ...did you really say that.", {2, 4, 
         1, 7, 15, 7, 13, 13, 15, 11, 2, 15, 10, 13}}, {
        "hi viv.  carlos you know my roommate viv. you spent it on drugs \
didn't you.", {5, 7, 13, 7, 11, 15, 11, 7, 7, 13, 11, 15, 11, 10, 7, 15, 2, 
         11, 13}}, {
        "what have you got to do.", {4, 15, 11, 15, 10, 15, 13}}, {
        "do you know her.", {15, 11, 15, 11, 13}}, {
        "what the hell is a treadstone.", {11, 4, 7, 15, 4, 7, 13}}, {
        "papa.", {7, 13}}, {"as a plumber.", {10, 4, 7, 13}}, {
        "what ten thousand pounds.", {4, 8, 8, 7, 13}}, {
        "up get it.", {2, 15, 11, 13}}, {
        "are you declaring an emergency.", {15, 11, 15, 4, 7, 13}}, {
        "shall i remain here in our hotel room hiding or shall i carry on the \
best i can.", {15, 6, 15, 2, 10, 11, 7, 7, 7, 3, 15, 6, 15, 10, 4, 1, 6, 15, 
         13}}, {"whatsamatter.", {7, 13}}, {
        "what was i gonna say.", {11, 15, 6, 15, 10, 15, 13}}, {
        "and those were the guys who went on the exercise with you.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}}, {
        "i want the money asshole what do you think.", {6, 15, 4, 7, 7, 11, 
         15, 11, 15, 13}}, {
        "i mean what kind of people do well at this stuff.", {6, 15, 11, 7, 
         10, 7, 15, 2, 10, 4, 7, 13}}, {
        "how are they treating you.", {2, 15, 11, 15, 11, 13}}, {
        "wanna stay with me tonight.", {7, 10, 15, 10, 11, 2, 13}}, {
        "at what exactly.", {10, 4, 2, 13}}, {
        "do you think it's done.", {15, 11, 15, 11, 15, 15, 13}}, {
        "what is so goddamn valuable in your life that you're worried about \
losing.", {11, 15, 2, 1, 1, 10, 11, 7, 10, 11, 15, 15, 10, 15, 13}}, {
        "pittsburgh.", {7, 13}}, {
        "[was it] &quot;meirschultz&quot;.", {13, 15, 11, 13, 13, 7, 13, 
         13}}, {"i know you're expecting some kind of -- extravagant behavior \
but believe me -- do you believe me.", {6, 15, 11, 15, 15, 4, 7, 10, 13, 1, 7,
          3, 15, 11, 13, 15, 11, 15, 11, 13}}, {
        "what's a lunch cost these days.", {11, 15, 4, 7, 7, 4, 7, 13}}, {
        "where is inner space.", {2, 15, 1, 7, 13}}, {
        "why won't you check out lv-426. ...because just one of those things \
managed to kill my entire crew within twelve hours of hatching...", {2, 15, 2,
          11, 15, 9, 7, 13, 13, 2, 2, 8, 10, 4, 7, 15, 10, 15, 11, 1, 7, 10, 
         8, 7, 10, 15, 13}}, {
        "look butthead i'll treat you so nice you'll never want to let me go \
okay.", {7, 7, 6, 15, 15, 11, 2, 1, 11, 15, 2, 15, 10, 15, 11, 15, 1, 13}}, {
        "that obvious huh.", {10, 1, 7, 13}}, {"permission.", {7, 13}}, {
        "okay miss starling.", {1, 15, 7, 13}}, {
        "what's dr. gillman say.", {11, 15, 7}}, {
        "why did they turn back.", {2, 15, 11, 15, 9, 13}}, {
        "what's she doing.", {11, 15, 11, 15, 13}}, {
        "how you doing sam.", {2, 11, 15, 7, 13}}, {
        "why do you eat that stuff.", {2, 15, 11, 15, 4, 7, 13}}, {
        "what exactly did he call out.", {4, 2, 15, 11, 15, 9, 13}}, {
        "say---you think that's the same guy who was in the accident with \
lucy.", {15, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}}, {
        "and you sven aren't you afraid of crossing the rainbow bridge to \
asgaard.", {3, 11, 15, 15, 2, 11, 1, 10, 15, 4, 7, 7, 10, 15, 13}}, {
        "not great.", {2, 1, 13}}, {
        "running out of time are we.", {15, 10, 10, 7, 15, 11, 13}}, {
        "you're not using the same guy who tried to fix it.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}}, {
        "to you ... .", {10, 11, 13, 13}}, {
        "did you know you shouldn't light three cigarettes with a match.", {
         15, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}}, {
        "my my my how did things turn so hostile so quickly.", {11, 11, 11, 2,
          15, 7, 15, 2, 1, 2, 2, 13}}, {
        "no but my dog he's a got millions of them -- have you got a \
license.", {4, 3, 11, 7, 11, 15, 4, 15, 7, 10, 11, 13, 15, 11, 15, 4, 7, 
         13}}, {"this this happened.", {4, 4, 15, 13}}, {
        "how did you manage it.", {2, 15, 11, 15, 11, 13}}, {
        "whose justice.", {11, 7, 13}}, {
        "did they tell you to sleep with me.", {15, 11, 15, 11, 10, 15, 10, 
         11, 13}}, {"max, what is it.", {7, 13, 11, 15, 11, 13}}, {
        "will you come see her with me.", {15, 11, 15, 15, 11, 10, 11, 13}}, {
        "how you feeling all right.", {2, 11, 15, 4, 7, 13}}, {
        "is it inevitable that the game plays you.", {15, 11, 1, 10, 4, 7, 15,
          11, 13}}, {"you found anyone in yours.", {11, 15, 7, 10, 11, 13}}, {
        "don't you want to see what daddy does for a living.", {15, 2, 11, 15,
          10, 15, 11, 7, 15, 10, 4, 7, 13}}, {
        "well could you lend me some money till you have one.", {2, 15, 11, 
         15, 11, 4, 7, 10, 11, 15, 8, 13}}, {
        "i'm just here shooting this band what about you.", {6, 15, 2, 2, 15, 
         4, 7, 4, 10, 11, 13}}, {
        "it's your bank as well as mine isn't it.", {11, 15, 11, 7, 2, 2, 10, 
         7, 15, 2, 11, 13}}, {"vasquez how you doing.", {7, 2, 11, 15, 13}}, {
        "you don't like me.", {11, 15, 2, 15, 11, 13}}, {
        "philip swann.", {7, 7, 13}}, {
        "the police always do don't they.", {4, 7, 2, 15, 15, 2, 11, 13}}, {
        "people are gonna be thinking the younger james gang.", {7, 15, 15, 
         10, 15, 15, 4, 1, 7, 7, 13}}, {
        "so why isn't it all bloody.", {2, 2, 15, 2, 11, 4, 1, 13}}, {
        "is that all there is.", {15, 10, 4, 11, 15, 13}}, {
        "then we'll go dancin' okay.", {2, 11, 15, 15, 7, 13, 1, 13}}, {
        "you're not from l.a. huh.", {11, 15, 2, 10, 12, 2, 13}}, {
        "the skipper.", {4, 7, 13}}, {
        "little details little inconsistencies designed to bounce us back \
from one of you to the other asking questions killing time until the \
transport arrives and whisks you away to where senator daddy can protect \
you.", {1, 7, 1, 7, 15, 10, 15, 11, 2, 10, 8, 10, 11, 10, 4, 1, 15, 7, 15, 7, 
         10, 4, 7, 15, 3, 15, 11, 2, 10, 2, 7, 7, 15, 15, 11, 13}}, {
        "and back.", {3, 2, 13}}, {
        "and he loves you back doesn't he?", {3, 11, 15, 11, 2, 15, 2, 11, 
         13}}, {"he weighted her down.", {11, 15, 11, 2, 13}}, {
        "move your ass! shit.", {15, 11, 7, 13}}, {
        "do you have any sort of guns or ammunition here?", {15, 11, 15, 4, 7,
          10, 7, 3, 7, 2, 13}}, {
        "how did you get all of this stuff into the country?", {2, 15, 11, 15,
          4, 10, 4, 7, 10, 4, 7, 13}}, {
        "it wasn't that bad.", {11, 15, 2, 10, 1, 13}}, {
        "i have to.", {6, 15, 10, 13}}, {
        "say it backwards.", {15, 11, 2, 13}}, {
        "try a strawberry.", {15, 4, 7, 13}}, {"since when?", {10, 2, 13}}, {
        "i have my own warrant.", {6, 15, 11, 1, 7, 13}}, {
        "truth is...", {7, 15, 13}}, {
        "he puts human life at risk and-- <u>no</u> <u>i</u> <u>did</u> \
<u>not</u>.", {11, 15, 1, 7, 10, 7, 3, 13, 15, 4, 7, 7, 6, 6, 7, 15, 1, 7, 2, 
         15, 13}}, {
        "listen to it for christsake.", {15, 10, 11, 10, 7, 13}}, {
        "uh look..", {5, 15, 13, 13}}, {"free admission.", {1, 7, 13}}, {
        "back in the sixties i had a weather changing machine that was in \
essence a sophisticated heat beam which we called a laser.", {2, 10, 4, 7, 6, 
         15, 4, 7, 15, 7, 4, 15, 10, 7, 4, 1, 7, 7, 4, 11, 15, 4, 7, 13}}, {
        "so anyway these two federal marshals meet the plane and they take \
our address and they ask us never to fly with 'friendly skies' again.", {2, 2,
          4, 8, 1, 7, 15, 4, 7, 3, 11, 15, 11, 7, 3, 11, 15, 11, 2, 10, 15, 
         10, 13, 1, 7, 2, 13}}, {"that thing's dead.", {10, 7, 1, 13}}, {
        "i am not a doll.", {6, 15, 2, 4, 7, 13}}, {
        "i just went upstairs to see this man lacerda.", {6, 2, 15, 2, 10, 15,
          4, 7, 7, 13}}, {
        "i want you to help me help my husband.", {6, 15, 11, 10, 15, 11, 15, 
         11, 7, 13}}, {"- give it to me!", {13, 15, 11, 10, 11, 13}}, {
        "renault or yourself?", {7, 3, 11, 13}}, {
        "i've seen a few.", {6, 15, 15, 4, 1, 13}}, {
        "i've been through this.", {6, 15, 15, 10, 4, 13}}, {
        "out with it.", {10, 10, 11, 13}}, {
        "oh matt you must be mistaken.", {5, 15, 11, 15, 15, 15, 13}}, {
        "might.", {15, 13}}, {"lost in the storm?", {15, 10, 4, 7, 13}}, {
        "too bad ...", {2, 1, 13}}, {
        "fenrir the wolf covers the sun -- men fight and kill each other the \
whole time.", {15, 4, 7, 15, 4, 7, 13, 7, 7, 3, 15, 4, 1, 4, 1, 7, 13}}, {
        "that will make it even more official.", {4, 15, 15, 11, 2, 2, 1, 
         13}}, {"she just farted.", {11, 2, 15, 13}}, {
        "shrimp and fries.", {7, 3, 7, 13}}, {
        "i've got three satchel charges six gammon grenades a dozen- \
and-a-half pineapples and all my regular gear.", {6, 15, 15, 8, 7, 7, 8, 7, 
         15, 4, 7, 13, 7, 7, 3, 4, 11, 1, 7, 13}}, {
        "if he was so good why's he so dead?", {10, 11, 15, 2, 1, 2, 11, 2, 1,
          13}}, {"best to keep your sight fixed on our duty.", {2, 10, 15, 11,
          7, 15, 10, 11, 7, 13}}, {"mr. cole...", {12, 7, 13}}, {
        "david let's go now.", {7, 15, 15, 2, 13}}, {
        "all right you raise the kids -- i'll raise the roof.", {4, 7, 11, 15,
          4, 7, 13, 6, 15, 15, 4, 7, 13}}, {
        "'guess i was worried we didn't have anything to talk about since \
work was off-limits.", {13, 15, 6, 15, 15, 11, 15, 2, 15, 7, 10, 15, 10, 10, 
         7, 15, 1, 13}}, {
        "i know we banned this play but frankly i can't remember why.", {6, 
         15, 11, 15, 4, 7, 3, 2, 6, 15, 2, 15, 2, 13}}, {
        "i still can't accept the world as it is!", {6, 2, 15, 2, 15, 4, 7, 
         10, 11, 15, 13}}, {
        "he's at the ministry.", {11, 15, 10, 4, 7, 13}}, {
        "don't turn out the hall light.", {15, 2, 15, 9, 4, 7, 7, 13}}, {
        "ira?", {7, 13}}, {
        "can you drive this car?", {15, 11, 15, 4, 7, 13}}, {
        "i told you what to do.", {6, 15, 11, 11, 10, 15, 13}}, {
        "i can't do it again.", {6, 15, 2, 15, 11, 2, 13}}, {
        "and you must be steed.", {3, 11, 15, 15, 15, 13}}, {
        "it may interest you to know that at this very moment he is on his \
way here.", {11, 15, 15, 11, 10, 15, 4, 10, 4, 1, 7, 11, 15, 10, 11, 7, 2, 
         13}}, {"so i met a new friend.", {2, 6, 15, 4, 1, 7, 13}}, {
        "i'll tell you what kiddo--why don't i fix us some french toast?", {6,
          15, 15, 11, 4, 7, 13, 2, 15, 2, 6, 15, 11, 4, 1, 7, 13}}, {
        "and still we know in secret that nothing is more important to us.", {
         3, 2, 11, 15, 10, 7, 4, 7, 15, 2, 1, 10, 11, 13}}, {
        "i don't even bother with guests registering any more..", {6, 15, 2, 
         2, 15, 10, 7, 15, 4, 1, 13, 13}}, {
        "i suspected that he -- well.", {6, 15, 10, 11, 13, 2, 13}}, {
        "it's a question.", {11, 15, 4, 7, 13}}, {
        "a man like that would want to lay low if he was planning some kind \
of damn sabotage mission!", {4, 7, 10, 4, 15, 15, 10, 15, 1, 10, 11, 15, 15, 
         4, 7, 10, 7, 7, 7, 13}}, {
        "here are the pistols.", {2, 15, 4, 7, 13}}, {
        "good afternoon mr. harris.", {1, 7, 12, 12, 13}}, {
        "the food lines took forever.", {4, 7, 7, 15, 2, 13}}, {
        "don't you like girls mr. cunningham?", {15, 2, 11, 10, 7, 12, 12, 
         13}}, {"i love you harry.", {6, 7, 11, 15, 13}}, {
        "please have a seat lieutenant..", {15, 15, 4, 7, 7, 13, 13}}, {
        "anybody usin' these drawers here?", {7, 7, 13, 4, 7, 2, 13}}, {
        "churchill vit his cigars and his brandy and his rotten paintings.", {
         1, 7, 11, 7, 3, 11, 7, 3, 11, 1, 7, 13}}, {
        "sometimes you think they've betrayed you.", {2, 11, 15, 11, 15, 15, 
         11, 13}}, {
        "i should have got rid of you long ago!", {6, 15, 15, 15, 1, 10, 11, 
         2, 2, 13}}, {"i chant.", {6, 7, 13}}, {
        "i'm crazy about you sid.", {6, 15, 1, 10, 11, 15, 13}}, {
        "thank you for correcting my ignorance.", {15, 11, 10, 15, 11, 7, 
         13}}, {"goddamn you to hell!", {1, 11, 10, 7, 13}}, {
        "i survived.", {6, 15, 13}}, {
        "it's not too late to keep going up to vancouver?", {11, 15, 2, 2, 1, 
         10, 15, 15, 2, 10, 7, 13}}, {
        "jesus christ i used to have to listen to my old man use that every \
morning.", {7, 7, 6, 15, 10, 15, 10, 15, 10, 11, 1, 7, 15, 10, 4, 7, 13}}, {
        "he <u>has</u> been going after everything.", {11, 15, 15, 2, 15, 15, 
         10, 7, 13}}, {
        "i have a plan which i think will work.", {6, 15, 4, 7, 4, 6, 15, 15, 
         15, 13}}, {
        "i can't get it until monday.", {6, 15, 2, 15, 11, 10, 12, 13}}, {
        "only way you're ever gonna find out is reincarnation...", {2, 7, 11, 
         15, 2, 15, 10, 15, 9, 15, 7, 13}}, {
        "i asked her if you were happy to see us.", {6, 15, 11, 10, 11, 15, 1,
          10, 15, 11, 13}}, {"it blew up.", {11, 15, 9, 13}}, {
        "so what's your excuse?", {2, 11, 15, 11, 7, 13}}, {
        "poofs.", {7, 13}}, {
        "i want to go back to the clock people.", {6, 15, 10, 15, 2, 10, 4, 7,
          7, 13}}, {
        "that's a fairly crummy way to start a morning.", {4, 15, 4, 2, 1, 7, 
         10, 15, 4, 7, 13}}, {"i think that's it.", {6, 15, 4, 15, 11, 13}}, {
        "forty- five minutes on your knees with the dry heaves..", {8, 13, 8, 
         7, 10, 11, 7, 10, 4, 1, 7, 13, 13}}, {
        "i was ready for the next step you weren't ergo i walked.", {6, 15, 1,
          10, 4, 1, 7, 11, 15, 2, 15, 6, 15, 13}}, {
        "interred parkside repository little chute wisconsin.", {1, 7, 1, 1, 
         7, 7, 13}}, {"i'd love some.", {6, 15, 15, 4, 13}}, {
        "and drive an old jalopy?", {3, 15, 4, 1, 7, 13}}, {
        "how much for the week?", {2, 2, 10, 4, 7, 13}}, {
        "i didn't take you to raise.", {6, 15, 2, 15, 11, 10, 15, 13}}, {
        "mom i just finished the third movement of that concerto i was \
working on.", {7, 6, 2, 15, 4, 1, 7, 10, 4, 7, 6, 15, 15, 10, 13}}, {
        "i'll just get used to it.", {6, 15, 2, 15, 15, 10, 11, 13}}, {
        "she didn't seem the type to lam out--even if she got the chance.", {
         11, 15, 2, 15, 4, 7, 10, 15, 9, 13, 2, 10, 11, 15, 4, 7, 13}}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question"}, 
    "LogProbabilities" -> CompressedData["
1:eJyVVm1Ik1EUXttM0j9O1KhEpxGWS6GyD6kwg8QfWk4oJCRSMBChrJCcYGIo
Is5FFFES0tefHA6mlubUe53BCo3E+mG4yC+GlkMt0TlifZDX4LnB4f0xLnf3
nuec85znnPvGFV7KLVKrVKrXv39/1rqKV+W+BxF866ZRb2ffNYb7O2MpusLi
ETaf6g8cT15eWz3rK2Vf2fy+J2pCw+M85pbzGS/Y18BcduXKIxYbeDt4aCGE
I36oprXiy+1FlnWPzW3//nH9f3EP8fEc8a539w62VnYwo3mPQVur5abJ3WP5
JxaYe3hnx32HmxnMQcX+0vo1vzqu1if6Q60/WNndaV3OGZfk78lLi6k2RsU/
9Tgm9EYnmT/FR+Tp5w57iZoXpIfEzfi6GcYn4ZX0H83RN7DwGe605uqkfDC+
vLN7bVfif7KnI+kP9zsGJLzYzOzUqJYgPm+xn6x5Zlecj2mXa7XoVBjPN0yp
UqpvrdVtlg0sjvp3vJtc51HwivdRD1R9ER/PpXyKMz1tNitLatduPGAJ5lhv
9IfxYLyo//imJtfKzSG2r9G7ks5XpfgE76IOGA/iY/0ErvCD9hQ/MbPusvYw
H1u2NUfXRw5L/KM+8Fxp/al+Rb2i/pXqUfS16POsg1WdU8kaPpRxxJR2oUvK
H+1xPlD5Ke0P3ON8k+5DfbHfKXyBK/ygPeof70vzDexxvlLzCs8vb9k2WppU
w3pddZ99VeESHs5fvI977Mer1sNpbY9VvGI64YZlc7/Uz9hPiIf2qA/kD/Gp
96axxLjkfrPEnOeinQ0FH6T3xxhR7bfljbPy8fGFY7le8j7qheJL0hPsqXlM
8Yd6wnix3tK8Bb5EHURd0B/Fv5Qv8R7g/FLKH8W/9H1B9DfGg3pAfOxf5AP5
wv5BPKFDoUusD9aTmmeUP+p9puaHND8Je+SHioean+S8hvjw++D//fTvPaf0
iv2C+f2128A93xIvBif0yfVTqGfEk+pHvD+/AMp56rg=
     "], 
    "CountMatrix" -> {{69, 31, 0}, {25, 75, 0}}, 
    "IndicesMatrix" -> {{{104, 105, 107, 108, 111, 113, 115, 116, 117, 118, 
       121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 
       139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 157, 
       159, 160, 162, 165, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 
       179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 193, 194, 195, 196, 
       198, 199, 200}, {101, 102, 103, 106, 109, 110, 112, 114, 119, 120, 123,
        131, 132, 138, 146, 152, 154, 155, 156, 158, 161, 163, 164, 166, 171, 
       175, 183, 187, 189, 192, 197}, {}}, {{3, 8, 9, 14, 15, 17, 28, 39, 41, 
       47, 48, 50, 53, 55, 56, 60, 81, 90, 91, 94, 95, 96, 97, 99, 100}, {1, 
       2, 4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
       27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49,
        51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 
       72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 92,
        93, 98}, {}}}, "ExtendedClasses" -> {"Not Question", "Question"}, 
    "Weights" -> SparseArray[Automatic, {200}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00032245500000000003`, "SingleEvaluationTime" -> 
    0.0041395`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740086225009004*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"e5cc3856-4b2d-4dc7-a1be-ea3687cbe143"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"76f749cb-8628-4673-a9de-a9c265a377e4"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.918764360245441, 0.8114757915891664, 0.5170170835843346}, {
   1., 0.42, 0.}}, {{0.9308204233591533, 0.48872120755758486`, 
   0.0034442575614848777`}, {0.8936386975647902, 0.7048745705442823, 
   0.29416204775797117`}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["69", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "69", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7340425531914894`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.69`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.711340206185567`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{69, " examples of ", "Not Question", " correctly classified"}], 
         
         Row[{"Precision = ", 0.7340425531914894}], 
         Row[{"Recall = ", 0.69}], 
         Row[{"FScore = ", 0.711340206185567}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["25", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "25", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.26595744680851063`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.25`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          25, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.26595744680851063`}], 
         Row[{"Row fraction = ", 0.25}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["31", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "31", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.29245283018867924`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.31`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          31, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.29245283018867924`}], 
         Row[{"Row fraction = ", 0.31}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["75", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "75", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7075471698113207`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.75`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7281553398058254`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{75, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.7075471698113207}], 
         Row[{"Recall = ", 0.75}], 
         Row[{"FScore = ", 0.7281553398058254}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.69`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.69}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.75`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.75}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "94", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7340425531914894`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{94, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.7340425531914894}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "106", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7075471698113207`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{106, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.7075471698113207}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["100", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["94", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["106", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7400862456922197`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"4abb7f32-3900-4a1a-8331-9545f2c51f6d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classify with 1000 sentences per class", "Subsection",
 CellChangeTimes->{{3.7400862648808203`*^9, 
  3.7400862891752462`*^9}},ExpressionUUID->"442669c2-296c-487d-933d-\
58838e62affc"],

Cell[BoxData[
 RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
  RowBox[{"questions", "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", "100"}], "]"}], "]"}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.7400871541627293`*^9, 3.7400871651133204`*^9}, 
   3.7400873601446047`*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"05a4d2b2-86a2-487b-b829-35fa2b7bc77f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "2000"}], "]"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "2000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}]}],
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"4a77f52a-47fc-426a-8bb2-14b305238994"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["4000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1061968, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10529582893065609946752054009641029904160274829777827873888, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904160274829777827873888,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7400869273112173`*^9, 3.7400874209055862`*^9, 
  3.740088128068754*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"1bdcb11f-61c2-446e-9d92-9fffae167afb"]
}, Open  ]],

Cell[BoxData["cl1000"], "Input",
 CellChangeTimes->{{3.74008745999564*^9, 
  3.740087465485717*^9}},ExpressionUUID->"4f5700aa-442d-48ee-a951-\
c2cd0b983e3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl1000", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"partsOfSpeechNumbers", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740087499437152*^9, 3.7400875576166143`*^9}, {
  3.740087609923555*^9, 3.7400876131367607`*^9}, {3.740088147785582*^9, 
  3.7400881664146214`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"8934d3ef-dd87-4142-8bed-ceca9391344b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.759000000000000008`5.026979811276751", "\[PlusMinus]", 
                    "0.0135315225345157188`2."}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[
             ClassifierMeasurementsObject, 1575752, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierMeasurementsObject, 
            10529582893065609946752054009641029904178721573851498598656, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904178721573851498598656,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7400875603210583`*^9, 3.74008817049942*^9, 
  3.740088233211849*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"8f05786e-4d35-4ea5-a1c6-ddb2c4c49d78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7400875661705217`*^9, 3.740087581144607*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"57535679-2960-420a-8ceb-6b07723069ad"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8993928272988664, 0.7300381009693961, 0.3436477252106045}, {
   0.9331888196910629, 0.48636850371337426`, 0.003326341734721111}}, {{1., 
   0.42, 0.}, {0.9228038878539331, 0.82674012745567, 0.5567209370562367}}}, {{
   0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["393", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "393", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.74573055028463`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.786`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.765335929892892`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{393, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.74573055028463}], 
         Row[{"Recall = ", 0.786}], 
         Row[{"FScore = ", 0.765335929892892}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["134", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "134", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.25426944971537`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.268`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          134, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.25426944971537}], 
         Row[{"Row fraction = ", 0.268}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["107", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "107", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.226215644820296`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.214`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          107, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.226215644820296}], 
         Row[{"Row fraction = ", 0.214}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["366", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "366", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.773784355179704`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.732`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7523124357656732`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{366, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.773784355179704}], 
         Row[{"Recall = ", 0.732}], 
         Row[{"FScore = ", 0.7523124357656732}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.786`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.786}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.732`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.732}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "527", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.74573055028463`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{527, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.74573055028463}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "473", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.773784355179704`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{473, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.773784355179704}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["500", TraditionalForm]}, {0.5, 
       FormBox["500", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["527", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["473", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.740087581820541*^9, 3.740088240232705*^9},
 CellLabel->"Out[70]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
AfxX21Y=\
\>"],ExpressionUUID->"08a5ca49-d4a9-4876-bad7-b433fea73cd8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 
  3.7400883194708557`*^9}},ExpressionUUID->"91183821-3108-44aa-a87f-\
8a7c1fe0310e"],

Cell[BoxData[
 RowBox[{"cl5000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}]}],
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9},ExpressionUUID->"20ce2fee-f182-4a76-8ef1-\
f2420b0008d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["200 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 3.7400883194708557`*^9}, {
  3.740158177371798*^9, 
  3.740158178411964*^9}},ExpressionUUID->"0c2cda38-6288-407b-b6e4-\
407de0a266a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl200", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "1000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "1000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]}]}], " ", 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 
   3.74015855015483*^9}},ExpressionUUID->"0699803f-03ac-4b06-b522-\
2b05fb15ab8a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["400", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 400, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxUEJgEAUBcAnJpE9meJ3ULwvgmcTGsQWRhBsIcxcZtrP5RiS1Jhsc7v7
tZZt27Zt27Zt27b/eT5PvZryQqA=
              "], "Type" -> "NumericalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
             10.224338282763073`, "StandardDeviation" -> 3.9951166871210613`, 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
wUX8uBmXoPEYOdoxSRe9TyH3kppNT2jI5RrQvHIRz7TKmFFFHp98W18wUcCe
z+SN9m1G34ZVD7tFc11R67B3rtowA0G+8zRWl0SBHbqMfs+LcBUdnVIiOyPb
naf0J5KpVfPir/y8/NLbHlZwvCh2nw+lMxOl15YUP5fnGNM9VuLdQ3Nu/ZNP
k3C2/Rv3rtTbsH5mlwAiS9zXz7aXpcrVCBxK3M+4clt1LPLomea6uCfc2vEs
EY6SYurHoq5ti3ZMbiOZlJv+LuHy2QoigPscu+m6TRzyAvvh7ueDnkTqIPqA
MrPV7M8Q4Xj/MY2ddhXVW/bG0NS7Pfu5clNCYE+zuDwNKa7ca08e66BeXnq6
cievBT3WnDDPnXJv4Lg9Joxm79/ntTYxVM/PKu577a625dDreE7txgtuonAb
99DweOXidrNF2xsoe+og1MQrD0e9vYkW7gTXeeXDm3bBus6JZPqVey5MTE8B
SAJ55QRfwoOZPKOn3Pcj4ZLMuJ3g1sUrW/js3Q4gtvHo2m03XrI3Uw4blax5
5bJwXqqT9+LT9Zu2ca0IFswGm6N89dDFQWumuqqYcLlyP20NXlcFT7h27oVT
rzmYQ8e+sIJ3XT0q2lhT5I+jFyDlAocpQkldeUrK5QgSrqgAm5W6cu9Eavkz
aibr2qFJP01KuNoWba8f6TaEmOkzTPI67MVP+5713raD2QCRvN2kf/eanKWg
affBc+U2SHlr0osOMvjyyc3umHztbwXklbuA19MCLXZ4Xj3YregVrcjwepTu
PD1p25gaa5Ybtfve6APFydu1E317d99NeFkam7YfVY3lys01GERwJlcku175
m09mhtEFDkDd509vVtUdGSpP0Y1rejRFNHHPkiZ/vHqe5p/kG3ayRt/1lXvb
yPa9teOyZu4jjmZ5b9HMk+WhXNeK/OZjhuux6+aTm4eaVlofKUpWQqIDe0rL
vZdmrvja245grZy49DJO+i+D5xrXiviDnP5m9D2dcTOJwKhEnv6uVyoh29WZ
Fmvh+ZwZaTrnRYzmyl+5twyawVwV/bwGceVegXyiq35Ey9Gd/4kGOa+EuWUm
7a7cPlS9r0Vn69F3v0yMMu0Znh/cuLxaNIq2Bq/a2mJ88dO0P98V498rNE9+
3srzsDHN5rlVLj7bLCKYFkmgzQQX9wAk02ReIzZ7aH/1lUvagv17d2eeey68
ohhcnEi0hTttn5yJuP2Wrue+cSjoAw7aCKVau2bwyvUEb8gc/2HjXznufnnj
yMuTof595Y+5iGZXFcdrpF/zwpStpGqnByO783QatgPYW2sy8vmRQzqbqGsK
sbd8r/nyuJNfvEFhg1nIuxTMhm4vG9p61lJums9stqGStdNP7p0478MVG2Iv
bxRCdvcRsl95bz7/vTpgjs1mx7RD2zfcbVPDHvly/cvAECV1w+Yx7yamnrvX
N6d3Fax1gTf3+Sram/BmtjySOX+vrnebwDzW5txnyuMiGJqwF8L88JXrmZsI
X6L5+OKe9zTsnDWssh38XL82LIkTGTDzKGafm6+LO2O2PHkivdaXdm525G2/
NWFnW8CVD0tKAKo9eHC7y/+9nAKx7d6Eqz7y+zx+1is0YqI/pZD7G0fElAHr
kFDW+/ll4TMo34gKbdo/xu9Y9YK8zf3Xrw3vQg978W2S6TYrXXk1YF3eSBVc
z42z7KP2pxviNrDtjZffDvMtXnCv1m2XxZMrtyfEtJ6tkSbS73pt/sVTrMsr
T9rDMbzm0Jjn9vbk5QMYsp+phgzbUzPf+Zh8s13X9k7Cg7pvxS/qS7apnLh0
w5vy896uFsj1YCp9XLl20IPumXkeOz8vEOqPbAW12+Td32klC38TSbxIgJ4r
N34wFWx32vjypdGAbZe9sUpcUChXvu0Y85aPlVE87pVXO1geqeSxNtlyvaZK
TQBAl+wdq1dvXnvxpv7wIp1n+fp3zHME87cjQj3lPG3+sDlqRW+1SrlyLxF5
h5932+Nz7WRacdteZTHC8/7L/Xy3X9TrjUy4hqu5cn9qgBVV+7UM8NaVixBV
9mugUsb1R/4SxmObT31b+/rK5xxvpWxrq5yW59vfYXkDRvB2+7TMl87gNrwQ
ja2g43f+JpfMxYu3cdRaynmGbfDWKKqx9JUvf7ljBmzZH53zHHEx0Xssywxr
4rlt+9MEmEmjYJB3nj4+ukcNRjgE1194H+D9OYPlma8Z303ji22VSOjY9Vx8
myvSL+yuLbUEEzcvMW20NzH/eNrjBzdeubtaovwld9AurrzHxedmMu+xZ/rO
B2Ycv/1B4EQc7SSu3P5aQE+gGf4exvv5+AUMy9ePTS3xux0pN9iecefHSO/m
RSV7BhVR5dfQSz5Hby2B1kC91fvaiS2RyzvX9uT72wf3HK24TOLR0tnZSJuf
33Hdr2ubQHTZ+XnElqg8i9s48r7X+3R8rJlNNlq58bhk+/a2jLime/Fzyc+f
aBKRtXtN+8qtjBx/Z8Lz1K23v/JwGJH9KGY2r9+UlFqsj1+3mWEvVy53s7oa
2Qz7YK78lPi5C+mYzc9jpnyYeZO12LZY9/d5Uwk1roXWuJf2yrsH154O2zej
SnDlxhEVXm1HfbW+eOXS5CVl945YSzuMa/emuqwdWUpKe/Dqj/Gh15HK+xMn
IdcLGbHW+FmJOVM/oJc5V4lkjQzv1YOOxNzYkFjHDyy8ciO1ZXeaZVV/LuQ+
384DS0ueoPhpjGsPU7fmZPqM/oub54kfjbDXOHojqxp55eYVMTWLLbYsnIvP
/sqE2SI5vTm0cv2+csKdaJmyP3CknZiStwboj6PoDcuVb5OTsLwV1x4tDF05
IXUkDQTEaVYp5UYLhIr6CgB55HM4Ws3S19J5YgT5HNZlUMiWY6Z2f73yY0ek
FXLvXlhmufMHQrw5EvFL9Dq+z9/+hsnbJW4+0js0Vy6ttbau7ZpSK1fuROzw
86rlOZkHsDdnvZfmbJTtWZeJS2PTy7+7RuHg4uT2ltTyh1TsqPL3cvL53h2x
g8ngxl+QuvO0o1xH4VVYb5vNlEvXe4178yd+rOnKV48YPZpBjZJe+5Ej2zC0
bfhTzze+3ma6xCtvzmyz6/n58fbG1ag8mNK4ckMsQTSuhtpG/crjdiAYGjVI
8/R3PqaNvTDjT74cr4qPlBtf2Dc1OAUn64a2+XtVf/ojIc1Ohdee5cJesbRf
dMmIV0n5bu/PvHjju2acK5e2BIWd6zTsp7xy3XXx6qd3JmqeI38FqRiTWya1
XJb70r3aYG1wS/NNVl056tlWKaxSc2JSP9FeFwFED0hJO7EV4XgRPLDNsuWV
i/I24fgO+/rz817Ct2fQXxwT9K8+7XzwV1qQ236zU/+Cs/lGQV7FpZ2YJd1R
KyqWF7732rv3dkLFb15lZ5xcrFvJ90JL8YrYnU/8HotVQu9o2mhx7XzZti3b
6MK6v+pz5ZbuvScITZzhr165iVv9rMmS6EItKcdB2nEZPYX+0saVs/yY5jBi
Nqp+5VFSter5WMjwN9auvAV6xm8YvY1SV2552ksxJpQkGSXl8pu4/G2Z/9w6
gpd9lxzc20YehuuXT4Tj1hgNSnQvM+VWjfwhiWNr27i47dGMtqsTNKVnPHVs
v2k+BKPWIO/8T9CMKZp5NcCs2pU3KSJG1f3hJx67U25ziA0kx4ut5fpB2cB8
b4PEpf+R7/U3g7y21v3RBGzok8fvlRgDeO/NkP9/CxcBIQ==
                    "], 
                    "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy1WE1IVFEUfqHjT/NnOZmMUhNtkrFNLoYIW0yB6Yj0J02LlEITpmiiha6s
oU0EkTmLoowsUCQUSotEIt4ULQxsKFwUMUiFkIUFFUFUVps5sziPwzn3znN1
uPfdd+853/3Ozz0bjsT3dq4wDGN7gWG4+uqPPXrvT4FMN7Q5f1RXpi4ZZ0Zr
D6xJUd9hXDOfeBW64rWsa2pJzjzprbDMY2kGw5/HTvnYddT559wfNk9Xrhb/
r3sOJ6X2Lvc+aXPWteVbGYsrZR8+H3hw9HtvXySyavn0zuqjijteP3gj4fNW
WfkIUmpH8oL3+r9hD21f8b3jvybLeb5k12H7YD9Vu0EvWF/xd3fmhL9Un89Z
/aj74/Tj5s9f7Vk30OVk9VqMdb/YGfLk+Evdiyo/dP0ZSxwPdePOnmh9e5HT
zeqja6/0v63jL9uj+60454tfQ+fwu1szpRZ8lj5dbplwW88DXKV47psajHT0
8+t6ft41A/5y8jucC3ZReUwss35ExV0qn2I9MM7UPPgLjPG5wANpfsX3g/2Q
un9qfzjf7ZxqW5lxaOeHmtjt13/uuMT4Az8suKF4zfKcWS/1B3zvYnsUJYev
XfUJyNP9X5rGGx3i9RRPKL5zduB75u4JZC7uCfmgGxcLD68vCj5bMqW46+ZX
jMvi2+azD+eKyfvuijvDzTF3bjw/PdS67aY8D6jy/2Rmsuz+aEluDHFe1V4q
Xkp5lq+k4jfFM4w/zAe+LhycjVr9H+pSqj7UtYvLO1zegzxK+SnFs2vxZPXc
xQI6rgvzLdidb/1G2Y/1l/qr7vvWYgcTh6i6iKqTOV6CzL2D0PkUHhz/VeME
V5+p4i3lB16H62Cu7wG4c/Warn4cPtL8COOnQ899h1oXzLWO2onEm48m9V9d
wLGx+wGdz1XzrLR/JI2jOA6QfEDvbSneduUN6lzgGfee3hQaqWv0/CbvCSTu
A9ilL35XUBL6LFSew/viford8ZzzO7vrXwtOivUk9AHwPPYbCl/VvMitw/ZQ
fTDd/al9uDyA9bK8U5lzuX4g5f+6fKH+4/prynxH+R/XU6r5VVVK6wGKv3nr
MbZrYCRcQtY3WE/QY0dHMF31uNCiP1Wnce8M/B339+yyV9fPcb/sP5XBAvo=

                    "], "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
               Span[1, 830], 
               Span[831, 831]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxUEJgEAUBcAnJpE9meJ3ULwvgmcTGsQWRhBsIcxcZtrP5RiS1Jhsc7v7
tZZt27Zt27Zt27b/eT5PvZryQqA=
                  "], "Type" -> 
                 "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             821998144885263164]]}, "Invertibility" -> "Impossible", 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5207550043543716326]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             1345797643843077134, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 455036741687015791]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Not Question" -> 0.5, "Question" -> 0.5]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1: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
            "], "Biases" -> 
           RawArray["Real32",{1.1510730981826782`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 831, 
           "$InputDimensions" -> {831}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{831}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAUAMAnNrCBQmeHL9ErjCBRq4yiMYE9rKGwgZ5GYwnJXXPlMPVj
FhFNHp8zdduxzntr27Zt27Zt27btn75Ud108V3oBpFN7Hw==
            "], "Type" -> 
           "NumericalVector"], "Key" -> "(f1f2)", "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.46125203976734586`, 0.06993364408436324], "Accuracy" -> 
         PlusMinus[0.7439024390243898, 0.07026244880418056], "EvaluationTime" -> 
         0.000020225000000000004`, "TestSize" -> 40, "TrainingSize" -> 320, 
         "TrainingTime" -> 0.103319, "TrainingMemory" -> 6439384, 
         "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.9088646402358052, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.46125203976734586`, 0.06993364408436324]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.7439024390243898, 0.07026244880418056]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.1, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 400], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 246376646584787]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7940724003138717, 0.09899515414940763], "Accuracy" -> 
              PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
              "EvaluationTime" -> 0.000017375, "TestSize" -> 40, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.171597, 
              "TrainingMemory" -> 982808, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5307075505272353, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7940724003138717, 0.07000014480365371]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6904522211108391, 0.08700072965628172], "Accuracy" -> 
              PlusMinus[0.5487804878048778, 0.11147767401569468`], 
              "EvaluationTime" -> 0.00001425, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.055993, 
              "TrainingMemory" -> 1594320, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6101946325630984, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6904522211108391, 0.06151880590813437]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5487804878048778, 0.07882661924740109]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.46125203976734586`, 0.06993364408436324], 
              "Accuracy" -> 
              PlusMinus[0.7439024390243898, 0.07026244880418056], 
              "EvaluationTime" -> 0.000020225000000000004`, "TestSize" -> 40, 
              "TrainingSize" -> 320, "TrainingTime" -> 0.103319, 
              "TrainingMemory" -> 6439384, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.9088646402358052, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.46125203976734586`, 0.06993364408436324]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7439024390243898, 0.07026244880418056]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020225000000000004`, "MeanCrossEntropy" -> 
             PlusMinus[0.46125203976734586`, 0.06993364408436324], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 6439384, 
             "TrainingTime" -> 0.30074575000000003`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0060926891999429`, 0.26324690111878457`], 
              "Accuracy" -> 
              PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
              "EvaluationTime" -> 0.000862225, "TestSize" -> 40, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.051573, 
              "TrainingMemory" -> 776824, "ModelMemory" -> 446560, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4079238934044555, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0060926891999429`, 0.1861436689074371]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7613692350712092, 0.10965839755217771`], "Accuracy" -> 
              PlusMinus[0.47560975609756073`, 0.11147767401569465`], 
              "EvaluationTime" -> 0.0008696000000000001, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.077635, 
              "TrainingMemory" -> 2469216, "ModelMemory" -> 472840, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5513635095184698, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7613692350712092, 0.07754019652319516]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.47560975609756073`, 0.07882661924740107]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8403536161504802, 0.13692277901276426`], "Accuracy" -> 
              PlusMinus[0.5243902439024387, 0.07901047167031712], 
              "EvaluationTime" -> 0.000807725, "TestSize" -> 40, 
              "TrainingSize" -> 320, "TrainingTime" -> 0.34887, 
              "TrainingMemory" -> 11519608, "ModelMemory" -> 517560, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4977066644362605, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8403536161504802, 0.13692277901276426`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5243902439024387, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000807725, "MeanCrossEntropy" -> 
             PlusMinus[0.8403536161504802, 0.13692277901276426`], 
             "ModelMemory" -> 517560, "TrainingMemory" -> 11519608, 
             "TrainingTime" -> 0.4876605], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8256155695930784, 0.11902902880688314`], "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.000023025000000000004`, "TestSize" -> 40, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.039475, 
              "TrainingMemory" -> 785472, "ModelMemory" -> 32488, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5084969623418008, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8256155695930784, 0.08416623342739597]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9703704613747226, 0.19732274701258334`], "Accuracy" -> 
              PlusMinus[0.5243902439024387, 0.11173768060565768`], 
              "EvaluationTime" -> 0.000012475, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.022388, 
              "TrainingMemory" -> 877024, "ModelMemory" -> 32616, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4277215348949649, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9703704613747226, 0.13952825249495523`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9909652934368359, 0.20944832834106417`], "Accuracy" -> 
              PlusMinus[0.5975609756097557, 0.07790084880165644], 
              "EvaluationTime" -> 0.000013, "TestSize" -> 40, "TrainingSize" -> 
              320, "TrainingTime" -> 0.105321, "TrainingMemory" -> 4434632, 
              "ModelMemory" -> 33256, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.41818854855041854`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9909652934368359, 0.20944832834106417`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5975609756097557, 0.07790084880165644]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000013, "MeanCrossEntropy" -> 
             PlusMinus[0.9909652934368359, 0.20944832834106417`], 
             "ModelMemory" -> 33256, "TrainingMemory" -> 4434632, 
             "TrainingTime" -> 0.17112625], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7386676566894768, 0.04784064504987426], "Accuracy" -> 
              PlusMinus[0.4268292682926827, 0.11016843689567836`], 
              "EvaluationTime" -> 0.0000223, "TestSize" -> 40, "TrainingSize" -> 
              10, "TrainingTime" -> 0.019662, "TrainingMemory" -> 235408, 
              "ModelMemory" -> 97480, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.5772534029251344, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7386676566894768, 0.03382844453110472]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4268292682926827, 0.0779008488016564]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7407100946726605, 0.07997018760751938], "Accuracy" -> 
              PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
              "EvaluationTime" -> 0.000020875000000000003`, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.007128, 
              "TrainingMemory" -> 1329704, "ModelMemory" -> 430344, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5707490717828211, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7407100946726605, 0.05654746195003736]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6681032704106118, 0.0294199383844374], "Accuracy" -> 
              PlusMinus[0.5243902439024387, 0.07901047167031712], 
              "EvaluationTime" -> 0.000062675, "TestSize" -> 40, 
              "TrainingSize" -> 320, "TrainingTime" -> 0.035566, 
              "TrainingMemory" -> 7665360, "ModelMemory" -> 2161200, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5792584160139773, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6681032704106118, 0.0294199383844374]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5243902439024387, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000062675, "MeanCrossEntropy" -> 
             PlusMinus[0.6681032704106118, 0.0294199383844374], "ModelMemory" -> 
             2161200, "TrainingMemory" -> 7665360, "TrainingTime" -> 
             0.0641195], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.694473131392771, 0.02039894551805492], "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.00013010000000000002`, "TestSize" -> 40, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.253133, 
              "TrainingMemory" -> 256800, "ModelMemory" -> 110144, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6183072473153006, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.694473131392771, 0.014424232704871564`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6935568789246785, 0.020738915816258183`], 
              "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.00012825, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.012568, 
              "TrainingMemory" -> 733616, "ModelMemory" -> 110144, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6190589767347731, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6935568789246785, 0.014664628008133104`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6506337392527097, 0.0195563888016345], "Accuracy" -> 
              PlusMinus[0.6951219512195118, 0.07368941680466205], 
              "EvaluationTime" -> 0.000155475, "TestSize" -> 40, 
              "TrainingSize" -> 320, "TrainingTime" -> 0.03357, 
              "TrainingMemory" -> 3363016, "ModelMemory" -> 115120, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6598779469434116, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6506337392527097, 0.0195563888016345]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000155475, "MeanCrossEntropy" -> 
             PlusMinus[0.6506337392527097, 0.0195563888016345], "ModelMemory" -> 
             115120, "TrainingMemory" -> 3363016, "TrainingTime" -> 
             0.2950955], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5026755935388036`, 0.4959349003659038], "Accuracy" -> 
              PlusMinus[0.5487804878048778, 0.11147767401569468`], 
              "EvaluationTime" -> 0.0000158, "TestSize" -> 40, "TrainingSize" -> 
              60, "TrainingTime" -> 0.112964, "TrainingMemory" -> 1893112, 
              "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.26964093016590307`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5026755935388036`, 0.3506789310758054]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000158, "MeanCrossEntropy" -> 
             PlusMinus[1.5026755935388036`, 0.4959349003659038], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1893112, 
             "TrainingTime" -> 0.56482], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931130805711371, 0.019844788985558175`], 
              "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.000014625000000000001`, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.022171, 
              "TrainingMemory" -> 1325728, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6196224993334613, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931130805711371, 0.014032384862904292`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014625000000000001`, "MeanCrossEntropy" -> 
             PlusMinus[0.6931130805711371, 0.019844788985558175`], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1325728, 
             "TrainingTime" -> 0.110855], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9199806122085052, 0.22882491886537903`], "Accuracy" -> 
              PlusMinus[0.5487804878048778, 0.11147767401569468`], 
              "EvaluationTime" -> 0.000020475, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.053785, 
              "TrainingMemory" -> 1586184, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4472479233916783, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9199806122085052, 0.16180365183417106`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020475, "MeanCrossEntropy" -> 
             PlusMinus[0.9199806122085052, 0.22882491886537903`], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1586184, 
             "TrainingTime" -> 0.26892499999999997`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931452550684138, 0.01946862868908853], "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.0000176, "TestSize" -> 40, "TrainingSize" -> 
              60, "TrainingTime" -> 0.068216, "TrainingMemory" -> 1254248, 
              "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.619660772873309, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931452550684138, 0.013766399366457465`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000176, "MeanCrossEntropy" -> 
             PlusMinus[0.6931452550684138, 0.01946862868908853], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1254248, 
             "TrainingTime" -> 0.34108], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.281753066847408, 0.39870051488340547`], "Accuracy" -> 
              PlusMinus[0.5487804878048778, 0.11147767401569468`], 
              "EvaluationTime" -> 0.000013500000000000001`, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.063112, 
              "TrainingMemory" -> 1586056, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3172455983719137, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.281753066847408, 0.281923837736624]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000013500000000000001`, "MeanCrossEntropy" -> 
             PlusMinus[1.281753066847408, 0.39870051488340547`], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1586056, 
             "TrainingTime" -> 0.31556], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 250], "LearningRate" -> 
             Association["Value" -> 0.04], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.693147180559945, 0.01946864660671237], "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.0000261, "TestSize" -> 40, "TrainingSize" -> 
              60, "TrainingTime" -> 0.10975, "TrainingMemory" -> 1302056, 
              "ModelMemory" -> 74512, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.6196536752648422, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.693147180559945, 0.013766412036130785`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000261, "MeanCrossEntropy" -> 
             PlusMinus[0.693147180559945, 0.01946864660671237], "ModelMemory" -> 
             74512, "TrainingMemory" -> 1302056, "TrainingTime" -> 0.54875], 
           "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 246372351617491]], "MaxTrainingSize" -> 400, 
      "LastReportingTime" -> 3.740140242037951`16.325462876173617*^9, 
      "PreprocessorEvaluationTime" -> 4.1845703125`2.*^-6, 
      "PreprocessorMemory" -> 126352, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.7300740000000001, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          1.216644, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 320, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.952237, "ExperimentCounts" -> 5]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[246380941552083]], "ID" -> 
         246385236519379]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"WHO CARES."}, "ID" -> 
           8752152938630133285], "f2" -> 
         Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{11, 15, 13}}, "ID" -> 8143266914511161728]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 4.724141, "MaxTrainingMemory" -> 26530384, 
      "DataMemory" -> 141264, "FunctionMemory" -> 316776, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 9, 15, 50, 42.700624`8.383009199281497}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.74015824273628*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"e6a6149c-29f2-4424-94c0-f516ca1c9f4f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl200", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "50"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"partsOfSpeechNumbers", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "50"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740158251434836*^9, 3.740158267226678*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"c88b7817-10bf-4c38-8017-f8f1193ed1f7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["100", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["100", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7199999999999999734`3.769790729487717", "\[PlusMinus]", 
                    "0.045126085985421463`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 400, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxUEJgEAUBcAnJpE9meJ3ULwvgmcTGsQWRhBsIcxcZtrP5RiS1Jhsc7v7
tZZt27Zt27Zt27b/eT5PvZryQqA=
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    7263179337424669307]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    114010418416267986]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                10.224338282763073`, "StandardDeviation" -> 
                3.9951166871210613`, "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
wUX8uBmXoPEYOdoxSRe9TyH3kppNT2jI5RrQvHIRz7TKmFFFHp98W18wUcCe
z+SN9m1G34ZVD7tFc11R67B3rtowA0G+8zRWl0SBHbqMfs+LcBUdnVIiOyPb
naf0J5KpVfPir/y8/NLbHlZwvCh2nw+lMxOl15YUP5fnGNM9VuLdQ3Nu/ZNP
k3C2/Rv3rtTbsH5mlwAiS9zXz7aXpcrVCBxK3M+4clt1LPLomea6uCfc2vEs
EY6SYurHoq5ti3ZMbiOZlJv+LuHy2QoigPscu+m6TRzyAvvh7ueDnkTqIPqA
MrPV7M8Q4Xj/MY2ddhXVW/bG0NS7Pfu5clNCYE+zuDwNKa7ca08e66BeXnq6
cievBT3WnDDPnXJv4Lg9Joxm79/ntTYxVM/PKu577a625dDreE7txgtuonAb
99DweOXidrNF2xsoe+og1MQrD0e9vYkW7gTXeeXDm3bBus6JZPqVey5MTE8B
SAJ55QRfwoOZPKOn3Pcj4ZLMuJ3g1sUrW/js3Q4gtvHo2m03XrI3Uw4blax5
5bJwXqqT9+LT9Zu2ca0IFswGm6N89dDFQWumuqqYcLlyP20NXlcFT7h27oVT
rzmYQ8e+sIJ3XT0q2lhT5I+jFyDlAocpQkldeUrK5QgSrqgAm5W6cu9Eavkz
aibr2qFJP01KuNoWba8f6TaEmOkzTPI67MVP+5713raD2QCRvN2kf/eanKWg
affBc+U2SHlr0osOMvjyyc3umHztbwXklbuA19MCLXZ4Xj3YregVrcjwepTu
PD1p25gaa5Ybtfve6APFydu1E317d99NeFkam7YfVY3lys01GERwJlcku175
m09mhtEFDkDd509vVtUdGSpP0Y1rejRFNHHPkiZ/vHqe5p/kG3ayRt/1lXvb
yPa9teOyZu4jjmZ5b9HMk+WhXNeK/OZjhuux6+aTm4eaVlofKUpWQqIDe0rL
vZdmrvja245grZy49DJO+i+D5xrXiviDnP5m9D2dcTOJwKhEnv6uVyoh29WZ
Fmvh+ZwZaTrnRYzmyl+5twyawVwV/bwGceVegXyiq35Ey9Gd/4kGOa+EuWUm
7a7cPlS9r0Vn69F3v0yMMu0Znh/cuLxaNIq2Bq/a2mJ88dO0P98V498rNE9+
3srzsDHN5rlVLj7bLCKYFkmgzQQX9wAk02ReIzZ7aH/1lUvagv17d2eeey68
ohhcnEi0hTttn5yJuP2Wrue+cSjoAw7aCKVau2bwyvUEb8gc/2HjXznufnnj
yMuTof595Y+5iGZXFcdrpF/zwpStpGqnByO783QatgPYW2sy8vmRQzqbqGsK
sbd8r/nyuJNfvEFhg1nIuxTMhm4vG9p61lJums9stqGStdNP7p0478MVG2Iv
bxRCdvcRsl95bz7/vTpgjs1mx7RD2zfcbVPDHvly/cvAECV1w+Yx7yamnrvX
N6d3Fax1gTf3+Sram/BmtjySOX+vrnebwDzW5txnyuMiGJqwF8L88JXrmZsI
X6L5+OKe9zTsnDWssh38XL82LIkTGTDzKGafm6+LO2O2PHkivdaXdm525G2/
NWFnW8CVD0tKAKo9eHC7y/+9nAKx7d6Eqz7y+zx+1is0YqI/pZD7G0fElAHr
kFDW+/ll4TMo34gKbdo/xu9Y9YK8zf3Xrw3vQg978W2S6TYrXXk1YF3eSBVc
z42z7KP2pxviNrDtjZffDvMtXnCv1m2XxZMrtyfEtJ6tkSbS73pt/sVTrMsr
T9rDMbzm0Jjn9vbk5QMYsp+phgzbUzPf+Zh8s13X9k7Cg7pvxS/qS7apnLh0
w5vy896uFsj1YCp9XLl20IPumXkeOz8vEOqPbAW12+Td32klC38TSbxIgJ4r
N34wFWx32vjypdGAbZe9sUpcUChXvu0Y85aPlVE87pVXO1geqeSxNtlyvaZK
TQBAl+wdq1dvXnvxpv7wIp1n+fp3zHME87cjQj3lPG3+sDlqRW+1SrlyLxF5
h5932+Nz7WRacdteZTHC8/7L/Xy3X9TrjUy4hqu5cn9qgBVV+7UM8NaVixBV
9mugUsb1R/4SxmObT31b+/rK5xxvpWxrq5yW59vfYXkDRvB2+7TMl87gNrwQ
ja2g43f+JpfMxYu3cdRaynmGbfDWKKqx9JUvf7ljBmzZH53zHHEx0Xssywxr
4rlt+9MEmEmjYJB3nj4+ukcNRjgE1194H+D9OYPlma8Z303ji22VSOjY9Vx8
myvSL+yuLbUEEzcvMW20NzH/eNrjBzdeubtaovwld9AurrzHxedmMu+xZ/rO
B2Ycv/1B4EQc7SSu3P5aQE+gGf4exvv5+AUMy9ePTS3xux0pN9iecefHSO/m
RSV7BhVR5dfQSz5Hby2B1kC91fvaiS2RyzvX9uT72wf3HK24TOLR0tnZSJuf
33Hdr2ubQHTZ+XnElqg8i9s48r7X+3R8rJlNNlq58bhk+/a2jLime/Fzyc+f
aBKRtXtN+8qtjBx/Z8Lz1K23v/JwGJH9KGY2r9+UlFqsj1+3mWEvVy53s7oa
2Qz7YK78lPi5C+mYzc9jpnyYeZO12LZY9/d5Uwk1roXWuJf2yrsH154O2zej
SnDlxhEVXm1HfbW+eOXS5CVl945YSzuMa/emuqwdWUpKe/Dqj/Gh15HK+xMn
IdcLGbHW+FmJOVM/oJc5V4lkjQzv1YOOxNzYkFjHDyy8ciO1ZXeaZVV/LuQ+
384DS0ueoPhpjGsPU7fmZPqM/oub54kfjbDXOHojqxp55eYVMTWLLbYsnIvP
/sqE2SI5vTm0cv2+csKdaJmyP3CknZiStwboj6PoDcuVb5OTsLwV1x4tDF05
IXUkDQTEaVYp5UYLhIr6CgB55HM4Ws3S19J5YgT5HNZlUMiWY6Z2f73yY0ek
FXLvXlhmufMHQrw5EvFL9Dq+z9/+hsnbJW4+0js0Vy6ttbau7ZpSK1fuROzw
86rlOZkHsDdnvZfmbJTtWZeJS2PTy7+7RuHg4uT2ltTyh1TsqPL3cvL53h2x
g8ngxl+QuvO0o1xH4VVYb5vNlEvXe4178yd+rOnKV48YPZpBjZJe+5Ej2zC0
bfhTzze+3ma6xCtvzmyz6/n58fbG1ag8mNK4ckMsQTSuhtpG/crjdiAYGjVI
8/R3PqaNvTDjT74cr4qPlBtf2Dc1OAUn64a2+XtVf/ojIc1Ohdee5cJesbRf
dMmIV0n5bu/PvHjju2acK5e2BIWd6zTsp7xy3XXx6qd3JmqeI38FqRiTWya1
XJb70r3aYG1wS/NNVl056tlWKaxSc2JSP9FeFwFED0hJO7EV4XgRPLDNsuWV
i/I24fgO+/rz817Ct2fQXxwT9K8+7XzwV1qQ236zU/+Cs/lGQV7FpZ2YJd1R
KyqWF7732rv3dkLFb15lZ5xcrFvJ90JL8YrYnU/8HotVQu9o2mhx7XzZti3b
6MK6v+pz5ZbuvScITZzhr165iVv9rMmS6EItKcdB2nEZPYX+0saVs/yY5jBi
Nqp+5VFSter5WMjwN9auvAV6xm8YvY1SV2552ksxJpQkGSXl8pu4/G2Z/9w6
gpd9lxzc20YehuuXT4Tj1hgNSnQvM+VWjfwhiWNr27i47dGMtqsTNKVnPHVs
v2k+BKPWIO/8T9CMKZp5NcCs2pU3KSJG1f3hJx67U25ziA0kx4ut5fpB2cB8
b4PEpf+R7/U3g7y21v3RBGzok8fvlRgDeO/NkP9/CxcBIQ==
                    "], 
                    "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy1WE1IVFEUfqHjT/NnOZmMUhNtkrFNLoYIW0yB6Yj0J02LlEITpmiiha6s
oU0EkTmLoowsUCQUSotEIt4ULQxsKFwUMUiFkIUFFUFUVps5sziPwzn3znN1
uPfdd+853/3Ozz0bjsT3dq4wDGN7gWG4+uqPPXrvT4FMN7Q5f1RXpi4ZZ0Zr
D6xJUd9hXDOfeBW64rWsa2pJzjzprbDMY2kGw5/HTvnYddT559wfNk9Xrhb/
r3sOJ6X2Lvc+aXPWteVbGYsrZR8+H3hw9HtvXySyavn0zuqjijteP3gj4fNW
WfkIUmpH8oL3+r9hD21f8b3jvybLeb5k12H7YD9Vu0EvWF/xd3fmhL9Un89Z
/aj74/Tj5s9f7Vk30OVk9VqMdb/YGfLk+Evdiyo/dP0ZSxwPdePOnmh9e5HT
zeqja6/0v63jL9uj+60454tfQ+fwu1szpRZ8lj5dbplwW88DXKV47psajHT0
8+t6ft41A/5y8jucC3ZReUwss35ExV0qn2I9MM7UPPgLjPG5wANpfsX3g/2Q
un9qfzjf7ZxqW5lxaOeHmtjt13/uuMT4Az8suKF4zfKcWS/1B3zvYnsUJYev
XfUJyNP9X5rGGx3i9RRPKL5zduB75u4JZC7uCfmgGxcLD68vCj5bMqW46+ZX
jMvi2+azD+eKyfvuijvDzTF3bjw/PdS67aY8D6jy/2Rmsuz+aEluDHFe1V4q
Xkp5lq+k4jfFM4w/zAe+LhycjVr9H+pSqj7UtYvLO1zegzxK+SnFs2vxZPXc
xQI6rgvzLdidb/1G2Y/1l/qr7vvWYgcTh6i6iKqTOV6CzL2D0PkUHhz/VeME
V5+p4i3lB16H62Cu7wG4c/Warn4cPtL8COOnQ899h1oXzLWO2onEm48m9V9d
wLGx+wGdz1XzrLR/JI2jOA6QfEDvbSneduUN6lzgGfee3hQaqWv0/CbvCSTu
A9ilL35XUBL6LFSew/viford8ZzzO7vrXwtOivUk9AHwPPYbCl/VvMitw/ZQ
fTDd/al9uDyA9bK8U5lzuX4g5f+6fKH+4/prynxH+R/XU6r5VVVK6wGKv3nr
MbZrYCRcQtY3WE/QY0dHMF31uNCiP1Wnce8M/B339+yyV9fPcb/sP5XBAvo=

                    "], "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Spans" -> {
                  Span[1, 830], 
                  Span[831, 831]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxUEJgEAUBcAnJpE9meJ3ULwvgmcTGsQWRhBsIcxcZtrP5RiS1Jhsc7v7
tZZt27Zt27Zt27b/eT5PvZryQqA=
                    "], "Type" -> 
                    "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
                821998144885263164]]}, "Invertibility" -> "Impossible", 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 5207550043543716326]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                1345797643843077134, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 455036741687015791]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["Not Question" -> 0.5, "Question" -> 0.5]],
        "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association["Weights" -> CompressedData["
1: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
               "], "Biases" -> 
              RawArray["Real32",{1.1510730981826782`}]], "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              831, "$InputDimensions" -> {831}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{831}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAUAMAnNrCBQmeHL9ErjCBRq4yiMYE9rKGwgZ5GYwnJXXPlMPVj
FhFNHp8zdduxzntr27Zt27Zt27btn75Ud108V3oBpFN7Hw==
               "], "Type" -> 
              "NumericalVector"], "Key" -> "(f1f2)", "Invertibility" -> 
            "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0.1, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.46125203976734586`, 0.06993364408436324], "Accuracy" -> 
            PlusMinus[0.7439024390243898, 0.07026244880418056], 
            "EvaluationTime" -> 0.000020225000000000004`, "TestSize" -> 40, 
            "TrainingSize" -> 320, "TrainingTime" -> 0.103319, 
            "TrainingMemory" -> 6439384, "ModelMemory" -> 37240, 
            "ExperimentCount" -> 1, "ModelUtility" -> 0.9088646402358052, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.46125203976734586`, 0.06993364408436324]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.7439024390243898, 0.07026244880418056]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 0.1, "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 400], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 246376646584787]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7940724003138717, 0.09899515414940763], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.000017375, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.171597, 
                 "TrainingMemory" -> 982808, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5307075505272353,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7940724003138717, 0.07000014480365371]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6904522211108391, 0.08700072965628172], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.00001425, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.055993, 
                 "TrainingMemory" -> 1594320, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6101946325630984,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6904522211108391, 0.06151880590813437]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.46125203976734586`, 0.06993364408436324], 
                 "Accuracy" -> 
                 PlusMinus[0.7439024390243898, 0.07026244880418056], 
                 "EvaluationTime" -> 0.000020225000000000004`, "TestSize" -> 
                 40, "TrainingSize" -> 320, "TrainingTime" -> 0.103319, 
                 "TrainingMemory" -> 6439384, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.9088646402358052,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.46125203976734586`, 0.06993364408436324]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7439024390243898, 0.07026244880418056]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020225000000000004`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.46125203976734586`, 0.06993364408436324], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 6439384, 
                "TrainingTime" -> 0.30074575000000003`], "Index" -> 1], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0060926891999429`, 0.26324690111878457`], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.000862225, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.051573, 
                 "TrainingMemory" -> 776824, "ModelMemory" -> 446560, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4079238934044555,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0060926891999429`, 0.1861436689074371]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7613692350712092, 0.10965839755217771`], 
                 "Accuracy" -> 
                 PlusMinus[0.47560975609756073`, 0.11147767401569465`], 
                 "EvaluationTime" -> 0.0008696000000000001, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.077635, 
                 "TrainingMemory" -> 2469216, "ModelMemory" -> 472840, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5513635095184698,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7613692350712092, 0.07754019652319516]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.47560975609756073`, 0.07882661924740107]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8403536161504802, 0.13692277901276426`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.07901047167031712], 
                 "EvaluationTime" -> 0.000807725, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.34887, 
                 "TrainingMemory" -> 11519608, "ModelMemory" -> 517560, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4977066644362605,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8403536161504802, 0.13692277901276426`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000807725, "MeanCrossEntropy" -> 
                PlusMinus[0.8403536161504802, 0.13692277901276426`], 
                "ModelMemory" -> 517560, "TrainingMemory" -> 11519608, 
                "TrainingTime" -> 0.4876605], "Index" -> 2], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8256155695930784, 0.11902902880688314`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000023025000000000004`, "TestSize" -> 
                 40, "TrainingSize" -> 10, "TrainingTime" -> 0.039475, 
                 "TrainingMemory" -> 785472, "ModelMemory" -> 32488, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5084969623418008,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8256155695930784, 0.08416623342739597]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9703704613747226, 0.19732274701258334`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000012475, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.022388, 
                 "TrainingMemory" -> 877024, "ModelMemory" -> 32616, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4277215348949649,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9703704613747226, 0.13952825249495523`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.07790084880165644], 
                 "EvaluationTime" -> 0.000013, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.105321, 
                 "TrainingMemory" -> 4434632, "ModelMemory" -> 33256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.41818854855041854`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9909652934368359, 0.20944832834106417`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000013, "MeanCrossEntropy" -> 
                PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                "ModelMemory" -> 33256, "TrainingMemory" -> 4434632, 
                "TrainingTime" -> 0.17112625], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7386676566894768, 0.04784064504987426], 
                 "Accuracy" -> 
                 PlusMinus[0.4268292682926827, 0.11016843689567836`], 
                 "EvaluationTime" -> 0.0000223, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.019662, 
                 "TrainingMemory" -> 235408, "ModelMemory" -> 97480, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5772534029251344,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7386676566894768, 0.03382844453110472]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4268292682926827, 0.0779008488016564]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7407100946726605, 0.07997018760751938], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.000020875000000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.007128, 
                 "TrainingMemory" -> 1329704, "ModelMemory" -> 430344, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5707490717828211,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7407100946726605, 0.05654746195003736]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6681032704106118, 0.0294199383844374], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.07901047167031712], 
                 "EvaluationTime" -> 0.000062675, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.035566, 
                 "TrainingMemory" -> 7665360, "ModelMemory" -> 2161200, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5792584160139773,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6681032704106118, 0.0294199383844374]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000062675, "MeanCrossEntropy" -> 
                PlusMinus[0.6681032704106118, 0.0294199383844374], 
                "ModelMemory" -> 2161200, "TrainingMemory" -> 7665360, 
                "TrainingTime" -> 0.0641195], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.694473131392771, 0.02039894551805492], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.00013010000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 10, "TrainingTime" -> 0.253133, 
                 "TrainingMemory" -> 256800, "ModelMemory" -> 110144, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6183072473153006,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.694473131392771, 0.014424232704871564`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6935568789246785, 0.020738915816258183`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.00012825, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.012568, 
                 "TrainingMemory" -> 733616, "ModelMemory" -> 110144, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6190589767347731,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6935568789246785, 0.014664628008133104`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6506337392527097, 0.0195563888016345], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.000155475, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.03357, 
                 "TrainingMemory" -> 3363016, "ModelMemory" -> 115120, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6598779469434116,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6506337392527097, 0.0195563888016345]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000155475, "MeanCrossEntropy" -> 
                PlusMinus[0.6506337392527097, 0.0195563888016345], 
                "ModelMemory" -> 115120, "TrainingMemory" -> 3363016, 
                "TrainingTime" -> 0.2950955], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.5026755935388036`, 0.4959349003659038], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.0000158, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.112964, 
                 "TrainingMemory" -> 1893112, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.26964093016590307`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.5026755935388036`, 0.3506789310758054]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000158, "MeanCrossEntropy" -> 
                PlusMinus[1.5026755935388036`, 0.4959349003659038], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1893112, 
                "TrainingTime" -> 0.56482], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931130805711371, 0.019844788985558175`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000014625000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.022171, 
                 "TrainingMemory" -> 1325728, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196224993334613,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931130805711371, 0.014032384862904292`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000014625000000000001`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6931130805711371, 0.019844788985558175`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1325728, 
                "TrainingTime" -> 0.110855], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9199806122085052, 0.22882491886537903`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000020475, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.053785, 
                 "TrainingMemory" -> 1586184, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4472479233916783,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9199806122085052, 0.16180365183417106`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020475, "MeanCrossEntropy" -> 
                PlusMinus[0.9199806122085052, 0.22882491886537903`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1586184, 
                "TrainingTime" -> 0.26892499999999997`], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931452550684138, 0.01946862868908853], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.0000176, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.068216, 
                 "TrainingMemory" -> 1254248, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.619660772873309, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931452550684138, 0.013766399366457465`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000176, "MeanCrossEntropy" -> 
                PlusMinus[0.6931452550684138, 0.01946862868908853], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1254248, 
                "TrainingTime" -> 0.34108], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.281753066847408, 0.39870051488340547`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000013500000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.063112, 
                 "TrainingMemory" -> 1586056, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.3172455983719137,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.281753066847408, 0.281923837736624]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000013500000000000001`, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.281753066847408, 0.39870051488340547`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1586056, 
                "TrainingTime" -> 0.31556], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 250], "LearningRate" -> 
                Association["Value" -> 0.04], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.693147180559945, 0.01946864660671237], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.0000261, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.10975, 
                 "TrainingMemory" -> 1302056, "ModelMemory" -> 74512, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196536752648422,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.693147180559945, 0.013766412036130785`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000261, "MeanCrossEntropy" -> 
                PlusMinus[0.693147180559945, 0.01946864660671237], 
                "ModelMemory" -> 74512, "TrainingMemory" -> 1302056, 
                "TrainingTime" -> 0.54875], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 246372351617491]], "MaxTrainingSize" -> 400, 
         "LastReportingTime" -> 3.740140242037951`16.325462876173617*^9, 
         "PreprocessorEvaluationTime" -> 4.1845703125`2.*^-6, 
         "PreprocessorMemory" -> 126352, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
             "ElapsedTimes" -> 0.7300740000000001, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             1.216644, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 320, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             0.952237, "ExperimentCounts" -> 5]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[246380941552083]], "ID" -> 
            246385236519379]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, "Values" -> {"WHO CARES."}, 
              "ID" -> 8752152938630133285], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{11, 15, 13}}, "ID" -> 8143266914511161728]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 4.724141, "MaxTrainingMemory" -> 
         26530384, "DataMemory" -> 141264, "FunctionMemory" -> 316776, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 9, 15, 50, 42.700624`8.383009199281497}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"YOU DUMB BITCH.", {11, 1, 7, 13}}, {
        "AND YOU COULD STAND TO GET A LITTLE SMARTER AIN'T THAT RIGHT YOU \
DUMB BLONDE FUCK.", {3, 11, 15, 15, 10, 15, 4, 12, 12, 12, 2, 4, 12, 11, 1, 
         12, 12, 13}}, {"AN ITALIAN RIGHT.", {4, 1, 7, 13}}, {
        "MAJOR WHAT DO YOU THINK COULD HAVE DONE THIS.", {1, 4, 12, 11, 12, 
         12, 12, 15, 7, 13}}, {"YOU SAW THIS.", {11, 15, 7, 13}}, {
        "HOW CAN YOU BE HERE AND SAY THIS.", {12, 12, 11, 15, 2, 3, 15, 7, 
         13}}, {"NATALIE WHO.", {12, 11, 13}}, {
        "WHERE WILL MY TOYS BE.", {15, 15, 12, 12, 15, 13}}, {
        "THE CAR OR DEBBIE.", {4, 7, 7, 12, 13}}, {
        "THAT ' S WHO YOU WANT ME TO BEND MY RULES FOR.", {4, 13, 7, 11, 11, 
         15, 7, 10, 15, 12, 7, 10, 13}}, {
        "I'VE NEVER GOTTEN A LETTER LIKE THIS HAVE YOU.", {11, 15, 2, 15, 4, 
         7, 10, 7, 15, 11, 13}}, {
        "YOU DON'T THINK SO.", {11, 15, 2, 12, 12, 13}}, {
        "I BELIEVE WE SHARE AN ART INSTRUCTOR YOU KNOW CHASTITY.", {11, 15, 1,
          7, 4, 7, 7, 11, 15, 7, 13}}, {"CALL THAT FRESH.", {1, 4, 12, 13}}, {
        "OH SHUT UP HUH.", {7, 12, 9, 12, 13}}, {"THE POET.", {4, 7, 13}}, {
        "WHY DOESN'T SHE JUST HANG UP AND CALL THE POLICE.", {2, 15, 2, 12, 2,
          15, 9, 3, 1, 4, 7, 13}}, {
        "IF YOU NEED TO COME TO WHERE I LIVE OK.", {10, 11, 15, 10, 15, 10, 
         15, 11, 15, 5, 13}}, {"WHO WILL YOU KILL.", {11, 15, 11, 15, 13}}, {
        "WHO IS DEAD.", {11, 15, 12, 13}}, {
        "YOU REMEMBER HIM FROM HIGH SCHOOL.", {11, 15, 12, 12, 12, 12, 13}}, {
        "YOU HUNGRY OR THIRSTY OR BOTH.", {11, 1, 7, 12, 7, 4, 13}}, {
        "HOW OFTEN DO YOU SEE MR. KRAMER AND HIS SON.", {12, 12, 12, 11, 15, 
         12, 12, 3, 11, 7, 13}}, {
        "WHO'S MR. JOCULARITY.", {11, 15, 12, 12, 13}}, {
        "SO NOW WHERE WERE WE HERE.", {12, 12, 12, 15, 12, 2, 13}}, {
        "CHARGE SET.", {1, 7, 13}}, {
        "YOU SERVE MARTINIS DONCHA.", {11, 15, 7, 12, 13}}, {
        "GOIN' DOVE HUNTIN'.", {12, 7, 7, 13, 13}}, {
        "AND MADEMOISELLE.", {3, 12, 13}}, {
        "IS IT THAT BAD.", {15, 11, 4, 12, 13}}, {
        "THEY'RE TRYING TO UNNERVE US. WHY DID THEY DO THAT.", {12, 12, 12, 
         10, 12, 12, 13}}, {
        "WHAT NUMBER DID YOU TEAR OUT.", {4, 7, 15, 11, 15, 12, 13}}, {
        "JUST A LITTLE JOKE MISS FARMER. ...DID YOU REALLY SAY THAT.", {2, 4, 
         7, 7, 7, 7, 13, 13}}, {
        "HI VIV.  CARLOS YOU KNOW MY ROOMMATE VIV. YOU SPENT IT ON DRUGS \
DIDN'T YOU.", {12, 12, 13}}, {
        "WHAT HAVE YOU GOT TO DO.", {4, 12, 11, 15, 10, 12, 13}}, {
        "DO YOU KNOW HER.", {15, 11, 15, 7, 13}}, {
        "WHAT THE HELL IS A TREADSTONE.", {4, 4, 7, 15, 4, 7, 13}}, {
        "PAPA.", {7, 13}}, {"AS A PLUMBER.", {10, 4, 7, 13}}, {
        "WHAT TEN THOUSAND POUNDS.", {4, 8, 12, 12, 13}}, {
        "UP GET IT.", {7, 15, 11, 13}}, {
        "ARE YOU DECLARING AN EMERGENCY.", {15, 11, 15, 4, 7, 13}}, {
        "SHALL I REMAIN HERE IN OUR HOTEL ROOM HIDING OR SHALL I CARRY ON THE \
BEST I CAN.", {12, 11, 15, 2, 10, 12, 12, 12, 15, 7, 7, 11, 15, 10, 4, 7, 11, 
         15, 13}}, {"WHATSAMATTER.", {7, 13}}, {
        "WHAT WAS I GONNA SAY.", {4, 15, 11, 12, 12, 12, 13}}, {
        "AND THOSE WERE THE GUYS WHO WENT ON THE EXERCISE WITH YOU.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}}, {
        "I WANT THE MONEY ASSHOLE WHAT DO YOU THINK.", {11, 15, 4, 7, 12, 4, 
         12, 11, 15, 13}}, {
        "I MEAN WHAT KIND OF PEOPLE DO WELL AT THIS STUFF.", {11, 15, 4, 12, 
         10, 12, 12, 12, 10, 12, 7, 13}}, {
        "HOW ARE THEY TREATING YOU.", {12, 15, 7, 15, 11, 13}}, {
        "WANNA STAY WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}}, {
        "YOU ARE FUCKIN' DEAD YOU GO IN THERE TODAY.", {11, 15, 7, 13, 1, 11, 
         15, 10, 12, 12, 13}}, {"OUT THE BACK.", {12, 4, 2, 13}}, {
        "AND I AIM TO CURE YA OF YOUR WICKEDNESS.", {3, 11, 7, 10, 15, 12, 10,
          1, 7, 13}}, {
        "AND I USED TO KNOW YOU PERSONAL WAY BACK WHEN.", {3, 11, 15, 10, 12, 
         11, 1, 7, 2, 2, 13}}, {
        "IF YOU DON'T WANT MY FILM - I'LL CALL ANOTHER SHOW.", {10, 11, 15, 2,
          1, 7, 7, 13, 11, 15, 1, 12, 12, 13}}, {
        "SHADOW GETS CRAZY-- IT'S NOT OUR JOB TO GET INVOLVED IN YOUR \
PERSONAL LIFE BUT WHEN IT INTERFERES WITH THE TRAINING HERE-- FROM BACK IN \
HOUSTON.", {12, 15, 12, 13, 11, 15, 12, 12, 12, 10, 15, 1, 10, 1, 1, 7, 12, 2,
          11, 15, 10, 4, 7, 2, 13, 10, 2, 10, 12, 13}}, {
        "GREAT RUNNING INTO YOU, BUDDY.", {1, 15, 10, 11, 13, 12, 13}}, {
        "I HAVEN'T FELT THIS GOOD IN A LONG TIME.", {11, 15, 2, 15, 7, 1, 10, 
         4, 7, 7, 13}}, {"NERVES OF STEEL.", {7, 10, 12, 13}}, {
        "I SHOULDN'T BE OVER HERE AT THIS HOUR.", {11, 15, 2, 15, 10, 2, 10, 
         12, 12, 13}}, {
        "-- THE TRAIN FOR MARSEILLES LEAVES AT FIVE O'CLOCK.", {13, 4, 7, 10, 
         12, 15, 10, 8, 7, 13}}, {
        "-- YOU SAID SO YOURSELF THE FIRM IS LARGE AND POWERFUL.", {13, 11, 
         15, 12, 12, 4, 12, 15, 12, 3, 12, 13}}, {
        "THIS IS NOT MY USUAL FRIDAY NIGHT!", {12, 15, 12, 12, 12, 12, 12, 
         13}}, {"I SENT IT TO MYSELF IN PARIS.", {11, 15, 11, 10, 12, 10, 12, 
         13}}, {"YOU SAID IT CLARK.", {11, 15, 11, 7, 13}}, {
        "I DON'T KNOW WHAT YOU'RE TALKING ABOUT MAN.", {11, 15, 2, 12, 4, 11, 
         15, 15, 10, 7, 13}}, {
        "OUR RENDEZVOUS POINTS AND RADIO FREQS.", {12, 12, 12, 3, 12, 12, 
         13}}, {"YOU STILL GOT A SHITLOAD OF PLOWING TO DO.", {11, 2, 15, 4, 
         12, 10, 12, 10, 12, 13}}, {
        "HE TOLD ME THAT I WAS STUPID BECAUSE MY BOYFRIEND DIDN'T REALLY LOVE \
ME.", {11, 15, 12, 4, 11, 15, 1, 12, 12, 12, 12, 2, 12, 12, 12, 13}}, {
        "BUT I...", {12, 12, 13, 13}}, {
        "THIS SORT OF THING AIN'T MY BAG BABY.", {12, 12, 10, 12, 12, 2, 12, 
         12, 7, 13}}, {
        "WE'RE MAKING A STATEMENT.", {12, 12, 12, 12, 12, 13}}, {
        "I KNOW THIS.", {11, 15, 7, 13}}, {
        "I THINK I SHOULD GO BACK.", {11, 15, 11, 15, 15, 2, 13}}, {
        "NO QUESTION ABOUT IT.", {4, 12, 12, 12, 13}}, {
        "HEY YOU HAVEN'T CHANGED YOUR CLOTHES!", {7, 11, 15, 2, 15, 1, 7, 
         13}}, {"THE RESISTANCE THE ANGER IN YOUR VOICE.", {4, 7, 4, 7, 10, 1,
          7, 13}}, {"NO I'M OKAY FOR NOW.", {7, 11, 15, 1, 10, 2, 13}}, {
        "NO ALL THE GOOD ONES ARE MARRIED.", {4, 7, 4, 1, 7, 15, 15, 13}}, {
        "THE GOVERNMENT DOESN'T HAVE TO TELL PEOPLE TO DO IT.", {4, 12, 12, 2,
          12, 10, 12, 12, 10, 12, 12, 13}}, {
        "THAT'S COOL.", {4, 15, 12, 13}}, {
        "SARAH LAWRENCE IS ON THE OTHER SIDE OF THE COUNTRY.", {12, 12, 15, 
         10, 4, 1, 12, 10, 4, 7, 13}}, {
        "PLEASE ROSE BE A GOOD SPORT.", {15, 12, 15, 4, 1, 7, 13}}, {
        "YOUR FACE WAS DARK AND YOUR HAIR WAS BACKLIT -- I COULD SEE A HALO \
OF FRIZZ -- YOU ASKED ME IF THINGS WERE OKAY BETWEEN NAOMI AND ME.", {1, 7, 
         15, 1, 3, 1, 7, 15, 12, 13, 11, 15, 15, 4, 7, 10, 12, 13, 11, 15, 12,
          10, 12, 15, 1, 12, 12, 3, 12, 13}}, {
        "HER NOT BELIEVING ABOUT YOUR CONDITION..", {12, 12, 12, 12, 1, 7, 13,
          13}}, {"WE SEE YOU NEXT HARVEST.", {12, 15, 11, 1, 7, 13}}, {
        "THEY MAY LOOK GOOD BUT THEY WEIGH TWELVE POUNDS EACH THAT'S \
THIRTY-SIX POUNDS RIGHT THERE.", {12, 12, 12, 12, 12, 12, 15, 8, 12, 12, 4, 
         15, 8, 12, 12, 12, 13}}, {
        "THIS IS ANTHONY ADAMS MR. HENRY.", {12, 15, 12, 12, 12, 12, 13}}, {
        "NO. DADDY SAYS ROSE IS CALM AS LETTUCE.", {7, 13, 12, 12, 15, 15, 7, 
         1, 7, 13}}, {
        "I'M SORRY IT'S JUST THAT..", {11, 15, 12, 12, 2, 4, 13, 13}}, {
        "BUT THEN  --  --  THAT SILLY WAR..", {12, 12, 13, 13, 4, 12, 7, 13, 
         13}}, {"SHE CALLED ME AN OLD LADY HERE TOO!", {12, 15, 1, 4, 1, 7, 2,
          2, 13}}, {
        "FIVE NIGHTS AGO HE FOUND THIS PARATROOPER CAUGHT IN A TREE WITH A \
BROKEN LEG.", {8, 7, 2, 11, 12, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}}, {
        "ALONE.", {2, 13}}, {
        "I AVOIDED CAPTURE USING THE MAK'TAR STEALTH HAZE.", {11, 15, 12, 12, 
         4, 12, 13, 7, 7, 7, 13}}, {"IT IS IT IS!", {11, 15, 11, 15, 13}}, {
        "LEAVE THAT ALONE!", {15, 4, 2, 13}}, {
        "I DON'T WANT TO TALK ABOUT HIM.", {11, 15, 2, 1, 10, 12, 12, 12, 
         13}}, {"GOOD AFTERNOON MR. HARRIS.", {1, 7, 12, 12, 13}}, {
        "JOHN I'D LIKE YOU TO MEET ONE OF THE BRIGHTEST LIGHTS OF THE BRITISH \
STAGE MRS. KENDAL.", {12, 11, 15, 10, 11, 10, 15, 8, 10, 4, 12, 12, 10, 4, 1, 
         7, 12, 12, 13}}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question"}], 
    "Predictions" -> {
     "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question"}, "LogProbabilities" -> CompressedData["
1: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
eREqhI1/h45WYDvs24z2VJ2dxP8ANc+Abw==
     "], 
    "CountMatrix" -> {{37, 13, 0}, {15, 35, 0}}, 
    "IndicesMatrix" -> {{{51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 66, 68, 
       69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 87, 90, 92, 93, 94,
        95, 96, 97, 98, 99, 100}, {54, 62, 63, 65, 67, 73, 81, 84, 85, 86, 88,
        89, 91}, {}}, {{3, 14, 16, 17, 25, 26, 28, 29, 30, 31, 38, 39, 41, 43,
        44}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 
       23, 24, 27, 32, 33, 34, 35, 36, 37, 40, 42, 45, 46, 47, 48, 49, 
       50}, {}}}, "ExtendedClasses" -> {"Not Question", "Question"}, 
    "Weights" -> SparseArray[Automatic, {100}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00026589, "SingleEvaluationTime" -> 
    0.0041628333333333326`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740158275742425*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"96549ca8-5001-4e69-b5ba-12f1ae4e3c56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"6cfdd4a1-d410-4d1f-8ed6-4fbf050556f7"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8942690773836068, 0.7076313004901209, 0.2995833319187835}, {
   0.9362596038321437, 0.48331806593143567`, 0.0031734559841691116`}}, {{1., 
   0.42, 0.}, {0.9175725176402327, 0.806972124925851, 0.505302658348255}}}, {{
   0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["37", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "37", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7115384615384616`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.74`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7254901960784313`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{37, " examples of ", "Not Question", " correctly classified"}], 
         
         Row[{"Precision = ", 0.7115384615384616}], 
         Row[{"Recall = ", 0.74}], 
         Row[{"FScore = ", 0.7254901960784313}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["15", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "15", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.28846153846153844`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.3`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          15, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.28846153846153844`}], 
         Row[{"Row fraction = ", 0.3}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["13", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "13", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2708333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.26`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          13, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.2708333333333333}], 
         Row[{"Row fraction = ", 0.26}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["35", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "35", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7291666666666666`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.7`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7142857142857142`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{35, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.7291666666666666}], 
         Row[{"Recall = ", 0.7}], 
         Row[{"FScore = ", 0.7142857142857142}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "50", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.74`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{50, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.74}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "50", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.7`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{50, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.7}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "52", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7115384615384616`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{52, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.7115384615384616}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "48", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7291666666666666`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{48, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.7291666666666666}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["50", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["52", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["48", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7401582818924913`*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"a914b72a-70f2-4af1-9e0f-187b994358e8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 3.7400883194708557`*^9}, {
  3.740158177371798*^9, 3.740158178411964*^9}, {3.7401585653142853`*^9, 
  3.740158565906266*^9}},ExpressionUUID->"aa2ca46c-0868-46f9-9183-\
0ab00f37703b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "1000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "1000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]}]}], " ", 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 3.740158569265873*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"3e953368-3ba7-48e4-9f56-3cd26b2f2974"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["2000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 2000, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnRAY2WOoBBQ1NFxbssGIESyCBBA9sd8tN6770Ick5Jlfb
6n3MxbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b/Pp+nvPG0u48=
              "], 
             "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
             10.158144370086415`, "StandardDeviation" -> 4.020779979572767, 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUmuRbuOXF/DHfdcTcADMKC6GEIC2cohuGHALTfSA/JQHSu2yHPzI/9/
jzp3F9oSxSIY/O//8//82//6f//xn3/+/T/8888///q///3//st/0z/8j9tq
PXXee+ep465ZSgyUfYv+fa2xz+qn199Av7vPMfe8bbSx30C9+/a6d+t9ljHb
LTlQRz1F175jnKOfxMDZtek/vY01Rlt1xMA6Y+0262qrtV7rzYG+9umjnXnO
mGfmwLhtDv3f1hO1O/tvYOnxy+xFz3SW/iUGut6sjr3XXnWVemcOtF3mOKPr
j6fmpv8Gyur3Hj1SGavdFgNNt6h6gL70enX/7lFP73ecfSWf48+b13bXOHpk
vRGPdX8DZZXVNPlMlu4eA6Xf0+fU9K9aey8xUG7R6+n3deua+rccOKcXzaBe
8fTV6qo5sDS7pXXNlT7Wzm9e9Gb78OJX4/q8/TdQWQdaJKVrim+8oNbC0Xfr
mtetvxk9B/rZo2hS5unnahG130ArZ5Ta69HN145pL21rNlqdulfrepUcKPoE
Rxdq59yrj5iXKl1zoUWq21Y9eLygfnW5iR52afq1Ln8DmgdNBo9VRtcii4Gz
z+76f/36Dn3/HNALnr3uurudrVkeOVB1h321FE6/c5UWA2vr/kW30W7QRPf9
G+i9shDrHrvUcWJAr1TqrNoBR99k17y5/lrLQVNSuNSs+RejaL0X/e+ca9ce
k3huv1qJRQ+q77jY3DmwtQu0pKreRdvk91Rdq1e/rbOwtLWCfwP19rIrK6JM
7bcYaENP1PmOU/tz/WZXM6EFsfRs+2gC5ls++mzaUGXeoWfQEq69xIAupi+u
m1wvurZz4Oyp3Tn09uXqT9pvQGuma8kf/adprnNgTW1lfS+9hJ5h99+AVEDt
KIi6Nc15j7UWakxf+2o16OlzoDCDVctn9KFZzgFNgv6iSNHtNaS+ckAPqtfT
7m9Tq7GefFxpo1qanqr1o62dn1ZTuvRVpRWKtg0zHQNdD9S7RGPPLg2bj9uu
/kWPPzTlUwt25kDXPtRCqPpfbZvzG5BO0su3Nqa2XM/FoAG9V9X+XKvp/2tO
op5cL6aba39K+5a41NZKG1rBp21NcGuh4dgwVW/feYnmdRcDB72vFacJ0C92
KEsN6CpFr6LFMKdUxs0BXaINRsqZ68y8lK56z9Q6OFMvP27+hVSMlO+Q9pYC
6DunhIe8U/MuXaUtt+Mo0k6WYjk+jJb2z87VvrVijtRCLwsFsHKV7OmDS0uT
RaWPlvfQfOi40b2kUobOpPiCUhT1sDt1TC5WXM6V1kDRGkAxSY+XlZeSfp11
Nk2IVgNf7Q1oQekM0tNqReh5W6hXDWheeWvp8q0ZbjcH+mYXjyk9rYc98R46
NhfKXRtZ61f7J6ZEqlvrRifd0iGtBV/yUlPaTo8rlaJ/6L+tJv3Rdf05Z+c8
vvnmS59DOkG6pulDar3ngF68cCfpBO1qbcIc0DNqtnhBraCSClnPKt2iz6dl
r3tpvnKgSNdLZXELra/U1FrFV59ap2cbOj5O7iirNu0/PZQ05a75BTV72mIy
MzrH8GypZLTupdcuJsPWd7o9L1WGjSXZLd49qWTmRkdK7w30sT5yDgyfm/pG
nVNB6yQHdIjrNbAvOIRzriYzV7SytKOllrQgcsA6lXNWO1FHYhxFmsA2pL+m
FknnGW8O6LFYztINBwun5MB8i/PqM2tZ5T30mWQUSDNKq+hYCquPAeluTZTW
NrbDikvpA+nryHqTzab3ljaPgW3zrmPgTRbpb0Azd9BuPiS0HmNgsqH1zihA
rMHxG5BQ/2XtphNu5YCWuaZJNo6Uo3bVyQE+N/aVrBtMy7y5bBcd5zJupUJ1
qbQZZGzJSJO60K7Sc9ycRH2JwlLR1HdeLzWDTlGUQNHhJP1dfgvO6lAmsFbd
QGGlshwdO1q31s+lkkfOrv5Jr8upiYGjB8gBm3TaiZpyf7K8lN5WC54jdTYs
33xcWZAy279lqpEdi1p7c1wphqJDZWnvjvIbkCnL5pASX6iBHMC6q5Wrd3RR
zm5B/2xsvCVroOe06wkHakOfT2rg/CwynRmyaqVk8ARkv6aG0wm4rUO0GtHT
O7657JUmO1+noY517eYS065X0LzKspQe5QFzJWqyZZTpXbC4tdPzVNOA1qFM
qY45r8W6ckD7prBpKneZNR9Xu0xLHY2s+ecQywF9kM+EkfvDeZ8DaNA75Zjo
ALs9J1F/oP1ZOas0l/x3DixmAitblpaWVc+BiX3RpXh1Ndktv78YOuNlZ+B2
8dVnDnBu68EwYZmdnETpBA1szlS5bLfHX0ip4vLIu8MCk+kdN28Hh+JI68jQ
1+fMtSvrFyWg195Ti0yfJwc0izqmtHJknWiK40Pp/QYKS3vUk5iaGt2KT6BH
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
                    "], "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1: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
pX3SeqF9RW08+AdJ4bBK
                    "], "Version" -> {11.3, 0}, "ID" -> 
                    8271446901366827342, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
               Span[1, 2464], 
               Span[2465, 2465]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnRAY2WOoBBQ1NFxbssGIESyCBBA9sd8tN6770Ick5Jlfb
6n3MxbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b/Pp+nvPG0u48=
                  "],
                  "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             821998144885263164]]}, "Invertibility" -> "Impossible", 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8143147147439565807]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             8208025887441778832, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8413217448475986683]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Not Question" -> 0.5, "Question" -> 0.5]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1: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
jjLZCw1e1UHOqDPtIyXyvqSB2764jjeCX2O6RTYe2l8rEa9XbL0D8XGZ4PD8
BX46tgvX/egglAw3SfR8wgCq82mn40D3+Qw8tj8NTFfdkiifpGzZc1eSfC91
U69hQs553vD4Hi6ZvQ9ftC5n6Z9U2eJXMbB0czK+1+0i7KqUMLrVEXO0ZrKB
fA7bNb+QGywLh1ofE+wfUwXk2yW931JG8QOsbPaA53cOiwGBJdKCuHc8eW0o
b7dvEZJHu/3VQz7Ptq8uccIY/wZbvDGmE7P1i5EzDspeIFxBlCR9RTrHCa0T
GGktG99hEJ8Wx2unzJIoo6TXqC57Jd8BZRjU/6R1luprCu2YeCld9Q3oTnGU
8YTytDZLnbH4eTBQ1jpcpwImlgySyutaOOHV3UEnsXvLREg/85t3HXkLXBRu
Sn26BMo69uWrZUzarYfdCtcJ8shUu6QtTYbbcvIGvxdZims9K7jv7XuyFicd
vatzAlJWQzgfdTYR91dH8UyLeYJ0N/mIvi8HMcq1qF4uTZwrUS6Y8Bd7Gm01
oGFUf4zwnQDkWSmvIh2WvnccEEa8mbpURLwajolp12H0IE2RPDkdpmerCpqJ
JF3LwenKCRC4K032osTJFzRdYf+AxWDr3QbrtyTCtt9arMTiBRCfRQbflQjH
CZea552VsafD9mJUr4qXM9Q1X9bKs6Wmi8ZydkJZlZPzMJkXaI5xoiKZRaUW
S6umvULyAP1CrZBqLs03A5IKh8IitdkwXnkPdFyWjpTVXCx7Lucsfs0TcPHX
/TAisSMjTXi0QRGODU2Ct4ZB4PneFo9++w1fLfWA+qVb2yZOWpJ6olZ5Lxh+
TmOLtSVhEGWKpOmp1/M1L/Ngiy7MbWYnVhTgwLC5DvPf1fMi2xjcvyRRAhtT
RpqYcKrq+V0grDoxyBWbu/eUs3faV02hOaNc1EfVk5P/pNzUdHIKv3npFzTW
xsvP8tyaLm05Ox6ft57mxZOOSxf7mYPPrhS0mfoVzVYWSg/H1SLlm4Qxh771
ZIqduyPx+9i1udLc90ryzEE9LUxQtuIfMEr2QG9MarHW3EJQPkBY1rkuVWpZ
XsN1Yi9J1OuUF9zeYyjoXLfPVpT9N+mmi07bsefok/J8z3HwV3yjkCrRz8iH
EZ/MOesv6My+eqfyon5n4U15pezLJjs/RGXVZt56LhN/XOoBNBuk+tv9MRRo
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
Uilm5UX7/wFz7pw3
            "], "Biases" -> 
           RawArray["Real32",{1.3009573221206665`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 2465,
            "$InputDimensions" -> {2465}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{2465}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQEAUANCvNMZ1YgbJ7aAwgERtAJ01RKMwgIlscBuIGEL3XvPSOPdT
FRFHHfEdceelKeu1tbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b9+2fq
9uEp+QVpdYH0
            "], "Type" -> "NumericalVector"], "Key" -> "(f1f2)", 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.001, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.16774744866751698`, 0.025176751892371965`], "Accuracy" -> 
         PlusMinus[0.9653465346534669, 0.028323007560324794`], 
         "EvaluationTime" -> 0.00414315, "TestSize" -> 100, "TrainingSize" -> 
         10, "TrainingTime" -> 0.078017, "TrainingMemory" -> 2550960, 
         "ModelMemory" -> 84256, "ExperimentCount" -> 1, "ModelUtility" -> 
         2.102882844685245, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.16774744866751698`, 0.017802651991347458`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9653465346534669, 0.020027390709503514`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.001, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 2000], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 148326838184929]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.16774744866751698`, 0.025176751892371965`], 
              "Accuracy" -> 
              PlusMinus[0.9653465346534669, 0.028323007560324794`], 
              "EvaluationTime" -> 0.00414315, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.078017, 
              "TrainingMemory" -> 2550960, "ModelMemory" -> 84256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.102882844685245, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.16774744866751698`, 0.017802651991347458`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9653465346534669, 0.020027390709503514`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7575530906112448, 0.10079293388276368`], "Accuracy" -> 
              PlusMinus[0.5852795421952756, 0.04550971072727253], 
              "EvaluationTime" -> 0.000084665, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.094747, 
              "TrainingMemory" -> 4525816, "ModelMemory" -> 84256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5553624732231522, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7575530906112448, 0.07127136704418953]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5852795421952756, 0.03218022506509257]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7951923613305368, 0.1461218490354745], "Accuracy" -> 
              PlusMinus[0.7033803230777476, 0.045909990757171414`], 
              "EvaluationTime" -> 0.00008082, "TestSize" -> 200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.268896, 
              "TrainingMemory" -> 17849040, "ModelMemory" -> 84256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5238999476312295, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7951923613305368, 0.10332375033250099`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7033803230777476, 0.03246326578860762]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00008082, "MeanCrossEntropy" -> 
             PlusMinus[0.7951923613305368, 0.1461218490354745], "ModelMemory" -> 
             84256, "TrainingMemory" -> 17849040, "TrainingTime" -> 
             1.8706570000000002`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6019457386111525, 0.09413380826406466], "Accuracy" -> 
              PlusMinus[0.6089108910891095, 0.06917727028697561], 
              "EvaluationTime" -> 0.0005803, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.125819, 
              "TrainingMemory" -> 251368, "ModelMemory" -> 1268960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6618384518666951, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6019457386111525, 0.06656265416243438]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6089108910891095, 0.04891571692389512]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7715262519520374, 0.09806411097121684], "Accuracy" -> 
              PlusMinus[0.5495049504950499, 0.07042869408830647], 
              "EvaluationTime" -> 0.00052825, "TestSize" -> 100, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.297586, 
              "TrainingMemory" -> 7260288, "ModelMemory" -> 1329704, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5168182229559996, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7715262519520374, 0.06934179785877753]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5495049504950499, 0.049800607179954416`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.696069617868586, 0.10373509293267809`], "Accuracy" -> 
              PlusMinus[0.668316831683169, 0.06686571256203529], 
              "EvaluationTime" -> 0.00066022, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.75094, 
              "TrainingMemory" -> 31621776, "ModelMemory" -> 1472296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5643770755165539, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.696069617868586, 0.07335178765971337]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.668316831683169, 0.047281198781485664`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00066022, "MeanCrossEntropy" -> 
             PlusMinus[0.696069617868586, 0.10373509293267809`], 
             "ModelMemory" -> 1472296, "TrainingMemory" -> 31621776, 
             "TrainingTime" -> 5.132085666666668], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8012570215530461, 0.05957499384732085], "Accuracy" -> 
              PlusMinus[0.5573419442216595, 0.0490156649536851], 
              "EvaluationTime" -> 0.000024314999999999997`, "TestSize" -> 200,
               "TrainingSize" -> 10, "TrainingTime" -> 0.010931, 
              "TrainingMemory" -> 457816, "ModelMemory" -> 70392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.531146288950708, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8012570215530461, 0.042125882138587416`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5573419442216595, 0.03465930907311853]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8809518238384777, 0.07874116076807004], "Accuracy" -> 
              PlusMinus[0.4840036169266624, 0.04924731963917535], 
              "EvaluationTime" -> 0.000024645, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.028259, 
              "TrainingMemory" -> 2444736, "ModelMemory" -> 70520, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.48166974561013043`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8809518238384777, 0.05567840873760246]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4840036169266624, 0.034823113672122326`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.917702370975501, 0.11137837215919617`], "Accuracy" -> 
              PlusMinus[0.5604862986050617, 0.04944658575225914], 
              "EvaluationTime" -> 0.000024415000000000003`, "TestSize" -> 200,
               "TrainingSize" -> 300, "TrainingTime" -> 0.146968, 
              "TrainingMemory" -> 11959656, "ModelMemory" -> 70904, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4594929120439354, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.917702370975501, 0.07875640223128658]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5604862986050617, 0.03496401609194456]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9636748597691448, 0.10207967493671777`], "Accuracy" -> 
              PlusMinus[0.6550214734934421, 0.03365193915706495], 
              "EvaluationTime" -> 0.000024004999999999998`, "TestSize" -> 200,
               "TrainingSize" -> 1600, "TrainingTime" -> 1.961481, 
              "TrainingMemory" -> 63855072, "ModelMemory" -> 73208, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4388954963543639, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9636748597691448, 0.10207967493671777`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6550214734934421, 0.03365193915706495]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000024004999999999998`, "MeanCrossEntropy" -> 
             PlusMinus[0.9636748597691448, 0.10207967493671777`], 
             "ModelMemory" -> 73208, "TrainingMemory" -> 63855072, 
             "TrainingTime" -> 2.4627822499999996`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5015293530487926, 0.01800424201104656], "Accuracy" -> 
              PlusMinus[0.17106345186013097`, 0.006386813663075646], 
              "EvaluationTime" -> 0.000042595, "TestSize" -> 200, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.005502, 
              "TrainingMemory" -> 621184, "ModelMemory" -> 268048, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.8550140446622703, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5015293530487926, 0.012730921616134745`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.17106345186013097`, 0.004516159251335683]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6874099461554081, 0.005599049380364253], "Accuracy" -> 
              PlusMinus[0.17106345186013097`, 0.006386813663075646], 
              "EvaluationTime" -> 0.00006033, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.009074, 
              "TrainingMemory" -> 3682840, "ModelMemory" -> 1254512, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5974098724949155, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6874099461554081, 0.0039591257850539]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.17106345186013097`, 0.004516159251335683]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6226057332888906, 0.0181054561497153], "Accuracy" -> 
              PlusMinus[0.7211374176226493, 0.02863088818425721], 
              "EvaluationTime" -> 0.00008012, "TestSize" -> 200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.045185, 
              "TrainingMemory" -> 18048240, "ModelMemory" -> 5989624, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5515054822643178, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6226057332888906, 0.012802490819939368`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7211374176226493, 0.02024509518648207]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6792599299093025, 0.01891295518479654], "Accuracy" -> 
              PlusMinus[0.5531342717817249, 0.0344952129455084], 
              "EvaluationTime" -> 0.00045474, "TestSize" -> 200, 
              "TrainingSize" -> 1600, "TrainingTime" -> 0.378628, 
              "TrainingMemory" -> 102597848, "ModelMemory" -> 31637792, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.41214721514591846`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6792599299093025, 0.01891295518479654]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5531342717817249, 0.0344952129455084]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00045474, "MeanCrossEntropy" -> 
             PlusMinus[0.6792599299093025, 0.01891295518479654], 
             "ModelMemory" -> 31637792, "TrainingMemory" -> 102597848, 
             "TrainingTime" -> 0.4787870000000001], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6082028750860861, 0.006583797002331766], "Accuracy" -> 
              PlusMinus[0.9950495049504966, 0.015592717276212148`], 
              "EvaluationTime" -> 0.00082937, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.013616, 
              "TrainingMemory" -> 427072, "ModelMemory" -> 149944, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7085989176432449, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6082028750860861, 0.004655447506304455]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9950495049504966, 0.011025716123134242`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.692393772857481, 0.005907084103373648], "Accuracy" -> 
              PlusMinus[0.4159008988456401, 0.01596960788383195], 
              "EvaluationTime" -> 0.00020784499999999999`, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.016679, 
              "TrainingMemory" -> 1907520, "ModelMemory" -> 149960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6227229960615146, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.692393772857481, 0.004176939226534763]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4159008988456401, 0.011292218027547722`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.668266751154941, 0.00909490713745311], "Accuracy" -> 
              PlusMinus[0.6782178217821788, 0.06637035020526592], 
              "EvaluationTime" -> 0.00020374, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.043216, 
              "TrainingMemory" -> 9027192, "ModelMemory" -> 151528, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6445519479119697, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.668266751154941, 0.006431070511155026]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6782178217821788, 0.046930924699869495`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6299316854421751, 0.012845067812269647`], 
              "Accuracy" -> 
              PlusMinus[0.7033803230777476, 0.03246326578860762], 
              "EvaluationTime" -> 0.00026687000000000005`, "TestSize" -> 200, 
              "TrainingSize" -> 1600, "TrainingTime" -> 0.370523, 
              "TrainingMemory" -> 47655864, "ModelMemory" -> 168120, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6828504207460594, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6299316854421751, 0.012845067812269647`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7033803230777476, 0.03246326578860762]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00026687000000000005`, "MeanCrossEntropy" -> 
             PlusMinus[0.6299316854421751, 0.012845067812269647`], 
             "ModelMemory" -> 168120, "TrainingMemory" -> 47655864, 
             "TrainingTime" -> 0.47676975], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471003906823, 0.0056083910307054485`], 
              "Accuracy" -> 
              PlusMinus[0.603407360998317, 0.047069796098415204`], 
              "EvaluationTime" -> 0.00007617000000000001, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.022479, 
              "TrainingMemory" -> 3639976, "ModelMemory" -> 84256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6221104816936112, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471003906823, 0.003965731329357633]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.603407360998317, 0.03328337201025749]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007617000000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.6931471003906823, 0.0056083910307054485`], 
             "ModelMemory" -> 84256, "TrainingMemory" -> 3639976, 
             "TrainingTime" -> 0.472059], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 148322543217633]], "MaxTrainingSize" -> 2000, 
      "LastReportingTime" -> 3.740140767671256`16.325462937208663*^9, 
      "PreprocessorEvaluationTime" -> 4.49560546875`2.*^-6, 
      "PreprocessorMemory" -> 236488, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.9260597766239437, 
          "ElapsedTimes" -> 1.051271, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 1.1575747207799292`, 
          "ElapsedTimes" -> 1.149221, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 1.446968400974911, 
          "ElapsedTimes" -> 1.744718, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 1600, "TimeBudgets" -> 1.8087105012186382`, 
          "ElapsedTimes" -> 3.267566, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[148331133152225]], "ID" -> 
         148335428119521]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {"WHERE'S CZECH GIRL."}, "ID" -> 7260497226573184975], 
         "f2" -> Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{12, 12, 7, 13}}, "ID" -> 6490666254881497590]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 16.700505, "MaxTrainingMemory" -> 150369848, 
      "DataMemory" -> 701640, "FunctionMemory" -> 457992, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 9, 15, 59, 28.998768`8.214954529002265}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7401587690360613`*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"bf9e3740-1061-453f-bc41-e36d43b8ba70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl1000", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"partsOfSpeechNumbers", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740158251434836*^9, 3.740158267226678*^9}, {
  3.740158573490692*^9, 3.740158574169509*^9}, {3.7401587762326193`*^9, 
  3.740158777871828*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"ff3e3682-e8a6-4fab-a152-1dffd7dd02f9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7059999999999999609`4.891395124401546", "\[PlusMinus]", 
                    "0.0144142905400084214`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 2000, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnRAY2WOoBBQ1NFxbssGIESyCBBA9sd8tN6770Ick5Jlfb
6n3MxbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b/Pp+nvPG0u48=
                 "], 
                "Type" -> "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    7263179337424669307]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    114010418416267986]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                10.158144370086415`, "StandardDeviation" -> 4.020779979572767,
                 "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUmuRbuOXF/DHfdcTcADMKC6GEIC2cohuGHALTfSA/JQHSu2yHPzI/9/
jzp3F9oSxSIY/O//8//82//6f//xn3/+/T/8888///q///3//st/0z/8j9tq
PXXee+ep465ZSgyUfYv+fa2xz+qn199Av7vPMfe8bbSx30C9+/a6d+t9ljHb
LTlQRz1F175jnKOfxMDZtek/vY01Rlt1xMA6Y+0262qrtV7rzYG+9umjnXnO
mGfmwLhtDv3f1hO1O/tvYOnxy+xFz3SW/iUGut6sjr3XXnWVemcOtF3mOKPr
j6fmpv8Gyur3Hj1SGavdFgNNt6h6gL70enX/7lFP73ecfSWf48+b13bXOHpk
vRGPdX8DZZXVNPlMlu4eA6Xf0+fU9K9aey8xUG7R6+n3deua+rccOKcXzaBe
8fTV6qo5sDS7pXXNlT7Wzm9e9Gb78OJX4/q8/TdQWQdaJKVrim+8oNbC0Xfr
mtetvxk9B/rZo2hS5unnahG130ArZ5Ta69HN145pL21rNlqdulfrepUcKPoE
Rxdq59yrj5iXKl1zoUWq21Y9eLygfnW5iR52afq1Ln8DmgdNBo9VRtcii4Gz
z+76f/36Dn3/HNALnr3uurudrVkeOVB1h321FE6/c5UWA2vr/kW30W7QRPf9
G+i9shDrHrvUcWJAr1TqrNoBR99k17y5/lrLQVNSuNSs+RejaL0X/e+ca9ce
k3huv1qJRQ+q77jY3DmwtQu0pKreRdvk91Rdq1e/rbOwtLWCfwP19rIrK6JM
7bcYaENP1PmOU/tz/WZXM6EFsfRs+2gC5ls++mzaUGXeoWfQEq69xIAupi+u
m1wvurZz4Oyp3Tn09uXqT9pvQGuma8kf/adprnNgTW1lfS+9hJ5h99+AVEDt
KIi6Nc15j7UWakxf+2o16OlzoDCDVctn9KFZzgFNgv6iSNHtNaS+ckAPqtfT
7m9Tq7GefFxpo1qanqr1o62dn1ZTuvRVpRWKtg0zHQNdD9S7RGPPLg2bj9uu
/kWPPzTlUwt25kDXPtRCqPpfbZvzG5BO0su3Nqa2XM/FoAG9V9X+XKvp/2tO
op5cL6aba39K+5a41NZKG1rBp21NcGuh4dgwVW/feYnmdRcDB72vFacJ0C92
KEsN6CpFr6LFMKdUxs0BXaINRsqZ68y8lK56z9Q6OFMvP27+hVSMlO+Q9pYC
6DunhIe8U/MuXaUtt+Mo0k6WYjk+jJb2z87VvrVijtRCLwsFsHKV7OmDS0uT
RaWPlvfQfOi40b2kUobOpPiCUhT1sDt1TC5WXM6V1kDRGkAxSY+XlZeSfp11
Nk2IVgNf7Q1oQekM0tNqReh5W6hXDWheeWvp8q0ZbjcH+mYXjyk9rYc98R46
NhfKXRtZ61f7J6ZEqlvrRifd0iGtBV/yUlPaTo8rlaJ/6L+tJv3Rdf05Z+c8
vvnmS59DOkG6pulDar3ngF68cCfpBO1qbcIc0DNqtnhBraCSClnPKt2iz6dl
r3tpvnKgSNdLZXELra/U1FrFV59ap2cbOj5O7iirNu0/PZQ05a75BTV72mIy
MzrH8GypZLTupdcuJsPWd7o9L1WGjSXZLd49qWTmRkdK7w30sT5yDgyfm/pG
nVNB6yQHdIjrNbAvOIRzriYzV7SytKOllrQgcsA6lXNWO1FHYhxFmsA2pL+m
FknnGW8O6LFYztINBwun5MB8i/PqM2tZ5T30mWQUSDNKq+hYCquPAeluTZTW
NrbDikvpA+nryHqTzab3ljaPgW3zrmPgTRbpb0Azd9BuPiS0HmNgsqH1zihA
rMHxG5BQ/2XtphNu5YCWuaZJNo6Uo3bVyQE+N/aVrBtMy7y5bBcd5zJupUJ1
qbQZZGzJSJO60K7Sc9ycRH2JwlLR1HdeLzWDTlGUQNHhJP1dfgvO6lAmsFbd
QGGlshwdO1q31s+lkkfOrv5Jr8upiYGjB8gBm3TaiZpyf7K8lN5WC54jdTYs
33xcWZAy279lqpEdi1p7c1wphqJDZWnvjvIbkCnL5pASX6iBHMC6q5Wrd3RR
zm5B/2xsvCVroOe06wkHakOfT2rg/CwynRmyaqVk8ARkv6aG0wm4rUO0GtHT
O7657JUmO1+noY517eYS065X0LzKspQe5QFzJWqyZZTpXbC4tdPzVNOA1qFM
qY45r8W6ckD7prBpKneZNR9Xu0xLHY2s+ecQywF9kM+EkfvDeZ8DaNA75Zjo
ALs9J1F/oP1ZOas0l/x3DixmAitblpaWVc+BiX3RpXh1Ndktv78YOuNlZ+B2
8dVnDnBu68EwYZmdnETpBA1szlS5bLfHX0ip4vLIu8MCk+kdN28Hh+JI68jQ
1+fMtSvrFyWg195Ti0yfJwc0izqmtHJknWiK40Pp/QYKS3vUk5iaGt2KT6BH
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
                    "], "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1: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
pX3SeqF9RW08+AdJ4bBK
                    "], "Version" -> {11.3, 0}, "ID" -> 
                    8271446901366827342, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Spans" -> {
                  Span[1, 2464], 
                  Span[2465, 2465]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnRAY2WOoBBQ1NFxbssGIESyCBBA9sd8tN6770Ick5Jlfb
6n3MxbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b/Pp+nvPG0u48=
                    
                    "], "Type" -> "NumericalVector"]], "Version" -> {11.3, 0},
                 "ID" -> 821998144885263164]]}, "Invertibility" -> 
            "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8143147147439565807]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                8208025887441778832, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8413217448475986683]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["Not Question" -> 0.5, "Question" -> 0.5]],
        "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association["Weights" -> CompressedData["
1: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
jjLZCw1e1UHOqDPtIyXyvqSB2764jjeCX2O6RTYe2l8rEa9XbL0D8XGZ4PD8
BX46tgvX/egglAw3SfR8wgCq82mn40D3+Qw8tj8NTFfdkiifpGzZc1eSfC91
U69hQs553vD4Hi6ZvQ9ftC5n6Z9U2eJXMbB0czK+1+0i7KqUMLrVEXO0ZrKB
fA7bNb+QGywLh1ofE+wfUwXk2yW931JG8QOsbPaA53cOiwGBJdKCuHc8eW0o
b7dvEZJHu/3VQz7Ptq8uccIY/wZbvDGmE7P1i5EzDspeIFxBlCR9RTrHCa0T
GGktG99hEJ8Wx2unzJIoo6TXqC57Jd8BZRjU/6R1luprCu2YeCld9Q3oTnGU
8YTytDZLnbH4eTBQ1jpcpwImlgySyutaOOHV3UEnsXvLREg/85t3HXkLXBRu
Sn26BMo69uWrZUzarYfdCtcJ8shUu6QtTYbbcvIGvxdZims9K7jv7XuyFicd
vatzAlJWQzgfdTYR91dH8UyLeYJ0N/mIvi8HMcq1qF4uTZwrUS6Y8Bd7Gm01
oGFUf4zwnQDkWSmvIh2WvnccEEa8mbpURLwajolp12H0IE2RPDkdpmerCpqJ
JF3LwenKCRC4K032osTJFzRdYf+AxWDr3QbrtyTCtt9arMTiBRCfRQbflQjH
CZea552VsafD9mJUr4qXM9Q1X9bKs6Wmi8ZydkJZlZPzMJkXaI5xoiKZRaUW
S6umvULyAP1CrZBqLs03A5IKh8IitdkwXnkPdFyWjpTVXCx7Lucsfs0TcPHX
/TAisSMjTXi0QRGODU2Ct4ZB4PneFo9++w1fLfWA+qVb2yZOWpJ6olZ5Lxh+
TmOLtSVhEGWKpOmp1/M1L/Ngiy7MbWYnVhTgwLC5DvPf1fMi2xjcvyRRAhtT
RpqYcKrq+V0grDoxyBWbu/eUs3faV02hOaNc1EfVk5P/pNzUdHIKv3npFzTW
xsvP8tyaLm05Ox6ft57mxZOOSxf7mYPPrhS0mfoVzVYWSg/H1SLlm4Qxh771
ZIqduyPx+9i1udLc90ryzEE9LUxQtuIfMEr2QG9MarHW3EJQPkBY1rkuVWpZ
XsN1Yi9J1OuUF9zeYyjoXLfPVpT9N+mmi07bsefok/J8z3HwV3yjkCrRz8iH
EZ/MOesv6My+eqfyon5n4U15pezLJjs/RGXVZt56LhN/XOoBNBuk+tv9MRRo
7+f2psKIK8oOxGkRJ4rwU1xbibRl6ZH94kYY8o/XeqGruzvQTI3uljhZN3wK
km8qd5nM6l+2EW8UV8LvpdHsRJ0AeWY2iVMGyykvT/VUlGuxR/IBaY3JR05+
ivrkzdgDSBnSjgt9gHibnr9nyRaI9ipEo3mlWHzAVHxKSoKr2UOgckMl0lpp
nnMkLJRRfdB7O3SYwdp9fgqUHdK5kW/4ld0XKOcorFMWHm98WeYMH3xzvRmI
S+sOr5T9i0/t3b8Y+YtTHWS/eihRP7gpn5HzwNPNOuJ1witInfpEco+bzIaH
nAW6R+Ul3/n6tXVybj1wXRHGrTaHRpNXUqt1f0aYTNzeFvLxn2VJcq7pt8Rb
onxnWbSRjJHqL3J46WwdvHH7Fjf9dlGea+59LuwpN+vR82kxeUHSOP0uXJC9
PGVBPS6VCzor6qHDRY3y2qPrUdaw71/VAelCynUUPKKAeI1yB+IY/at7Ye68
FzKWvi/VYo9uZuH6Lz2QcNBxIIgcexdBeobuiDim8T81bKM9DgKGqLAuHd9y
7wOmsoej+Q95CspySS/16toZGysnsLdWXRj5atIG8YpXgXSm5SVDMWBSq72M
cc1h7J8r6mJ4vg46/UlAyg/KTXYJt4ZtRVqbPSDicRuRzSswPCCOqUS4Inkf
v+oMII1OfvfuuI6odyMBrL9Y8tkDXOQsltZO/5IGvCc9B8qT6F7+VM+SdTfp
HuKDYyeeSeQ36AwP7NZkxNEvXu+zp6zo6tsczDpsjtVvTNiFL9sFnR311pf2
UYxyA8rOSYuIizuAzmTFpctAvo14L2n8L6B7Jm+x78qx4pU2QRjYP5X/fnZa
zra67HGRcYLeb/eNI5Krnwr6zW2LXn8xjHJJqq0E6xRweWwDE5pDBdUEaTTy
2lT7hIG0f4f633Dmk6E4CImYmZjFo9oGcdJ4/80agbQH0XUgmM6/AjSPaLKy
ZBFTFvKzL29wWlvKcwN0nuSHpO29HJWEQc5+OROkZ/ueyIXO/VbLa6a8i+q7
qCRa+EdnA72e1kKzEBWHybiq/DcEBp6B+ChTQbMWytA8376CjKtf4c+BFEa1
Qzj3NHKAoHkvYTfdIZ3d/KEzWIujs1iq819x8vEgOcejdWu9C5HX8vRBB8gJ
vo2RJxJ57/27ZR4kTvI1rJaotxKEHTxXr8DN3e9wqgk6e4/gfH44MRs3l81C
y6Fm0GWBJjDVbCj+MrmY8Oi3ahqQbqs49hRVG/Oxeq8qy/0ZJvuTk2odhWpb
GzbgYXhRReQJyXv0Ydh+pR52WqZymsv2bjNHxtju79agx4IhMPB3sD3l0N72
Gzn15FCxXM6ZNRR34oZnZ+X+J66gefqiy+3kzx8gbofCo/5ss3QBDoz4gFQT
eaeD5OyxtKKfIP/X62KKrEs8lv3AfSdsGc1QsmMVhcr3KKB8g3SizqNxLGde
G0F1TDOpTttKOXmKUy57ZM6iXJb8HM1/X6U7yV4ktj4Q7BKuyF+DZjeRXfNB
9lLEXzv+WEOuiyrbWV6GS5QXQHfjYJEUWQbkrxRzrDnpetIRBk+7C8LtoMca
4OmoKmeCVw5lyHOcudPv4rCwmXI2d8Y+GCJX+eDstSFyZrbvRxIIRzPMuJLP
aXb2eIArntRRhFZjW9G+4065TsgfVHwZyWxvTgZ/xWHFzl4/uaythijLGTzp
N/Id5I8O1hrJ8+HiFjNRn9tBDNP2AZpTOuERmLolA+k+6CwnvhmOTY3dZX2a
Va8qz6cLv77HiGA9mOg2XNA+7kdbs3y1fBlP6Hxdq/XZmInhkk+mhayVNq71
l/dL8yiqP8oh5i0IleizPk2Z41DVNgm1D9vwqpoKSRr4E5pjOfSIu/F/GXq/
qTzdtYW36idK5FGofi5q+zDKiglvDmhHYtP4BnleSHlbt9yFIuttM9K8faWT
AziOrAbiuJn5ncQBpSm4YbYhGxDUXdBeKf8kPurgN5lRlsbGTOXyZztiXwDl
e/8tzmNbV/bCH+ESfnyez+kzLHTfN+KDINLpHNBavD60omXVd9x+11zmIur/
5Y4NRcRH96f3wldFCqJ5ZBXvuHoirKvwkwgzCQvp7OmzD3MTRiHlMC8X+sFU
jyNIGfW6rJtwO7MWN/Uaw4a8UAN2fRcQZhC/k34anLxKznk+Jk4F97ePMH5G
HlAffDm+VRBPsLV/tWmPfUD3/2VQG7nn/kz7AA1qBsw++I2MfXkvdGHegf5o
mTqBZTrEYCTOQfJB1EeURaxdrsDoMwg0I6J7oBo8+0YSypui5NqgNZOPCunw
r+y5SSuqG+bDx8XJSFxE+shm2DSg+ib+9P80DEjXHXoZL+tuwnrCBNUP6+12
qhxEpxWx/EfNEkb1oXuvCikfoPmefxszQdqQfD7NwcnDNKre5DR3p5xjYFgl
j150l4cPDUSD2euhr1GZ5BFzlMVcuISXlilK7WaPBvJjpMvGtBsq9wDd52XD
Uilm5UX7/wFz7pw3
               "], "Biases" -> 
              RawArray["Real32",{1.3009573221206665`}]], "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              2465, "$InputDimensions" -> {2465}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{2465}, NeuralNetworks`RealT]],
             "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQEAUANCvNMZ1YgbJ7aAwgERtAJ01RKMwgIlscBuIGEL3XvPSOPdT
FRFHHfEdceelKeu1tbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b9+2fq
9uEp+QVpdYH0
               "], "Type" -> "NumericalVector"], "Key" -> 
            "(f1f2)", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Method" -> "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0.001, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.16774744866751698`, 0.025176751892371965`], 
            "Accuracy" -> 
            PlusMinus[0.9653465346534669, 0.028323007560324794`], 
            "EvaluationTime" -> 0.00414315, "TestSize" -> 100, "TrainingSize" -> 
            10, "TrainingTime" -> 0.078017, "TrainingMemory" -> 2550960, 
            "ModelMemory" -> 84256, "ExperimentCount" -> 1, "ModelUtility" -> 
            2.102882844685245, "MeanCrossEntropyHistory" -> {
              PlusMinus[0.16774744866751698`, 0.017802651991347458`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.9653465346534669, 0.020027390709503514`]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 0.001, "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 2000], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 148326838184929]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.16774744866751698`, 0.025176751892371965`], 
                 "Accuracy" -> 
                 PlusMinus[0.9653465346534669, 0.028323007560324794`], 
                 "EvaluationTime" -> 0.00414315, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.078017, 
                 "TrainingMemory" -> 2550960, "ModelMemory" -> 84256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 2.102882844685245, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.16774744866751698`, 0.017802651991347458`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9653465346534669, 0.020027390709503514`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7575530906112448, 0.10079293388276368`], 
                 "Accuracy" -> 
                 PlusMinus[0.5852795421952756, 0.04550971072727253], 
                 "EvaluationTime" -> 0.000084665, "TestSize" -> 200, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.094747, 
                 "TrainingMemory" -> 4525816, "ModelMemory" -> 84256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5553624732231522,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7575530906112448, 0.07127136704418953]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5852795421952756, 0.03218022506509257]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7951923613305368, 0.1461218490354745], 
                 "Accuracy" -> 
                 PlusMinus[0.7033803230777476, 0.045909990757171414`], 
                 "EvaluationTime" -> 0.00008082, "TestSize" -> 200, 
                 "TrainingSize" -> 300, "TrainingTime" -> 0.268896, 
                 "TrainingMemory" -> 17849040, "ModelMemory" -> 84256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5238999476312295,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7951923613305368, 0.10332375033250099`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7033803230777476, 0.03246326578860762]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00008082, "MeanCrossEntropy" -> 
                PlusMinus[0.7951923613305368, 0.1461218490354745], 
                "ModelMemory" -> 84256, "TrainingMemory" -> 17849040, 
                "TrainingTime" -> 1.8706570000000002`], "Index" -> 1], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6019457386111525, 0.09413380826406466], 
                 "Accuracy" -> 
                 PlusMinus[0.6089108910891095, 0.06917727028697561], 
                 "EvaluationTime" -> 0.0005803, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.125819, 
                 "TrainingMemory" -> 251368, "ModelMemory" -> 1268960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6618384518666951,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6019457386111525, 0.06656265416243438]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6089108910891095, 0.04891571692389512]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7715262519520374, 0.09806411097121684], 
                 "Accuracy" -> 
                 PlusMinus[0.5495049504950499, 0.07042869408830647], 
                 "EvaluationTime" -> 0.00052825, "TestSize" -> 100, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.297586, 
                 "TrainingMemory" -> 7260288, "ModelMemory" -> 1329704, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5168182229559996,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7715262519520374, 0.06934179785877753]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5495049504950499, 0.049800607179954416`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.696069617868586, 0.10373509293267809`], 
                 "Accuracy" -> 
                 PlusMinus[0.668316831683169, 0.06686571256203529], 
                 "EvaluationTime" -> 0.00066022, "TestSize" -> 100, 
                 "TrainingSize" -> 300, "TrainingTime" -> 0.75094, 
                 "TrainingMemory" -> 31621776, "ModelMemory" -> 1472296, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5643770755165539,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.696069617868586, 0.07335178765971337]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.668316831683169, 0.047281198781485664`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00066022, "MeanCrossEntropy" -> 
                PlusMinus[0.696069617868586, 0.10373509293267809`], 
                "ModelMemory" -> 1472296, "TrainingMemory" -> 31621776, 
                "TrainingTime" -> 5.132085666666668], "Index" -> 2], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8012570215530461, 0.05957499384732085], 
                 "Accuracy" -> 
                 PlusMinus[0.5573419442216595, 0.0490156649536851], 
                 "EvaluationTime" -> 0.000024314999999999997`, "TestSize" -> 
                 200, "TrainingSize" -> 10, "TrainingTime" -> 0.010931, 
                 "TrainingMemory" -> 457816, "ModelMemory" -> 70392, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.531146288950708, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8012570215530461, 0.042125882138587416`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5573419442216595, 0.03465930907311853]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8809518238384777, 0.07874116076807004], 
                 "Accuracy" -> 
                 PlusMinus[0.4840036169266624, 0.04924731963917535], 
                 "EvaluationTime" -> 0.000024645, "TestSize" -> 200, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.028259, 
                 "TrainingMemory" -> 2444736, "ModelMemory" -> 70520, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.48166974561013043`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8809518238384777, 0.05567840873760246]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4840036169266624, 0.034823113672122326`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.917702370975501, 0.11137837215919617`], 
                 "Accuracy" -> 
                 PlusMinus[0.5604862986050617, 0.04944658575225914], 
                 "EvaluationTime" -> 0.000024415000000000003`, "TestSize" -> 
                 200, "TrainingSize" -> 300, "TrainingTime" -> 0.146968, 
                 "TrainingMemory" -> 11959656, "ModelMemory" -> 70904, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4594929120439354,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.917702370975501, 0.07875640223128658]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5604862986050617, 0.03496401609194456]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9636748597691448, 0.10207967493671777`], 
                 "Accuracy" -> 
                 PlusMinus[0.6550214734934421, 0.03365193915706495], 
                 "EvaluationTime" -> 0.000024004999999999998`, "TestSize" -> 
                 200, "TrainingSize" -> 1600, "TrainingTime" -> 1.961481, 
                 "TrainingMemory" -> 63855072, "ModelMemory" -> 73208, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4388954963543639,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9636748597691448, 0.10207967493671777`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6550214734934421, 0.03365193915706495]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000024004999999999998`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.9636748597691448, 0.10207967493671777`], 
                "ModelMemory" -> 73208, "TrainingMemory" -> 63855072, 
                "TrainingTime" -> 2.4627822499999996`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5015293530487926, 0.01800424201104656], 
                 "Accuracy" -> 
                 PlusMinus[0.17106345186013097`, 0.006386813663075646], 
                 "EvaluationTime" -> 0.000042595, "TestSize" -> 200, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.005502, 
                 "TrainingMemory" -> 621184, "ModelMemory" -> 268048, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.8550140446622703,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5015293530487926, 0.012730921616134745`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.17106345186013097`, 0.004516159251335683]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6874099461554081, 0.005599049380364253], 
                 "Accuracy" -> 
                 PlusMinus[0.17106345186013097`, 0.006386813663075646], 
                 "EvaluationTime" -> 0.00006033, "TestSize" -> 200, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.009074, 
                 "TrainingMemory" -> 3682840, "ModelMemory" -> 1254512, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5974098724949155,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6874099461554081, 0.0039591257850539]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.17106345186013097`, 0.004516159251335683]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6226057332888906, 0.0181054561497153], 
                 "Accuracy" -> 
                 PlusMinus[0.7211374176226493, 0.02863088818425721], 
                 "EvaluationTime" -> 0.00008012, "TestSize" -> 200, 
                 "TrainingSize" -> 300, "TrainingTime" -> 0.045185, 
                 "TrainingMemory" -> 18048240, "ModelMemory" -> 5989624, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5515054822643178,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6226057332888906, 0.012802490819939368`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7211374176226493, 0.02024509518648207]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6792599299093025, 0.01891295518479654], 
                 "Accuracy" -> 
                 PlusMinus[0.5531342717817249, 0.0344952129455084], 
                 "EvaluationTime" -> 0.00045474, "TestSize" -> 200, 
                 "TrainingSize" -> 1600, "TrainingTime" -> 0.378628, 
                 "TrainingMemory" -> 102597848, "ModelMemory" -> 31637792, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.41214721514591846`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6792599299093025, 0.01891295518479654]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5531342717817249, 0.0344952129455084]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00045474, "MeanCrossEntropy" -> 
                PlusMinus[0.6792599299093025, 0.01891295518479654], 
                "ModelMemory" -> 31637792, "TrainingMemory" -> 102597848, 
                "TrainingTime" -> 0.4787870000000001], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6082028750860861, 0.006583797002331766], 
                 "Accuracy" -> 
                 PlusMinus[0.9950495049504966, 0.015592717276212148`], 
                 "EvaluationTime" -> 0.00082937, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.013616, 
                 "TrainingMemory" -> 427072, "ModelMemory" -> 149944, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7085989176432449,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6082028750860861, 0.004655447506304455]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9950495049504966, 0.011025716123134242`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.692393772857481, 0.005907084103373648], 
                 "Accuracy" -> 
                 PlusMinus[0.4159008988456401, 0.01596960788383195], 
                 "EvaluationTime" -> 0.00020784499999999999`, "TestSize" -> 
                 200, "TrainingSize" -> 60, "TrainingTime" -> 0.016679, 
                 "TrainingMemory" -> 1907520, "ModelMemory" -> 149960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6227229960615146,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.692393772857481, 0.004176939226534763]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4159008988456401, 0.011292218027547722`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.668266751154941, 0.00909490713745311], 
                 "Accuracy" -> 
                 PlusMinus[0.6782178217821788, 0.06637035020526592], 
                 "EvaluationTime" -> 0.00020374, "TestSize" -> 100, 
                 "TrainingSize" -> 300, "TrainingTime" -> 0.043216, 
                 "TrainingMemory" -> 9027192, "ModelMemory" -> 151528, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6445519479119697,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.668266751154941, 0.006431070511155026]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6782178217821788, 0.046930924699869495`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6299316854421751, 0.012845067812269647`], 
                 "Accuracy" -> 
                 PlusMinus[0.7033803230777476, 0.03246326578860762], 
                 "EvaluationTime" -> 0.00026687000000000005`, "TestSize" -> 
                 200, "TrainingSize" -> 1600, "TrainingTime" -> 0.370523, 
                 "TrainingMemory" -> 47655864, "ModelMemory" -> 168120, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6828504207460594,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6299316854421751, 0.012845067812269647`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7033803230777476, 0.03246326578860762]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00026687000000000005`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6299316854421751, 0.012845067812269647`], 
                "ModelMemory" -> 168120, "TrainingMemory" -> 47655864, 
                "TrainingTime" -> 0.47676975], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931471003906823, 0.0056083910307054485`], 
                 "Accuracy" -> 
                 PlusMinus[0.603407360998317, 0.047069796098415204`], 
                 "EvaluationTime" -> 0.00007617000000000001, "TestSize" -> 
                 200, "TrainingSize" -> 60, "TrainingTime" -> 0.022479, 
                 "TrainingMemory" -> 3639976, "ModelMemory" -> 84256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6221104816936112,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931471003906823, 0.003965731329357633]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.603407360998317, 0.03328337201025749]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007617000000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.6931471003906823, 0.0056083910307054485`], 
                "ModelMemory" -> 84256, "TrainingMemory" -> 3639976, 
                "TrainingTime" -> 0.472059], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "LogisticRegression", "NaiveBayes", 
                "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 148322543217633]], "MaxTrainingSize" -> 2000, 
         "LastReportingTime" -> 3.740140767671256`16.325462937208663*^9, 
         "PreprocessorEvaluationTime" -> 4.49560546875`2.*^-6, 
         "PreprocessorMemory" -> 236488, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.9260597766239437, 
             "ElapsedTimes" -> 1.051271, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 1.1575747207799292`, 
             "ElapsedTimes" -> 1.149221, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 300, "TimeBudgets" -> 1.446968400974911, 
             "ElapsedTimes" -> 1.744718, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 1600, "TimeBudgets" -> 1.8087105012186382`, 
             "ElapsedTimes" -> 3.267566, "ExperimentCounts" -> 3]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[148331133152225]], "ID" -> 
            148335428119521]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {"WHERE'S CZECH GIRL."}, "ID" -> 
              7260497226573184975], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{12, 12, 7, 13}}, "ID" -> 6490666254881497590]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 16.700505, "MaxTrainingMemory" -> 
         150369848, "DataMemory" -> 701640, "FunctionMemory" -> 457992, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 9, 15, 59, 28.998768`8.214954529002265}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"YOU DUMB BITCH.", {11, 1, 7, 13}}, {
        "AND YOU COULD STAND TO GET A LITTLE SMARTER AIN'T THAT RIGHT YOU \
DUMB BLONDE FUCK.", {3, 11, 15, 15, 10, 15, 4, 12, 12, 12, 2, 4, 12, 11, 1, 
         12, 12, 13}}, {"AN ITALIAN RIGHT.", {4, 1, 7, 13}}, {
        "MAJOR WHAT DO YOU THINK COULD HAVE DONE THIS.", {1, 4, 12, 11, 12, 
         12, 12, 15, 7, 13}}, {"YOU SAW THIS.", {11, 15, 7, 13}}, {
        "HOW CAN YOU BE HERE AND SAY THIS.", {12, 12, 11, 15, 2, 3, 15, 7, 
         13}}, {"NATALIE WHO.", {12, 11, 13}}, {
        "WHERE WILL MY TOYS BE.", {15, 15, 12, 12, 15, 13}}, {
        "THE CAR OR DEBBIE.", {4, 7, 7, 12, 13}}, {
        "THAT ' S WHO YOU WANT ME TO BEND MY RULES FOR.", {4, 13, 7, 11, 11, 
         15, 7, 10, 15, 12, 7, 10, 13}}, {
        "I'VE NEVER GOTTEN A LETTER LIKE THIS HAVE YOU.", {11, 15, 2, 15, 4, 
         7, 10, 7, 15, 11, 13}}, {
        "YOU DON'T THINK SO.", {11, 15, 2, 12, 12, 13}}, {
        "I BELIEVE WE SHARE AN ART INSTRUCTOR YOU KNOW CHASTITY.", {11, 15, 1,
          7, 4, 7, 7, 11, 15, 7, 13}}, {"CALL THAT FRESH.", {1, 4, 12, 13}}, {
        "OH SHUT UP HUH.", {7, 12, 9, 12, 13}}, {"THE POET.", {4, 7, 13}}, {
        "WHY DOESN'T SHE JUST HANG UP AND CALL THE POLICE.", {2, 15, 2, 12, 2,
          15, 9, 3, 1, 4, 7, 13}}, {
        "IF YOU NEED TO COME TO WHERE I LIVE OK.", {10, 11, 15, 10, 15, 10, 
         15, 11, 15, 5, 13}}, {"WHO WILL YOU KILL.", {11, 15, 11, 15, 13}}, {
        "WHO IS DEAD.", {11, 15, 12, 13}}, {
        "YOU REMEMBER HIM FROM HIGH SCHOOL.", {11, 15, 12, 12, 12, 12, 13}}, {
        "YOU HUNGRY OR THIRSTY OR BOTH.", {11, 1, 7, 12, 7, 4, 13}}, {
        "HOW OFTEN DO YOU SEE MR. KRAMER AND HIS SON.", {12, 12, 12, 11, 15, 
         12, 12, 3, 11, 7, 13}}, {
        "WHO'S MR. JOCULARITY.", {11, 15, 12, 12, 13}}, {
        "SO NOW WHERE WERE WE HERE.", {12, 12, 12, 15, 12, 2, 13}}, {
        "CHARGE SET.", {1, 7, 13}}, {
        "YOU SERVE MARTINIS DONCHA.", {11, 15, 7, 12, 13}}, {
        "GOIN' DOVE HUNTIN'.", {12, 7, 7, 13, 13}}, {
        "AND MADEMOISELLE.", {3, 12, 13}}, {
        "IS IT THAT BAD.", {15, 11, 4, 12, 13}}, {
        "THEY'RE TRYING TO UNNERVE US. WHY DID THEY DO THAT.", {12, 12, 12, 
         10, 12, 12, 13}}, {
        "WHAT NUMBER DID YOU TEAR OUT.", {4, 7, 15, 11, 15, 12, 13}}, {
        "JUST A LITTLE JOKE MISS FARMER. ...DID YOU REALLY SAY THAT.", {2, 4, 
         7, 7, 7, 7, 13, 13}}, {
        "HI VIV.  CARLOS YOU KNOW MY ROOMMATE VIV. YOU SPENT IT ON DRUGS \
DIDN'T YOU.", {12, 12, 13}}, {
        "WHAT HAVE YOU GOT TO DO.", {4, 12, 11, 15, 10, 12, 13}}, {
        "DO YOU KNOW HER.", {15, 11, 15, 7, 13}}, {
        "WHAT THE HELL IS A TREADSTONE.", {4, 4, 7, 15, 4, 7, 13}}, {
        "PAPA.", {7, 13}}, {"AS A PLUMBER.", {10, 4, 7, 13}}, {
        "WHAT TEN THOUSAND POUNDS.", {4, 8, 12, 12, 13}}, {
        "UP GET IT.", {7, 15, 11, 13}}, {
        "ARE YOU DECLARING AN EMERGENCY.", {15, 11, 15, 4, 7, 13}}, {
        "SHALL I REMAIN HERE IN OUR HOTEL ROOM HIDING OR SHALL I CARRY ON THE \
BEST I CAN.", {12, 11, 15, 2, 10, 12, 12, 12, 15, 7, 7, 11, 15, 10, 4, 7, 11, 
         15, 13}}, {"WHATSAMATTER.", {7, 13}}, {
        "WHAT WAS I GONNA SAY.", {4, 15, 11, 12, 12, 12, 13}}, {
        "AND THOSE WERE THE GUYS WHO WENT ON THE EXERCISE WITH YOU.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}}, {
        "I WANT THE MONEY ASSHOLE WHAT DO YOU THINK.", {11, 15, 4, 7, 12, 4, 
         12, 11, 15, 13}}, {
        "I MEAN WHAT KIND OF PEOPLE DO WELL AT THIS STUFF.", {11, 15, 4, 12, 
         10, 12, 12, 12, 10, 12, 7, 13}}, {
        "HOW ARE THEY TREATING YOU.", {12, 15, 7, 15, 11, 13}}, {
        "WANNA STAY WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}}, {
        "AT WHAT EXACTLY.", {10, 4, 7, 13}}, {
        "DO YOU THINK IT'S DONE.", {15, 11, 15, 11, 15, 12, 13}}, {
        "WHAT IS SO GODDAMN VALUABLE IN YOUR LIFE THAT YOU'RE WORRIED ABOUT \
LOSING.", {4, 15, 12, 12, 12, 10, 1, 7, 4, 11, 15, 1, 10, 15, 13}}, {
        "PITTSBURGH.", {12, 13}}, {
        "[WAS IT] &QUOT;MEIRSCHULTZ&QUOT;.", {13, 12, 12, 13, 12, 12, 13, 
         13}}, {"I KNOW YOU'RE EXPECTING SOME KIND OF -- EXTRAVAGANT BEHAVIOR \
BUT BELIEVE ME -- DO YOU BELIEVE ME.", {11, 15, 11, 15, 15, 12, 12, 10, 13, 1,
          7, 12, 12, 12, 13, 12, 11, 15, 7, 13}}, {
        "WHAT'S A LUNCH COST THESE DAYS.", {4, 15, 4, 7, 7, 7, 7, 13}}, {
        "WHERE IS INNER SPACE.", {15, 15, 12, 12, 13}}, {
        "WHY WON'T YOU CHECK OUT LV-426. ...BECAUSE JUST ONE OF THOSE THINGS \
MANAGED TO KILL MY ENTIRE CREW WITHIN TWELVE HOURS OF HATCHING...", {2, 12, 2,
          11, 15, 7, 7, 13, 13, 12, 2, 8, 10, 4, 7, 15, 10, 15, 12, 12, 12, 
         10, 8, 7, 10, 15, 13}}, {
        "LOOK BUTTHEAD I'LL TREAT YOU SO NICE YOU'LL NEVER WANT TO LET ME GO \
OKAY.", {8, 7, 11, 15, 15, 11, 2, 1, 11, 15, 2, 1, 10, 12, 12, 12, 12, 13}}, {
        "THAT OBVIOUS HUH.", {4, 1, 12, 13}}, {"PERMISSION.", {7, 13}}, {
        "OKAY MISS STARLING.", {1, 12, 12, 13}}, {
        "WHAT'S DR. GILLMAN SAY.", {4, 15, 12, 12, 12, 13}}, {
        "WHY DID THEY TURN BACK.", {2, 12, 12, 15, 2, 13}}, {
        "WHAT'S SHE DOING.", {4, 15, 12, 12, 13}}, {
        "HOW YOU DOING SAM.", {12, 11, 15, 12, 13}}, {
        "WHY DO YOU EAT THAT STUFF.", {2, 12, 11, 15, 4, 7, 13}}, {
        "WHAT EXACTLY DID HE CALL OUT.", {4, 12, 15, 11, 1, 12, 13}}, {
        "SAY---YOU THINK THAT'S THE SAME GUY WHO WAS IN THE ACCIDENT WITH \
LUCY.", {7, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}}, {
        "AND YOU SVEN AREN'T YOU AFRAID OF CROSSING THE RAINBOW BRIDGE TO \
ASGAARD.", {3, 11, 12, 15, 2, 11, 12, 10, 12, 4, 12, 12, 10, 12, 13}}, {
        "NOT GREAT.", {2, 1, 13}}, {
        "RUNNING OUT OF TIME ARE WE.", {15, 12, 10, 12, 15, 7, 13}}, {
        "YOU'RE NOT USING THE SAME GUY WHO TRIED TO FIX IT.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}}, {
        "TO YOU ... .", {10, 11, 13, 13}}, {
        "DID YOU KNOW YOU SHOULDN'T LIGHT THREE CIGARETTES WITH A MATCH.", {
         12, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}}, {
        "MY MY MY HOW DID THINGS TURN SO HOSTILE SO QUICKLY.", {12, 12, 12, 
         12, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "NO BUT MY DOG HE'S A GOT MILLIONS OF THEM -- HAVE YOU GOT A \
LICENSE.", {4, 12, 12, 12, 11, 15, 4, 15, 12, 10, 12, 13, 12, 11, 15, 4, 7, 
         13}}, {"THIS THIS HAPPENED.", {7, 7, 15, 13}}, {
        "HOW DID YOU MANAGE IT.", {12, 12, 11, 15, 11, 13}}, {
        "WHOSE JUSTICE.", {1, 7, 13}}, {
        "DID THEY TELL YOU TO SLEEP WITH ME.", {12, 12, 12, 11, 10, 15, 10, 7,
          13}}, {"MAX, WHAT IS IT.", {12, 13, 4, 15, 11, 13}}, {
        "WILL YOU COME SEE HER WITH ME.", {15, 11, 15, 15, 7, 10, 7, 13}}, {
        "HOW YOU FEELING ALL RIGHT.", {12, 11, 15, 7, 7, 13}}, {
        "IS IT INEVITABLE THAT THE GAME PLAYS YOU.", {15, 11, 1, 4, 4, 7, 15, 
         11, 13}}, {"YOU FOUND ANYONE IN YOURS.", {11, 15, 7, 10, 12, 13}}, {
        "DON'T YOU WANT TO SEE WHAT DADDY DOES FOR A LIVING.", {7, 2, 11, 1, 
         10, 15, 4, 12, 15, 10, 4, 7, 13}}, {
        "WELL COULD YOU LEND ME SOME MONEY TILL YOU HAVE ONE.", {12, 12, 11, 
         15, 2, 12, 12, 12, 11, 15, 8, 13}}, {
        "I'M JUST HERE SHOOTING THIS BAND WHAT ABOUT YOU.", {11, 15, 2, 2, 15,
          7, 7, 4, 12, 11, 13}}, {
        "IT'S YOUR BANK AS WELL AS MINE ISN'T IT.", {11, 15, 1, 12, 12, 12, 
         12, 12, 15, 2, 11, 13}}, {
        "VASQUEZ HOW YOU DOING.", {12, 12, 11, 15, 13}}, {
        "YOU DON'T LIKE ME.", {11, 15, 2, 10, 7, 13}}, {
        "PHILIP SWANN.", {12, 12, 13}}, {
        "THE POLICE ALWAYS DO DON'T THEY.", {4, 12, 12, 12, 12, 2, 12, 13}}, {
        "PEOPLE ARE GONNA BE THINKING THE YOUNGER JAMES GANG.", {12, 15, 12, 
         12, 15, 15, 4, 1, 12, 12, 13}}, {
        "SO WHY ISN'T IT ALL BLOODY.", {12, 2, 15, 2, 11, 7, 7, 13}}, {
        "IS THAT ALL THERE IS.", {15, 4, 7, 7, 15, 13}}, {
        "THEN WE'LL GO DANCIN' OKAY.", {2, 12, 12, 12, 12, 12, 13}}, {
        "YOU'RE NOT FROM L.A. HUH.", {11, 15, 2, 10, 12}}, {
        "WHY DIDN'T YOU SAY SOMETHING.", {2, 12, 2, 11, 15, 7, 13}}, {
        "WITH ID AND A GUN....", {10, 7, 3, 4, 7, 13}}, {
        "WHAT IS HE -- MUSCLEMAN.", {4, 15, 11, 13, 12, 13}}, {
        "WHAT'S WRONG DID YOU MISS ME.", {4, 15, 1, 7, 11, 15, 7, 13}}, {
        "WHAT'S A TREE.", {4, 15, 4, 7, 13}}, {
        "- WHERE THAT COME FROM.", {13, 7, 4, 15, 7, 13}}, {
        "YOU'RE BACK AGAIN HUH.", {11, 15, 2, 2, 12, 13}}, {
        "PROFESSIONALLY.", {2, 13}}, {
        "ABOUT THE DUMPER DIDN'T HE TELL YOU THAT.", {10, 4, 7, 15, 2, 11, 15,
          11, 4, 13}}, {
        "KEEPING YOURSELF OUT OF JAIL.", {12, 12, 12, 10, 12, 13}}, {
        "WHAT ABOUT THE CAPTAIN.", {4, 12, 4, 7, 13}}, {
        "WHAT IS IT THE STAIRS.", {4, 15, 11, 4, 7, 13}}, {
        "WHAT OF THE REPORTS OF THE REBEL FLEET MASSING NEAR SULLUST.", {4, 
         10, 4, 7, 10, 4, 7, 7, 15, 10, 7, 13}}, {
        "TWO YEARS AGO.", {8, 7, 2, 13}}, {
        "PERHAPS A LITTLE REFRESHMENT FIRST.", {2, 4, 1, 12, 12, 13}}, {
        "THEN WHAT CAN I DO FOR YOU.", {2, 4, 12, 11, 15, 10, 11, 13}}, {
        "HAVE THEY QUESTIONED YOU YET SID.", {15, 12, 15, 11, 2, 12, 13}}, {
        "WELL DOES MARCUS HAVE AN ALIBI.", {12, 12, 12, 12, 4, 12, 13}}, {
        "WHO WOULD EVEN KNOW TO DO THIS.", {11, 15, 12, 12, 10, 12, 12, 
         13}}, {"HE WAS HERE.", {11, 15, 2, 13}}, {
        "KEEPING A STIFF UPPER LIP.", {15, 4, 1, 12, 7, 13}}, {
        "YOU KNOW WHAT HAPPENED TO THE TOWER OF BABEL DON'T YOU.", {11, 15, 4,
          15, 10, 4, 7, 10, 12, 12, 2, 11, 13}}, {
        "YOU MEAN BESIDES THE WARRANT OUT ON US FOR BLOWING UP OUR COMMANDING \
OFFICER.", {11, 15, 10, 4, 12, 12, 12, 12, 10, 12, 9, 12, 12, 7, 13}}, {
        "HOW ABOUT YOU TWO HIT THE STRIP AND START KNOCKING SOME HEADS \
TOGETHER.", {12, 12, 11, 8, 12, 4, 7, 3, 12, 12, 12, 15, 2, 13}}, {
        "HOW LONG AGO DID THIS GUY RETIRE.", {12, 12, 12, 12, 12, 12, 15, 
         13}}, {"WHAT HAVE I DONE.", {4, 7, 11, 15, 13}}, {
        "WILL YOU TAKE IT EASY.", {15, 11, 15, 11, 7, 13}}, {
        "WHO THE FUCK ARE YOU DR. JOYCE BROTHERS.", {11, 4, 7, 15, 11, 12, 12,
          12, 13}}, {"IT NEEDS BLOOD.", {11, 15, 7, 13}}, {
        "WHAT HAPPENS WHEN HE DIES.", {4, 15, 2, 11, 15, 13}}, {
        "YOU REALLY THINK YOU'LL BE ABLE TO FOOL A JURY WITH THIS BULLSHIT.", \
{11, 2, 15, 11, 7, 15, 1, 10, 7, 7, 7, 10, 7, 12, 13}}, {
        "IF YA WAS WANTIN' MY HELP WHY DIDN'T YA ASK.", {10, 12, 12, 12, 12, 
         12, 2, 12, 2, 12, 12, 13}}, {
        "HOW DO YOU KNOW THIS.", {12, 12, 11, 15, 7, 13}}, {
        "IS THAT A BEASTLY THING TO SAY.", {15, 4, 4, 1, 7, 10, 12, 13}}, {
        "HEY WHERE'S THE FIRE SISTER.", {12, 12, 4, 7, 7, 13}}, {
        "WHAT'S YOUR AIR READING.", {4, 15, 1, 12, 7, 13}}, {
        "HAVE YOU HEARD THE TERMS OF THE SEVENTEEN POINT AGREEMENT.", {15, 11,
          15, 4, 7, 10, 4, 8, 1, 7, 13}}, {
        "IS THAT AN OFFER.", {15, 4, 4, 7, 13}}, {
        "YOU COULD LIFT ME IN YOUR BIG STRONG ARMS.", {11, 15, 15, 12, 10, 1, 
         12, 1, 7, 13}}, {"THE BLAST.", {4, 7, 13}}, {
        "YOU NEVER HEARD OF PHYSICS EINSTEIN.", {11, 2, 15, 10, 12, 12, 
         13}}, {"CAN YOU DRIVE ME BACK NOW.", {12, 11, 15, 2, 2, 2, 13}}, {
        "TWOMBLEY.", {12, 13}}, {
        "AND WHAT IF I TRANQ HIM KELLY.", {3, 4, 10, 11, 15, 12, 12, 13}}, {
        "WE CANNOT DEFEAT THIS -- PEACE.", {12, 12, 12, 12, 12, 13, 7, 13}}, {
        "ARE YOU OKAY WADE.", {15, 11, 1, 7, 13}}, {
        "HOW ABOUT SOME AMMO.", {12, 12, 12, 12, 13}}, {
        "DOES THAT WORK.", {7, 4, 15, 13}}, {
        "HOW THE HELL DID HE GET AWAY.", {12, 4, 7, 7, 11, 15, 2, 13}}, {
        "EXCUSE ME SKIPPER--- WHAT ABOUT TIME....", {15, 12, 12, 13, 4, 12, 7,
          13}}, {"SEE THAT PATCH OF SHIRT.", {15, 4, 7, 10, 12, 13}}, {
        "DID YOU HAVE A PLEAANT FLIGHT.", {12, 11, 15, 4, 1, 7, 13}}, {
        "DO YOU HAVE YOUR OWN CELL.", {15, 11, 15, 1, 7, 7, 13}}, {
        "YOU SELL MUCH OUT HERE.", {11, 15, 12, 12, 2, 13}}, {
        "WHAT WAS SHE DOING IN YOUR APARTMENT.", {4, 15, 12, 12, 10, 1, 7, 
         13}}, {"YOU'LL GET PICKED UP.  RIGHT.", {11, 15, 15, 15, 9, 13}}, {
        "WHAT IS NOT GOOD TO YOU.", {4, 15, 2, 1, 10, 11, 13}}, {
        "DIDN'T THEY DUFFY.!", {12, 2, 12, 12, 13, 13}}, {
        "NOW WHO ELSE.", {2, 11, 2, 13}}, {
        "WHEN SHE WAS WILLING TO SACRIFICE US ALL.", {2, 12, 12, 12, 10, 15, 
         12, 7, 13}}, {
        "YOU'VE GOT A COMEBACK FOR EVERYTHING DON'T YOU DANNY.", {11, 15, 12, 
         12, 12, 10, 12, 12, 2, 11, 12, 13}}, {
        "GONNA KILL US ALL, IS THAT IT.", {12, 12, 12, 12, 7, 13, 15, 4, 11, 
         13}}, {"NOW I'M WORKING THE DROP CAR.", {2, 11, 15, 15, 4, 7, 7, 
         13}}, {"IS IT BEAUTIFUL.", {15, 11, 7, 13}}, {
        "I'M ASSUMING THAT'S WHAT MADE HIM THE DEAD ONE.", {11, 15, 15, 4, 15,
          4, 12, 12, 4, 1, 8, 13}}, {
        "PERMISSION TO LEAVE SIR.", {7, 10, 15, 7, 13}}, {
        "WHERE IS HIS HOME LEX LUTHOR.", {15, 15, 11, 12, 12, 12, 13}}, {
        "WHY THEY GOTTA MAKE MY NOSE SO BIG.", {2, 12, 15, 12, 15, 12, 12, 12,
          12, 13}}, {
        "THAT MAKES IT ALL THE MORE DIFFICULT \.97\.97 HAVE YOU ANY OTHER \
RELATIVES MARY.", {4, 15, 11, 7, 4, 1, 7, 13, 13, 15, 11, 12, 12, 12, 12, 
         13}}, {"AGRIPPA.", {12, 13}}, {"THE DOLL.", {4, 7, 13}}, {
        "REALLY THINK SO.", {12, 12, 12, 13}}, {
        "DID YOU JUST ASK ME WHAT'S A NEGRO.", {12, 11, 2, 15, 7, 4, 15, 4, 7,
          13}}, {"WHAT DO WE HAVE TO DO.", {4, 12, 12, 12, 10, 12, 13}}, {
        "DID THE RANCHER FUCK YOU.", {12, 4, 7, 7, 11, 13}}, {
        "JUST BECAUSE I DRESS WELL AND LIKE TO DANCE -- IS THERE SOMETHING \
ABOUT FLAMES.", {2, 10, 11, 15, 2, 3, 10, 10, 12, 13, 15, 12, 12, 12, 12, 
         13}}, {"HOW'S OUR DEAL COMING ALONG.", {12, 12, 12, 12, 12, 13}}, {
        "YOU HAVE ANY KIDS.", {11, 15, 12, 12, 13}}, {
        "WHAT DO YOU FEAR.", {4, 12, 11, 7, 13}}, {
        "CAN YOU MAKE IT THAT FAR.", {12, 11, 15, 11, 4, 2, 13}}, {
        "WHAT DYA MEAN.", {4, 12, 7, 13}}, {
        "HOW COULD IT BE A CHARADE.", {12, 12, 12, 15, 4, 7, 13}}, {
        "BUT WHAT IS THE REAL ISSUE HERE.", {12, 4, 15, 4, 1, 7, 2, 13}}, {
        "NOW WHY CAN'T I TELL THE STORY.", {2, 2, 12, 2, 11, 15, 4, 7, 13}}, {
        "A PSYCHIATRIST.", {4, 7, 13}}, {
        "HOW TERRIBLE CAN IT BE.", {12, 12, 12, 12, 15, 13}}, {
        "STAKE YOU.", {15, 11, 13}}, {
        "CAN YOU FIX IT.", {12, 11, 15, 11, 13}}, {
        "MANTAN IT IS POSSIBLE THAT MY HYPHENATED SENTENCES ARE ENTIRELY TOO \
COMPLEX FOR ALL THE INTELLECT CONTAINED IN THAT DIMINUTIVE COCONUT.", {12, 12,
          15, 1, 4, 12, 12, 12, 15, 2, 2, 12, 10, 7, 4, 7, 15, 10, 4, 12, 12, 
         13}}, {"THAT IT ALL SOUNDS MYSTERIOUS.", {4, 11, 7, 15, 1, 13}}, {
        "I DON'T KNOW 14000 A KILO.", {11, 15, 2, 12, 8, 4, 7, 13}}, {
        "YOU SURE YOU'VE LEFT NOTHING OUT.", {11, 15, 11, 15, 12, 12, 12, 
         13}}, {"HAVE YOU PULLED YOURSELF TOGETHER.", {15, 11, 15, 12, 2, 
         13}}, {"DON'T YOU REMEMBER.", {7, 2, 11, 15, 13}}, {
        "BOYS.", {7, 13}}, {
        "WHERE'D YOU GET THEM.", {15, 12, 11, 15, 7, 13}}, {
        "WHAT IS THE POINT IN THAT.", {4, 15, 4, 1, 10, 4, 13}}, {
        "OH GOD WHY.", {7, 7, 2, 13}}, {"GOING NORTH.", {1, 12, 13}}, {
        "YOU TWO ARE GONNA HELP ME TAME THE WILD BEAST.", {11, 8, 15, 12, 12, 
         12, 12, 12, 4, 1, 7, 13}}, {
        "BUT LOOK -- AN EMPTY TOMB.", {12, 12, 13, 4, 12, 7, 13}}, {
        "DOESN'T THE DREAM MASTER WORK FOR YOU ANYMORE.", {7, 2, 4, 7, 7, 15, 
         10, 11, 2, 13}}, {
        "WHILE YOU'RE WAITING FOR YOUR FRIEND WOULD YOU LIKE TO SEE SOME NEW \
FIGURES I HAVE DOWNSTAIRS.", {10, 11, 15, 12, 10, 1, 7, 15, 11, 10, 10, 15, 
         12, 12, 7, 11, 15, 7, 13}}, {
        "WHERE THE FUCK ARE THEY GOING.", {15, 4, 7, 15, 7, 7, 13}}, {
        "THAT'S THE KIND OF MONEY IT TAKES ISN'T IT.", {4, 15, 4, 7, 10, 7, 
         11, 15, 15, 2, 11, 13}}, {
        "EVERYONE SAYS THIS IS A BIG ACCIDENT.", {7, 15, 12, 15, 4, 12, 12, 
         13}}, {"IS IT YES.", {15, 11, 7, 13}}, {
        "WHERE ARE THEY THEN.", {15, 15, 7, 2, 13}}, {
        "NO ROSE JESUS NO -- DO YOU HAVE ANY CHILDREN WITH ANYONE.", {7, 15, 
         12, 7, 13, 12, 11, 15, 12, 7, 10, 7, 13}}, {
        "DALUTAN! ...'SCUSE ME.", {12, 13, 13, 13, 15, 7, 13}}, {
        "TIRING ISN'T IT.", {15, 15, 2, 11, 13}}, {
        "THIS PACKAGE WHATEVER IT IS DO YOU GIVE IT TO THE CIA.  DO YOU \
REALLY THINK THEY DESERVE IT.", {12, 12, 12, 12, 15, 12, 11, 15, 11, 10, 4, 
         12, 13, 15, 11, 2, 15, 12, 12, 12, 13}}, {
        "WHERE'D THEY COME FROM.", {15, 12, 12, 12, 12, 13}}, {
        "IT'S PAY DAY AIN'T IT.", {11, 15, 7, 7, 7, 2, 11, 13}}, {
        "WHERE ARE YOUR FOLKS.", {15, 15, 1, 7, 13}}, {
        "HONEY'S DEAD.", {7, 7, 13}}, {"YOU'RE POLISH.", {11, 15, 7, 13}}, {
        "WHAT KIND OF FILES.", {4, 12, 10, 12, 13}}, {
        "DO ME.", {12, 12, 13}}, {
        "DON'T YOU KNOW WHAT CAEN'S FAMOUS FOR SARGE.", {7, 2, 11, 15, 4, 12, 
         12, 10, 12, 13}}, {"HOW 'BOUT THIS ONE.", {12, 13, 12, 12, 8, 13}}, {
        "WHAT'S THE OCCASION.", {4, 15, 4, 7, 13}}, {
        "HE'S A GUEST IN MY HOUSE ISN'T HE.", {11, 15, 4, 7, 10, 12, 12, 15, 
         2, 11, 13}}, {
        "YOU'RE NOT GONNA STAY FOR THE ICE CREAM.", {11, 15, 2, 12, 12, 12, 
         10, 4, 7, 7, 13}}, {
        "BOY YOU GUYS ARE REALLY SOMETHING Y'KNOW.", {7, 11, 15, 15, 12, 12, 
         12, 12, 13}}, {
        "WHAT ARE YOU WAITING FOR.", {4, 15, 11, 15, 10, 13}}, {
        "WHAT BUSINESS IS YOU IN JACK.", {4, 12, 15, 11, 10, 12, 13}}, {
        "YOU BURN YOU PINE YOU PERISH.", {11, 15, 11, 15, 11, 15, 13}}, {
        "NOW HOW SMART IS THAT.", {2, 12, 12, 15, 4, 13}}, {
        "EDDIE ARE YOU OKAY.", {12, 15, 11, 1, 13}}, {
        "NOT YET -- GIVE YOU THE CLUE FOR THE BUST IF YOU SHOW ME SOME TRUST \
-- OH YOU'RE A RAPPER HUH.", {12, 12, 13, 15, 11, 4, 7, 10, 4, 7, 10, 11, 15, 
         12, 12, 12, 13, 7, 11, 15, 4, 7, 12, 13}}, {
        "IS THAT A TRICK QUESTION.", {15, 4, 4, 7, 7, 13}}, {
        "WHAT POINT IS THAT.", {4, 1, 15, 4, 13}}, {
        "IT ISN'T RAPE THEN IS IT.", {11, 15, 2, 7, 2, 15, 11, 13}}, {
        "ANY SORT OF ABUSE.", {12, 12, 10, 7, 13}}, {
        "COOPER TRUST ROBBERY.", {12, 12, 12, 13}}, {
        "YOU THINK FOR ONCE WE COULD TALK ABOUT SOMETHING BESIDES \
BASKETBALL.", {11, 15, 10, 2, 1, 12, 12, 12, 12, 10, 7, 13}}, {
        "OR DO YOU THINK YOU CAN FIND THE AIRPORT BY YOURSELF.", {7, 7, 11, 
         15, 11, 12, 12, 4, 12, 12, 12, 13}}, {
        "WHAT DO YOU REMEMBER ABOUT THAT -- DUMPER.", {4, 12, 11, 15, 10, 4, 
         13, 7, 13}}, {
        "HAVE A SNIFF OF THIS WHY DON'T YOU.", {15, 4, 7, 10, 12, 2, 12, 2, 
         11, 13}}, {"PIMPS.", {7, 13}}, {
        "HOW OLD. ...WHAT.", {12, 12, 13, 13, 13}}, {
        "YOU GOT SOMETHIN' AGAINST THE CAP'N.", {11, 15, 12, 12, 4, 7, 13}}, {
        "WHY'D YOU DO THAT.", {2, 12, 11, 15, 4, 13}}, {
        "YOU HAVE SOMETHING DR. WEIR.", {11, 15, 12, 12}}, {
        "YOU THINK I'M SILLY DON'T YOU.", {11, 15, 11, 15, 1, 7, 2, 11, 
         13}}, {"WHAT DO MY EYES SEE.", {4, 12, 12, 12, 15, 13}}, {
        "BUT WHAT BECAME OF YOUR LAMB.", {12, 4, 15, 10, 1, 7, 13}}, {
        "WHAT'S HERE.", {4, 15, 2, 13}}, {
        "IS DETECTIVE GORDON GOING TO BE AT YOUR HOUSE.", {15, 12, 12, 12, 10,
          15, 10, 1, 12, 13}}, {"WHAT HAPPENS HERE.", {4, 15, 2, 13}}, {
        "WHY DON'T YOU HAVE MORE TIME.", {2, 12, 2, 11, 15, 1, 7, 13}}, {
        "-- DO YOU WANNA CUP.", {13, 7, 11, 15, 12, 12, 13}}, {
        "HUH...", {12, 13}}, {
        "NOW DARLIN' WHAT HAS THE SOUTH GOT TO DO WITH THIS.", {12, 12, 4, 15,
          4, 1, 12, 10, 12, 10, 7, 13}}, {
        "UH YEAH COOP I'M STILL HERE. ...DO YOU COPY.", {12, 12, 12, 11, 15, 
         2, 2, 13, 13}}, {"SO...THE STATION IS EMPTY.", {12, 13}}, {
        "HAVE THEY LOCATED MY DAUGHTER YET.", {15, 12, 12, 12, 12, 12, 13}}, {
        "MAY I SPEAK FREELY.", {12, 11, 15, 2, 13}}, {
        "JASON WHAT HAVE YOU GOTTEN US INTO.", {12, 4, 12, 11, 15, 12, 12, 
         13}}, {"NIGHTCAP.", {7, 13}}, {
        "WHAT HAPPEND TO YOU.", {4, 12, 10, 11, 13}}, {
        "ON THE DAY OF THE MURDERS  WHAT DID THE DEFENDANT REQUEST.", {10, 4, 
         7, 10, 4, 7, 4, 15, 4, 7, 7, 13}}, {
        "ARE YOU DEAF TOO.", {15, 11, 1, 7, 13}}, {
        "HOW COME YOU TOOK SO MUCH INTEREST IN HER DR. DARLING.", {12, 12, 11,
          15, 12, 12, 7, 10, 12, 12, 12, 13}}, {
        "THEN WHAT ARE YOU DOING HERE.", {2, 4, 15, 11, 15, 2, 13}}, {
        "LONG ENOUGH FOR YOU TO PRETTY MUCH READ ME LIKE A BOOK RIGHT.", {12, 
         12, 10, 11, 10, 12, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "SO WHAT DEAD-END STREET DID YOU AND SHAWNEE HIT.", {12, 4, 1, 12, 12,
          11, 3, 12, 12, 13}}, {
        "WANT TO REGISTER PLEASE.", {1, 10, 12, 12, 13}}, {
        "FLEA.", {7, 13}}, {
        "IF SHE HAD WHAT REASON WOULD SHE HAVE FOR NOT CALLING YOU.", {10, 12,
          12, 4, 12, 12, 12, 12, 10, 12, 12, 11, 13}}, {
        "YOU'RE GOING TO GET YOURSELF UP AND GO OUT.", {11, 15, 1, 10, 15, 1, 
         7, 3, 7, 7, 13}}, {
        "ARE YOU TWO ALL RIGHT.", {15, 11, 8, 7, 7, 13}}, {
        "WHAT SIR.", {4, 7, 13}}, {
        "IS THAT A GOOD SIGN DOCTOR.", {15, 4, 4, 1, 7, 7, 13}}, {
        "WHERE'S THE HANDLE.", {7, 4, 7, 13}}, {
        "BUT WHAT ARE YOU DOING MIXED UP IN ALL THIS.", {12, 4, 15, 11, 15, 
         15, 9, 10, 7, 7, 13}}, {
        "NOW...WHEN DO I GET A TASTE.", {2, 13, 13}}, {
        "YOU WROTE IT DIDN'T YOU.", {11, 15, 11, 15, 2, 11, 13}}, {
        "MARK ARE YOU OKAY.", {12, 15, 11, 1, 13}}, {
        "IS IT TRUE THE MOST YOU'VE EVER MADE IN A PRIZEFIGHT IS FIVE HUNDRED \
DOLLARS.", {15, 11, 1, 4, 1, 11, 15, 2, 15, 10, 4, 12, 15, 8, 15, 12, 13}}, {
        "HOW LONG THEY BEEN LIVIN' HERE.", {12, 12, 12, 12, 12, 2, 13}}, {
        "DOES THAT SCARE YOU.", {7, 4, 15, 11, 13}}, {
        "BAUMGARTNER SOUND IRISH TO YOU FUCK FACE.", {12, 12, 12, 10, 11, 15, 
         7, 13}}, {
        "WHY DIDN'T YOU TELL US ALL THIS IN THE FIRST PLACE.", {2, 12, 2, 11, 
         15, 12, 7, 15, 10, 4, 12, 7, 13}}, {"WE'RE IN.", {12, 12, 10, 13}}, {
        "NO SIR-- PRIVATE JOHNSON ARE YOU UNHAPPY IN THE ARMY.", {7, 7, 13, 
         12, 12, 15, 11, 1, 10, 4, 7, 13}}, {
        "YOU MEAN YOU'VE ACTUALLY BEGUN SOME.", {11, 15, 11, 15, 12, 12, 12, 
         13}}, {"DON'T YOU REALIZE YOUR WORDS COULD BE CONSIDERED \
HERETICAL.", {7, 2, 11, 15, 1, 7, 15, 15, 15, 1, 13}}, {
        "HOW DO I GET IN TOUCH WITH YOU.", {12, 12, 11, 15, 10, 7, 10, 11, 
         13}}, {"IS YOUR FAMILY IN THE APPLE BUSINESS TOO.", {15, 1, 7, 10, 4,
          12, 12, 12, 13}}, {"YOU'RE WHAT.!", {11, 15, 4, 13}}, {
        "BUT IF THEY <U>DO</U>.", {12, 10, 12, 12, 12, 12, 13}}, {
        "YES THEY DO, THEY DO, BUT I'LL MAKE MY DREAMS COME TRUE, YOU SEE.", {
         12, 12, 12, 13, 12, 12, 13, 12, 11, 15, 15, 7, 7, 15, 1, 13, 11, 15, 
         13}}, {"YELLO.", {12, 13}}, {
        "THAT REALLY HAPPENED.", {4, 1, 7, 13}}, {
        "SHE'S ALIVE.", {12, 12, 13}}, {
        "YOU WANT TO HAVE KIDS WITH HIM.", {11, 15, 10, 12, 12, 10, 12, 
         13}}, {"WE FINISHED THE COURSE AND CAME HERE THEN HEARD AN EXPLOSION \
--  WHERE'S PIKE.", {12, 12, 4, 12, 3, 12, 2, 2, 15, 4, 12, 13, 15, 12, 
         13}}, {"CAN I SEE YOUR SECURITY BADGES.", {12, 11, 15, 1, 7, 7, 
         13}}, {"IS IT GASSED UP.", {15, 11, 15, 9, 13}}, {
        "WHAT ABOUT A DRINK ON THE WAY HOME.", {4, 10, 4, 7, 10, 4, 12, 12, 
         13}}, {"YOU WOKE ME UP TO TELL ME THAT.", {11, 15, 12, 9, 10, 12, 12,
          4, 13}}, {"OH YEAH HOW.", {7, 7, 7, 13}}, {
        "DON'T YOU CARE WHAT THE PEOPLE WILL SAY.", {7, 2, 11, 12, 4, 4, 12, 
         15, 15, 13}}, {
        "IN VIEW OF YOUR INDECISION WHY NOT RELY ON THEIR ADVICE AND JUDGMENT \
AS WELL AS MINE.", {10, 12, 10, 1, 7, 2, 12, 12, 12, 12, 12, 3, 12, 12, 12, 
         12, 12, 13}}, {"YOU A SENIOR.", {11, 4, 1, 13}}, {
        "HOW DO WE DO THIS THEN.", {12, 12, 12, 12, 12, 2, 13}}, {
        "ALL IT TAKES IS ONE SECOND.", {7, 11, 15, 15, 8, 7, 13}}, {
        "DID YOU CALL THE COPS.", {12, 11, 1, 4, 7, 13}}, {
        "FOUR DOOR.", {8, 7, 13}}, {
        "WHATTA YOU GET OUTTA THIS. ...I'M DOIN' IT FOR A FRIEND.", {12, 11, 
         15, 1, 7, 13, 13, 11, 15, 7, 13, 11, 10, 4, 7, 13}}, {
        "SO ARE YOU LIKE GONNA POLISH OUR NOBS OR WHAT.", {12, 15, 11, 10, 12,
          12, 12, 12, 12, 7, 4, 13}}, {"YES CAPTAIN.", {2, 7, 13}}, {
        "THEY DON'T.", {12, 12, 2, 13}}, {
        "I'M NOT SURE I HEAR A QUESTION IN THERE.", {11, 15, 2, 1, 11, 15, 4, 
         7, 10, 7, 13}}, {"WHERE'D YOU GET IT.", {15, 12, 11, 15, 11, 13}}, {
        "MAKING A LOT OF MONEY HUH.", {15, 4, 7, 10, 7, 12, 13}}, {
        "MUFFY -- COFFEE.", {12, 13, 7, 13}}, {
        "BUSY WHEN YOU WERE GONE LAST YEAR -- WHERE WERE YOU.", {1, 2, 11, 15,
          12, 12, 12, 13, 12, 15, 11, 13}}, {
        "I'II GO....IS IT...BACK HERE.", {11, 13, 8, 7, 13}}, {
        "THEN WHY CAN'T I GO IN THERE.", {2, 2, 12, 2, 11, 15, 10, 7, 13}}, {
        "DID YOU MAKE THOSE INQUIRIES WE SPOKE ABOUT. ...AS I SAID IT'S ONLY \
A PHYSICAL PROBLEM...", {12, 11, 15, 4, 12, 12, 12, 12, 13, 13, 10, 11, 15, 
         11, 15, 12, 12, 12, 7, 13}}, {
        "WE CHANGE THE SCAM.", {12, 12, 4, 7, 13}}, {
        "YOU THINK MAGRUDER WANTS TO HANG BESIDE ME.", {11, 15, 12, 12, 10, 
         15, 10, 7, 13}}, {"MR. PIZZA.", {12, 12, 13}}, {
        "YOU DON'T KNOW ANY WAY YOU'LL TRUST ME.", {11, 15, 2, 12, 12, 12, 11,
          15, 7, 7, 13}}, {
        "IT'S A ZOO BACK THERE -- IS THAT WHY YOU DID IT.", {11, 15, 4, 7, 2, 
         15, 13, 15, 4, 2, 11, 15, 11, 13}}, {
        "CAN YOU CONFIRM VISUALLY OR JUST RADAR.", {12, 11, 15, 2, 7, 2, 7, 
         13}}, {"IF HIS FRIENDS DON'T HELP HIM WHO IS GOING TO HELP HIM.", {
         10, 11, 7, 15, 2, 15, 12, 11, 15, 12, 10, 15, 7, 13}}, {
        "WHY DOES IT ALL MEAN SO MUCH TO YOU.", {2, 15, 11, 7, 7, 2, 12, 10, 
         11, 13}}, {"THIS IS -- WHAT.", {12, 15, 13, 4, 13}}, {
        "YOU STILL WANT TO GO TO ASGAARD.", {11, 2, 15, 10, 12, 10, 12, 
         13}}, {"WHAT TIME ARE WE SUPPOSED TO GET TO THE HOTEL.", {4, 12, 15, 
         1, 1, 10, 15, 10, 4, 7, 13}}, {
        "ROSE WHO WERE THOSE SCOUNDRELS IN BIRMINGHAM.", {12, 11, 15, 4, 12, 
         10, 12, 13}}, {
        "JUST WHAT ARE YOU UP TO.", {2, 4, 15, 11, 9, 10, 13}}, {
        "LLOYD HONEY JUST COME HOME OKAY.", {12, 12, 2, 15, 12, 12, 13}}, {
        "CONINUED WELL WHAT IS IT.", {12, 12, 4, 15, 11, 13}}, {
        "HOW IS IT YOU COME TO BE HERE.", {12, 15, 11, 11, 15, 10, 15, 2, 
         13}}, {"WILL YOU SHUT UP!.!!", {15, 11, 15, 9, 13, 13, 13}}, {
        "WHAT ABOUT MARGO WEST.", {4, 12, 12, 12, 13}}, {
        "YOU CAN SEE WHY IT'S SENSITIVE.", {11, 15, 15, 2, 11, 15, 12, 13}}, {
        "DID YA WIN.", {12, 12, 12, 13}}, {"BANK.", {12, 13}}, {
        "DO YOU HAVE THE SUSPECT IN CUSTODY.", {15, 11, 15, 4, 1, 10, 7, 
         13}}, {"WORK RELATED OR OTHERWISE.", {15, 12, 7, 12, 13}}, {
        "SO THAT'S ALL YOU DO....", {12, 4, 15, 7, 11, 15, 13}}, {
        "MORNING AFTER. ...I'M AT LEAST HALF A BUM.", {15, 7, 13, 13, 11, 15, 
         10, 12, 12, 12, 12, 13}}, {
        "YOU DON'T WONDER THAT.", {11, 15, 2, 12, 4, 13}}, {
        "WHAT MAKES YOU THINK YOU CAN ORDER ME AROUND.", {4, 15, 11, 15, 11, 
         12, 12, 12, 12, 13}}, {
        "WHY ADD TO YOUR MISERY BY CONFESSING TO MURDER.", {2, 12, 10, 1, 7, 
         10, 15, 10, 7, 13}}, {
        "WHY DIDN'T YOU CALL IN FOR BACKUP INSTEAD OF MAKIN' A GRANDSTAND \
PLAY.", {2, 12, 2, 11, 1, 10, 10, 7, 2, 10, 12, 4, 7, 7, 13}}, {
        "AND WHEN THE OTHER RABBITS HEAR OF FIVER'S VISION DO THEY BELIEVE \
HIM.", {3, 2, 4, 1, 7, 15, 10, 12, 12, 12, 12, 12, 12, 13}}, {
        "ME I'M KINDA AGGRAVATED. ...FINE. ...HOW'S THE TURTLE FOOD THIS \
WEEK.", {7, 8, 15, 12, 12, 13, 13, 13}}, {
        "ON WHAT GROUNDS.", {10, 4, 7, 13}}, {
        "HOW ABOUT THIS CHILD.", {12, 12, 12, 7, 13}}, {
        "HOW CAN THEY KNOW ANY OF THAT.", {12, 12, 12, 12, 12, 10, 4, 13}}, {
        "ANYWAY WHAT THE FUCK DO YOU CARE.", {2, 4, 4, 7, 7, 11, 12, 13}}, {
        "WELL THAT'S WHAT YOU THINK ISN'T IT.", {12, 4, 15, 4, 11, 15, 15, 2, 
         11, 13}}, {"ANYBODY SEE MY BOY.", {7, 15, 7, 7, 13}}, {
        "MAY WE PROCEED WITH THE BUSINESS.", {12, 12, 12, 10, 4, 7, 13}}, {
        "THAT BUGS YOU TOO.", {4, 7, 11, 2, 13}}, {
        "WHERE THE FUCK ARE YOU GOING.", {15, 4, 7, 15, 11, 1, 13}}, {
        "WHAT THE FUCK POSSESSED YOU.", {4, 4, 12, 15, 11, 13}}, {
        "SHE IS NOT DEAD.", {12, 15, 12, 12, 13}}, {
        "WHAT GAPS.", {4, 7, 13}}, {
        "Y'KNOW TO MAKE IT SO LONG.", {12, 12, 10, 15, 11, 12, 12, 13}}, {
        "YOU BELIEVE ME DON'T CHA.", {11, 15, 7, 7, 2, 12, 13}}, {
        "YOU LIKE THE CAR.", {11, 10, 4, 7, 13}}, {
        "ROSE ROSE.", {12, 12, 13}}, {
        "WHAT DO YOU WANT TO DO WITH IT.", {4, 12, 11, 15, 10, 12, 10, 11, 
         13}}, {"I DON'T KNOW YOU THINK EDDIE WILL GIVE ME HIS AUTOGRAPH.", {
         11, 15, 2, 12, 11, 15, 12, 15, 15, 7, 11, 7, 13}}, {
        "WHAT TERRIBLE THING IN CAVE SPRINGS.", {4, 1, 7, 10, 12, 12, 13}}, {
        "HOW'D IT GO IN THERE.", {12, 12, 12, 12, 10, 12, 13}}, {
        "A MAN OR A MOUSE.", {4, 7, 7, 7, 7, 13}}, {
        "IS SHE AROUND.", {15, 12, 12, 13}}, {
        "JACK'S PRETTY TOUGH ON YOU ISN'T HE.", {7, 2, 1, 10, 11, 15, 2, 11, 
         13}}, {"AND DO WE HAVE ANY OF THAT BREAKFAST TEA AROUND HERE.", {3, 
         12, 12, 12, 12, 10, 4, 7, 7, 10, 2, 13}}, {
        "YOU MEAN RAY DUNBAR.", {11, 15, 12, 12, 13}}, {
        "WHAT VARIABLES.", {4, 7, 13}}, {
        "WHERE ARE MY GODDAMN BOOKS.", {15, 15, 7, 1, 7, 13}}, {
        "OH -- WELL I THOUGHT HE ONCE MENTIONED -- WHY WOULD YOU SUPPOSE \
SO.", {7, 13, 7, 11, 15, 11, 2, 15, 13, 2, 12, 11, 15, 2, 13}}, {
        "WHAT ARE YOU NUTS.", {4, 15, 11, 7, 13}}, {
        "THAT THE BIG PLAN.", {4, 4, 12, 7, 13}}, {"A LITTLE.", {4, 7, 13}}, {
        "WHAT'S TO EAT.", {4, 15, 10, 15, 13}}, {
        "THEY WILL SEND A NURSE SOMEONE WHO CAN TAKE CARE OF ALL OF THAT FOR \
YOU -- I JUST I JUST -- I JUST -- I'M JUST IN A FUCKING STATE I KNOW HE'S \
GOING AND IT'S LIKE I DON'T KNOW HOW -- JUST TELL ME <U>PRACTICAL</U> THINGS \
-- WHAT THE FUCK DO I DO WITH HIS BODY.", {12, 15, 15, 4, 7, 7, 11, 12, 15, 
         12, 10, 7, 10, 4, 10, 11, 13, 11, 2, 11, 2, 13, 11, 2, 13, 11, 15, 2,
          10, 4, 1, 7, 11, 15, 11, 15, 1, 3, 11, 15, 10, 11, 15, 2, 12, 12, 
         13, 2, 15, 7, 12, 12, 12, 12, 13, 4, 4, 7, 7, 11, 15, 10, 11, 7, 
         13}}, {"YOU KNOW HOW LONG IT'S BEEN SINCE I WAS BEHIND THE WHEEL.", {
         11, 15, 12, 12, 12, 12, 10, 11, 15, 10, 4, 7, 13}}, {
        "ANY OTHER VICES.", {12, 12, 7, 13}}, {
        "WHAT BANK ARE YOU WITH.", {4, 12, 15, 11, 10, 13}}, {
        "MAYBE WE'VE BEEN PRETTY DUMB-- NOT TOO HARD IS IT.", {2, 12, 12, 12, 
         2, 1, 13, 2, 2, 1, 15, 11, 13}}, {
        "NO DID HE TELL YOU ABOUT IT.", {4, 12, 11, 15, 11, 10, 11, 13}}, {
        "YOU WANNA GO HOME.", {11, 15, 12, 12, 12, 13}}, {
        "ARE YOU SURE YOU EVEN PACKED IT.", {15, 11, 15, 11, 2, 15, 11, 
         13}}, {"WHAT THE HELL ARE YOU DOIN' IN THERE. ...", {4, 4, 7, 15, 11,
          7, 13, 10, 12, 13, 13}}, {
        "DO YOU HAVE ANYTHING DEROGATORY TO SAY ABOUT THE CHAMPION.", {15, 11,
          15, 12, 12, 10, 12, 12, 4, 7, 13}}, {
        "DON'T WANNA GET YOUR DADDY IN HOT WATER DO YOU.", {7, 2, 12, 12, 15, 
         1, 12, 10, 12, 12, 12, 11, 13}}, {
        "WOULD THEY BURN.", {12, 12, 12, 13}}, {
        "WHEN *DOESN'T* HE HAVE BRONCHITIS.", {2, 14, 15, 2, 14, 11, 15, 7, 
         13}}, {"WHY THE CROSSOVER.", {2, 4, 7, 13}}, {
        "CRYSTALLIZED. ...HOW'S THE CLIENT.", {12, 13, 13, 13}}, {
        "SO WHAT ARE YOU SEEING.", {12, 4, 15, 11, 15, 13}}, {
        "WHERE'RE YOU HIT.", {15, 7, 11, 15, 13}}, {
        "YOU WANT TO GET INTO A FINGER POINTING CONTEST ABOUT CHARACTER.", {
         11, 15, 10, 15, 10, 4, 7, 15, 7, 10, 7, 13}}, {
        "WHAT IS SHE DOING <U>NOW</U>.", {4, 15, 12, 12, 12, 12, 12, 13}}, {
        "BUT ARE HURONS DOGS.  ...MAGUA'S WAY IS FALSE.", {12, 15, 12, 7, 13, 
         13, 12, 12, 15, 12, 13}}, {
        "HAD THAT SHAKING THING WHATD'YACALL IT EPOXY.", {12, 4, 12, 7, 15, 
         13, 12, 12, 12, 13}}, {
        "HAS THAT GIRL -- HAS THEA EVER TOLD YOU WHERE SHE COMES FROM.", {15, 
         4, 7, 13, 15, 12, 12, 15, 11, 15, 12, 15, 12, 13}}, {
        "YOU WANNA KILL YOURSELF THAT IT YOU LOOKING TO COMMIT SOME KIND OF \
DIVINE SUICIDE.", {11, 15, 12, 12, 12, 4, 11, 11, 15, 10, 12, 12, 12, 10, 12, 
         12, 13}}, {
        "WHY NOT JUST BUY YOUR BABY A NIGHT LIGHT.", {2, 2, 2, 15, 1, 7, 4, 
         12, 12, 13}}, {
        "YOU BEEN ON PROZAC LONG.", {11, 15, 10, 12, 12, 13}}, {
        "WAS GOD EXPECTING ME TO OFFER FORGIVENESS IN THE FACE OF EVERY \
OFFENSE NO MATTER HOW PAINFUL.", {12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 10, 
         12, 12, 7, 7, 12, 12, 13}}, {
        "IF YOU DIDN'T KILL HIM THEN WHO DID.", {10, 11, 15, 2, 15, 7, 2, 11, 
         15, 13}}, {"AND SHALLOW AS WELL.", {3, 1, 1, 7, 13}}, {
        "WHERE IS ROB.", {15, 15, 12, 13}}, {
        "SATISFIED WITH YOUR CABIN.", {1, 10, 1, 7, 13}}, {
        "HOW HARD DO YOU THINK IT IS TO SELL ONE DRUG DEALER'S DRUGS TO \
ANOTHER DRUG DEALER.", {12, 12, 12, 11, 15, 11, 15, 10, 15, 8, 7, 7, 7, 10, 
         12, 7, 7, 13}}, {
        "RODERICK I'M GONNA HAVE TO CITE YOU FOR A VIOLATION OF STATE LAW-- \
NO SHERIFF I'M JUST-- YOU TELLING ME WHAT TO DO RODERICK.", {12, 11, 15, 12, 
         12, 12, 10, 15, 11, 10, 4, 7, 10, 12, 12, 13, 7, 7, 11, 15, 2, 13, 
         11, 15, 7, 4, 10, 12, 12, 13}}, {
        "SO THAT'S IT JUST FORGET ABOUT US.", {12, 4, 15, 11, 2, 15, 10, 12, 
         13}}, {"SURE YOU'RE OKAY.", {1, 11, 15, 12, 13}}, {
        "JUST TO LEAVE HER LIKE THAT.", {2, 10, 15, 12, 12, 4, 13}}, {
        "WHAT DO HERBS HAVE TO DO WITH IT.", {4, 12, 12, 12, 10, 12, 10, 11, 
         13}}, {"ARE YOU STILL WITH US.", {15, 11, 2, 10, 12, 13}}, {
        "WHAT ABOUT.", {4, 12, 13}}, {
        "WHY PICK ON HIM .", {2, 12, 12, 12, 13}}, {
        "DID YOU KNOW THAT'S WRITTEN IN THE CONSTITUTION OF THE UNITED \
STATES.", {12, 11, 15, 4, 15, 12, 10, 4, 12, 10, 4, 12, 7, 13}}, {
        "WHERE DO YOU WANT TO GO.", {15, 12, 11, 15, 10, 12, 13}}, {
        "YOU'VE HEARD NOTHING ABOUT THE INCIDENT.", {11, 15, 15, 15, 10, 4, 7,
          13}}, {"YOU THINK THEY SOLD ME OUT.", {11, 15, 12, 12, 12, 12, 
         13}}, {"IF GOD HAD INTENDED MAN TO FLY HE WOULD HAVE GIVEN US \
WINGS.", {10, 7, 7, 15, 7, 10, 15, 11, 12, 12, 12, 12, 12, 13}}, {
        "PRETTY RIDICULOUS ISN'T IT.", {2, 1, 15, 2, 11, 13}}, {
        "DO YOU HAVE ANY WITNESSES OR FINGERPRINTS.", {15, 11, 15, 12, 12, 7, 
         7, 13}}, {"HOW'S AUSTIN.", {12, 12, 13}}, {
        "HE SQUEEZED MONEY OUT OF YOU.", {11, 15, 7, 7, 10, 11, 13}}, {
        "SO YOU WERE NEVER A PROSTITUTE.", {12, 11, 15, 7, 4, 7, 13}}, {
        "MAY I BE QUITE FRANK WITH YOU.", {12, 11, 15, 1, 7, 10, 11, 13}}, {
        "WHAT ARE YOU TALKING ABOUT FELLA.", {4, 15, 11, 15, 10, 7, 13}}, {
        "DO THEY HAVE PRESSURE.", {12, 12, 12, 7, 13}}, {
        "TWO OF US DIED IN THE LAST TWO DAYS DOES THAT STRIKE YOU AS \
PARTICULARLY NORMAL.", {8, 10, 12, 15, 10, 4, 7, 8, 7, 15, 4, 15, 11, 1, 7, 7,
          13}}, {"THE UH CYNTHIA BRANSON ESTATE WAS WORTH HOW MUCH.", {4, 12, 
         12, 12, 12, 12, 12, 12, 12, 13}}, {
        "PERHAPS YOUR DEAR WIFE MIGHT CARE TO PROFIT FROM MY INSTRUCTION.", {
         2, 1, 7, 7, 12, 12, 10, 12, 12, 12, 12, 13}}, {
        "SHOULD WE STAY HERE.", {15, 15, 12, 2, 13}}, {
        "YEAH. ...LEELOO.", {2, 13, 13, 12, 13}}, {
        "WHY DO YOU WANT TO GO BACK AFTER ALL THIS.", {2, 12, 11, 1, 10, 15, 
         2, 10, 7, 7, 13}}, {
        "ARE YOU ON ONE OF THOSE CONFERENCE CALLS.", {15, 11, 10, 8, 10, 4, 
         12, 12, 13}}, {"YOU MEAN SOMEBODY ASKED.", {11, 15, 12, 12, 13}}, {
        "THE HOLIDAY INN.", {4, 7, 7, 13}}, {
        "WHAT DO YOU WANT FROM ME COLETTE.", {4, 12, 11, 15, 10, 12, 12, 
         13}}, {"WHAT'S THAT IDIOT DOING NEXT DOOR.", {4, 15, 4, 12, 12, 12, 
         7, 13}}, {
        "NOW WHAT'S WRONG WITH NATURE HUH.", {2, 4, 15, 1, 10, 7, 12, 13}}, {
        "WHAT WOULD YOU CALL IT.", {4, 15, 11, 1, 12, 13}}, {
        "IF YOU FOUND THIS DEED WHY DIDN'T YOU JUST ASK EDDIE.", {10, 11, 15, 
         7, 15, 2, 12, 2, 11, 2, 15, 12, 13}}, {
        "SHE TRIUMPHED OVER EVERYTHING WHAT ARE YOU BLUBBERING ABOUT.", {12, 
         15, 10, 15, 4, 15, 11, 15, 12, 13}}, {
        "SO WHY'RE YOU EVEN CONSIDERING IT.", {12, 2, 7, 11, 2, 15, 11, 
         13}}, {"WHERE DO YOU LIVE JACK.", {15, 12, 11, 15, 7, 13}}, {
        "BUT DID THEY TEACH YOU THIS.", {12, 12, 12, 15, 11, 7, 13}}, {
        "GOT OUT OF MY OTHER COMMITMENT. ...YOU WANNA WORK -- HERE.", {12, 12,
          10, 12, 12, 12, 13, 13, 11, 12, 12, 15, 13, 2, 13}}, {
        "DO YOU LOVE THEM.", {15, 11, 15, 7, 13}}, {
        "WHAT DO WE HAVE.", {4, 12, 12, 12, 13}}, {
        "HE TOLD YOU HE WASN'T COMING RIGHT BACK CAUSE HE WANTED TO QUESTION \
NORMAN BATES' MOTHER RIGHT.", {11, 15, 11, 11, 15, 2, 15, 7, 2, 15, 11, 15, 
         10, 12, 12, 12, 12, 12, 13}}, {
        "WHAT DO YOU LIKE BEST ABOUT YOUR DADDY.", {4, 12, 11, 10, 12, 12, 1, 
         7, 13}}, {"YOU DON'T READ DO YOU.", {11, 15, 2, 15, 7, 11, 13}}, {
        "DON'T TELL ME YOU DON'T KNOW HOW ALL THIS WORKS.", {7, 2, 15, 7, 11, 
         15, 2, 12, 12, 7, 7, 15, 13}}, {
        "MAYBE I SHOULD JUST YA KNOW...TURN TO THE CAMERAS AND SAY DO YOU \
MIND IF WE JUST WORK SOMETHING OUT.", {2, 11, 15, 2, 15, 12, 13, 13}}, {
        "AND I'VE GOT A TEST TOMORROW ON - WELL.", {3, 11, 15, 7, 4, 7, 7, 10,
          13, 7, 13}}, {
        "YOU THINK GOD FORGIVES PEOPLE LIKE ME.", {11, 15, 7, 15, 7, 10, 7, 
         13}}, {"WHAT DIRECTION DOES THE SYSTEM INDICATE.", {4, 12, 15, 4, 12,
          12, 13}}, {
        "ARE THEY ALL IN THE BUSINESS.", {15, 12, 7, 10, 4, 7, 13}}, {
        "WHAT'S THE MATTER WITH BJORN.", {4, 15, 4, 7, 10, 7, 13}}, {
        "BIG-ASS TITTIES.", {1, 7, 13}}, {
        "WHY DO YOU ALWAYS ANSWER A QUESTION WITH A QUESTION.", {2, 12, 11, 1,
          7, 4, 7, 10, 4, 7, 13}}, {
        "WHAT YOU GONNA PUT ME ON YOUR CHRISTMAS CARD LIST.", {4, 11, 12, 12, 
         12, 12, 12, 1, 12, 12, 7, 13}}, {
        "WHO'S LACERDA, HE'S WAITING FOR US IN A ROOM ON THE TWELFTH FLOOR.", \
{11, 15, 12, 13, 11, 15, 12, 10, 12, 10, 4, 7, 10, 4, 1, 7, 13}}, {
        "YOU HAVE NOT MET A MAN WORTHY OF YOUR ATTENTION.", {11, 15, 2, 7, 4, 
         7, 1, 10, 1, 7, 13}}, {
        "HAVE YOU SEEN MY GLASSES.", {15, 11, 15, 12, 12, 13}}, {
        "AND YOU STILL MAINTAIN -- WHAT.", {3, 11, 2, 15, 13, 4, 13}}, {
        "SO HOW IS IT THAT YOU GUYS ARE FLUENT IN RUSSIAN.", {12, 12, 15, 11, 
         4, 11, 15, 15, 1, 10, 12, 13}}, {
        "HAS MR. KESSLER SAID ANYTHING REGARDING THE ATTACK ON THE MOORS.", {
         15, 12, 12, 15, 12, 12, 4, 7, 10, 4, 7, 13}}, {
        "ANGELA.", {12, 13}}, {
        "WAS EVER BOOK CONTAINING SUCH VILE MATTER'S SO FAIRLY BOUND.", {12, 
         12, 12, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "YOU HEAR ME PRIVATE.", {11, 15, 2, 12, 13}}, {
        "DO YOU THINK THAT GUY'S CUTE.", {15, 11, 15, 4, 7, 15, 12, 13}}, {
        "DON'T YOU GAMBLE.", {7, 2, 11, 15, 13}}, {
        "WELL WE PAY FOR THE [.].", {12, 12, 7, 10, 4, 13, 13, 13, 13}}, {
        "MA. DID HE EVER SAY THAT HE FIGURED OUT A WAY TO RECALL A LOST \
MEMORY YEARS AFTER HE BLACKED IT OUT FOR THE FIRST TIME.", {12, 13, 12, 11, 2,
          15, 4, 11, 15, 12, 12, 12, 10, 12, 12, 15, 7, 7, 10, 11, 15, 11, 12,
          10, 4, 12, 12, 13}}, {
        "HOW REAL DOES IT FEEL.", {12, 12, 15, 11, 7, 13}}, {
        "SINCE WHEN IS IT A CRIME TO HAVE A SCALE IN YOUR HOUSE.", {10, 2, 15,
          11, 4, 7, 10, 12, 12, 12, 10, 1, 12, 13}}, {
        "YOU WANT A WAR.", {11, 15, 4, 7, 13}}, {
        "WHO THE FUCK WAS HE ROCCO.", {11, 4, 7, 15, 11, 12, 13}}, {
        "DO YOU WANT ATHOS ARRESTED YOUR MAJESTY.", {15, 11, 1, 7, 15, 1, 7, 
         13}}, {"WHEREFORE STORM YOU SO.", {1, 7, 11, 2, 13}}, {
        "YOU GONNA LEAVE SOME CASH BY THE BED WHEN YOU PASS THROUGH TOWN.", {
         11, 15, 7, 15, 12, 12, 12, 4, 12, 2, 11, 15, 10, 7, 13}}, {
        "DR. RUTH.", {12, 12, 13}}, {
        "FOR FIVE HUNDRED WHAT DO I GET.", {10, 8, 15, 4, 12, 11, 15, 13}}, {
        "AFRAID OF THE HOSPITAL.", {1, 10, 4, 7, 13}}, {
        "WHO CAN WE TRUST.", {11, 12, 12, 12, 13}}, {
        "NON LOQUIS LATINUM.", {12, 12, 12, 13}}, {
        "DID YOU HELP HIM OUT OF A BIND.", {12, 11, 15, 12, 12, 10, 4, 7, 
         13}}, {"YOU KNOW HOW SOMETIMES YOU JUST BECOME THIS PERSONA.", {11, 
         15, 7, 2, 11, 2, 15, 7, 7, 13}}, {
        "WASN'T THAT THE PROBLEM WITH YOU TWO.", {12, 2, 4, 4, 7, 10, 11, 8, 
         13}}, {"YOU ARE FUCKIN' DEAD YOU GO IN THERE TODAY.", {11, 15, 7, 13,
          1, 11, 15, 10, 12, 12, 13}}, {"OUT THE BACK.", {12, 4, 2, 13}}, {
        "AND I AIM TO CURE YA OF YOUR WICKEDNESS.", {3, 11, 7, 10, 15, 12, 10,
          1, 7, 13}}, {
        "AND I USED TO KNOW YOU PERSONAL WAY BACK WHEN.", {3, 11, 15, 10, 12, 
         11, 1, 7, 2, 2, 13}}, {
        "IF YOU DON'T WANT MY FILM - I'LL CALL ANOTHER SHOW.", {10, 11, 15, 2,
          1, 7, 7, 13, 11, 15, 1, 12, 12, 13}}, {
        "SHADOW GETS CRAZY-- IT'S NOT OUR JOB TO GET INVOLVED IN YOUR \
PERSONAL LIFE BUT WHEN IT INTERFERES WITH THE TRAINING HERE-- FROM BACK IN \
HOUSTON.", {12, 15, 12, 13, 11, 15, 12, 12, 12, 10, 15, 1, 10, 1, 1, 7, 12, 2,
          11, 15, 10, 4, 7, 2, 13, 10, 2, 10, 12, 13}}, {
        "GREAT RUNNING INTO YOU, BUDDY.", {1, 15, 10, 11, 13, 12, 13}}, {
        "I HAVEN'T FELT THIS GOOD IN A LONG TIME.", {11, 15, 2, 15, 7, 1, 10, 
         4, 7, 7, 13}}, {"NERVES OF STEEL.", {7, 10, 12, 13}}, {
        "I SHOULDN'T BE OVER HERE AT THIS HOUR.", {11, 15, 2, 15, 10, 2, 10, 
         12, 12, 13}}, {
        "-- THE TRAIN FOR MARSEILLES LEAVES AT FIVE O'CLOCK.", {13, 4, 7, 10, 
         12, 15, 10, 8, 7, 13}}, {
        "-- YOU SAID SO YOURSELF THE FIRM IS LARGE AND POWERFUL.", {13, 11, 
         15, 12, 12, 4, 12, 15, 12, 3, 12, 13}}, {
        "THIS IS NOT MY USUAL FRIDAY NIGHT!", {12, 15, 12, 12, 12, 12, 12, 
         13}}, {"I SENT IT TO MYSELF IN PARIS.", {11, 15, 11, 10, 12, 10, 12, 
         13}}, {"YOU SAID IT CLARK.", {11, 15, 11, 7, 13}}, {
        "I DON'T KNOW WHAT YOU'RE TALKING ABOUT MAN.", {11, 15, 2, 12, 4, 11, 
         15, 15, 10, 7, 13}}, {
        "OUR RENDEZVOUS POINTS AND RADIO FREQS.", {12, 12, 12, 3, 12, 12, 
         13}}, {"YOU STILL GOT A SHITLOAD OF PLOWING TO DO.", {11, 2, 15, 4, 
         12, 10, 12, 10, 12, 13}}, {
        "HE TOLD ME THAT I WAS STUPID BECAUSE MY BOYFRIEND DIDN'T REALLY LOVE \
ME.", {11, 15, 12, 4, 11, 15, 1, 12, 12, 12, 12, 2, 12, 12, 12, 13}}, {
        "BUT I...", {12, 12, 13, 13}}, {
        "THIS SORT OF THING AIN'T MY BAG BABY.", {12, 12, 10, 12, 12, 2, 12, 
         12, 7, 13}}, {
        "WE'RE MAKING A STATEMENT.", {12, 12, 12, 12, 12, 13}}, {
        "I KNOW THIS.", {11, 15, 7, 13}}, {
        "I THINK I SHOULD GO BACK.", {11, 15, 11, 15, 15, 2, 13}}, {
        "NO QUESTION ABOUT IT.", {4, 12, 12, 12, 13}}, {
        "HEY YOU HAVEN'T CHANGED YOUR CLOTHES!", {7, 11, 15, 2, 15, 1, 7, 
         13}}, {"THE RESISTANCE THE ANGER IN YOUR VOICE.", {4, 7, 4, 7, 10, 1,
          7, 13}}, {"NO I'M OKAY FOR NOW.", {7, 11, 15, 1, 10, 2, 13}}, {
        "NO ALL THE GOOD ONES ARE MARRIED.", {4, 7, 4, 1, 7, 15, 15, 13}}, {
        "THE GOVERNMENT DOESN'T HAVE TO TELL PEOPLE TO DO IT.", {4, 12, 12, 2,
          12, 10, 12, 12, 10, 12, 12, 13}}, {
        "THAT'S COOL.", {4, 15, 12, 13}}, {
        "SARAH LAWRENCE IS ON THE OTHER SIDE OF THE COUNTRY.", {12, 12, 15, 
         10, 4, 1, 12, 10, 4, 7, 13}}, {
        "PLEASE ROSE BE A GOOD SPORT.", {15, 12, 15, 4, 1, 7, 13}}, {
        "YOUR FACE WAS DARK AND YOUR HAIR WAS BACKLIT -- I COULD SEE A HALO \
OF FRIZZ -- YOU ASKED ME IF THINGS WERE OKAY BETWEEN NAOMI AND ME.", {1, 7, 
         15, 1, 3, 1, 7, 15, 12, 13, 11, 15, 15, 4, 7, 10, 12, 13, 11, 15, 12,
          10, 12, 15, 1, 12, 12, 3, 12, 13}}, {
        "HER NOT BELIEVING ABOUT YOUR CONDITION..", {12, 12, 12, 12, 1, 7, 13,
          13}}, {"WE SEE YOU NEXT HARVEST.", {12, 15, 11, 1, 7, 13}}, {
        "THEY MAY LOOK GOOD BUT THEY WEIGH TWELVE POUNDS EACH THAT'S \
THIRTY-SIX POUNDS RIGHT THERE.", {12, 12, 12, 12, 12, 12, 15, 8, 12, 12, 4, 
         15, 8, 12, 12, 12, 13}}, {
        "THIS IS ANTHONY ADAMS MR. HENRY.", {12, 15, 12, 12, 12, 12, 13}}, {
        "NO. DADDY SAYS ROSE IS CALM AS LETTUCE.", {7, 13, 12, 12, 15, 15, 7, 
         1, 7, 13}}, {
        "I'M SORRY IT'S JUST THAT..", {11, 15, 12, 12, 2, 4, 13, 13}}, {
        "BUT THEN  --  --  THAT SILLY WAR..", {12, 12, 13, 13, 4, 12, 7, 13, 
         13}}, {"SHE CALLED ME AN OLD LADY HERE TOO!", {12, 15, 1, 4, 1, 7, 2,
          2, 13}}, {
        "FIVE NIGHTS AGO HE FOUND THIS PARATROOPER CAUGHT IN A TREE WITH A \
BROKEN LEG.", {8, 7, 2, 11, 12, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}}, {
        "ALONE.", {2, 13}}, {
        "I AVOIDED CAPTURE USING THE MAK'TAR STEALTH HAZE.", {11, 15, 12, 12, 
         4, 12, 13, 7, 7, 7, 13}}, {"IT IS IT IS!", {11, 15, 11, 15, 13}}, {
        "LEAVE THAT ALONE!", {15, 4, 2, 13}}, {
        "I DON'T WANT TO TALK ABOUT HIM.", {11, 15, 2, 1, 10, 12, 12, 12, 
         13}}, {"GOOD AFTERNOON MR. HARRIS.", {1, 7, 12, 12, 13}}, {
        "JOHN I'D LIKE YOU TO MEET ONE OF THE BRIGHTEST LIGHTS OF THE BRITISH \
STAGE MRS. KENDAL.", {12, 11, 15, 10, 11, 10, 15, 8, 10, 4, 12, 12, 10, 4, 1, 
         7, 12, 12, 13}}, {
        "DON'T KNOW IF I'LL STILL WANT IT.", {7, 2, 12, 10, 11, 15, 2, 1, 11, 
         13}}, {"MADAM SENATOR...", {12, 12, 13}}, {
        "I'LL GET HIM.", {11, 15, 15, 7, 13}}, {
        "AT LEAST TALK TO HIM HEAR WHAT HE HAS TO SAY.", {10, 12, 12, 10, 12, 
         15, 4, 11, 15, 10, 12, 13}}, {
        "LOUELLA PARSONS IS HERE.", {12, 12, 15, 2, 13}}, {
        "THREE MEN AND A WOMEN.", {8, 12, 3, 4, 12, 13}}, {
        "IT'S COSMETIC.", {11, 15, 7, 13}}, {
        "AND YOU WILL GIVE ME OCCASION.", {3, 11, 15, 15, 12, 12, 13}}, {
        "I'M HAPPY.", {11, 15, 12, 13}}, {
        "LET ME OUT OF HERE!", {15, 12, 12, 10, 2, 13}}, {
        "MAYBE HE DIDN'T KNOW EXACTLY WHAT HE WAS GONNA DO BUT HE HAD A \
PRETTY GOOD IDEA.", {2, 11, 15, 2, 12, 12, 4, 11, 15, 12, 12, 12, 12, 11, 15, 
         4, 2, 1, 7, 13}}, {
        "AND BECAUSE HE'S MY FRIEND.", {3, 10, 11, 15, 12, 12, 13}}, {
        "I DON'T KNOW WHY I SAID IT.", {11, 15, 2, 12, 2, 11, 15, 11, 13}}, {
        "HOWE I HATE TO BRING IT UP BUT SHE'S GOT AN AWFUL TOOTHACHE WE'VE \
GOT TO CARRY HER TO THE DENTIST.", {12, 11, 15, 10, 15, 11, 9, 12, 12, 12, 4, 
         12, 12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 13}}, {
        "WHENEVER PEOPLE SAY 'AW THAT DAMONE IS A LOUDMOUTH' -- AND THEY SAY \
THAT A LOT -- I SAY 'YOU JUST DON'T KNOW DAMONE.' WHEN SOMEONE SAYS YOU'RE AN \
IDIOT I TELL THEM 'DAMONE'S NOT AN IDIOT.", {12, 12, 12, 13, 12, 4, 12, 15, 4,
          7, 13, 13, 3, 7, 7, 4, 4, 7, 13, 11, 15, 13, 11, 2, 15, 2, 12, 12, 
         13, 13, 2, 12, 15, 11, 15, 4, 7, 11, 15, 12, 13, 12, 15, 12, 4, 12, 
         13}}, {"GOOD THING HE DOESN'T ALWAYS KNOW WHAT HE'S GOT...", {1, 7, 
         11, 15, 2, 1, 7, 4, 11, 15, 12, 13, 13}}, {
        "IT'S FOR SOMEBODY NAMED THOMPSON BUT IT SAYS 'CARE OF RAOUL DUKE'.", \
{11, 15, 10, 12, 12, 12, 12, 12, 12, 13, 12, 10, 12, 12, 13}}, {
        "THEN TAKE IT FROM HIM.", {2, 15, 11, 10, 7, 13}}, {
        "A WOW FINISH.", {4, 12, 7, 13}}, {"EARS.", {7, 13}}, {
        "TRADE YOUR EXCELLENCY.", {7, 1, 7, 13}}, {
        "JUST ONE COMPADRE...", {2, 8, 7, 13}}, {
        "I'LL TAKE EVERYTHING AT FACE VALUE.", {11, 15, 15, 15, 10, 12, 12, 
         13}}, {"IT'S MUCH SAFER IN THERE SWEETY.", {11, 15, 12, 12, 10, 12, 
         12, 13}}, {
        "WELL DO SOMETHING ABOUT IT.", {12, 12, 12, 12, 12, 13}}, {
        "HOLD ON . . .", {15, 12, 13}}, {
        "LET ME HAVE MANUAL CONTROL PLEASE.", {15, 12, 12, 12, 12, 12, 13}}, {
        "MY AUTHOR.", {12, 12, 13}}, {
        "NOW LISTEN BEFORE YOU DO SOMETHING YOU'LL REALLY REGRET YOU'D BETTER \
STOP AND THINK-- HERE ARE THE SLIPS FOR THE LAUNDRY AND THE CLEANING.", {2, 
         15, 10, 11, 15, 12, 11, 15, 12, 12, 11, 15, 12, 15, 3, 15, 13, 2, 15,
          4, 15, 10, 4, 7, 3, 4, 7, 13}}, {
        "IF THAT'S THE WAY YOU WANT IT.", {10, 4, 15, 4, 7, 11, 15, 11, 
         13}}, {"I SAW IT GOING DOWN.", {11, 15, 11, 12, 12, 13}}, {
        "I'LL LAY YOU FIVE TO ONE YOU WON'T SLEEP.", {11, 15, 7, 11, 8, 10, 8,
          11, 15, 2, 7, 13}}, {
        "THAT WON'T YOUR FAULT.", {4, 1, 2, 1, 7, 13}}, {
        "I LIKED THE HORSE.", {11, 15, 4, 7, 13}}, {
        "LET'S GET A PICTURE.", {7, 15, 4, 7, 13}}, {"UHM..", {12, 13, 13}}, {
        "THEN YOU ARE A FOOL -- A FOOL WHO HAS NEVER LOST A SON.", {2, 11, 15,
          4, 7, 13, 4, 7, 11, 15, 12, 12, 12, 12, 13}}, {
        "NO ONE CAN STOP THEM.", {7, 8, 12, 15, 12, 13}}, {
        "WELL IT SEEMS YOU ARE DETERMINED TO KEEP LASZLO HERE.", {12, 12, 15, 
         11, 15, 15, 10, 15, 12, 2, 13}}, {
        "LIKE HE'S WILD.", {10, 11, 15, 12, 13}}, {
        "HE'S NOT ARMY IT'S NOT OFFICIAL -- HE'S FORMER ARMY AND THE BEST \
I'VE EVER SEEN IN A ROOM.", {11, 15, 12, 12, 12, 12, 12, 13, 11, 15, 1, 7, 3, 
         4, 7, 11, 15, 2, 12, 10, 4, 7, 13}}, {
        "NOTHING REAL OR SUPERNATURAL IS BUSTING THROUGH THIS LEAST NOTHING \
THE SIZE OF THE BEASTS.", {15, 7, 7, 1, 15, 12, 10, 12, 12, 12, 4, 7, 10, 4, 
         7, 13}}, {"I WOULD HANG HIM!", {11, 15, 7, 7, 13}}, {
        "I'M FEELING FINE THIS MORNING.", {11, 15, 15, 12, 12, 12, 13}}, {
        "AND I HADN'T BEEN LIVING MY OWN LIFE.", {3, 11, 15, 2, 12, 12, 12, 
         12, 12, 13}}, {
        "I JUST KNOW HOW YOU GET.", {11, 2, 15, 12, 11, 15, 13}}, {
        "I MEAN IT'S NOT AS IF -- YOU'RE GREAT WITH THE ADVICE CLARK.", {11, 
         15, 11, 15, 2, 1, 10, 13, 11, 15, 1, 10, 4, 12, 12, 13}}, {
        "SCREWIN' SOME POOR SLOB OUT OF HIS RETIREMENT.", {7, 13, 12, 12, 12, 
         12, 10, 11, 7, 13}}, {
        "IT'S ALL WORKING OUT JUST LIKE WE PLANNED.", {11, 15, 7, 15, 12, 2, 
         10, 12, 12, 13}}, {
        "THEY JUST STOOD THERE CONFUSED.", {12, 2, 15, 1, 1, 13}}, {
        "COME ON STACY IT'S YOUR SECTION AND YOUR MAN.", {15, 12, 12, 12, 1, 
         7, 3, 1, 7, 13}}, {"UH..", {12, 13, 13}}, {
        "I HAVE NO LUGGAGE.", {11, 15, 7, 7, 13}}, {
        "I -- I...", {11, 13, 7, 13, 13}}, {
        "I TOLD YOU I'D GET IT.", {11, 15, 11, 11, 15, 15, 11, 13}}, {
        "HAVE A DONUT.", {15, 4, 7, 13}}, {
        "NOBODY WALKS AROUND LIKE THAT.", {7, 15, 10, 12, 4, 13}}, {
        "WELL PERSONALLY MAJOR I WILL TAKE WHAT COMES.", {12, 2, 15, 11, 15, 
         15, 4, 15, 13}}, {
        "YOU DID PICK A REAL STRANGE TIME TO GO AND BE BRAVE ALL ON YOUR \
OWN..", {11, 15, 12, 12, 12, 12, 12, 10, 12, 3, 15, 1, 7, 10, 1, 7, 13, 
         13}}, {"CHARLES I MUST APOLOGIZE AGAIN FOR THE KRONOS MISHAP.", {12, 
         11, 15, 15, 2, 10, 4, 7, 7, 13}}, {
        "I GAVE MY GRIEF TO JESUS CHRIST.", {11, 15, 7, 7, 10, 12, 12, 13}}, {
        "NOW YOU MIGHT BE ONE OF THESE HOLLYWOOD TYPES CHANGE YOUR NAME AND \
ALL THAT BUT PEERLESS DOTHAN IS ON YOUR BIRTH CERTIFICATE.", {2, 11, 15, 15, 
         8, 10, 12, 12, 15, 12, 1, 7, 3, 7, 4, 12, 12, 12, 15, 12, 1, 7, 7, 
         13}}, {"STOP SAYING YOU KNOW WHEN I SAY 'Y'KNOW.' I KNOW YOU KNOW.", \
{15, 12, 11, 15, 2, 11, 15, 13, 12, 12, 13, 13, 11, 15, 11, 15, 13}}, {
        "HE'S NOT A STAG HOUND.", {11, 15, 2, 4, 7, 7, 13}}, {
        "SO IT'S ALL WORKED OUT PERFECTLY..", {12, 12, 7, 15, 12, 2, 13, 
         13}}, {"SOUNDS DELIGHTFUL. ... MEANWHILE I'D LIKE TO PREPARE YOU FOR \
A COLONOSCOPY SO WE CAN TAKE A LOOK INSIDE.", {15, 12, 13, 13}}, {
        "I ASKED IF WE COULD GIVE HIM ANYTHING ELSE.", {11, 15, 10, 12, 12, 
         15, 12, 12, 12, 13}}, {"PAY'S GOOD THOUGH.", {7, 1, 7, 13}}, {
        "DOESN'T MOVE.", {7, 2, 15, 13}}, {
        "IT'S REALLY NICE TO TALK WITH YOU SAM.", {11, 15, 2, 1, 10, 12, 10, 
         11, 12, 13}}, {
        "HOW YOU GOT ME LOCKED UP LIKE A DOG ON A...", {12, 11, 15, 7, 15, 9, 
         10, 4, 7, 10, 7, 13, 13}}, {"TREVES.", {12, 13}}, {
        "I DON'T KNOW HOW IT GOT THIS WAY..", {11, 15, 2, 12, 12, 12, 12, 12, 
         12, 13, 13}}, {
        "IT SEEMED SHE WAS HARMING YOU.", {11, 15, 12, 12, 12, 11, 13}}, {
        "OTHER PICTURES--I DON'T KNOW--IT'S NOTHING I WANT TO LOOK BACK ON.", \
{1, 7, 13, 11, 15, 2, 12, 13, 11, 15, 15, 11, 1, 10, 15, 2, 10, 13}}, {
        "I'LL RISK IT.", {11, 15, 7, 11, 13}}, {
        "I THINK THEY HAVE ANOTHER FELLA THERE TO KEEP IT OFF YOUR CHEST.", {
         11, 15, 12, 12, 12, 12, 12, 10, 15, 11, 7, 1, 7, 13}}, {
        "I'LL GO OUT FOR A SMOKE.", {11, 15, 12, 12, 10, 4, 7, 13}}, {
        "INDIA IS A NEWLY INDEPENDENT NATION.", {12, 15, 4, 2, 1, 7, 13}}, {
        "I CAN'T BELIEVE WHAT A --!", {11, 12, 2, 15, 4, 4, 13, 13}}, {
        "IT COULD BE PARASITES AN INFECTION..", {11, 15, 15, 12, 4, 7, 13, 
         13}}, {"SAYS SHE CAN GET ME IN TO SEE THIS KILLER.", {12, 12, 12, 15,
          7, 10, 10, 15, 7, 7, 13}}, {"SEE YOU.", {15, 11, 13}}, {
        "NO NO!", {7, 7, 13}}, {
        "YOU CAN GO BACK WITH JACK.", {11, 15, 7, 2, 10, 7, 13}}, {
        "WE WONDERED ABOUT THE DISCOLORATION SO HE RAN A SPECTRO.", {12, 15, 
         10, 4, 12, 12, 11, 15, 4, 7, 13}}, {
        "OF COURSE YOU CAN'T!", {10, 12, 11, 12, 2, 13}}, {
        "JUST HOPE.", {2, 7, 13}}, {
        "LONGITUDE 109 -- LET'S GO.", {7, 8, 13, 12, 7, 13}}, {
        "WELL I HAVEN'T HEARD ANYTHING ABOUT THE DISAPPEARANCE OR \
ANYTHING...", {2, 11, 15, 2, 15, 15, 10, 4, 7, 7, 7, 13}}, {
        "TWENTY-FIVE YEARS.", {8, 7, 13}}, {
        "LET ME SEE!", {15, 12, 15, 13}}, {
        "WHY HE COULD OPERATE ON ME ANY OLD TIME AND I WOULDN'T EVEN BE \
SCARED.", {2, 11, 12, 12, 12, 12, 12, 12, 12, 3, 11, 15, 2, 2, 15, 12, 13}}, {
        "THE PACE OF REFORM MUST MEET WITH THE DESIRES OF THE TIBETAN \
PEOPLE.", {4, 7, 10, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}}, {
        "MY PLAN INVOLVES ALL FOUR OF US ACTING TOGETHER.", {12, 7, 15, 7, 8, 
         10, 12, 12, 2, 13}}, {
        "ROSE, YOU'RE VERY SICK.", {7, 13, 11, 15, 2, 1, 13}}, {
        "WHICH IS A WONDERFUL CROOK.", {4, 15, 4, 1, 7, 13}}, {
        "I LOST A WORKER.", {11, 15, 4, 7, 13}}, {
        "SHE SAYS HE COMES BACK IN DREAMS.", {12, 15, 11, 15, 2, 10, 7, 
         13}}, {"THE DANGER.", {4, 7, 13}}, {
        "ABOUT SIX MONTHS AGO SOME PARTS OF BODIES WERE FOUND DOWN BY THE \
RIVER.", {10, 8, 7, 2, 15, 7, 10, 7, 15, 15, 2, 10, 4, 7, 13}}, {
        "THE PERSONALITY INVENTORIES WOULD TRIP HIM UP.", {4, 7, 7, 15, 7, 7, 
         7, 13}}, {
        "IF FIRED UPON TELL OUR FIGHTERS THAT THEY ARE ORDERED TO ENGAGE.", {
         10, 15, 10, 12, 12, 12, 4, 12, 15, 15, 10, 15, 13}}, {
        "IT WORKED!", {11, 15, 13}}, {"JUST MY LUCK.", {2, 7, 7, 13}}, {
        "LECTER DID IT TO AMUSE HIMSELF.", {12, 12, 12, 10, 15, 7, 13}}, {
        "IT'S A STUPID TRADITION.", {11, 15, 4, 1, 7, 13}}, {
        "I'LL GO OUTSIDE AND TAKE A LOOK IN THE GARAGE.", {11, 15, 7, 10, 3, 
         15, 4, 7, 10, 4, 7, 13}}, {
        "SO MUCH FOR NUTSY FAGIN.", {12, 12, 10, 12, 12, 13}}, {
        "SUPPOSE THAT YOU BEAR FIVE OR SIX CHILDREN WITH YOUR \
CHARACTERISTICS.", {15, 4, 11, 15, 8, 7, 8, 7, 10, 1, 7, 13}}, {
        "IT DOES AND IT IS A BETTER LOOKIN' REASON THAN YOU JACK WINTHROP.", {
         11, 12, 3, 11, 15, 4, 1, 7, 13, 12, 12, 11, 12, 12, 13}}, {
        "FUCK OFF FRAT BOY.", {12, 12, 12, 7, 13}}, {
        "IT'S REALLY SOLID THIS TIME OF YEAR.", {11, 15, 1, 1, 7, 15, 10, 7, 
         13}}, {"NO I READ IT ON THE MESSAGE.", {7, 11, 15, 11, 10, 4, 7, 
         13}}, {"WELL SURE..", {12, 12, 13, 13}}, {
        "GIVE MY BLESSING TO THE GIRL.", {15, 12, 12, 10, 4, 7, 13}}, {
        "I FEEL ALL RIGHT TOO.", {11, 15, 7, 7, 7, 13}}, {
        "PROBABLY HE MEANS NO HARM.", {12, 11, 15, 7, 7, 13}}, {
        "SOMEDAY YOU'LL HAVE A SON JUST LIKE YOU JEREMIAH.", {12, 11, 15, 12, 
         12, 12, 2, 10, 11, 12, 13}}, {
        "THESE ARE HIS PEAK HOURS.", {12, 15, 11, 7, 7, 13}}, {
        "QUITE.", {12, 13}}, {"GOOD THING.", {1, 7, 13}}, {
        "HE KNEW WHERE HER ROOM WAS.", {11, 15, 12, 12, 12, 12, 13}}, {
        "JOANNA GO FUCK YOURSELF!", {12, 12, 12, 12, 13}}, {
        "NUMBNESS.", {7, 13}}, {"NO I...", {7, 7, 13, 13}}, {
        "I DO IT 'CAUSE IT WORKS-...", {11, 15, 11, 15, 11, 15, 13, 13}}, {
        "JIM JONES Y'KNOW.", {12, 12, 12, 12, 13}}, {
        "THERE'S NOTHING TO UNDERSTAND.", {7, 12, 10, 12, 13}}, {
        "WHY IT DOES ME GOOD JUST TO SEE HIM SIT THERE ALL SOLEMN AND GO \
POKIN' IN HIS BAG LIKE HE'S GONNA CURE ME WHICH HE DID OF COURSE.", {2, 11, 
         15, 2, 1, 2, 10, 15, 12, 7, 7, 7, 1, 3, 7, 7, 13, 10, 11, 7, 10, 11, 
         15, 12, 12, 12, 12, 4, 11, 15, 10, 12, 13}}, {
        "YOU KNOW THAT SOMETIMES IT'S HARD TO UNDERSTAND GOD'S GREAT PLAN.", {
         11, 15, 4, 2, 11, 15, 1, 10, 12, 12, 1, 7, 13}}, {
        "HEY INSPECTOR I DON'T INTEND TO TAKE THE RAP FOR THIS.", {7, 7, 11, 
         15, 2, 15, 10, 15, 4, 7, 10, 7, 13}}, {
        "YOU UNDERSTAND HOW I FEEL.", {11, 15, 7, 11, 15, 13}}, {
        "HE DOES A LITTLE SPOT WHERE THE BUTTER HAD BEEN.", {11, 15, 4, 12, 
         12, 15, 4, 7, 15, 7, 13}}, {
        "I CAN'T BELIEVE IT'S ALREADY STARTING TO GET DARK SO EARLY.", {11, 
         12, 2, 12, 12, 12, 12, 10, 15, 1, 7, 7, 13}}, {
        "THERE'S NO FIRST ACT.", {7, 7, 12, 12, 13}}, {
        "GOD PARDON SIN WAS THOU WITH ROSALINE!", {7, 7, 7, 15, 12, 10, 12, 
         13}}, {"UNDERSTAND THAT.", {12, 4, 13}}, {
        "LOOK DIFFERENT THAN YOU SOUNDED ON THE PHONE.", {8, 1, 10, 11, 15, 
         10, 4, 7, 13}}, {
        "GEORGE WORK WITH ME I ALWAYS GET A LAUGH WITH THAT ONE.", {12, 15, 
         10, 7, 11, 15, 15, 4, 7, 10, 4, 8, 13}}, {
        "I CAN'T DO THIS.", {11, 12, 2, 12, 12, 13}}, {
        "ONLY BY A DIRECTOR OF THE FIRM.", {2, 10, 4, 7, 10, 4, 7, 13}}, {
        "RICK'S WOULDN'T BE RICK'S WITHOUT THEM.", {12, 12, 2, 15, 12, 6, 12, 
         12, 13}}, {
        "RICK'S GOT AN IMPORTANT ANNOUNCEMENT TO MAKE.", {12, 12, 4, 1, 7, 10,
          15, 13}}, {
        "I SHOULD GO YOU ARE THE BOY ...", {11, 15, 15, 11, 15, 4, 7, 13}}, {
        "THEY COULD CLEAN AROUND THE ARRANGEMENT.", {12, 12, 12, 10, 4, 7, 
         13}}, {"REMEMBER LIKE I SAY I FOUND YOU IN THE ROAD..", {15, 10, 11, 
         15, 11, 15, 11, 10, 4, 7, 13, 13}}, {
        "BUT LOVE ISN'T THE OPERATIVE WORD HERE PEACE IS!", {12, 12, 15, 2, 4,
          7, 7, 2, 15, 15, 13}}, {
        "IT'S A PERSONAL THING.", {11, 15, 4, 1, 7, 13}}, {
        "TEN'S STANDARD.", {8, 7, 13}}, {
        "AND DO NOT TRY TO UNDERSTAND THEM.", {3, 12, 12, 12, 10, 12, 12, 
         13}}, {"IT'S NO TROUBLE.", {11, 15, 7, 7, 13}}, {
        "A 'QUICK FIX'...", {4, 13, 1, 7, 13, 13}}, {
        "GOOD NIGHT!", {1, 7, 13}}, {
        "THEN GO A LITTLE FORWARD IN TIME.", {2, 7, 4, 1, 2, 10, 7, 13}}, {
        "DAMN STRAIGHT!", {1, 7, 13}}, {
        "HE'S DOING VERY WELL.", {11, 15, 15, 2, 2, 13}}, {
        "EXCEPT BACK TO NOWHERESVILLE.", {10, 2, 10, 12, 13}}, {
        "I'M GOING TO BOW OUT ON YOU.", {11, 15, 12, 10, 12, 12, 12, 11, 
         13}}, {"-- SIT DOWN.", {13, 7, 7, 13}}, {
        "COLE DRAGS DEBBIE INTO ONE OF THE THEATERS.", {12, 15, 12, 12, 8, 10,
          4, 7, 13}}, {"THERE IS ONLY ONE BED.", {15, 15, 12, 8, 7, 13}}, {
        "DON'T JERK ME AROUND.", {7, 2, 12, 12, 12, 13}}, {
        "YOU REMEMBER IN SCHOOL WE TALKED ABOUT WORKING TOGETHER.", {11, 15, 
         10, 12, 12, 15, 10, 15, 2, 13}}, {
        "YOU SAID AS LONG AS I DON'T ACT LIKE A FUCKIN' NUT IMPLYING THAT \
I'VE BEEN ACTING LIKE A FUCKIN' NUT.", {11, 15, 1, 7, 10, 11, 15, 2, 12, 12, 
         12, 12, 12, 12, 4, 11, 15, 12, 12, 10, 4, 7, 13, 12, 13}}, {
        "SO HAVE DINNER WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}}, {
        "MAYBE I BETTER ASK AROUND SEE WHAT YOUR PALS THINK.", {2, 11, 15, 12,
          10, 15, 4, 1, 7, 7, 13}}, {
        "QUIT ACTING ALL SQUEEZED OUT.", {12, 12, 7, 15, 12, 13}}, {
        "WE'LL HAVE JUST ONE DRINK THEN WE'LL GO.", {12, 12, 12, 2, 8, 7, 2, 
         15, 12, 12, 13}}, {"YOU AND EVERYBODY..", {11, 3, 7, 13, 13}}, {
        "JUST NOT IN TIME FOR....", {2, 2, 10, 12, 10, 13}}, {
        "CARLOS.", {12, 13}}, {"THIS IS ADAM.", {12, 15, 12, 13}}, {
        "I KNEW WHEN YOU CAME LOOKING FOR THE CHEMICALS.", {11, 15, 2, 11, 15,
          15, 10, 4, 7, 13}}, {"MILLER COME IN...", {12, 12, 10, 13}}, {
        "WHEN HE WAS KILLED.", {2, 11, 15, 15, 13}}, {
        "WE GET MORE ACCIDENTS MORE ROBBERIES MORE RAPES MORE HOMICIDES MORE \
OF EVERYTHING WHEN THERE'S A FULL MOON.", {12, 15, 1, 7, 1, 7, 1, 7, 1, 7, 1, 
         10, 12, 2, 7, 15, 4, 1, 7, 13}}, {
        "YOU SHOULD STICKAROUND SOMETIMES.", {11, 15, 15, 2, 13}}, {
        "FOR ALL THOSE VACATION DAYS YOU GOT COMING.", {10, 7, 4, 12, 12, 11, 
         15, 15, 13}}, {
        "I KNEW HOW PLANES FLEW BUT I WAS STILL A LITTLE NERVOUS.", {11, 15, 
         12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "SHE'S BEEN PREPARING ALL MORNING.", {12, 12, 12, 7, 7, 13}}, {
        "I AM SURE THAT YOU ARE AWARE OF THE HORRIBLE ALLEGATIONS AGAINST JIM \
CUNNINGHAM.", {11, 15, 1, 4, 11, 15, 1, 10, 4, 1, 7, 10, 12, 12, 13}}, {
        "HONOUR AND PROTECT ALL BLACKSMITHS.", {12, 3, 12, 7, 7, 13}}, {
        "THEY'VE GOT A GATLING!", {12, 12, 12, 12, 12, 13}}, {
        "WE MET ONCE OR TWICE.", {12, 7, 2, 7, 2, 13}}, {
        "I'LL NEVER REACH THE HOUSE.", {11, 15, 2, 15, 4, 12, 13}}, {
        "MUSIC!", {7, 13}}, {"VECCHIO.", {12, 13}}, {
        "NO WE GOT PRESSURE FROM CALIFORNIA STATE.", {4, 12, 12, 12, 12, 12, 
         12, 13}}, {"I SAW HIM ON T.V.", {11, 15, 12, 10, 12}}, {
        "THIS IS AN ISOLATED INCIDENT COUNSELOR UNLESS YOU CAN PROVE \
OTHERWISE.", {12, 15, 4, 1, 1, 7, 10, 11, 15, 15, 2, 13}}, {
        "AFTER ALL I GOT STUCK WITH A RAILWAY TICKET.", {10, 7, 11, 15, 1, 10,
          4, 7, 7, 13}}, {"I SMASHED MY CAB.", {11, 15, 12, 12, 13}}, {
        "THAT'S WHAT WE CALL IN THE TRADE AUDITION FREE-FOR- ALLS AND MOST OF \
IT SUCKS.", {4, 15, 4, 12, 12, 10, 4, 7, 7, 7, 13, 7, 3, 1, 10, 11, 15, 
         13}}, {"I'M ALSO GOOD ENOUGH TO GO PRO.", {11, 15, 2, 1, 7, 10, 12, 
         6, 13}}, {
        "SHE'S STRUNG OUT NOW; YOU WON'T FIND HER.", {12, 12, 12, 2, 13, 11, 
         15, 2, 15, 7, 13}}, {
        "COME BACK AND HAVE A BEER!", {15, 2, 3, 15, 4, 7, 13}}, {
        "I WARNED YOU DIGNAN.", {11, 15, 11, 12, 13}}, {
        "'CAUSE THAT'S THE WAY GUYS ARE -- THEY LAUGH WHEN YA TALK DIRTY.", {
         12, 4, 15, 4, 7, 15, 15, 13, 12, 12, 2, 12, 12, 12, 13}}, {
        "I DOUBT YOU EVEN REMEMBER OUTPOST 1.0 -- YOU'D HAVE TO START \
PRACTICALLY FROM SCRATCH.", {11, 15, 11, 2, 15, 7, 8, 13, 11, 15, 12, 10, 12, 
         12, 12, 7, 13}}, {
        "HE SAYS HE'S GOTTA TALK TO YOU TONIGHT.", {11, 15, 11, 15, 12, 12, 
         12, 10, 11, 2, 13}}, {"PLEASE BABY...", {15, 7, 13}}, {
        "I WAS HOPING TO STOP THERE FOR LUNCH.", {11, 15, 12, 10, 15, 12, 10, 
         12, 13}}, {
        "BUT NOW HE HAS COME TO LEAD HIS NATION.", {12, 12, 11, 15, 12, 10, 
         12, 11, 7, 13}}, {
        "YOU DON'T NEED TO BE NERVOUS AROUND ME THOUGH.", {11, 15, 2, 15, 10, 
         15, 12, 10, 12, 12, 13}}, {
        "WELL SHE DOESN'T COMPLAIN MUCH.", {12, 12, 15, 2, 12, 12, 13}}, {
        "I WISH YOU'D GIVE ME A LITTLE MORE OF A CHANCE.", {11, 15, 11, 15, 
         15, 7, 4, 12, 1, 10, 4, 7, 13}}, {
        "'GUESS WE'LL FIND OUT WHAT ELSE WE HAVE TO TALK ABOUT.", {13, 12, 12,
          12, 12, 12, 4, 2, 15, 12, 10, 12, 12, 13}}, {
        "BUDDY DEEDS.", {7, 7, 13}}, {
        "I KNEW WHO POISONED ME IN THE MAZE.", {11, 15, 11, 15, 12, 10, 4, 7, 
         13}}, {"THAT SURE IS A THOUGHT.", {4, 1, 15, 4, 7, 13}}, {
        "WRITING.", {12, 13}}, {
        "AND THAT'S NOT FUCKING GOOD ENOUGH.", {3, 4, 15, 12, 12, 12, 12, 
         13}}, {"HE'S COMATOSE.", {11, 15, 12, 13}}, {
        "YOU SAID IT WAS A STRANGE WORLD.", {11, 15, 11, 15, 4, 1, 7, 13}}, {
        "VERY GOOD JOE.", {2, 1, 7, 13}}, {"ST. PETERSBURG.", {12}}, {
        "IN OTHER WORDS SCURVY.", {10, 1, 7, 7, 13}}, {
        "BUT MAYBE SOMEDAY.", {12, 12, 12, 13}}, {
        "IF YOU'LL EXCUSE ME JUST A MOMENT -- BARNARD THOMAS MANAGER OF THE \
HOTEL.", {10, 11, 15, 12, 12, 2, 4, 7, 13, 12, 12, 7, 10, 4, 7, 13}}, {
        "I SAW FRANCE AND AFRICA HALF OF SOUTH AMERICA.", {11, 15, 12, 3, 12, 
         12, 10, 12, 12, 13}}, {
        "HE WAS IN ON THE SAME JOB.", {11, 15, 10, 12, 4, 12, 7, 13}}, {
        "YOU'RE THE ONE WHO KEPT SAYING RAM HIM.", {11, 15, 4, 8, 11, 15, 15, 
         12, 12, 13}}, {
        "GET CHECKED IN CLEANED UP...", {15, 12, 10, 12, 7, 13}}, {
        "REPAIRING THE ANTENNA IS A PRETTY DANGEROUS OPERATION.", {15, 4, 7, 
         15, 4, 2, 1, 7, 13}}, {"DIRECTED BY LASER.", {15, 10, 7, 13}}, {
        "THE BOURBON.", {4, 7, 13}}, {
        "BE GRATEFUL FOR SMALL MERCIES.", {15, 12, 10, 12, 12, 13}}, {
        "THE GREATEST FIND IN HISTORY..CAN YOU IMAGINE THE IMPLICATIONS.", {4,
          12, 12, 10, 12, 13, 13}}, {
        "MR. HARRIS DOESN'T CHECK OUT UNTIL TOMORROW.", {12, 12, 15, 2, 15, 
         12, 12, 12, 13}}, {
        "SHOW SOME PRIDE HAMILTON.", {15, 12, 12, 12, 13}}, {
        "JUST REACH ON IN.", {2, 15, 12, 10, 13}}, {
        "I KNOW IT MAN.", {11, 15, 11, 7, 13}}, {
        "READ MY LIPS: ZIMMERMANN OR NOTHING.", {15, 7, 7, 13, 12, 7, 7, 
         13}}, {"FIVE SEVEN EIGHT DOLLARS.", {8, 8, 8, 12, 13}}, {
        "YOU SAY SHE WAS BEAT ON.", {11, 15, 12, 12, 7, 10, 13}}, {
        "THE SEMESTER'S ALMOST OVER SO YOU BETTER HURRY.", {4, 7, 12, 10, 12, 
         11, 1, 7, 13}}, {
        "BOBBIE AND PHOEBE ARE THROWING ME A SHOWER.", {12, 3, 12, 15, 15, 7, 
         7, 7, 13}}, {
        "DAD I'M ABOUT TO HAVE A KID OF MY OWN HERE.", {7, 8, 15, 10, 10, 12, 
         12, 12, 10, 12, 12, 2, 13}}, {
        "THEY'VE ONLY JUST BEGUN ...", {12, 12, 12, 2, 15, 13}}, {
        "QUIT ACTING LIKE SOME RETARD OR I'LL CALL YOUR MOTHER AND TELL HER \
WHAT A NAUGHTY LITTLE SHIT YOU'VE BEEN.", {12, 12, 12, 12, 15, 7, 11, 15, 1, 
         1, 7, 3, 7, 7, 4, 4, 12, 12, 12, 11, 15, 12, 13}}, {
        "NEWT TIME THEN CAN WALK RIGHT UP AND KNOCK.", {12, 12, 12, 12, 12, 
         12, 7, 3, 7, 13}}, {
        "MY PLATELETS LOOK GOOD TOO.", {7, 7, 15, 1, 7, 13}}, {
        "WHAT YOU ARE SAYING IS YOU DON'T KNOW WHAT THIS..THING..IS.", {4, 11,
          15, 15, 15, 11, 7, 2, 12, 4, 12, 13, 13}}, {
        "TOO GOD DAMN MUCH HEART.", {2, 12, 12, 12, 7, 13}}, {
        "I SEEM TO HAVE TOUCHED A NERVE.", {11, 15, 10, 12, 15, 4, 7, 13}}, {
        "EVERYTHING ELSE IS CONVERSATION..", {15, 2, 15, 7, 13, 13}}, {
        "WELL SIR...", {12, 7, 13}}, {
        "THERE MUST HAVE BEEN SOMEBODY.", {12, 12, 12, 12, 12, 13}}, {
        "I BOUGHT IT FOR HIM -- ALL THE STUFF HE WAS USING IT WAS IN HIS \
CONTRACT.", {11, 15, 11, 10, 7, 13, 7, 4, 7, 11, 15, 12, 12, 12, 10, 11, 7, 
         13}}, {"MIS-TER KRAMER IT'S...  ...ALMOST FOUR NOW.", {12, 12, 12, 
         13, 13, 2, 8, 2, 13}}, {
        "I JUST GOT A MESSED UP STOMACH.", {11, 2, 15, 4, 15, 9, 7, 13}}, {
        "BY THE WAY ROGER YOU WERE RIGHT ABOUT YOUR WIFE.", {10, 4, 12, 12, 
         11, 15, 12, 12, 1, 7, 13}}, {"I TRUST RICK.", {11, 12, 12, 13}}, {
        "I TOLD YOU ABOUT SAMMY - I DUNNO...", {11, 15, 11, 10, 7, 13, 11, 15,
          13, 13}}, {"MOVING ON.", {15, 9, 13}}, {
        "I DON'T KNOW ANYTHING.", {11, 15, 2, 12, 12, 13}}, {
        "WELL THAT'S GREAT COMING FROM A GLORIFIED GRAVE ROBBER!", {12, 4, 15,
          1, 15, 10, 4, 1, 1, 7, 13}}, {
        "MOMMY'S COMING BABY!", {12, 12, 7, 13}}, {
        "GOOD-BYE ADAM.", {12, 12, 13}}, {
        "YOU'RE A BEAUTIFUL GUY.", {11, 15, 4, 1, 7, 13}}, {
        "THEY *ARE* AGAINST THE LAW.", {7, 14, 15, 14, 10, 4, 7, 13}}, {
        "THAT'S WHY YOU'RE A GAMBLING MAN.", {4, 15, 2, 11, 15, 4, 7, 7, 
         13}}, {"KID GLOVES.", {7, 7, 13}}, {"D.C.", {12}}, {
        "YEAH THEY'RE GOIN' -- THAT'S NATURE..", {2, 7, 7, 7, 13, 13, 4, 15, 
         7, 13, 13}}, {"DIG 'EM UP!", {12, 12, 7, 13}}, {
        "GOT PLENTY TO EAT.", {12, 12, 10, 12, 13}}, {
        "LISTEN GET A HOLD OF OUR AVAILABLE SECURITIES AND HAVE THEM TURNED \
INTO CASH.", {15, 15, 4, 15, 10, 12, 12, 12, 3, 12, 12, 15, 10, 7, 13}}, {
        "GET SHEEP OVER SIDE..", {15, 12, 10, 12, 13, 13}}, {
        "YOU MUST GET TO AMERICA.", {11, 15, 15, 10, 12, 13}}, {
        "BEING A FOREIGNER I WOULD LOVE TO LEARN.", {15, 4, 7, 11, 15, 7, 10, 
         12, 13}}, {
        "I'VE GOT A MEETING TONIGHT.", {11, 15, 12, 12, 12, 12, 13}}, {
        "I'VE GOT FIFTY BUCKS TO THROW AWAY.", {11, 15, 15, 8, 7, 10, 15, 2, 
         13}}, {"ONE THOUSAND FEET.", {8, 12, 12, 13}}, {
        "UNCLE 'TIS A SHAME.", {7, 11, 15, 4, 7, 13}}, {
        "I JUST WANTED -- YOU SET ME UP.", {11, 2, 15, 13, 11, 15, 7, 7, 
         13}}, {"EVEN RESPECTABILITY.", {12, 12, 13}}, {
        "I JUST TURN MY BACK ON THAT KIND OF TALK AND LOOK AWAY.", {11, 2, 15,
          7, 2, 10, 4, 7, 10, 12, 3, 12, 2, 13}}, {
        "I CAN'T EXPLAIN IT NOW.", {11, 12, 2, 15, 11, 2, 13}}, {
        "PATRIS BENEFACTUM ET --  ...IT WAS MALCOLM'S FAVORITE.", {12, 12, 12,
          13, 13, 11, 15, 12, 12, 13}}, {
        "THE IDEA THAT YOU COULD DIE SUDDENLY WITH NO OFFSPRING DISCONCERTING \
LET'S MATE COMMIT YOUR GENES TO PERPETUITY.", {4, 7, 4, 11, 15, 15, 2, 10, 7, 
         12, 12, 12, 12, 12, 1, 7, 10, 12, 13}}, {
        "LESGO LESGO LESGO.", {12, 12, 12, 13}}, {
        "THAT'S ALL I DO WILL.", {4, 15, 7, 11, 15, 15, 13}}, {
        "I'D LIKE TO THINK OUR NEXT SECRETARY OF THE NAVY WOULD BE PREPARED \
FOR ANYTHING MR. HAYES.", {11, 15, 10, 10, 12, 12, 12, 12, 10, 4, 12, 12, 15, 
         12, 10, 12, 12}}, {
        "AND SAY EVERYTHING WENT WONDERFULLY.", {3, 12, 12, 15, 2, 13}}, {
        "BUT YOU DON'T LOOK VERY HAPPY.", {12, 11, 15, 2, 15, 2, 1, 13}}, {
        "YOUR FATHER CAN BE IN NOME ALASKA TOMORROW.", {1, 7, 12, 15, 10, 12, 
         12, 12, 13}}, {
        "SHE SUPERVISED WORKERS REMOVING CORTODIAZAPINE FROM GEL CAPS BY HAND \
AND REPLACING IT WITH POWDERED SUGAR.", {12, 15, 7, 15, 12, 12, 12, 12, 12, 
         12, 3, 12, 12, 10, 12, 7, 13}}, {
        "I'LL CALL TOMORROW..", {11, 15, 1, 12, 13, 13}}, {
        "I WAS ONLY FIVE...", {11, 15, 2, 8, 13}}, {
        "THAT'S WHAT THEY'RE GOING TO ASK YOU.", {4, 15, 4, 12, 12, 12, 10, 
         12, 11, 13}}, {
        "FROM THE FIRST MOMENT I SAW YOU I SAW YOUR BAD QUALITIES AND \
TREMBLED AT YOUR VIOLENCE; BUT I COULD NOT HELP LOVING YOU.", {10, 4, 12, 12, 
         11, 15, 11, 11, 15, 1, 1, 7, 3, 15, 10, 1, 7, 13, 12, 12, 12, 12, 12,
          12, 11, 13}}, {
        "I'LL SEND YOU A POSTCARD.", {11, 15, 15, 11, 4, 7, 13}}, {
        "WE CAN'T LOSE.", {12, 12, 2, 15, 13}}, {
        "HE'S A BLACK GUY.", {11, 15, 4, 1, 7, 13}}, {
        "YOU AREN'T TALKING ABOUT MONEY THEIR BEADY LITTLE EYES GO DEAD.", {
         11, 15, 2, 15, 12, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "NOT IF YOU'RE OVER SIXTEEN.", {12, 10, 11, 15, 10, 8, 13}}, {
        "YOU CAN'T CHANGE IT.", {11, 12, 2, 15, 11, 13}}, {
        "SS'KYA'TA'.", {7, 13, 7, 13, 13}}, {"YOUR MOTHER'S.", {1, 7, 13}}, {
        "WE STAY OFF HARD LIQUOR CIGARETTES..", {12, 12, 12, 1, 7, 7, 13, 
         13}}, {"I WANT TO SHOW YOU SOMETHING.", {11, 15, 10, 15, 11, 7, 
         13}}, {"BRAD THE BARTENDER.", {12, 4, 7, 13}}, {
        "LET'S SEE...", {7, 15, 13}}, {
        "I AM GOING TO BE FAMOUS.", {11, 15, 1, 10, 15, 12, 13}}, {
        "JESUS. ... INTERVIEW EVERY EMPLOYEE SUPPORT STAFF ASSOCIATES \
PARTNERS.", {12, 13, 13}}, {
        "NOT EVEN WHEN I'S DRINKIN'.", {12, 12, 2, 11, 15, 12, 13}}, {
        "EITHER BECAUSE HE'S SO GOOD AT WHAT HE DOES HE DOESN'T THINK HE \
NEEDS IT OR HE'S SO INSECURE HE CAN'T ADMIT IT.", {12, 12, 11, 15, 2, 1, 10, 
         4, 11, 15, 11, 15, 2, 1, 11, 15, 11, 7, 11, 15, 12, 12, 11, 12, 2, 
         15, 11, 13}}, {
        "HE'S SATAN'S LAP DOG OR SOMETHING.", {11, 15, 12, 7, 7, 7, 12, 
         13}}, {"I JUST WANTED SOME MAKE-UP.", {11, 2, 15, 12, 7, 13}}, {
        "IT'S BROKEN.", {11, 15, 12, 13}}, {
        "I'M TELLING MOM.", {11, 15, 15, 7, 13}}, {
        "FUCKING DUMP.", {15, 7, 13}}, {
        "TOM I'M THIS CLOSE TO COMING WITH YOU..", {12, 11, 15, 7, 15, 10, 15,
          10, 11, 13, 13}}, {
        "I GOT MY MIND MADE UP AND I AIN'T GONNA BE MOVED ON THIS.", {11, 15, 
         12, 12, 12, 7, 3, 11, 15, 2, 12, 12, 15, 15, 10, 12, 13}}, {
        "I DON'T THINK I'LL BE HAVING SEX EVER AGAIN.", {11, 15, 2, 12, 11, 
         15, 15, 12, 12, 12, 2, 13}}, {
        "I *HELPED* YOU NOT TO THINK ABOUT WALLY.", {11, 14, 15, 14, 11, 2, 
         10, 12, 12, 12, 13}}, {"JACK!", {7, 13}}, {"SPIKE!", {15, 13}}, {
        "THAT'S WHY YOU GOT SCARED WHEN MRS. CHRISTIAN HIRED ME.", {4, 15, 2, 
         11, 15, 1, 2, 12, 12, 15, 7, 13}}, {
        "I'LL BE BACK NEXT THURSDAY WE'LL TALK THE WHOLE THING OVER THEN.", {
         11, 15, 15, 12, 12, 12, 12, 12, 12, 4, 1, 7, 10, 2, 13}}, {
        "AND YOU WERE HUNGRY REMEMBER.", {3, 11, 15, 1, 7, 13}}, {
        "GROUND DEFENSE.", {7, 7, 13}}, {
        "IT COULD SAVE THE VOYAGE.", {11, 15, 15, 4, 7, 13}}, {
        "IF SHE GETS OUT LEGALLY THEY CAN'T COME AFTER HER.", {10, 12, 15, 12,
          12, 12, 12, 2, 15, 10, 7, 13}}, {
        "THERE WASN'T ANY PLANE.", {15, 12, 2, 12, 7, 13}}, {
        "I'M TRYING TO PUT OUT A NEWSPAPER HERE.", {11, 15, 15, 10, 12, 12, 
         12, 12, 2, 13}}, {
        "IT'S HARD TO BELIEVE...", {11, 15, 1, 10, 15, 13}}, {
        "EXTRACT OF PINEAL!", {15, 10, 7, 13}}, {
        "HEY HEY HEY.", {7, 7, 7, 13}}, {
        "SHE SLAMMED EVERY DOOR ON HER WAY DOWNSTAIRS -- EXCEPT THAT ONE.", {
         12, 15, 12, 12, 12, 12, 12, 12, 13, 12, 4, 8, 13}}, {
        "YOU DON'T HAVE ANY MORE VACATIONS TO SELL, ON ANTHRAX ISLAND.", {11, 
         15, 2, 12, 12, 1, 7, 10, 15, 13, 10, 12, 12, 13}}, {
        "AS SOON AS YOU GET BACK WE'LL TALK.", {1, 12, 12, 11, 15, 2, 1, 7, 
         12, 13}}, {
        "YOU USED ME, MR. CRAWFORD.", {11, 15, 7, 13, 12, 12, 13}}, {
        "LET THEM TALK.", {15, 12, 12, 13}}, {
        "I CAN'T BELIEVE SHE'S WITH THAT GUY NOW!", {11, 12, 2, 12, 12, 10, 4,
          7, 2, 13}}, {"MY MORE THAN SISTER.", {12, 1, 10, 7, 13}}, {
        "BRAD AND I ARE WATCHING THE HOUSE.", {12, 3, 11, 15, 15, 4, 12, 
         13}}, {"YOU WERE RIGHT MR. DICKSON!", {11, 15, 7, 12, 12, 13}}, {
        "I KNEW THEIR FATHERS AND MOTHERS BEFORE THEM.", {11, 15, 12, 12, 3, 
         12, 10, 12, 13}}, {
        "YOU WOULD TAKE A PAIN \[CapitalIAcute]N THE ARSE FULL STOP.", {11, 
         15, 7, 4, 7, 7, 4, 7, 1, 7, 13}}, {
        "IF YOU'RE GOING TO TALK NONSENSE I DON'T WANT TO TALK TO YOU AT \
ALL.", {10, 11, 15, 1, 10, 12, 7, 11, 15, 2, 1, 10, 12, 10, 11, 10, 7, 13}}, {
        "I BETTER GO I'LL TALK TO YOU LATER.", {11, 15, 7, 11, 15, 12, 10, 11,
          2, 13}}, {
        "THEN WE SHALL STATE ANOTHER TIME AND ANOTHER PLACE.", {2, 12, 12, 12,
          12, 12, 3, 12, 12, 13}}, {
        "HE *LOVED* IT!", {11, 14, 15, 14, 11, 13}}, {
        "SEE WHAT YOU DON'T KNOW IS YOU'RE ALREADY IN THE LAST TWO MINUTES OF \
YOUR LIFE.", {15, 4, 11, 15, 2, 12, 15, 11, 15, 12, 10, 4, 7, 8, 7, 10, 1, 7, 
         13}}, {"DAMN I HATE THIS JOHNNY I REALLY DO.", {1, 11, 15, 7, 7, 11, 
         15, 7, 13}}, {"BEAUTIFUL MORNING.", {1, 7, 13}}, {
        "SO WHY DON'T YOU TAKE A DEEP BREATH JAKE AND I'LL COUNT TO TEN.", {
         12, 2, 12, 2, 11, 15, 4, 1, 7, 7, 3, 11, 15, 12, 10, 8, 13}}, {
        "NO NOT GRUNEMANN.", {4, 12, 12, 13}}, {
        "IT WAS AT LEAST AS GOOD AS THE SKY.", {11, 15, 10, 12, 12, 12, 12, 4,
          7, 13}}, {"I JUST HAD A PHONE CALL.", {11, 2, 15, 4, 7, 7, 13}}, {
        "YOU HAVE TO DRESS FOR SUCCESS.", {11, 15, 10, 12, 10, 7, 13}}, {
        "SCARY MOVIES ARE GREAT FOREPLAY.", {1, 7, 15, 1, 7, 13}}, {
        "DIGNAN THOSE AREN'T RUNNING SHOES.", {12, 4, 15, 2, 15, 7, 13}}, {
        "HE AND HIS WIFE BOTH SAID SHE HAD A FINE MORAL CHARACTER AND WAS \
WONDERFUL WITH CHILDREN.", {11, 3, 11, 7, 4, 15, 12, 12, 12, 12, 12, 12, 3, 
         12, 12, 10, 7, 13}}, {"OKAY I PROMISE..", {1, 11, 15, 13, 13}}, {
        "I DIDN'T MAKE IT THIS FAR BY ATTRACTING A LOT OF ATTENTION.", {11, 
         15, 2, 15, 11, 7, 2, 10, 15, 4, 7, 10, 7, 13}}, {
        "WE SHOULDA BEEN THERE TO BACK YOU UP.", {12, 12, 12, 12, 10, 2, 11, 
         9, 13}}, {"SOMEONE WAS AT THAT WINDOW.", {7, 15, 10, 4, 7, 13}}, {
        "YOU'RE EVEN SUSPICIOUS OF HIM.", {11, 15, 2, 1, 10, 12, 13}}, {
        "WE SHOULD KNOW SOMETHING FIRST THING IN THE MORNING.", {12, 15, 15, 
         12, 12, 12, 10, 4, 7, 13}}, {"OKAY DOWN BOY.", {1, 7, 7, 13}}, {
        "BIRD DOG TO SCARECROW.", {7, 7, 10, 12, 13}}, {
        "WHICH ANYONE COULDA TAKEN OUT OF MY GEAR ON THE CHOPPER.", {4, 12, 
         12, 12, 12, 10, 12, 12, 10, 4, 7, 13}}, {"SIMPSON.", {12, 13}}, {
        "WHEN THEY WATCHED AT ALL.", {2, 12, 15, 10, 7, 13}}, {
        "I SAW IT IN THE EYE.", {11, 15, 11, 10, 4, 7, 13}}, {
        "I'M JUST PROCRASTINATING.", {11, 15, 2, 15, 13}}, {
        "YOU WAKE UP EVERY NIGHT SHEETS SOAKING THE SAME NIGHTMARE OVER AND \
OVER..", {11, 15, 9, 12, 12, 12, 12, 4, 1, 7, 10, 3, 10, 13, 13}}, {
        "THIRTY MINUTES OR LESS.", {8, 7, 7, 7, 13}}, {
        "SOME SHADE OF GREY MY EYES DON'T SEE.", {12, 12, 10, 12, 12, 12, 12, 
         2, 15, 13}}, {"IT'S OKAY HONEY.", {11, 15, 1, 7, 13}}, {
        "BUT I'LL BE IN TOMORROW NIGHT WITH A BREATHTAKING BLONDE AND IT WILL \
MAKE ME VERY HAPPY IF SHE LOSES.", {12, 11, 15, 15, 10, 12, 12, 10, 4, 1, 7, 
         3, 11, 15, 15, 12, 12, 12, 10, 12, 15, 13}}, {
        "I APPRECIATE YOUR HONESTY GEORGE.", {11, 15, 1, 7, 7, 13}}, {
        "IT WAS SOMEONE ELSE.", {11, 15, 12, 12, 13}}, {
        "YOU WORTHLESS BASTARD.", {11, 1, 7, 13}}, {
        "I LEAVE YOU ALONE FOR THREE MINUTES AND YOU START WAVING THAT \
GODDAMN MARLIN SPIKE AROUND -- YELLING ABOUT REPTILES!", {11, 15, 11, 2, 10, 
         8, 7, 3, 11, 12, 12, 4, 12, 12, 12, 12, 13, 15, 12, 12, 13}}, {
        "DELIGHTED I'M SURE.", {1, 11, 15, 7, 13}}, {
        "I ALSO PLACE LAS CHOCOLATES ON THE PILLOW.", {11, 2, 15, 12, 12, 12, 
         4, 7, 13}}, {"SO IT'S MR CLEAN.", {12, 12, 7, 12, 13}}, {
        "YOU PEOPLE ARE CRAZY!", {11, 15, 15, 7, 13}}, {
        "HE COULD HAVE KILLED ME A DOZEN TIMES.", {11, 15, 12, 12, 12, 12, 12,
          12, 13}}, {"AHHHHHH.", {2, 13}}, {"TUMESCENT!", {1, 13}}, {
        "THE WOUND IS BLEEDING!", {4, 12, 15, 12, 13}}, {
        "ONE-SEVEN-FOUR-NINE-FIVE NATOMA.", {1, 12, 13}}, {
        "CHECK YOUR PARENTS' BLOOD TYPES.", {15, 1, 7, 7, 7, 13}}, {
        "FELLOW...", {12, 13, 13}}, {
        "LOOK YOU'RE A PLAYER...", {15, 11, 15, 4, 7, 13}}, {
        "I'M NOT USED TO SUCH KINDNESS.", {11, 15, 12, 12, 10, 12, 12, 13}}, {
        "THEN I SIT BACK AND I THINK I MEAN WHO'S TO SAY I'M NOT A DUMB \
BITCH.", {2, 11, 7, 2, 3, 11, 15, 11, 15, 11, 15, 10, 12, 11, 15, 2, 4, 1, 7, 
         13}}, {"THANK YOU MRS. PHILLIPS.", {15, 11, 12, 12, 13}}, {
        "WHEN YA DON'T DO WHAT YA ARE TOLD IT MAKES ME LOOK BAD KID. \
...FINE.", {2, 12, 12, 2, 12, 4, 12, 15, 7, 11, 15, 12, 12, 12, 7, 13, 13, 7, 
         13}}, {"IT IS A LIVING THING.", {11, 15, 4, 15, 7, 13}}, {
        "HUMID OR DRY.", {1, 7, 7, 13}}, {
        "SOMEBODY'LL SEE.", {7, 7, 15, 13}}, {"MR...", {12, 13, 13}}, {
        "WE APPRECIATE IT.", {12, 12, 12, 13}}, {
        "QUIET AND DRAMATIC.", {1, 3, 7, 13}}, {
        "IF YOU FEEL DIFFERENTLY BOB YOU SHOULD SAY SO WHEN YOU'RE CALLED TO \
THE STAND.", {10, 11, 15, 2, 2, 11, 15, 15, 12, 2, 11, 15, 15, 10, 4, 7, 
         13}}, {"THAT'S RIGHT HOMER.", {4, 15, 12, 12, 13}}, {
        "I HAVE NO CHOICE.", {11, 15, 7, 7, 13}}, {
        "TRY THE PAY PHONE.", {7, 4, 7, 7, 13}}, {
        "BE QUIET YOU FAT FOOL.", {15, 12, 11, 15, 7, 13}}, {
        "HIS ARMY STARVES.", {11, 7, 15, 13}}, {
        "IT GOT ME OUTTA WOODSBORO.", {11, 15, 12, 12, 12, 13}}, {
        "COME ON WILL.", {15, 12, 15, 13}}, {
        "THE GENERAL IS HERE.", {4, 12, 15, 2, 13}}, {
        "IT'S NOT THAT -- IT'S ONLY TEMPORARY.", {11, 15, 12, 4, 13, 11, 15, 
         12, 12, 13}}, {"SHE'S A JERK.", {12, 4, 7, 13}}, {
        "YOUR ORDERS MIGHT BE DIFFERENT FROM MINE.", {1, 7, 15, 15, 1, 10, 7, 
         13}}, {"I HAVE LOVE ALL OVER.", {11, 15, 7, 7, 10, 13}}, {
        "YEAH GAL I BEEN HERE BEFORE.", {2, 7, 11, 15, 2, 10, 13}}, {
        "SOMEDAY SCOTT THIS WILL ALL BE YOURS.", {12, 12, 12, 15, 7, 15, 12, 
         13}}, {
        "PROBLEM IS DON'T WANT TO HOLD A CONVENTIONAL SUB OFF-SHORE FOR \
TARGET PRACTICE.", {7, 15, 12, 2, 12, 10, 15, 4, 1, 7, 7, 10, 7, 7, 13}}, {
        "I DON'T EVEN KNOW WHAT THIS IS.", {11, 15, 2, 12, 12, 4, 12, 15, 
         13}}, {"BUT LOOKED LIKE A BUNCH OF THOSE BIG BOYS CHEWIN' EACH \
OTHER'S GONADS OFF.", {12, 12, 10, 4, 7, 10, 4, 12, 7, 12, 12, 12, 6, 12, 12, 
         13}}, {"THEY WERE SWEETIES UNTIL A MONTH AGO.", {12, 15, 7, 10, 4, 7,
          7, 13}}, {"THE DOGS HAVE A SCENT.", {4, 7, 15, 4, 7, 13}}, {
        "WELL NO NOT REALLY.", {12, 7, 12, 12, 13}}, {
        "HE WAS THERE IN THE STORM...", {11, 15, 12, 10, 4, 7, 13}}, {
        "THAT'S ALL YOU CARED ABOUT.", {4, 15, 7, 11, 15, 12, 13}}, {
        "REMEMBER: DIGNAN I -- HAVE THE CAR RUNNING AT THE NORTH- WEST \
CHECKPOINT.", {7, 13, 12, 12, 13, 12, 4, 7, 15, 10, 4, 12, 13, 7, 7, 13}}, {
        "NO PICTURES-- TWO YEARS.", {7, 7, 13, 8, 7, 13}}, {
        "IT MIGHT BE A GOOD IDEA FOR YOU TO DISAPPEAR FROM CASABLANCA FOR A \
WHILE.", {11, 15, 15, 4, 1, 7, 10, 11, 10, 12, 12, 12, 10, 4, 7, 13}}, {
        "YOU'RE READY FOR THE QUIZ.", {11, 15, 1, 10, 4, 7, 13}}, {
        "MAKE MINE A BLOODY MARY.", {15, 12, 4, 12, 12, 13}}, {
        "S'NOT BAD S'VERY GOOD BUT..", {12, 12, 12, 12, 12, 13, 13}}, {
        "I MEAN I'M...", {11, 15, 11, 15, 13}}, {
        "IF ARLYN PAGE IS LIVING WITH TOM GRUNEMANN -- WHAT THE HELL DO YOU \
THINK'S THE MATTER.", {10, 12, 12, 15, 15, 10, 12, 12, 13, 4, 4, 7, 7, 11, 15,
          4, 7, 13}}, {"I FROM MINE.", {11, 15, 7, 13}}, {
        "BUT YOU CAN'T PROVE IT!", {12, 11, 12, 2, 15, 11, 13}}, {
        "HE IS COMING TO MEET YOU.", {11, 15, 12, 10, 15, 11, 13}}, {
        "WE'RE FUCKED I KNOW -- LET'S GO TALK TO BILL..", {12, 12, 12, 11, 15,
          13, 12, 12, 12, 10, 12, 13, 13}}, {
        "IT WON'T EVER BE OVER LIKE THIS.", {11, 15, 2, 2, 15, 10, 12, 12, 
         13}}, {"WIDOW'S BENEFITS.", {7, 7, 13}}, {
        "CHARLEY MY HUSBAND AND I ARE ...DIVORCED AND KIM THAT'S OUR DAUGHTER \
IS ABOUT BILLY'S AGE AND THE CHILDREN PLAY TOGETHER A LOT.", {12, 12, 12, 3, 
         11, 15, 13}}, {
        "THEN I'LL MAKE THIS EASY FOR YOU.", {2, 11, 15, 15, 7, 1, 10, 11, 
         13}}, {"BARNES TOOK A BULLET RIGHT THERE.", {12, 15, 4, 12, 12, 12, 
         13}}, {"DON'T GIVE ME THAT BULLSHIT.", {7, 2, 15, 12, 4, 12, 13}}, {
        "WE SHOULD LET HIM REST.", {12, 15, 15, 12, 12, 13}}, {
        "I'M TAKING YOU BACK.", {11, 15, 15, 11, 2, 13}}, {
        "I HAPPEN TO KNOW THAT HE GETS TEN PERCENT.", {11, 15, 10, 12, 4, 11, 
         15, 8, 7, 13}}, {
        "THE WOMAN I GOT IT FROM IS NEVER GOING TO GIVE IT A SECOND \
THOUGHT.", {4, 7, 11, 15, 11, 10, 15, 12, 12, 10, 15, 11, 4, 1, 7, 13}}, {
        "YEAH WE GOT THAT PART.", {12, 12, 12, 4, 12, 13}}, {
        "LAY OFF OF THAT STUFF SON.", {7, 7, 10, 4, 7, 7, 13}}, {
        "NO I THINK A WHISKEY.", {7, 11, 15, 4, 7, 13}}, {
        "THE RANCHER WAS SO ANGRY HE SENT ME TO LIVE AT THE LUTHERAN \
ORPHANAGE IN BOZEMAN.", {4, 7, 15, 12, 12, 11, 1, 7, 10, 15, 10, 4, 1, 7, 10, 
         12, 13}}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question"}, "LogProbabilities" -> CompressedData["
1:eJxlu3c41/H3/2/PlL3J3nsWlVFKKCtCg6JIQnbITMMIhVJKycrIKpXxPKfM
rLIysiMksrIyfnpf1+97fa73+/XHud3/eV3X6/l4nOc59/N8vJ6C593MLpCR
kJBMkJOQ/GP/9WO5yl93YsIMken9KxF6j8qcN0qZB0fxIpqptS4QEtEyo6Wi
hrgTYc93MIng+ag1jRt0GSD3c6qwq5gWX9iqLH92moOooNbTNAa98EBP6AD5
AwHcX94oxGSrANM+sw8/3ZNCDpVKH02/CqK7zhUjJoVQir8gtj+EFTIpB3OE
7SRQ+Ffd66FTnYRMgivXGw1qXKPLOMU+kAciiSwbSVQl8DJlokuagxLzLQt3
kn/jQG2HN2HerBeAJoWvMopaBCNzdrv7eFFD7K2sA1GeYVBtnnqB/xsz3jLq
Ys8vk8RHfGmC7W9qiJAR02eDh0qBNZaM7/EwOcpej5hKDvQG22F/KipyNsy6
k3BV2ZsRFzO3RX8cBPuKqx9rEEQWDPIVXxaE8cRdqhOlUnjE/OpCw60yItui
xMArdg6eWjZLMa/3wKuWTxwDnH/grYb44INf7eCw2gpL+nnw48iWzTF7ahxK
99pYvhkMkme2KrMDWDBxt4XYqUssqC+llRO9IwROu9urKZn1EyXx8VJTleKo
HkSxT8mAC1cvfz+CV89AKl9oFi2LOPrLL/Yw+Y0SGcx0g9/nz4PucEAghT4n
kjX9bFWkqIUQ6/1l0hEb4Jgn6VUdJwpSXtXujS6CyMuwa0jATxkZffhAnVuO
WLtaSi5sNQ7brPq6cwyccliYGe3nIPXlcf0yi17YTWn22/qYAFZEx5K9HFeC
85dNWs1v8KNyUjf3iT4taJgzeCbTr4j2P3UueFSYEfe6bW8mOPYTyun7DH0q
xLFLZPiDJKkCaqRXeh9jDiI+XXaSLYyNAxcn2S/ZtxixiofHV5K7FAa630VZ
z5Ljy2brfs0kVmxPU3P888MXGshXvBO3IoFsvYzO/yQTvoyqcHZgJsUHZfW5
VAIID7h9sNJJEY3cFDIybp4hvg/sIg5lbwLXctDsul010L7l6jgWzY+3ZT9e
oXqiBaVPldUKvn2DV+PRDDtzZiFsqEHQkEEBj4AhL82rQCKIrfHUA8NlWLWQ
+b2w8QUcTMWuWQRS47hVwtG7M7nA/PwuOe1+FeCjZrbxlhJA6jva6UlPmTCB
gTmURvYOtF9ns2cg34LHM7mcumNVIFDayV/vsoeod+Eckl9Xwvu7ewUXub7B
2C0fK1uKObiS0b+q7NILpy758u+wmoNVRhLtmdE9+Mdta2v3amGl4tUUU+fl
FULFYJrwMhBF+3McR/j2hUNR1Au58kJm3L6FBd40a+PK1r/PWMV/r092r+zD
whgBFOs0n2bPUwCnj80fCukVcKV1JVysL5DYocXdsLxPAK0P3NzNEKEMRYk2
mXF/5HBxWqDK0vkOEchDEnLr0h7Uu7m5ZRxYXvmi9zSjN0k5dP4Ic7p3iQy1
mLRFXqVNwDYd0n58h5LRoJn6G7z43SKp77OOAcTwFGTFbNHjtdqYrnbHVOgx
u79rwYkHXaJkVVfNTMEy/MHe1xJrUMBd0XT6YyM87Qq3Z2SiwooFf/fT1YVQ
Mzzv6WHDiNe3RYlJPLQ3kFcoqrLh0WPSu2a9vEBXOs/OpmwHSj1ns2R8ngI+
IxWi+Ycj4OrAPZ8/R5mxI2zvUDCrAP4ZvfSBV0AVsvxWQixzFFDCbvoX6y43
4rY3uUDcrAo6CX8J1s6jJwbl9nE6HufBiInpj+F1pqBL0SGSa/sUaLOPWs7r
7kAxElWZm+s0GECrzRBAnwXD+0Q2vbulkV7Idlu+IpRlBx/FTUzCNm2edo2A
DhffCn32bnx63OQw9ZI6HCYPvH98mQW7uBhmm6cDYOavrd97y+F/5Dz3fQpE
14UVhM/NQeJsrHamdS84he9sszzUDr3PwlWO3f0DXKQkAp3PNdFmaXu7469W
plL6Xe6yXIVVGTy172IzXGWPDuhOrIKWsKvGiQe2YGa/g3+xXSDsSn76i3ac
BclebKoICOVD9Fo7ia8ENfJpkinFTleBwxFtse/rm1AQn3bQ+QorXik/HHl3
yA+iYpquXO4Vw8+mpd31fT8Ic8Kr4IqcLF7euzMzcPIpsTck0vkipRh+FWgg
PXFijvA4qc7Js51nbgpqnP/ybsFiTobXnh0lkgoiHT1cwUJlXNDvCgtesGhN
oV4JhlsP3eLecooi/1ON6sDwv8TWmIPFAQ4hdNLcaPz0kx8u8JDgWec9SNze
3NK6UF45JiZvwveKDHP6RinnGcsgs0E5td42D6Q/B47QnKHGUdupsl/NIuh4
RnjLpmuLyErPF1Sg40ZwMejldrKC5BZP6sVqQYwueNjiKS4E6tDz+cq5Vmhx
W1L+trYEInPfVDqGSPG6SNDj2tUKCHU9NP/1iS0cEXE7Y0fKhdYXmu54WArh
Jk1xw0NzHvBhD+sMvvcMbGgsgyfv0WPG4erpt/sqQVXINdXrMynqHWb02pHB
hhbMXDpfLDzAV4C1k8yjn3jJHteI5eJoGfpQwDx8BvLIFD8Mig0Cz7PpEo1y
Zjypqv0tizYc2kI+LoxWVAG3id8BecEtyJk5GXxfhxwPdm78BKl3oLO3rPLR
fUn0jdE1uetaRwhndk1kHToN/jFBdOOeXNilqf/4Zxc9vv2zs62U/BnE2r7d
qO4Vx9vyP+emSr8Rqmqkdz8mHyYilGUFnpzdrk+mUnMGy1Pwj676w3D7J0eZ
lv4uJDn0h/7M+wQ4fnbz1pW2Qpif18pLoKPCV46bHzSOSGEz74Wp5GAkFE9k
HN15lxeN2W7mqFAaQNPFHoF0WmGkOfSwuViHBUpsx2ovWuxGwexfJ9+v7oWO
xqfm9/KZ0TbrwX5Hw3A4tHJ8hVXsGhAsBzJOnGdF+0tPBHnYqPG5lY0jzeV8
+O/+bfVL7vPspCQep5hgK2+sIu4emNCq9BBDk9WhifDNKeJTXSrT0VeXYFVZ
6JIwEwfauvz6/ivyLyyft9/tov4J/NIGPzXoJYMe3E90LGXA7qZyj88M9Lig
uvDq9OvnkBDF/KEhTgFNbjUdei9xldj57WKuYoMs6v4K5i1tTiJS6QaKrwRy
ItfKidkkkvNgoHr5tWoPCx4V68xrrQqEmRTda7v6DgFbQ4CAlTsfHv578UPX
dl5UOA3K7NGshH2LcIv5uyNsLZuclznFgTK8zHkBl2fg5B6R7q5Dg5B7d064
dlIeKb3GTnlHBxO/upFut+QrcCCXDrz5nQrbq2k7nWsksY7tmcpV3RpChVGR
JOZSAbEdbE2rpNE5NVUglUcRve7U7Z1esCcoeXkK/Ha8gaFuvxo1EwrUVrFO
UNUqgbRPab9sSSjRzmCUvCkukiBVTqcaH5DD260jn8mTqkHRZt2aOWwTnhCs
e/rWNuHnYgYazFaBY+fa4crny8RgtnpH4kVR/NurFqUjOkSUcJ4YuREtjqRR
Xx4mrk/CNruT60ZA+k86boWpgkHolt5e+u36cLtgfqGdFj/uG8k9XZz+P/3z
v/fbgXIkq2aBC5O1LQWC5q0gzvFmtOEzYRxvO/CUq3gHcEycvnImgApbKDVO
ltcXAItm9sEdx4WQsk3Mx6SOB1KoGl5cGPaAsHmnVZ5bbKibynZTXpcab3xx
jDj3MQ/e5bwbMl5SQPu0vDlLNkdidYT02YcoVdxe7K0H8puVUnQ6m450r8GU
Zh6IQgosfFU8RGwqYMMdldlOi4vEqfSO37sezcPleDOt9c0uuP7m5G/u6uH/
MPfYFMgL9E2++sWEy2e137GY3gIKhr7u4WlOFOR3GqrltYNHfHXXH2k8Ax/e
5UnuSnq05H4fstHJgeav2uop5S+AP4X/UvKpZZhgmrC+9fMLrLMzcTLIDP2j
1cvEaZDJ29UutBIJX29dar1nxYROOFwgdqABGPase19YXoOcuzMLqZ3vwNsr
ddBxBzmKm31hE1TjwFCN+LBX1U5wqFmHUdtEAs+re2bvpflK9NSmrlh09xE1
BR9vGtWK4561mbHHnPLoLWw4PFF+i0isy5q8FbjtK8cStpUIJATy6fPs4YBd
6QwpX18Kocs0s4eSFAO2vPGhtWZ/DDfmDsb6iLKgEvX3W2fFQ+FUwGQs2Zgq
tO+mdFYkE0ALZ8Z36rIZ8FJnaOBPBi36fXnn084VCU6nyyUHrzGh3puyiVg9
cWyoNz+RGzVCUNJfflOb9Q6srHLZbnKTox7p4i2edmYsjiSb+PwwDCi/rV75
qj4LLC7j6pa9fTAlsRM/3FJGIlhd66upDNHtrJabv1IPp5ovWggX/AUDNlKB
L1xquP/J0lbyibnK+ng9nt/09PjzqkNr0rvncLe7LeS5YD0wn+JWOCq3DtfO
0bedoGZGk/mP7KOlN2Fun30bS/drIkO8cPKSkjRattLahY0p48eU1OC8NGEi
vLHoLns0HX4e8sg7OJIGO6mY547mimHt3X47AaZJgsyU2XRikg/9jwsYCN3U
BXF/XQ5PsieweEMuszh1BxpAKI/vFgXun1R3D9ApgR/dp0m6pHmRKOR9TJ9u
BPExY5H7N5lRTIinMbE9FLZcrxxyBErgae2R3y8ngrFhzbp8M/VgVmhNc/jN
XzDL3uPq7UeGenRsdfmNZbB1xWLd3V8I68Y3vuX4ccGpnexn9B/x43p/Urie
vBYYfuqwtZkRw9jQkgSjjTEimf76EL+NInp7n7H6oWtL/POjVZd0cPM/frSu
IvPsmeOL37jw24WfnWO3rcGhzfBOvAM7VvDeP2vg6Ao/yJS+7WaQQWMH7m2Z
S1CLUDxYpf8MoTeGzLriVsAoZt8Duc/MmPyQ+5pcbhj0s9g5nS7lxpud+0lv
PjsBDjXMnUzfqyHPKs3mmOEm3OveoGPlFsCeVf1fQWMqwORixV8VKoKcs7qF
566RwaOoPO1XNtP/SMJsPgT/7ZffHyAlkVxSRf/kha37UwuVxebTtXJfp2Gb
N8dIh4Dq4tTeOt5dyE9e8ue0TCIkte2fYHHehSKGk/wJ5xIgSUakp2d+CWyK
40ZdL7eC9iyvi4lVC9A8DZct/b4CxS+cVw/qcaOPiGZOEu1JuJzbF7pSuw6n
To3tbJWsg9b8V0XLxmXg5h1T2fGYDP3PbOzu+1wDBblbB1WyN8BhiCnMV2EN
hMhjGU+WNMICrdQxUmkSlEt91haq9BG21z+EuKr3by74z+e+x+OP1a/GYZtk
W8QoyDmEPVJ+Hg5KOs3WlCnM+L4jSPR6OzfGxRlOn9xxAjTzsyUDbw39453o
HdPw3q9DfDfTdp0+cXrfz4OqkKpLK87ASwYfj5LfWo4S+Z95bLOVI3QqSgH7
RK4O775+leDX4Vmm/T4D+8PUZlYLBoCH7qHLkQeyyGqnpMaqkEw4rJ6Ttc0T
Qha9uvkqbg6wajUh6fukiBWxn1csVE4Q/PcvdpfN0mBiXTqXpVwWvOOfHVb3
50L1a1Okuzm3fU5Q0WDIO0FCu48mpHZL+X9+T2vH3ZiiXiHM+5X2ko+HDchA
ojEwZQ6o1tNkqEZ6oJH9Qqv5CZZtfyrbIHQ+BKICg/IkonlR3DH+cyyTAVi3
VPglJEug6hvRxmSOdiK1WT8j8ZM4Kl7sLuF62UeYe2kkD9KIYNSSQeukAzUU
DLSbzwbSYWXu8mIH1QvommHLsZXgxLS3PgUmUfZQ7+Ek/fOTLKp+vBI79iWJ
CNmsun8i8DUs7n6aHhFBgSciuWp98wSQ7bt5JNdFefgsLjFl3CmLLsLkT41N
koi3M9x1CQzU2JRfXht/Kx9o38wqmtc+AOdh+4v0Sjtxhj9h4faXLAg0aRGu
KqPBF/HUjJekpmGbcTaeQzDgu+eEuxUnas4RVc8zzsN47f2qrBFazH8/N1oY
lQ4qxXu5T3czorCjg+fig7uw/OhBhZUkHwa1nl24d+owqC4aeAcWDv0jm8GX
X/BgtmlLKHEHkX6P3E5/QgXFtURSpzNkieW2nXaUgcr43/1cTd2YbmGLB22q
f/w4OnYM+thLjVddU0HOJXX+4wY9Bt+6YhSq1Q5D53g8ifg/ULrSVfrZgRbD
ZDff7B/KgPVu4ytUH2hw5MCSeUBlFvyul7KfV6TACT7rCyJ2b4CFN1XAZSAT
3APD3IfoadFB3bLjUHUKuOVl0+YX7sBHSxZDO8sUkcbAwS/zugXBeOK709uj
cijtHiKQXRtPDDTwnY5JygBpX/fOM8G0aMb43Ov1QQlsuWBEJ5TwlXjfO3Xs
qrowng/2eNP1mAkmu4Z+taz0EY6+tY4M1eLIeaQ0Or+AEY/K33Xp6YqFqX+D
Oc/ZSr/tujjhvw936UcqNY/EwzZibu5lRPE3439ntqSxKYRlW+YSan0pzfa7
vEHdccEvlIMNNdJf20aucEGvvF5KsLsQBsRn9z83OQ/MbzQ7vjhzItsF3ibl
TUm0+2utx0VdRRxXZhh6m6yMTWC69fiiFGEXxZ1eeI0FC4JkneOSgkGPn530
xUl+JJLqq4TStUGWzkxA5M0WXDCNI0v/+xFCB++UeX/6A5RB4s6U821wZY3T
eNdgNzw+UPs9SnAexpjcRsY+0qH1terH+nZpUHJXWelbZTn4pMRf41clQ7OG
B+HdLZeIap+WIehRwOtlnvv8ipkxeNVr/J1yOPik7fbNo6VFuycTdf2jmZBe
xtAyzfAb9L15eF0CBsAo46nRXP5DMNyffN7rBwPm936pbWZkRnebN88ZQm+C
rjY0eFNLYfTME8YvBR+J/SOfrBIOkOBX4afRv8g+wt9bJK4idQJYk7x2i6RF
FowMKezs3I+CEAm5vXwGL0r9FSpoHhXExgzJv0K7BKHQj4n+3OWf/2io5j4C
lq7sGY4XhPDM2dw+mUhu+MzOIyn7aRY0T7mkyz/8BpGsM8E1MyREDx8ZGruq
4suqvyyXPkjhe7K3HcMb7wkKhgOBbZ/7QCd816DXvlm4ux4xGCLKAVVu6HE1
V+hfXQ5ZMdb/f/WZeWTLymORH0f9b6xo3d0Hu5jkh3RPKGG33FfvW7ePEJu5
PIGe2i0Q4h3uNjyzAl/YP7t+sUKiXMeedNFQCgut7rc0cYmipVdIzSOvv8TG
t71mPwaFsHVg7a3nKCs024olaW/33zsN6xfOx1iD0Dtj0YCnbCh7e+gAm5cH
5K7T3k3MUAFWXmlpTQEBPHto0b9Dahi2udYi8AvMSfd0H0+WwgXL4y9JeCsI
ofsChUkBrBh02ygMb/uBnzd7sjGjADrPl2tEGanCuK50ukmzPCokP02hzw8h
PF+I2/Sxc6GPgrp/2p+zcMqSInmA7SAI1y/OWDby4cBUa6pkaCQsTXzu0HFm
QvnQrXtkV4RQo+Is2ZYoN6RoSdtNXVJCdweZnS2peoR9s7fZiy9SGJnlV/RD
4z1xf2lp3s2EGc1Ep6dFRSLAiYyEhLtHA3smtu+7A+GVGTXPnR3mOcFUVYmL
M0IIB+w2zx5V6IQ9D+GkyMFFsP/KqK73VwxHfsheZLg6Rnitb39v9/HKfSQk
KCazH6PbbKUMKOZBySBY8jd7D3zvywkn3a7nCqzjlnwx9hBxNWHU0z4Tak3v
7bqoRotc1Ir7T2czoHd0+MMBj2RoUzN9tHWWHZPiSu+0xbuCeXfDcS/6ZChK
fOJUVs+AngsHTFp8W8B1gPondecKpCnTlqjrKgLzRTeKzQABfHFxwsw3kxsj
1J1vyi2c+J/rG0+8+Kw5WhGDbva1XMuwJtIv2T8uEBiDbX4j0xuH3dv5Nta9
HyX/GbKCA5Uf78u27K6lQbdZhyjyV1kgHeRJ5uoviTPN/ZGDKfVETcwxkVAF
Gjxy1Z6FK+Il5A+cOEDVZAhZ84oCnga8+PnwmbxQWTrMKjHl0Gx8AWRPddH8
ryLmHeqMCMkyIZhoSezcIvbip/ytLVuhtEoSu/0Cn+m3YGvrJ2lQTxWc+FTY
9zwoC0SrPOraO2mwPaiZZOgmL/ab9hZwqRjApPJMzy7W7X7c6ti34BEKde4v
vr08LY7ctF471MuGCZk3yq8is0nxeoZP7UZHJfA5XX4yu5sJffd++eofHg1n
La8PPSmeBx/rP6QhbV0gm/KzaET8HJzYb9lXlM+Jy39Sl+N6lqCvK/isclQr
1AjWJ0XV9cFVmmJRLu1ZMMsL1W41UUT2nWP7I1XtiMJyq+rG3aL47nhgf43Q
X4LX+1nlwS4boO7VTJjM5sL3FTr9o/G18EA9+xujxAaU9ml06LUsQI/H1Bfv
qU74NPgbi8JZwW+oW1BrUgijQxh9jYeocFxIoPqJ6is4E0t1gBOoUaTrRegu
8lxwXx1RCTLd9pPvAq9qPE+A9B6TRoUAFrSKu3gwPzIY1pdPueabD8LmX1n1
97YzsElZGR3bzoJ3lzgWi38FwqoKO9UfQUuwP2eidciVG+m3a8zB0QMY9c+O
p4pWukty3opYYUNLzLBLGXOHSrKGfd2xZJh0Ujs59VoZmN4bbOrcnQ1Hg5S7
Jp7RYE2VUK2xETMwfRc/XC8sjEqxReUPgoUw7KADv706F/QxNTr2ivpD9Xxy
aawGK648eUVHrVYBs14WnMmsZHhY5Zutsi0jam6LLc14kHlFH0L7XhnL433h
5GlxYsyqRdEgSgD+xeBFQRx/qnFNl64Eljs+eRawUaLGgOJUn5YgkubvHVCM
EoeMFYWHd/YLYUe7wdy5Ql7IPnF7RegeHc5IsgkR7WnQYQI2ktZsYJefsKOn
QwgZWbIvqPmPwjZFO9fGQfFX4B8uOw78EXVuPLfGER5tsPlGH3gFSyf75sgH
qHCGvaCYWZUca/tHLILM3sGQEZbYTfBj2rg6y+zoPrhw6rbHZRtGNN8WbSbx
QMzT/ZShl0NjfbPAMbYEQoVsjEmfooOI1RbSPhsqgbbcvxPTWprA6HtlMfPz
Vei8EdR9vJAaT6s+331TLRd8yJ3TJgSrwU37WIfO102YCPt4qf58CXCwHq9S
mKdAD5NDXs8IKdz3gHKvhFAZkbPcVOM3/wdeDig/GHnfBrKmq+w3xikwVVRq
sOx6CfTJCT453fUcym94zZtv0uEft6LRPfGZgDX3qnzEaPFtJCeDkxw31rvm
3m69exImCutnfPpvgpWDr2YyCTPe1CS9bNkni7TuxTt8yZII9rO+c8adYngp
12bYm2OcqL+U+3HLQQT5Xgpk5UeSQ0sBd9/xWmakfGyrutIRBpI7JOM829JB
MV17prOOFuWfkeDRTDU0rVjd+k45Wrl6UiBiIGwRRm1DE0ybO2DyAU1rxBla
PLUmqpu+mAGtd/o4f/JTIpdGPE/4QjFQxi8on13jQ/UkAY8gDV3ojBBmyuJO
B467hyr0dtLhQIzvubUpMbwW2dvvx/GD8Ex9EL8ewIhRHqkPijAO2K9QTe96
yYjc2yKGKg6WFBn/7uv8A7112i5tw21QnpRl7RNZCKX7mj3+SlMhx8MBPefq
FXiPi3Kpj1uA53fNfdHtQYKKiFkeea8KXvKf1PyFDOFoaeuCoD0vPkr+fG7o
OCNGJid/Dg2PB4cd5HZTjKqo2tEbLGhPQyxLZO64qLALnwawmoutJADcUinf
qBNDn7CpAP2SceJLld4xkfpqQjVeoJ2hVRJ57Cz5HaqW4UqI9eqK6xeokUw7
knGID8uS9+gtVuuBoOiU2hNjUdwzSSVp/XaFuGj7cCExRxwjvxX9ovccIHht
G2meFDDDxRstXXRcwv/jv2la1DL2MIz+h1I+E+D3gt/7ujMrCg/F+HfM+0Gk
i9v3nwvM6MXaM0BFFga+U296R2moMb/fP/9icj6kckvfFh82heIwP7MsfR4U
i9T1dgjLB0m6zqK5ndQ4d/OkBd0IHWpVDFtQcqZtr8eas6g5DU5zhhMNrC/B
cHP54VcNJlRIXP89Vx0FTO6kxXKBlChIJqddylIMrJvl9Lt374VZucCUVN/d
WPLiZ6wEsGB7490crbDrUORi/LfgPjMeP9/z1KchHNg4b5CwGSliiEflc7Jw
OyLGPLPyU/kI/KMj/U/Y+aPF0KGoiZCPr7k3Ji2JHKb0JEIflPHETLCWXJoY
cWn9a2GSiiTyFuhyg2oTQev4vo7a8w+Ipow97XBuhyvaTqzaTwWxlnZbJQjD
wX5T09PTfNjrmK0p5aMLRXIS0W5Sv+H8GZOHFVYDEFbDZ7SvhRu5RKz6Poid
AAULC31966OQq6tr0JbNi1y+MmMzsXNg31eUwPu3B2QLaJzF2OfhTYWQxIfF
bki5RLPXq6YGVBgEHdUKNmDJmkORu7eTuNP65bjXCQlMOEi1T2HvOPzjR+kx
+CDmQ6J8+jLU7LSjOveFHZdCRfdcVqEF2hZuhjcjwmhtE0WE5GwSrRwmnbLD
InhnXOiG1LYv+MfIbZ9QkqEzHH3kAFBHKPO7v+PHZrpVqYtC275gNLf74yIN
3pyNswkNFIB4m9C+o0uCaMFDYdYmuxPv5jCQ0bY/gMWedxnxLVVwgOftiT8s
W+Bwd89zg+37T/GfqIoD5R9YPOrZALW8VuykvWvws5Plo9MlJwjQ5Ty2eIgD
nc3DZiI03cDgS6U781F2fOXJ8sf1zgVwTRtoZq3hQL1j0s/ryeeATTWfQonn
G3D6rN3NVOXBhZBzWb/VzMDtSkxMZXYOlKqqqZn1UOOoBt3dOWtXOPJB8anZ
RXYsG/BfEHYmwZSpfPXRRx/g93yYtLEnDbaWVwwZvMoGn5VRd9Ol+zD3afi8
csIu1KGMKeL5ZQFfOMuHaf248QUPu+zfhaNQ5NQDr+N48cFr+fHhx7Nwqo1I
KVj7Bn1uLgSyHyJCZSVIagOV8Hrj4ZOUm+OwTY5TvqMAn4oGhui256029b1f
f+tA+stfn0dM38OxC8GWeT/IkFfA0EqujAFYkqLuqt0VRn/RUxSRVpfhQpR2
6+T2frbsX1BdSi2FmeQC06iP5EgfvlO8KNqTYG7cI+jopoDu9H3Sq58KQM69
YHRXABXyHWF5QcbJADXZJLX7k4WRcYNccquRHKnSggXYbpTCHosRFwfZcqK3
3qb0Xo4U+gnWGUjQ3YB4e9GOxZvM+PA7Ffmeh8qwk8qdkUxTAJfFR7YYeykJ
3XKyZ5SyqnhN5oo/TRArqO+nCG7a9jNpJg5xfJLjBFVPPPOndjGUPRswp3Ex
DAoq/TY2+5nxVnaw0hHqa/AztYlJw5EVj0xbEbwZ1cSqR0KxW4ck2jiMfy1k
SiAud9NIPdzuo+UNXe7LUb6woNq3cSuDFcOey+gYfm8GhQTRiV7uVWD/qdnv
328Mg5NfpTMJHkwUDbX7sLeGCKMcV9lXK4leR4buqvetQpomme9RqyZQDw+Y
kthHCoMadMbGGSJIrb8m27vhTrzo3xV67L4C8ljyHWk7mwR5GndHLfJ3ouar
jxzf/OyIntrwZ8XbdeVWdIT8kok32A9HPZGgZ8PUUJPsKO16UGGk+/OGZx3S
d/AWPuKshoRQ8iSO/k34rXI2h5IjBzr8Xn51oKBBux8dr6g0rOD4tLNAFRM3
1qZmml09Og3bZI47OwS/1UUzJchqiOQ0GpWQRklsKN3aClZ+WMlARWJHMr0X
NS/QDN1jUEGjG+9TvRsEiK78fLMLelcJC0vWcwKxClivkUay+ZAcJEO0Dt+x
F8EN/90OS0OmsKJz0bh4uz7/Urd58trAANp+pnu7hvNisgTPHpEDNlASejBt
Bbhw7BK26UxZE9T5jsgZqYhzxyNtJumuQkKapQ38ZsP1edGfCjS9AIF3pC7d
mYNxhv6fMoWF4DZhOe7ITYXiOXxOrkxW8C30h2UAJzcyyg9yH3Oqh5GxU99X
yNfhs6qyj8/FMniVXKRsnUiG6hOTaTGslFDmJHxB6YAIFlJIe8aOREBY4ntx
dVlmJO0cOfIukARZTGSDjrp9AOen6uR7NvlRJujReLP+Phh8WR223noNpIoE
bF2PsGLA5bAZ1H0Dp1m86iL2UWAsQ5NpYuU6oZFTrH6OTBT7mFpzLugLw3as
Z84UxDc3qveGftMGkRbaCmeDbV83H71l23+SCPG21d6XqojROvcCTgaWEsuv
VmSS6aUxq+t4aY3jIFEse0Dz4yNxrH2TwRr9lw2V2buS2rrdYde6ZBXbUiAE
N7hnHGpjQTvC33/rdw6s/ZysTK6mxkC93BxdVVLIzTG5wpspgme5AltEN3yI
M21uz3/qKWAkWcEM9aGr8CH37wevETYccYxRlr+QR6jIX6igWJbGxuiBb6Iq
9tAWUH7DWoMTBf76SuRI1oHD1k5Kprp1WJct6RFrbYfgRpelN9J/4OYPZ57Z
+Q/g9KrUVEWPBPuKoioqK44RAdc0Q05zKmF8PafesbfFoFcrkROrTokCT3aK
Zvb7Q9bBO5OT/Kyo5VqqOPf4KJTE3NE6/ZQXG4+oZ/9+3gYLrQxSwhRLQJ3w
pyPg7lcgu7CfTcZlAarjLb+8FGNCilvC+Xbm0ZDH9jyPO1YA/kXabT8v+y7l
7vKxB0Td30xpJpBFr93Fe3u5LsMhtSPfeHrZkUvMNj7aap2QuccU5U0rig57
7h/xLwgijv7utF9blscrD1700YV6ww+Jt2TKZGx4r/dh2VI4Ixid+RuqayWM
dUISvKHZrJjBHfXM3d/3f84Pe088j9O4twP5r+SYSKg8AX6qvc9wixGJfTs8
tF1jwPVd532TxdvQ9/NodmIWE0qPPT/zQ3KZeN24T6/DXRSz9Ct9eQ5HQ/pA
ef5NCSZsMLy1HPnSHiZnz8arCXGi4TsdlxfHafAdsyujofBL0OW9R9IU1wC3
DzI/O9aw3e+Cz6jrT5UQbnFfHbOOSqP+vjtyxhRkuH5bvJXSswJMqv1P/tEQ
xZDKcKGv5avEQ7u/W0eVhysf3SERUGhWw9M7rK2dJQXx4qdTO6yTJcBYnq9Z
EgLB6Ijnz94eFiy6zgVq01wQY/uY3faqENLbMiYIeFgSYfXWIdOvFFFyZqEv
/JIZaH3ev/JYigfLSHnmSzV4sVtL3e6ghhFQiN9JeGQhgPRUYfcPPVKCGbkb
F7vLzxNVA4n4UVoRO2Zzmj5IRIOfxY+QbBkmdHkpdsr8iDSIb8eAxe3+wKM/
PfqknPj2SVP9dJoUFq9eNz4koEAcEmC087uojK3BMkNPzysh1yKj64TWYWLR
UdRK80YIvGbO62cyYsFhFRtnnkJzeJFRqrPjBzfqh/Mf8nUURpLrcVT7aRjh
jR1JyGoxP5BgYE8/txDm3zrQL+36AHZdL+tKMN6JnrExCWmHMuGAmlmksg7t
/3uu9u85m+hZQ4w/vbAF7r8qb34n0fY0UkMVpidyQmOi2KLw9M6E1zwxYfSF
qofBFeh6Bb6dc2fH/O7+7xJrZVAzw3/r5GUy/Ej+1fIJSyP4Ya+U+I01YOV4
Mn7PmBvJtK62XmuxhNcPGmguF1Dj318ZSml7c6FLblf41Tcq23n2PbKYXwAF
iSADDscR+Ecu359wdnf4t8hfMrAdXYK/CuCFIqPQzPbbYJ2pbd6cx4QOiszF
a+8mYZvzqxsjEM/WUr719QhcHdjwTR/nRdr7jeQFHQHErEFl6DqrAiocTyl7
XZYAKXu8L1Uc2YUvFp/vZ2T1gOtOuw75lLDhxAmxyfTZcEJDcl2k4ao8bpQ2
lve8FYem8h5ftn2C2PL3dZxyMS8alF5LZec/Css/1Hi6nh+Gtz3v5L7x8v3P
eUryJ88DF/W/wcX5FDf3mVkQnNqilM1BKN601VZuJ0FO/eY4zSpfMFMedVVL
YcX85uKvRzpLiPzYHPEBQ2lMJD9lJ24eCWGyhQuyV5kw2VPocECtNrAq9t53
NubHK3bSv61tMyAsv+JI8H1azOgdepTVRIUWL9Xe+YS9grbEGLJaaUb81ZoY
oyt4D1q+JZ3k6PeDt2OdEStXWJHv6TTZMz0xmCF7VmNwWhDZqyL8/vw+S3yF
gGefTiuicMHJ8aGHSlDQ8qEVt/P+tmIs+7fQLjjf9OLCq8F5MPLo1n/LlQxj
hfGvNKsZUPrKhtPcTCsYntLivh61BBd/k5xuT+6GXk0Sdc3D80B9fgjkfrPA
rO2D5ZllIZSrq+CqKrpD1Lq7ZK7+lkO+J2oB9StL4O3V60Lh0ArKr9L2iDOm
Eikstz/PSMuiwJ6irel3vFi+g0J8aUEfXvk2f4u4TAULPsP+mfzb/fGt2qXg
dW54/Frrad9pITTeox7HR3WJmFaoH8oYVkC7iXfnczq/wzaFLpZOwD0TJn3D
PRsQfyNSe8qvFn4N2ThunRXADgEf9/yDSmA+/uHRetVvIu+TVgW1khhG91gf
oXKmRlZ7n6/xCnnwn2PbrYKKf+e4Rpa6+D2H5NvXk7mQR+byuDGTGo3Cx74c
ZaGFvV5t1SfHhPFFXLF/b10iCF74s+j9fSfeOe7wUv6NGK4wx08cSpog3s9Z
lIlM2xD3X18esghRxPJxv/cqxqfg7gPDBZUHXHju4pcjtXVdhJbSgafikhL4
+brovRf9o7DNNuOYcTj8IFmkaTIamoyYxT4xMWH9vBSTpe8W7Es6eeecYRXI
yntnbfAJouGRbSUuCZEd0bWb75og/lFrd0vuKmTs7a5VV79PfH/8+FOXoBwW
R6eM7YyiRN2k+BKKuSLQF8zWeXH5ElCoOp24y8PxP/Oy45mIlnVSAbxjW/JK
d1wVKF5TGz7h4cfAayFLdhk6IHa8osDtMCOabYvf2fFg4NH1ToVj9D985zwB
bKsGpbf8f4PUfOIv45V+4NKIWjCvo0XNmy0jTe3p4JZClufwjQ0/lF2lKzx/
FYRMD5FJ1+9Ghav6rPF71EH2L6uXEG8waFE+ua19hwUFdN8LOZDGwzaq61wY
0Vb9+v4eDXX488fhcm3dbtTPXbKnvVVC1DPvrGs1l0a3SWHFbNd6kLsucliR
ZB0uHdqhrLPaTDRRjC3fYZP8v/WSpKXc8H+uvznZQ65sanufWlMkx0Wswb5t
8aTH80Viy0BOZXeeKBpVZQzMmsyDIsODtfqIblAd+fRR2fQDCD+VWc+8Q4K0
PH0qDAcl8M4V0XPhj78S17/Suz+rDoYlMl6nMU8WLHyWHVh+eR4+hqV5rJt3
w0Fn7o7RsTIwa3+WueMqGTZk7L/M5/eTeP019MjlWDE8v0Z3wLScGTuqFtn2
0YYDk8UDh6m5e5Aj9+mr4eYuTGq/PjH25i8UpcwcpJuuB+/L5gHudXTQyd83
V1AljDQkoQf25WsS+/J5UKFPCT9ftjRny/OEx50nMkTOsOFrvj2qRSl1RGe1
R9CrWEnkF4w4p7SfBaoUkgd46ITRUr8zyMfYGV72fpazW2FHE3eNtD/hzCj5
bMjrENcNkB4zIzyuN0LG6QZfX6M1IJX6VMsfJIJml8iyRR6TQa/1Q7/fK4wY
8LpEYe5ZDFQr3U04/3jqHztGI4dBJNaYPo+bBSv0+VPZLUNhUzBxkNhpAmar
09KZpTwYq8KR9/isJeHmbx3SVKCIvZwL92z+TsNrxR8Zb9sHof9T8u/K/Mn/
kIP6O7BwHmlut6DFPopa04N0mfB7309hgSka7NWMXVs5kAUyFD50osfeEmwG
j2ZsVqWQ6ei3F3t3u8KlAJVbLK7seN/V8FS3+DDxJuL6vMcVcXypQ2Gg+9kN
bmsflTitxo4q94aPGmjeB5Gq+x0dg7uwuV9CYmU3N6a39cWEjZ6EH447ztYb
Tf3jQFX1MAQIHIniJyb/0fDL6sj//L/rUDY/n2HeOcL6fAy+0lDE4hc9lUPH
a8BHpfwtB8kmdGeJaJx0LiC2Q/ChKmnc+ZKxND2bCQ/wmAnmTd8G0mOnL/oa
ZhLbYanXQwYzteMk1YxdgUap5nCFIztK1W/ohSjpwYw8GeuELR9yUlmhfY0Q
KuyR31FIwg5V/udeFP+QwMYoFyt5ly/E/PvM8Mi+q/Bq8pluI7ChQkd003tq
1m2fb6JcHBAATHwH1Phrq4geP85dYT8lMenGr8R9VsWEzLXC9M+e0oiB6Z8o
O7aA7IfwMdOOjyB0cfRjpXMcbKM/Oo4Rj8QHjjhs+zmR1D3v27b9nOFpnim2
KDFUrc6tflP0k2Da20hW8IcVLoZ2lWkPCOFmlQMF7waCttHh2WOvSDD0vhE/
i3AtuN/7dDDHfQOeKglt1N4Wge2oPxwhiHuOzZoP15wESi22Azyi3LiL/6jc
rW9UcK9x2PIDqwiS9g3+peAzg81K4y82mjzIff24RPiYE3yhvWDSo8CBPI7n
AumH8yAlYk52ci81JgTE5YrJCuIT4n5A3GUJEGZ1us9xuwNoKXvTDxcugvov
xac+V2/CEqexZhwLM/pdjGZ+71IAjxQN0ufiqVAp1nyl5/UF8KDT0txVyYFF
X3bYrdUcBUeSdrfWB7wYb+zpbpVhBI/CqyKzpXnxOp+571UdXvRNLLD/SWcE
VVQ1gj+3/YaLCa/uQBsJ5toP0KUMVoN30ykd4tgmmOXoFpwgqyYqzWgVvEYl
MXFkn1beWzL4vGuKgTFABN9019KyDL2DWrXjK8q05Ghjcjg24rkjIbOj0s54
VgF3PL7/S4w7AlqO+rCYmTFjBM/vNR0yF/h+RmvC5R07PptNSX+7ew3II8ZF
mtob4Qb77efnPE9DKCe3pekVLkw/f8TyMNEEJ37VR8q/XIV3e/wNlOkvwxHj
S2J6fewos2k5N1BPEN8r4ys/OkuhpnOllgcrB8FXQ6mdcEUFE734Wpo6J2Gb
x4t/jEB3yyvnsyvF4OtjUTLLS4ka8kfY2K0ewtm7Ui4iZDtxXETmcripFhTl
MWT+SOTHZ/v5TDM4eHFpuSRLWO0YfJ42mZ9OjIMZk/ljUjcZcX15JfXp2nvA
uq2EtNdkGPTmmq6FbhZ8/UHbuTlJg23Jtn2OEVngGHR19/12GkxXF6ndGDsH
t6rf2VqHcWKpaGF7WtkkbNM8bX0EKCyUT2U+LoTsRz3FC8JUONS8TCV/4SMM
BLqFOLCT4Fa3/VmbY9ngEHtNcu89Gtx/ZiCUe4kJfmszfDOQFcYyh2JGl/td
IJcsU93cOQ8VAe4f1XzYkXmoP5xl5AoIbJIL9e1xhBDtG39p/TiwkWbqr9nv
83Duui1djT4nvpjocrr3pQck11QNdDLmoDKRkv74vV5wu/Dh3jW9OfA8q+Bf
91YY39I0X/vgRA8NhXrRBhUbYHxT9jxHcQ1Ip7sMzn3fgTlsZqUF9CmgORWQ
YikQCUv7j18e9mPCKO6NDwZaRdAxsctSqIcSj1FUe2b6LoIyE6Nx0kAHpCfb
3L+U1gqXMr867KlbAkftrn6XPU8JNzXeAnKNbX+X8DeYqeAMvN/iMJ3Q4cKB
kbO6GqMHYZm57cPGMz5kOn1K3mHNC7q+0vdc52HDIuU+PK/zEj67k0ub6tGg
+meBKHkLG2AoXin2reDCOx4Fn9J+vCXu6zX/tvolha31nXSy5C7w3ub5BcPt
/LQW/VXqWn0FIvq/5sv5s2MhE5vnJY0GoiljkmbEWhLXGja3tBI+VEoIk2CI
1B48PDYydy3qCTTWfPf85L8D6ZoTyY7eBnB6xar/aj8p3spdf+U66w3SkPu4
cpoVVSD/tl0KFQo0u0nf0y2A//+9k39+0fKL9v/1E5ioYY5C9wyPx9tSoM4h
j093Rl7DWKp8bmA6GTRJ7Z7kuy6CELc/7hMPBbZyFFPrPn2z3Vc/LOVX2oNm
N6EqyM+JTe+inrw1/Ej4DMhdOsoshXore9c/v2wCWq1btqdLVuHAyu1QIxdW
XFseEr457gclgSXRj2KuwqDMi4tJrWzYxHjOcWSFHYqUr/KaFAhh5b9zc4Pw
yktkJAL+3Rpoc/5gn5W2H/QwqqtducWKXbSULylG04ntwCqZIIPxrvFUhPIo
/KOswQRg2yVaNfcf//jp668x8B4ylx0UNyAIY5Uhtb1KyPdla7H6+EHYyhJP
CgQ+dC2QjxmUTAeCUCFO0tBh0lHBkufpHyCZVUmT4iIJkle0/d27oQAZy56P
dtwQQONPN44rXjtI2M+LaVfeUMIlUpvg6P33gMwmWOaxKCOWZPnfeBfEj+ku
SydiKbThhsu56MGSp9DzkXNLTXYHvtu/HGnuYQhlJ1OY3U7y4gU+Oh0LY1bk
T/SWoEi9BhML61u7Zxor+9RJSNZK1PH78Yb3nLeYUaDmSYIn7Q2g7V8P+pQU
A25BIGK0xoj21wr5H47vJR6OcwkITiuh6LpA6Sl/PaAp6i92N+ND02+9s4px
Q7BN94KtX1BjmxfolU8F0rvPXG7mFMGQaZt4YvMjFJ6RZn5bvAXnWV6ckub4
Czsfc/YnUjTARGsNFo8q4DEVj/V9ZU5E447ZxINBYhixlNdEYjtFPDAsyyk7
9Z6w8H7bRtcihUFkfxzPhMkhhW3BMm1HLPHHwbV1zSMOLri2Poq9y4idLXpP
98sJYoPItjorAQzTXXL+06zgwlFpSTsohI1xkw0i7JlwMFP6foopLV77eJBJ
Q0oJbgt5vW44J4CiQys38Yko3jwjTlqn/oegSHR30surIdLYipLulkvivrmc
qgVOMrwtftb7i2gF8Fzw1xbhF0e6jiLTTOpRQr6Mad5gjRpuVNwL0l0XRqq3
P55lKS8SfItemUOlori3/enWx2Ee4uoK1ZDCfhVc1DR++TyuGoLGJVVnIjZh
a3RXvcz7ani2Trp31WkTyouSXlxysYOvHirTpr2cWJwSfWlVRA7vD4o77OW6
TzRnk4lcpngAZpT6ScmeOzF8NrR2d2YwBD6byyrzZcFiUtGcn0OmYJKWM/Na
nwePtwvM0zTpAnX8kZDpXj78S0s/p3XmApwT3Dxi3MyBJefnSs6pFBCvz6kM
ltZK42FnKV3mO8VgZs5k9tqAEl+HZHR5ib0hCiaNcualpPFH3UAC946vsFak
HnG6bAEmtSjAPFcJaIKylmrMBfC/39f5v/OGJrM5Xnd3GyQ5lElsB5+bnjKo
l9ZAc01fCRKZ5hmvbc+tXLoxqXvkQgmJu4YODIQ8lrK3mcYNkaDjZUG+u9EI
Oed/0k542YPRftKNJRlO/PNCPSjLyxsmYwZpQyjYUKa85paLAQu+tPKJ2hUV
AoTKL9vrjawYsNRWuFXgA6a3A9MayL1BKDX73msuNuyOsGzf0XUDDuZe+sFg
y4xpDfkBrotiqPObJ6evbIwQN3HKeNEbARKv25iy5Zjx9F4nZL2cSNhFvpHS
/ymLc5wvs85tnAfhPypNLXqc+Mtf2XtA2hT2mI9fJ/fgwa3OsIstN9bgbwG7
ynnmRlg699GgcsMExPI6Aj4H8qAOt2lK9yYjsoSppK14xUDX5mEnSVc5/KVA
5G/ExBHDaKCkrF0O1Jb3rPEkGcYxJj5bGnlImARcdXF/IouPXXXP7czKhTLa
iOTTcdQYIW22xmATDFEJQeQ2oSxIfUVGW46aGfV39lrh25sgOvPky7lH0vD0
y7myKzMCuDEiFGNU+Qu2eSy8cgh6DlmmvTO1BQfRyL909FzI+H3+UrX2HfBY
VRHyf8yEVVv0J31K94DC6Z7Vy7d3Y1JyL7ug8zHoLKWZi2HkRR29uXbR6Bh4
sTI5//4vI34SovU9bseKs0JRIn1K1+CwreVzIf5wUMg1iV8sZUaLcJbDJn8/
E5w606mWixLIlJn35E9fNjws9klKdqDBqlJHsePrPVA0nWxtGTsHtM+f54ow
BoPThBRtQyQLZs36sep+/wpS+/gTPTQWYN2yM67qXB+AhWq60ZVZWHG9sXvV
Y+ofB29mD8P1xyvXpT1+w5raXMBxsgFYoT7xhX+1ArSfhS1tDZFiuPupSUrz
PeCawWGU/nA3ch2+cPksDTuUqMqLFFULoeH+UBvRH0ZA1yFlmiXEiw8+u/kb
fd6JAY3j6k+2EuE7pV+8R0IlyGPUid/vSLF70TeO7ww98Dsc4Xj+ThgH5Z4G
hj4eAHcOY6JkYQa427slyIZVodiUgiyWTADbb9LtFabpJ+q5dOo3P4rjp94n
j7MStwivhdceTG0imEH9o6W9uwz2K/jyV3qR4YDa6OCA22k4uDn95PO2H91Z
3qfp5RAI8ss7+8N+sOBXs6+Pi6fSwdDarcGGoEUNRlv6Rc9e4tSz1Pup8+IY
Zf53ymmeFM9cdQ7OL62AU6WdG9Grs0R5qqLW+i4xnCgv73xqkw6zM5aP/f7Q
4oVsL2//eR40f7Yj8ZXBcZAjueDkr8MOyiqVeBuE0K7niVJtKBmSyZSbD+SU
wY7dTq4K0S0wQt58Ja5xBf4/2tQ3gw==
     "], 
    "CountMatrix" -> {{370, 130, 0}, {164, 336, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwN0lVrFgAAQNFvTrFzKLbO7u6eLfaG3bMDY3aLOgNzCttsna3Y3V0zht2F
IqKIiYJ9Hs79BTc0clj40KBAIBAlP/jJL/7wl38EJQsEkhFMClKSitSkIT0Z
yEwWQshKdnKQk1zkJg95yU8oBShIIQpThKIUozglKEkpSlOWcpSnAhWpRGWq
UJXq1KAWtalDXeoRRn0a0JBGNKYJTWlGC1rSita0oS3hRNCO9nSgI53oTBe6
0o3u9KAnvYikN33oR38GMJBBDGYII4hiJKMYw1gmMInJTGEq05nBTKKZxRzm
Mo/5LGAhi4hhCUuJJY54lrGClaxiNWtYSwIb2MgmNrOFrWxjBzvZxW72sJd9
7OcABznMUY5xnBOc5iznOM8FLnGZKyRylRskcZN7POYJT3nGc17wkte84S3v
eM8HPvKJz3zhK9/4zi9+ExTsc4JJTgpSk4a0pCMDGclECFnJRnZykIvc5CEv
+chPKAUoSGGKUJRiFKcEpShNGcpSjvJUoCKVqUJVqlGdmtSiNnWpRxj1aUAj
GtOEpjSjOS1oSSvCiaAd7elARzrRmS50pRvd6UFPehFJb/rSjwEMYjBDGMow
hjOCKEYymjGMZRzjmcBEJjOFaUxnBjOJZhazmccCFrGYGJYSSxzxLGM5K1jF
atawlnUksJ4NbGQTW9jKNrazg53sYS/7OcBBDnGE45zgJKc4wznOc4GLXOIK
iVzlGte5QRK3uM0d7nKfBzzkEY95wlOe8ZwXvOQVr3nDW/4DGaSy4A==
       
       "], CompressedData["
1:eJwV0LkrxgEAxvGfIxRyJMoiZVMmgyiT6TU48heIZPC+Booox4I3SXotsshg
oCiDq1yDDJT7GklSsjlzfQyf+tazPYWNkfpwXBAEg7yIV9754Ot/iA+CRJJI
JY0MMskhlzwKKKGMCkJU00AzbYSJ0E4nXXTTQz8DDBFlnBiTTDHDLPMssMIa
m2yxwx4HHHLECaeccc4lV1xzwy133PPAI08888Ib73zwyTc//BIk+IRkUkgn
i2xyyCOfIooppZxKqghRQy11NNBEC6200UEvfQwwzAhRRhljghiTTDPHAoss
scwq62ywzS77HHHMBbfc88AfsqJKFQ==
       "], {}}, {CompressedData["
1:eJwN0E1LEwAAANBZu0mRJzVwEuRwChZRTJ23Pg4eFCqMMLTtEHlILTFmgRB1
EAlESIYgYtONMrCCSBo4i2BQ2WEwAhFqB7sMrKNgl97h/YF3IjFyebgqEAis
cJgg1RzlGDXUUsdxGgjRSJhmIrRymrNEaaeDGF1coIcrXKefAQa5SZxb3OEu
Y4xznyQPmeQRT5jmKTPMkmKeBRZZ4jlplsmQ5QWveMM71smxQZ5NPvKZAl/4
yje+U6TED3b4RZkKe+xzwD8CYg8R5Aj1NBDiJE2EidBCG6c4wzmitNNJjC7O
c5FLdNPLVfq4Rj83iJPgNkOMMMo9xkkywQMmecwUM8zyjDlSLLBImmUyZHnJ
Kmu85i3vWecDOfJs8okCWxQpsc1Pyuzymwp/+Mt/QuxSAA==
       "], CompressedData["
1:eJwl02loCAAYBuCNmPuam2JGE3MfRbmPjW3Y3DJk5r6JXLnPobWxsBZq5T6H
JpSzuYncV66Z3GeU61l+PO/7+6vvDRk+KW5iYEBAQC+R3wUoRGGCKEJRilGC
kpSmHMGUpwIVqUI1qlOTEGoRSm3qEEY9wmlAQxrRhKY0owUtaU0b2tKO9nSg
I53oQlciiKQb3Ykimhh65t9GLHH0oS/96M8ABjGYeIaTwAgSGcVoxjCWcYxn
IpOYzFSmM5NZzGYu85jPAhaxmKUsYzkrWEkSa1hLMimkso71pLGBTaSTwWYy
2cYOdrKbPexlHwc4SBaHOUI2RznGcU5xmrOcI4fzXOYq17jODW5yizvc5R73
ecgjHvOUZzznBS/J5RV5vOYNb3nPBz7yic984Svf+M4PfvKL3/zhL4GetSCF
KEwQRShKMYpTglKUpgxlKUcw5alARSpRmapUozo1qEkItQgljLrUJ5wGNKYJ
zWhOS1rRhra0oz0d6EhnIoikG1FEE0OPwP87jCWO3vRlAAMZRDxDGMowEhhB
IiMZxVjGMZ4J5A98CtOYzgxmMoe5zGM+C1jIIpawlGUsZyWrSGI1a1hLMimk
ksYGNrKJdDLYzBa2ksk2trOL3exhPwfJ4hCHyeYYxznBSU5zhrOcI4fzXOAi
l7jCVa5xnRvc5Ba3ucNd7vOAhzziCU95xnNyeUUer3nDW97xkU985gtf+Qch
WaeU
       "], {}}}, "ExtendedClasses" -> {"Not Question", "Question"}, 
    "Weights" -> SparseArray[Automatic, {1000}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00044159, "SingleEvaluationTime" -> 
    0.0061762499999999994`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740158275742425*^9, 3.7401588612161293`*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"7a329f44-a841-4e2a-9c9d-6cc60b045aec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"a28f438c-b49b-4104-a35a-3130cb085a1f"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8912604464301641, 0.6944741802940725, 
   0.27370902115127005`}, {0.928327465642366, 0.4911976474695699, 
   0.003568374951087935}}, {{1., 0.42, 0.}, {0.9175725176402327, 
   0.806972124925851, 0.505302658348255}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["370", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "370", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6928838951310862`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.74`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7156673114119925`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{370, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.6928838951310862}], 
         Row[{"Recall = ", 0.74}], 
         Row[{"FScore = ", 0.7156673114119925}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["164", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "164", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.30711610486891383`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.328`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          164, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.30711610486891383`}], 
         Row[{"Row fraction = ", 0.328}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["130", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "130", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.27896995708154504`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.26`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          130, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.27896995708154504`}], 
         Row[{"Row fraction = ", 0.26}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["336", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "336", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.721030042918455`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.672`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6956521739130436`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{336, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.721030042918455}], 
         Row[{"Recall = ", 0.672}], 
         Row[{"FScore = ", 0.6956521739130436}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.74`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.74}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.672`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.672}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "534", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6928838951310862`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{534, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.6928838951310862}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "466", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.721030042918455`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{466, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.721030042918455}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["500", TraditionalForm]}, {0.5, 
       FormBox["500", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["534", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["466", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7401582818924913`*^9, 3.740159096756035*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"2ff93e4d-7ab4-43cd-b9e3-5ab0f946d6b6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wh - question s", "Subsection",
 CellChangeTimes->{{3.7401456348239403`*^9, 3.740145642044519*^9}, 
   3.7401520017503357`*^9},ExpressionUUID->"8c8c4504-2f1d-43ec-95ba-\
13964edcd4f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"whQuestions", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<which\>\"", ",", "\"\< what\>\"", ",", " ", "\"\<whose\>\"", " ", 
     ",", " ", "\"\<who\>\"", ",", " ", "\"\<whom\>\"", ",", " ", 
     "\"\<whose\>\"", ",", " ", "\"\<what\>\"", ",", " ", "\"\<which\>\"", 
     ",", " ", "\"\<where\>\"", ",", "\"\<whither\>\"", " ", ",", 
     "\"\<whence\>\"", ",", "\"\<when\>\"", ",", "\"\<how\>\"", " ", ",", 
     "\"\<why\>\"", " ", ",", "\"\<whether\>\"", ",", "\"\<whatsoever\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740145645159799*^9, 3.74014581746736*^9}, {
  3.740156894480092*^9, 3.740156944142395*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"2c39e4b2-e44e-4951-a038-6f2d45c565eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringContainsQ", "[", 
  RowBox[{"\"\<which\>\"", ",", " ", "whQuestions"}], "]"}]], "Input",
 CellChangeTimes->{{3.740158611009521*^9, 3.740158628101625*^9}, {
  3.740158664099506*^9, 3.740158677387236*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"8ffd62dc-42f0-4668-98ee-f7ee71c8aef2"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.740158770055189*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"7276e46d-bd20-462d-90b4-aa990e1d8d55"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"vectorNumbers", " ", "[", " ", "lines_", " ", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Map", "[", "\n", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             RowBox[{"TextStructure", "[", 
              RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
              "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
              "]"}], "]"}], " ", ")"}], " ", "\n", "     ", "/.", " ", 
           RowBox[{
            RowBox[{"Missing", "[", "]"}], " ", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}], 
         ")"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], " ", "&"}], " ", ",",
      "\n", " ", "lines"}], "\n", " ", "]"}]}], "\n", " "}], "\n", 
 RowBox[{
  RowBox[{"whQuestionsChecker", " ", "[", " ", "lines_", " ", "]"}], " ", ":=",
   " ", 
  RowBox[{"StringContainsQ", "[", 
   RowBox[{"lines", ",", " ", "whQuestions", ",", " ", 
    RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.740158920961334*^9, 3.740159136230294*^9}, {
  3.740159202152775*^9, 3.74015920902262*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"b05ded02-c2b4-4cfe-b820-81ccea690354"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"whQuestionsChecker", " ", "[", " ", 
   RowBox[{"testq1", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "100"}], "]"}], "]"}], " ", "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"True", "\[Rule]", "1"}], ",", 
    RowBox[{"False", " ", "\[Rule]", "0"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.740159151006712*^9, 3.7401591724621477`*^9}, {
  3.7401592685703497`*^9, 3.740159287497027*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"2e8f4877-cfc2-4e55-833b-a6cd59c8c11f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.740159166627046*^9, 3.740159173190194*^9}, 
   3.7401592178537827`*^9, 3.740159288718835*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"007e139a-ba5d-40c2-bba4-d6b60ac6e021"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 3.7400883194708557`*^9}, {
  3.740158177371798*^9, 3.740158178411964*^9}, {3.740159552959792*^9, 
  3.74015955405449*^9}},ExpressionUUID->"e1bfd86c-b4d9-4adb-ab28-\
100e769c4867"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"createClasses", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"createClasses", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"createClasses", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "300"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"createClasses", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "300"}], "]"}], "]"}], "]"}]}]}], " ", 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 3.74015855015483*^9}, {3.740159429774341*^9, 
   3.7401594638126287`*^9}, 3.740159505209405*^9, {3.7401595565268803`*^9, 
   3.740159576062914*^9}, {3.740170957481477*^9, 
   3.740170970433209*^9}},ExpressionUUID->"2fa3af23-900f-4dfb-b4da-\
54d74ec65c98"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Boolean\""}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Boolean\""}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["2000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 39980200, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10529750764281074200745768412229120318435128887516371411408, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529750764281074200745768412229120318435128887516371411408,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740159512816429*^9, 3.740159782434148*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"df4306c6-f894-4f11-9c3e-2f4b711cf376"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl200", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"createClasses", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"createClasses", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740158251434836*^9, 3.740158267226678*^9}, {
  3.7401594789628983`*^9, 3.740159482899502*^9}, {3.740159582199562*^9, 
  3.740159585588765*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"b6d3bf9f-acfc-4af8-b284-392b2d2d911a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["400", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["400", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7099999999999999645`4.442172731972345", "\[PlusMinus]", 
                    "0.0227165160236034828`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 400, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"], "f3" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 3]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence", "Boolean"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f3" -> Association["Type" -> "Boolean", "Weight" -> 1], "f1" -> 
              Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2f3)" -> Association["Weight" -> CompressedData["

1:eJztxTEJgEAABdAvJhEnU3gZPG4XwdmEBrGFEQQHOwjvLW/YjmXvkpQ+adN4
rWedbdu2bdu2bdu2/c/zur8fzDND0A==
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8638625972092938175]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 2181139535596031377, "Output" -> A\
ssociation["f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6345089180380480927, "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    631332860152842886]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    2682676190599947125]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 400, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.2775}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.293546, "MaxTrainingMemory" -> 116768,
                     "DataMemory" -> 3448, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 7, 9, 16, 11, 48.862662`8.441552099376917}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                    5830460000005304866]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                    10.224338282763073`, "StandardDeviation" -> 
                    3.9951166871210613`, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 3886868189269964860]], 
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 7098352295252712621]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7255900053155452923, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7649166098026585256, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 5208716758835946799, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
wUX8uBmXoPEYOdoxSRe9TyH3kppNT2jI5RrQvHIRz7TKmFFFHp98W18wUcCe
z+SN9m1G34ZVD7tFc11R67B3rtowA0G+8zRWl0SBHbqMfs+LcBUdnVIiOyPb
naf0J5KpVfPir/y8/NLbHlZwvCh2nw+lMxOl15YUP5fnGNM9VuLdQ3Nu/ZNP
k3C2/Rv3rtTbsH5mlwAiS9zXz7aXpcrVCBxK3M+4clt1LPLomea6uCfc2vEs
EY6SYurHoq5ti3ZMbiOZlJv+LuHy2QoigPscu+m6TRzyAvvh7ueDnkTqIPqA
MrPV7M8Q4Xj/MY2ddhXVW/bG0NS7Pfu5clNCYE+zuDwNKa7ca08e66BeXnq6
cievBT3WnDDPnXJv4Lg9Joxm79/ntTYxVM/PKu577a625dDreE7txgtuonAb
99DweOXidrNF2xsoe+og1MQrD0e9vYkW7gTXeeXDm3bBus6JZPqVey5MTE8B
SAJ55QRfwoOZPKOn3Pcj4ZLMuJ3g1sUrW/js3Q4gtvHo2m03XrI3Uw4blax5
5bJwXqqT9+LT9Zu2ca0IFswGm6N89dDFQWumuqqYcLlyP20NXlcFT7h27oVT
rzmYQ8e+sIJ3XT0q2lhT5I+jFyDlAocpQkldeUrK5QgSrqgAm5W6cu9Eavkz
aibr2qFJP01KuNoWba8f6TaEmOkzTPI67MVP+5713raD2QCRvN2kf/eanKWg
affBc+U2SHlr0osOMvjyyc3umHztbwXklbuA19MCLXZ4Xj3YregVrcjwepTu
PD1p25gaa5Ybtfve6APFydu1E317d99NeFkam7YfVY3lys01GERwJlcku175
m09mhtEFDkDd509vVtUdGSpP0Y1rejRFNHHPkiZ/vHqe5p/kG3ayRt/1lXvb
yPa9teOyZu4jjmZ5b9HMk+WhXNeK/OZjhuux6+aTm4eaVlofKUpWQqIDe0rL
vZdmrvja245grZy49DJO+i+D5xrXiviDnP5m9D2dcTOJwKhEnv6uVyoh29WZ
Fmvh+ZwZaTrnRYzmyl+5twyawVwV/bwGceVegXyiq35Ey9Gd/4kGOa+EuWUm
7a7cPlS9r0Vn69F3v0yMMu0Znh/cuLxaNIq2Bq/a2mJ88dO0P98V498rNE9+
3srzsDHN5rlVLj7bLCKYFkmgzQQX9wAk02ReIzZ7aH/1lUvagv17d2eeey68
ohhcnEi0hTttn5yJuP2Wrue+cSjoAw7aCKVau2bwyvUEb8gc/2HjXznufnnj
yMuTof595Y+5iGZXFcdrpF/zwpStpGqnByO783QatgPYW2sy8vmRQzqbqGsK
sbd8r/nyuJNfvEFhg1nIuxTMhm4vG9p61lJums9stqGStdNP7p0478MVG2Iv
bxRCdvcRsl95bz7/vTpgjs1mx7RD2zfcbVPDHvly/cvAECV1w+Yx7yamnrvX
N6d3Fax1gTf3+Sram/BmtjySOX+vrnebwDzW5txnyuMiGJqwF8L88JXrmZsI
X6L5+OKe9zTsnDWssh38XL82LIkTGTDzKGafm6+LO2O2PHkivdaXdm525G2/
NWFnW8CVD0tKAKo9eHC7y/+9nAKx7d6Eqz7y+zx+1is0YqI/pZD7G0fElAHr
kFDW+/ll4TMo34gKbdo/xu9Y9YK8zf3Xrw3vQg978W2S6TYrXXk1YF3eSBVc
z42z7KP2pxviNrDtjZffDvMtXnCv1m2XxZMrtyfEtJ6tkSbS73pt/sVTrMsr
T9rDMbzm0Jjn9vbk5QMYsp+phgzbUzPf+Zh8s13X9k7Cg7pvxS/qS7apnLh0
w5vy896uFsj1YCp9XLl20IPumXkeOz8vEOqPbAW12+Td32klC38TSbxIgJ4r
N34wFWx32vjypdGAbZe9sUpcUChXvu0Y85aPlVE87pVXO1geqeSxNtlyvaZK
TQBAl+wdq1dvXnvxpv7wIp1n+fp3zHME87cjQj3lPG3+sDlqRW+1SrlyLxF5
h5932+Nz7WRacdteZTHC8/7L/Xy3X9TrjUy4hqu5cn9qgBVV+7UM8NaVixBV
9mugUsb1R/4SxmObT31b+/rK5xxvpWxrq5yW59vfYXkDRvB2+7TMl87gNrwQ
ja2g43f+JpfMxYu3cdRaynmGbfDWKKqx9JUvf7ljBmzZH53zHHEx0Xssywxr
4rlt+9MEmEmjYJB3nj4+ukcNRjgE1194H+D9OYPlma8Z303ji22VSOjY9Vx8
myvSL+yuLbUEEzcvMW20NzH/eNrjBzdeubtaovwld9AurrzHxedmMu+xZ/rO
B2Ycv/1B4EQc7SSu3P5aQE+gGf4exvv5+AUMy9ePTS3xux0pN9iecefHSO/m
RSV7BhVR5dfQSz5Hby2B1kC91fvaiS2RyzvX9uT72wf3HK24TOLR0tnZSJuf
33Hdr2ubQHTZ+XnElqg8i9s48r7X+3R8rJlNNlq58bhk+/a2jLime/Fzyc+f
aBKRtXtN+8qtjBx/Z8Lz1K23v/JwGJH9KGY2r9+UlFqsj1+3mWEvVy53s7oa
2Qz7YK78lPi5C+mYzc9jpnyYeZO12LZY9/d5Uwk1roXWuJf2yrsH154O2zej
SnDlxhEVXm1HfbW+eOXS5CVl945YSzuMa/emuqwdWUpKe/Dqj/Gh15HK+xMn
IdcLGbHW+FmJOVM/oJc5V4lkjQzv1YOOxNzYkFjHDyy8ciO1ZXeaZVV/LuQ+
384DS0ueoPhpjGsPU7fmZPqM/oub54kfjbDXOHojqxp55eYVMTWLLbYsnIvP
/sqE2SI5vTm0cv2+csKdaJmyP3CknZiStwboj6PoDcuVb5OTsLwV1x4tDF05
IXUkDQTEaVYp5UYLhIr6CgB55HM4Ws3S19J5YgT5HNZlUMiWY6Z2f73yY0ek
FXLvXlhmufMHQrw5EvFL9Dq+z9/+hsnbJW4+0js0Vy6ttbau7ZpSK1fuROzw
86rlOZkHsDdnvZfmbJTtWZeJS2PTy7+7RuHg4uT2ltTyh1TsqPL3cvL53h2x
g8ngxl+QuvO0o1xH4VVYb5vNlEvXe4178yd+rOnKV48YPZpBjZJe+5Ej2zC0
bfhTzze+3ma6xCtvzmyz6/n58fbG1ag8mNK4ckMsQTSuhtpG/crjdiAYGjVI
8/R3PqaNvTDjT74cr4qPlBtf2Dc1OAUn64a2+XtVf/ojIc1Ohdee5cJesbRf
dMmIV0n5bu/PvHjju2acK5e2BIWd6zTsp7xy3XXx6qd3JmqeI38FqRiTWya1
XJb70r3aYG1wS/NNVl056tlWKaxSc2JSP9FeFwFED0hJO7EV4XgRPLDNsuWV
i/I24fgO+/rz817Ct2fQXxwT9K8+7XzwV1qQ236zU/+Cs/lGQV7FpZ2YJd1R
KyqWF7732rv3dkLFb15lZ5xcrFvJ90JL8YrYnU/8HotVQu9o2mhx7XzZti3b
6MK6v+pz5ZbuvScITZzhr165iVv9rMmS6EItKcdB2nEZPYX+0saVs/yY5jBi
Nqp+5VFSter5WMjwN9auvAV6xm8YvY1SV2552ksxJpQkGSXl8pu4/G2Z/9w6
gpd9lxzc20YehuuXT4Tj1hgNSnQvM+VWjfwhiWNr27i47dGMtqsTNKVnPHVs
v2k+BKPWIO/8T9CMKZp5NcCs2pU3KSJG1f3hJx67U25ziA0kx4ut5fpB2cB8
b4PEpf+R7/U3g7y21v3RBGzok8fvlRgDeO/NkP9/CxcBIQ==
                    "], 
                    "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    Block[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy1WE1IVFEUfqHjT/NnOZmMUhNtkrFNLoYIW0yB6Yj0J02LlEITpmiiha6s
oU0EkTmLoowsUCQUSotEIt4ULQxsKFwUMUiFkIUFFUFUVps5sziPwzn3znN1
uPfdd+853/3Ozz0bjsT3dq4wDGN7gWG4+uqPPXrvT4FMN7Q5f1RXpi4ZZ0Zr
D6xJUd9hXDOfeBW64rWsa2pJzjzprbDMY2kGw5/HTvnYddT559wfNk9Xrhb/
r3sOJ6X2Lvc+aXPWteVbGYsrZR8+H3hw9HtvXySyavn0zuqjijteP3gj4fNW
WfkIUmpH8oL3+r9hD21f8b3jvybLeb5k12H7YD9Vu0EvWF/xd3fmhL9Un89Z
/aj74/Tj5s9f7Vk30OVk9VqMdb/YGfLk+Evdiyo/dP0ZSxwPdePOnmh9e5HT
zeqja6/0v63jL9uj+60454tfQ+fwu1szpRZ8lj5dbplwW88DXKV47psajHT0
8+t6ft41A/5y8jucC3ZReUwss35ExV0qn2I9MM7UPPgLjPG5wANpfsX3g/2Q
un9qfzjf7ZxqW5lxaOeHmtjt13/uuMT4Az8suKF4zfKcWS/1B3zvYnsUJYev
XfUJyNP9X5rGGx3i9RRPKL5zduB75u4JZC7uCfmgGxcLD68vCj5bMqW46+ZX
jMvi2+azD+eKyfvuijvDzTF3bjw/PdS67aY8D6jy/2Rmsuz+aEluDHFe1V4q
Xkp5lq+k4jfFM4w/zAe+LhycjVr9H+pSqj7UtYvLO1zegzxK+SnFs2vxZPXc
xQI6rgvzLdidb/1G2Y/1l/qr7vvWYgcTh6i6iKqTOV6CzL2D0PkUHhz/VeME
V5+p4i3lB16H62Cu7wG4c/Warn4cPtL8COOnQ899h1oXzLWO2onEm48m9V9d
wLGx+wGdz1XzrLR/JI2jOA6QfEDvbSneduUN6lzgGfee3hQaqWv0/CbvCSTu
A9ilL35XUBL6LFSew/viford8ZzzO7vrXwtOivUk9AHwPPYbCl/VvMitw/ZQ
fTDd/al9uDyA9bK8U5lzuX4g5f+6fKH+4/prynxH+R/XU6r5VVVK6wGKv3nr
MbZrYCRcQtY3WE/QY0dHMF31uNCiP1Wnce8M/B339+yyV9fPcb/sP5XBAvo=

                    "], "Version" -> {11.3, 0}, "ID" -> 6413031506679139115, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3519824094447848605, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    1107852814282405113, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
                  Span[1, 830], 
                  Span[831, 831], 
                  Span[832, 832]}, 
                "Wrappers" -> {SparseArray, Identity, Identity}, "Output" -> 
                Association[
                 "(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxTEJgEAABdAvJhEnU3gZPG4XwdmEBrGFEQQHOwjvLW/YjmXvkpQ+adN4
rWedbdu2bdu2bdu2/c/zur8fzDND0A==
                    "], "Type" -> 
                    "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
                599417332904572119]]}, "Invertibility" -> "Impossible", 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 504074388080892407]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                1867570019887632781, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7443894421457286454]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["Not Question" -> 0.5, "Question" -> 0.5]],
        "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association["Weights" -> CompressedData["
1:eJw1V3tcztcffyqpKETlMt0eubRcyqWFvuckS41lXYa0NtJla+XX8pDLFCla
IVPuiS6YZ3NZCKPv5ygjkkSkJPUyYpZLlkv82G/v83r9/niq53m+55zP5/O+
nRznxQdFG2o0Gp3pvz+CwhdPWrAgfGlwV7yJCo8bMzoOXxr8+/Iy0mhelTxU
nLQ/klPtYTbqr1Rhb5nB3vj9Qn62ipi2x41c9ueyo9OF4loWRCEXu4nkK5Vs
3+dDeeLIdNLaNKv569L56f4JdOvCfSKXw2S+3YO73sqg2Nar1LnKlqd8eI10
YWeVXom7KC/MmQ4E+/PLS0ezl9cT2EZfDUu/U8xMndfS0o06ml5oKuo1c+mN
Q1/hPGcIuzn7F6ZVVikxr5xEt4AtNK1mA/thWRtbHm5NTwYbkPZOKqH+ofmb
WPEbPdu2poxN152hRvdMQp1FvzxUrn3Xn1D/+QnDKOQS42RpyTPsUskzu5yW
llsrhkMW0ng1ktKs3bmrOKn4TtzB2yuthLatiO0Onk1hhUspqTP19N9uW2S/
+Lxf1moKtM+lnGA79qj9NTvmMJ4Z9TPjqPHVmpPqhKoY+Tu6dpIIN7Bk6qnz
bLrShT+tSKHhRaqy0GoP7TqynyYEdhdhZQdlffZPU5TIQoVHWzUo2nhjfvdk
VypgGsWVDDn2jktOZg3PrZhXy0PV9qRGvJ47hH9p4sFz8vPpyHFn6vLCQZS/
fMBWhcwlrBUGjcrNJ/vV+i4Owv6LruJt5ny2ZeVvpP/ykDI63I3bmjxWgIfD
bB8x52Y0b2xLIuDm1RHIWlYO5ph11cMXyt2LKqtsXUDXPrcSnj4fsYS2c/J9
7le7ad2iZnXeziMUMb6SLSrjIrY5jIBr4szJrLX6gooz3N4mEp7/PtCFjA75
UfvbLOV1rcIuV2fQfbvvqGJRE1l+c5J6bcuimT/6EPrcPLVMgJO23FCgH8yM
nv+jFqZvJpejx1n3M3Po+h1L/sDuOcuoM+Tzv+wp5+ZXsF2d2GOW8MldSOAI
eOF/rpDp1j2m0XG9+EC1DwOn3V5OlLU3/5UtzyxcuZUMruylEYPKqDQtg9kF
VdO7bv+ol2sTJYcxz0J/I9a7ZJiwGdPCEqv7i5bW+7SuvxUtuZLH15qZ0KW8
LDpg8Vyt9mhj4O4fa07Q0yku8u/d0bvo/toC1tL7a6mpaFNrarvemzLNMph6
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

               "], "Biases" -> RawArray["Real32",{0.19115674495697021`}]], 
            "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              832, "$InputDimensions" -> {832}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{832}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAUAMAnJlGYQ7RKCYlWoraAwiBaM/wh1OawgEI0dpDcNVeMcztl
EVHnEX33OqttLfdraGzbtm3btm3btv3Tj7Qc6b6+H+pSHFw=
               "], "Type" -> 
              "NumericalVector"], "Key" -> "(f1f2f3)", "Invertibility" -> 
            "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 1., "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.614118173014006, 0.05141519382548088], "Accuracy" -> 
            PlusMinus[0.6463414634146336, 0.1077717371085514], 
            "EvaluationTime" -> 0.0000149, "TestSize" -> 40, "TrainingSize" -> 
            60, "TrainingTime" -> 0.052871, "TrainingMemory" -> 1587432, 
            "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
            0.6917393730242389, "MeanCrossEntropyHistory" -> {
              PlusMinus[0.614118173014006, 0.036356032210018235`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6463414634146336, 0.07620612612971057]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 1., "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 400], 
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 178202630696649]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6870146135990522, 0.01960398948836083], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.0000261, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.018697, 
                 "TrainingMemory" -> 600704, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6251277481616853,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6870146135990522, 0.013862113905529737`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6693993832848402, 0.022281393431403684`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.000013325000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.022093, 
                 "TrainingMemory" -> 1356048, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6409724334266117,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6693993832848402, 0.01575532438963094]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000013325000000000002`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6693993832848402, 0.022281393431403684`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1356048, 
                "TrainingTime" -> 0.107069], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8900486491660474, 0.097762113526596], "Accuracy" -> 
                 PlusMinus[0.45005876293147196`, 0.07366539350591472], 
                 "EvaluationTime" -> 0.000012516666666666668`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.0075766666666666664`, "TrainingMemory" -> 
                 195861.3333333333, "ModelMemory" -> 32488., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 0.4748492443803536,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8256155695930784, 0.08416623342739597], 
                   PlusMinus[0.9744744617103884, 0.09634320115912236]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.4024390243902437, 0.07715223468995282]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9703704613747226, 0.19732274701258334`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000012224999999999999`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.017813, 
                 "TrainingMemory" -> 877912, "ModelMemory" -> 32616, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.42771676987798013`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9703704613747226, 0.13952825249495523`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.07790084880165644], 
                 "EvaluationTime" -> 0.000015375, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.200318, 
                 "TrainingMemory" -> 4449592, "ModelMemory" -> 33256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4181838886376063,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9909652934368359, 0.20944832834106417`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000015375, "MeanCrossEntropy" -> 
                PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                "ModelMemory" -> 33256, "TrainingMemory" -> 4449592, 
                "TrainingTime" -> 0.2579741666666667], "Index" -> 2], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9831052301834508, 0.14695736316119218`], 
                 "Accuracy" -> 
                 PlusMinus[0.5854527031917199, 0.05660919690222907], 
                 "EvaluationTime" -> 0.0009525999999999998, "TestSize" -> 80, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.04738966666666666, 
                 "TrainingMemory" -> 745026.6666666666, "ModelMemory" -> 
                 447104., "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.4265508031926865, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9239027906160499, 0.19256161689087925`], 
                   PlusMinus[1.0402509117513454`, 0.18918714823140675`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444], 
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6684929650137739, 0.10983241284740038`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.11016843689567841`], 
                 "EvaluationTime" -> 0.0008424, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.075356, 
                 "TrainingMemory" -> 2471504, "ModelMemory" -> 473384, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.62549464467201, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6684929650137739, 0.07766324391847729]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.782242546575857, 0.1440948112973481], "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.07845762192924444], 
                 "EvaluationTime" -> 0.000809625, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.317852, 
                 "TrainingMemory" -> 11530272, "ModelMemory" -> 518216, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5324801981558621,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.782242546575857, 0.1440948112973481]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000809625, "MeanCrossEntropy" -> 
                PlusMinus[0.782242546575857, 0.1440948112973481], 
                "ModelMemory" -> 518216, "TrainingMemory" -> 11530272, 
                "TrainingTime" -> 0.44470466666666675`], "Index" -> 3], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6969912772858453, 0.011167770262348994`], 
                 "Accuracy" -> 
                 PlusMinus[0.4877764677472049, 0.05712072069272695], 
                 "EvaluationTime" -> 0.00013925833333333333`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.012341333333333333`, "TrainingMemory" -> 236325.3333333333,
                  "ModelMemory" -> 110389.33333333333`, "ExperimentCount" -> 
                 2, "ModelUtility" -> 0.6177061704471231, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6987804360961366, 0.01673493701845681], 
                   PlusMinus[0.6956062614680996, 0.014724040495996129`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.47560975609756073`, 0.07882661924740107]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6943796219635396, 0.021306074971810893`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000136775, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.013327, 
                 "TrainingMemory" -> 734024, "ModelMemory" -> 110400, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6182225114812014,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6943796219635396, 0.01506567009303646]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6695285647147997, 0.016794150789926635`], 
                 "Accuracy" -> 
                 PlusMinus[0.6707317073170727, 0.07505505492736586], 
                 "EvaluationTime" -> 0.00023022500000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 320, "TrainingTime" -> 0.029232, 
                 "TrainingMemory" -> 3364352, "ModelMemory" -> 114800, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6418830450657396,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6695285647147997, 0.016794150789926635`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6707317073170727, 0.07505505492736586]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00023022500000000003`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6695285647147997, 0.016794150789926635`], 
                "ModelMemory" -> 114800, "TrainingMemory" -> 3364352, 
                "TrainingTime" -> 0.04888133333333333], "Index" -> 4], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6706809259088216, 0.04581923399439435], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.05586884030282884], 
                 "EvaluationTime" -> 0.000018091666666666665`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.004745333333333332, "TrainingMemory" -> 229216., 
                 "ModelMemory" -> 97560., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.6353168439046083, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.681864802362421, 0.047407523570423674`], 
                   PlusMinus[0.6395981709181233, 0.07903343206175434]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6232230096974638, 0.05481194009075559], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.000022000000000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.007065, 
                 "TrainingMemory" -> 1331352, "ModelMemory" -> 430824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6810048328513942,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6232230096974638, 0.03875789452816406]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5980360778718854, 0.050917801192207825`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.00004882500000000001, "TestSize" -> 40,
                  "TrainingSize" -> 320, "TrainingTime" -> 0.044524, 
                 "TrainingMemory" -> 8005440, "ModelMemory" -> 2163760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6401889137107134,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5980360778718854, 0.050917801192207825`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00004882500000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.5980360778718854, 0.050917801192207825`], 
                "ModelMemory" -> 2163760, "TrainingMemory" -> 8005440, 
                "TrainingTime" -> 0.060400333333333334`], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.4699393329353883`, 0.3403664903166638], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.0000169, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.05541, 
                 "TrainingMemory" -> 919048, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.2808318301048885,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.4699393329353883`, 0.2406754533915783]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8539205092579377, 0.20614413893915554`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000019925, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.053958, 
                 "TrainingMemory" -> 1587448, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4825149086371433,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8539205092579377, 0.1457659185457387]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000019925, "MeanCrossEntropy" -> 
                PlusMinus[0.8539205092579377, 0.20614413893915554`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587448, 
                "TrainingTime" -> 0.271242], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931402808957658, 0.019468354810628287`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000017825, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.0109, 
                 "TrainingMemory" -> 426904, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196583399374144,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931402808957658, 0.013766205705141005`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6928654062877444, 0.013758280934718845`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.000014675, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.021362, 
                 "TrainingMemory" -> 6447080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6209205123753709,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6928654062877444, 0.013758280934718845`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931134722249647, 0.019467226016634472`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.00001545, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.017153, 
                 "TrainingMemory" -> 1249080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196823757613998,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931134722249647, 0.013765407527253415`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00001545, "MeanCrossEntropy" -> 
                PlusMinus[0.6931134722249647, 0.019467226016634472`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1249080, 
                "TrainingTime" -> 0.079512], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6917718278486031, 0.053150641011307384`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000014275000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 10, "TrainingTime" -> 0.065649, 
                 "TrainingMemory" -> 919000, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6149226939087926,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6917718278486031, 0.037583178683507266`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.614118173014006, 0.05141519382548088], 
                 "Accuracy" -> 
                 PlusMinus[0.6463414634146336, 0.1077717371085514], 
                 "EvaluationTime" -> 0.0000149, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.052871, 
                 "TrainingMemory" -> 1587432, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6917393730242389,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.614118173014006, 0.036356032210018235`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6463414634146336, 0.07620612612971057]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000149, "MeanCrossEntropy" -> 
                PlusMinus[0.614118173014006, 0.05141519382548088], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587432, 
                "TrainingTime" -> 0.277133], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.256857008620053, 0.5962017585768732], "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.0000148, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.034848, 
                 "TrainingMemory" -> 918896, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.18177828484850891`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.256857008620053, 0.4215783064450519]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3302359386688085`, 0.41376042395331447`], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.000021825000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.050481, 
                 "TrainingMemory" -> 1587192, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.30568051008889097`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3302359386688085`, 0.29257280156400944`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000021825000000000002`, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.3302359386688085`, 0.41376042395331447`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587192, 
                "TrainingTime" -> 0.23677199999999998`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931462551126191, 0.009734303709166375], 
                 "Accuracy" -> 
                 PlusMinus[0.5992095617999024, 0.0733577253566291], 
                 "EvaluationTime" -> 0.000014166666666666668`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 0.010483, 
                 "TrainingMemory" -> 398037.3333333333, "ModelMemory" -> 
                 37240., "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.6213885495577779, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931464905173004, 0.013766391370773663`], 
                   PlusMinus[0.6931460197084198, 0.013766377272709985`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109], 
                   PlusMinus[0.6463414634146336, 0.07620612612971057]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931438084740744, 0.01946850383932111], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.00001335, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.014555, 
                 "TrainingMemory" -> 1249000, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196551802368115,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931438084740744, 0.013766311084340292`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931189437717526, 0.013765569362545015`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.0000146, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.086558, 
                 "TrainingMemory" -> 6449080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6206929824764315,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931189437717526, 0.013765569362545015`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000146, "MeanCrossEntropy" -> 
                PlusMinus[0.6931189437717526, 0.013765569362545015`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 6449080, 
                "TrainingTime" -> 0.1186805], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6456775130058557, 0.08568835948193107], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.00016675000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.103432, 
                 "TrainingMemory" -> 1300840, "ModelMemory" -> 163760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6516297811548131,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6456775130058557, 0.060590820058424054`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6157855875246737, 0.11537326026223872`], 
                 "Accuracy" -> 
                 PlusMinus[0.6219512195121948, 0.07715223468995287], 
                 "EvaluationTime" -> 0.000139975, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.128644, 
                 "TrainingMemory" -> 4370216, "ModelMemory" -> 169840, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6760625991034054,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6157855875246737, 0.11537326026223872`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6219512195121948, 0.07715223468995287]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000139975, "MeanCrossEntropy" -> 
                PlusMinus[0.6157855875246737, 0.11537326026223872`], 
                "ModelMemory" -> 169840, "TrainingMemory" -> 4370216, 
                "TrainingTime" -> 0.26423700000000006`], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 178198335729353]], "MaxTrainingSize" -> 400, 
         "LastReportingTime" -> 3.740141512330669`16.325463023676384*^9, 
         "PreprocessorEvaluationTime" -> 4.4814453125`2.*^-6, 
         "PreprocessorMemory" -> 174200, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000002, 
             "ElapsedTimes" -> 0.733886, "ExperimentCounts" -> 15], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             1.1450550000000002`, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 320, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             1.008427, "ExperimentCounts" -> 7]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[178206925663945]], "ID" -> 
            178211220631241]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, "Values" -> {"OKAY WADE."}, 
              "ID" -> 8454876219130345882], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{12, 12, 13}}, "ID" -> 4356659753071005787], "f3" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5106358782184230910]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 4.239985, "MaxTrainingMemory" -> 
         15050064, "DataMemory" -> 150864, "FunctionMemory" -> 385072, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 9, 16, 11, 52.773925`8.474994370507925}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"YOU DUMB BITCH.", {11, 1, 7, 13}, 0}, {
        "AND YOU COULD STAND TO GET A LITTLE SMARTER AIN'T THAT RIGHT YOU \
DUMB BLONDE FUCK.", {3, 11, 15, 15, 10, 15, 4, 12, 12, 12, 2, 4, 12, 11, 1, 
         12, 12, 13}, 0}, {"AN ITALIAN RIGHT.", {4, 1, 7, 13}, 0}, {
        "MAJOR WHAT DO YOU THINK COULD HAVE DONE THIS.", {1, 4, 12, 11, 12, 
         12, 12, 15, 7, 13}, 1}, {"YOU SAW THIS.", {11, 15, 7, 13}, 0}, {
        "HOW CAN YOU BE HERE AND SAY THIS.", {12, 12, 11, 15, 2, 3, 15, 7, 
         13}, 1}, {"NATALIE WHO.", {12, 11, 13}, 1}, {
        "WHERE WILL MY TOYS BE.", {15, 15, 12, 12, 15, 13}, 1}, {
        "THE CAR OR DEBBIE.", {4, 7, 7, 12, 13}, 0}, {
        "THAT ' S WHO YOU WANT ME TO BEND MY RULES FOR.", {4, 13, 7, 11, 11, 
         15, 7, 10, 15, 12, 7, 10, 13}, 1}, {
        "I'VE NEVER GOTTEN A LETTER LIKE THIS HAVE YOU.", {11, 15, 2, 15, 4, 
         7, 10, 7, 15, 11, 13}, 0}, {
        "YOU DON'T THINK SO.", {11, 15, 2, 12, 12, 13}, 0}, {
        "I BELIEVE WE SHARE AN ART INSTRUCTOR YOU KNOW CHASTITY.", {11, 15, 1,
          7, 4, 7, 7, 11, 15, 7, 13}, 0}, {
        "CALL THAT FRESH.", {1, 4, 12, 13}, 0}, {
        "OH SHUT UP HUH.", {7, 12, 9, 12, 13}, 0}, {
        "THE POET.", {4, 7, 13}, 0}, {
        "WHY DOESN'T SHE JUST HANG UP AND CALL THE POLICE.", {2, 15, 2, 12, 2,
          15, 9, 3, 1, 4, 7, 13}, 1}, {
        "IF YOU NEED TO COME TO WHERE I LIVE OK.", {10, 11, 15, 10, 15, 10, 
         15, 11, 15, 5, 13}, 1}, {
        "WHO WILL YOU KILL.", {11, 15, 11, 15, 13}, 1}, {
        "WHO IS DEAD.", {11, 15, 12, 13}, 1}, {
        "YOU REMEMBER HIM FROM HIGH SCHOOL.", {11, 15, 12, 12, 12, 12, 13}, 
         0}, {"YOU HUNGRY OR THIRSTY OR BOTH.", {11, 1, 7, 12, 7, 4, 13}, 
         0}, {"HOW OFTEN DO YOU SEE MR. KRAMER AND HIS SON.", {12, 12, 12, 11,
          15, 12, 12, 3, 11, 7, 13}, 1}, {
        "WHO'S MR. JOCULARITY.", {11, 15, 12, 12, 13}, 1}, {
        "SO NOW WHERE WERE WE HERE.", {12, 12, 12, 15, 12, 2, 13}, 1}, {
        "CHARGE SET.", {1, 7, 13}, 0}, {
        "YOU SERVE MARTINIS DONCHA.", {11, 15, 7, 12, 13}, 0}, {
        "GOIN' DOVE HUNTIN'.", {12, 7, 7, 13, 13}, 0}, {
        "AND MADEMOISELLE.", {3, 12, 13}, 0}, {
        "IS IT THAT BAD.", {15, 11, 4, 12, 13}, 0}, {
        "THEY'RE TRYING TO UNNERVE US. WHY DID THEY DO THAT.", {12, 12, 12, 
         10, 12, 12, 13}, 1}, {
        "WHAT NUMBER DID YOU TEAR OUT.", {4, 7, 15, 11, 15, 12, 13}, 1}, {
        "JUST A LITTLE JOKE MISS FARMER. ...DID YOU REALLY SAY THAT.", {2, 4, 
         7, 7, 7, 7, 13, 13}, 0}, {
        "HI VIV.  CARLOS YOU KNOW MY ROOMMATE VIV. YOU SPENT IT ON DRUGS \
DIDN'T YOU.", {12, 12, 13}, 0}, {
        "WHAT HAVE YOU GOT TO DO.", {4, 12, 11, 15, 10, 12, 13}, 1}, {
        "DO YOU KNOW HER.", {15, 11, 15, 7, 13}, 0}, {
        "WHAT THE HELL IS A TREADSTONE.", {4, 4, 7, 15, 4, 7, 13}, 1}, {
        "PAPA.", {7, 13}, 0}, {"AS A PLUMBER.", {10, 4, 7, 13}, 0}, {
        "WHAT TEN THOUSAND POUNDS.", {4, 8, 12, 12, 13}, 1}, {
        "UP GET IT.", {7, 15, 11, 13}, 0}, {
        "ARE YOU DECLARING AN EMERGENCY.", {15, 11, 15, 4, 7, 13}, 0}, {
        "SHALL I REMAIN HERE IN OUR HOTEL ROOM HIDING OR SHALL I CARRY ON THE \
BEST I CAN.", {12, 11, 15, 2, 10, 12, 12, 12, 15, 7, 7, 11, 15, 10, 4, 7, 11, 
         15, 13}, 0}, {"WHATSAMATTER.", {7, 13}, 1}, {
        "WHAT WAS I GONNA SAY.", {4, 15, 11, 12, 12, 12, 13}, 1}, {
        "AND THOSE WERE THE GUYS WHO WENT ON THE EXERCISE WITH YOU.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}, 1}, {
        "I WANT THE MONEY ASSHOLE WHAT DO YOU THINK.", {11, 15, 4, 7, 12, 4, 
         12, 11, 15, 13}, 1}, {
        "I MEAN WHAT KIND OF PEOPLE DO WELL AT THIS STUFF.", {11, 15, 4, 12, 
         10, 12, 12, 12, 10, 12, 7, 13}, 1}, {
        "HOW ARE THEY TREATING YOU.", {12, 15, 7, 15, 11, 13}, 1}, {
        "WANNA STAY WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}, 0}, {
        "AT WHAT EXACTLY.", {10, 4, 7, 13}, 1}, {
        "DO YOU THINK IT'S DONE.", {15, 11, 15, 11, 15, 12, 13}, 0}, {
        "WHAT IS SO GODDAMN VALUABLE IN YOUR LIFE THAT YOU'RE WORRIED ABOUT \
LOSING.", {4, 15, 12, 12, 12, 10, 1, 7, 4, 11, 15, 1, 10, 15, 13}, 1}, {
        "PITTSBURGH.", {12, 13}, 0}, {
        "[WAS IT] &QUOT;MEIRSCHULTZ&QUOT;.", {13, 12, 12, 13, 12, 12, 13, 13},
          0}, {"I KNOW YOU'RE EXPECTING SOME KIND OF -- EXTRAVAGANT BEHAVIOR \
BUT BELIEVE ME -- DO YOU BELIEVE ME.", {11, 15, 11, 15, 15, 12, 12, 10, 13, 1,
          7, 12, 12, 12, 13, 12, 11, 15, 7, 13}, 0}, {
        "WHAT'S A LUNCH COST THESE DAYS.", {4, 15, 4, 7, 7, 7, 7, 13}, 1}, {
        "WHERE IS INNER SPACE.", {15, 15, 12, 12, 13}, 1}, {
        "WHY WON'T YOU CHECK OUT LV-426. ...BECAUSE JUST ONE OF THOSE THINGS \
MANAGED TO KILL MY ENTIRE CREW WITHIN TWELVE HOURS OF HATCHING...", {2, 12, 2,
          11, 15, 7, 7, 13, 13, 12, 2, 8, 10, 4, 7, 15, 10, 15, 12, 12, 12, 
         10, 8, 7, 10, 15, 13}, 1}, {
        "LOOK BUTTHEAD I'LL TREAT YOU SO NICE YOU'LL NEVER WANT TO LET ME GO \
OKAY.", {8, 7, 11, 15, 15, 11, 2, 1, 11, 15, 2, 1, 10, 12, 12, 12, 12, 13}, 
         0}, {"THAT OBVIOUS HUH.", {4, 1, 12, 13}, 0}, {
        "PERMISSION.", {7, 13}, 0}, {
        "OKAY MISS STARLING.", {1, 12, 12, 13}, 0}, {
        "WHAT'S DR. GILLMAN SAY.", {4, 15, 12, 12, 12, 13}, 1}, {
        "WHY DID THEY TURN BACK.", {2, 12, 12, 15, 2, 13}, 1}, {
        "WHAT'S SHE DOING.", {4, 15, 12, 12, 13}, 1}, {
        "HOW YOU DOING SAM.", {12, 11, 15, 12, 13}, 1}, {
        "WHY DO YOU EAT THAT STUFF.", {2, 12, 11, 15, 4, 7, 13}, 1}, {
        "WHAT EXACTLY DID HE CALL OUT.", {4, 12, 15, 11, 1, 12, 13}, 1}, {
        "SAY---YOU THINK THAT'S THE SAME GUY WHO WAS IN THE ACCIDENT WITH \
LUCY.", {7, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}, 1}, {
        "AND YOU SVEN AREN'T YOU AFRAID OF CROSSING THE RAINBOW BRIDGE TO \
ASGAARD.", {3, 11, 12, 15, 2, 11, 12, 10, 12, 4, 12, 12, 10, 12, 13}, 0}, {
        "NOT GREAT.", {2, 1, 13}, 0}, {
        "RUNNING OUT OF TIME ARE WE.", {15, 12, 10, 12, 15, 7, 13}, 0}, {
        "YOU'RE NOT USING THE SAME GUY WHO TRIED TO FIX IT.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}, 1}, {
        "TO YOU ... .", {10, 11, 13, 13}, 0}, {
        "DID YOU KNOW YOU SHOULDN'T LIGHT THREE CIGARETTES WITH A MATCH.", {
         12, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}, 0}, {
        "MY MY MY HOW DID THINGS TURN SO HOSTILE SO QUICKLY.", {12, 12, 12, 
         12, 12, 12, 12, 12, 12, 12, 12, 13}, 1}, {
        "NO BUT MY DOG HE'S A GOT MILLIONS OF THEM -- HAVE YOU GOT A \
LICENSE.", {4, 12, 12, 12, 11, 15, 4, 15, 12, 10, 12, 13, 12, 11, 15, 4, 7, 
         13}, 0}, {"THIS THIS HAPPENED.", {7, 7, 15, 13}, 0}, {
        "HOW DID YOU MANAGE IT.", {12, 12, 11, 15, 11, 13}, 1}, {
        "WHOSE JUSTICE.", {1, 7, 13}, 1}, {
        "DID THEY TELL YOU TO SLEEP WITH ME.", {12, 12, 12, 11, 10, 15, 10, 7,
          13}, 0}, {"MAX, WHAT IS IT.", {12, 13, 4, 15, 11, 13}, 1}, {
        "WILL YOU COME SEE HER WITH ME.", {15, 11, 15, 15, 7, 10, 7, 13}, 
         0}, {"HOW YOU FEELING ALL RIGHT.", {12, 11, 15, 7, 7, 13}, 1}, {
        "IS IT INEVITABLE THAT THE GAME PLAYS YOU.", {15, 11, 1, 4, 4, 7, 15, 
         11, 13}, 0}, {
        "YOU FOUND ANYONE IN YOURS.", {11, 15, 7, 10, 12, 13}, 0}, {
        "DON'T YOU WANT TO SEE WHAT DADDY DOES FOR A LIVING.", {7, 2, 11, 1, 
         10, 15, 4, 12, 15, 10, 4, 7, 13}, 1}, {
        "WELL COULD YOU LEND ME SOME MONEY TILL YOU HAVE ONE.", {12, 12, 11, 
         15, 2, 12, 12, 12, 11, 15, 8, 13}, 0}, {
        "I'M JUST HERE SHOOTING THIS BAND WHAT ABOUT YOU.", {11, 15, 2, 2, 15,
          7, 7, 4, 12, 11, 13}, 1}, {
        "IT'S YOUR BANK AS WELL AS MINE ISN'T IT.", {11, 15, 1, 12, 12, 12, 
         12, 12, 15, 2, 11, 13}, 0}, {
        "VASQUEZ HOW YOU DOING.", {12, 12, 11, 15, 13}, 1}, {
        "YOU DON'T LIKE ME.", {11, 15, 2, 10, 7, 13}, 0}, {
        "PHILIP SWANN.", {12, 12, 13}, 0}, {
        "THE POLICE ALWAYS DO DON'T THEY.", {4, 12, 12, 12, 12, 2, 12, 13}, 
         0}, {"PEOPLE ARE GONNA BE THINKING THE YOUNGER JAMES GANG.", {12, 15,
          12, 12, 15, 15, 4, 1, 12, 12, 13}, 0}, {
        "SO WHY ISN'T IT ALL BLOODY.", {12, 2, 15, 2, 11, 7, 7, 13}, 1}, {
        "IS THAT ALL THERE IS.", {15, 4, 7, 7, 15, 13}, 0}, {
        "THEN WE'LL GO DANCIN' OKAY.", {2, 12, 12, 12, 12, 12, 13}, 0}, {
        "YOU'RE NOT FROM L.A. HUH.", {11, 15, 2, 10, 12}, 0}, {
        "WHY DIDN'T YOU SAY SOMETHING.", {2, 12, 2, 11, 15, 7, 13}, 1}, {
        "WITH ID AND A GUN....", {10, 7, 3, 4, 7, 13}, 0}, {
        "WHAT IS HE -- MUSCLEMAN.", {4, 15, 11, 13, 12, 13}, 1}, {
        "WHAT'S WRONG DID YOU MISS ME.", {4, 15, 1, 7, 11, 15, 7, 13}, 1}, {
        "WHAT'S A TREE.", {4, 15, 4, 7, 13}, 1}, {
        "- WHERE THAT COME FROM.", {13, 7, 4, 15, 7, 13}, 1}, {
        "YOU'RE BACK AGAIN HUH.", {11, 15, 2, 2, 12, 13}, 0}, {
        "PROFESSIONALLY.", {2, 13}, 0}, {
        "ABOUT THE DUMPER DIDN'T HE TELL YOU THAT.", {10, 4, 7, 15, 2, 11, 15,
          11, 4, 13}, 0}, {
        "KEEPING YOURSELF OUT OF JAIL.", {12, 12, 12, 10, 12, 13}, 0}, {
        "WHAT ABOUT THE CAPTAIN.", {4, 12, 4, 7, 13}, 1}, {
        "WHAT IS IT THE STAIRS.", {4, 15, 11, 4, 7, 13}, 1}, {
        "WHAT OF THE REPORTS OF THE REBEL FLEET MASSING NEAR SULLUST.", {4, 
         10, 4, 7, 10, 4, 7, 7, 15, 10, 7, 13}, 1}, {
        "TWO YEARS AGO.", {8, 7, 2, 13}, 0}, {
        "PERHAPS A LITTLE REFRESHMENT FIRST.", {2, 4, 1, 12, 12, 13}, 0}, {
        "THEN WHAT CAN I DO FOR YOU.", {2, 4, 12, 11, 15, 10, 11, 13}, 1}, {
        "HAVE THEY QUESTIONED YOU YET SID.", {15, 12, 15, 11, 2, 12, 13}, 
         0}, {"WELL DOES MARCUS HAVE AN ALIBI.", {12, 12, 12, 12, 4, 12, 13}, 
         0}, {"WHO WOULD EVEN KNOW TO DO THIS.", {11, 15, 12, 12, 10, 12, 12, 
         13}, 1}, {"HE WAS HERE.", {11, 15, 2, 13}, 0}, {
        "KEEPING A STIFF UPPER LIP.", {15, 4, 1, 12, 7, 13}, 0}, {
        "YOU KNOW WHAT HAPPENED TO THE TOWER OF BABEL DON'T YOU.", {11, 15, 4,
          15, 10, 4, 7, 10, 12, 12, 2, 11, 13}, 1}, {
        "YOU MEAN BESIDES THE WARRANT OUT ON US FOR BLOWING UP OUR COMMANDING \
OFFICER.", {11, 15, 10, 4, 12, 12, 12, 12, 10, 12, 9, 12, 12, 7, 13}, 0}, {
        "HOW ABOUT YOU TWO HIT THE STRIP AND START KNOCKING SOME HEADS \
TOGETHER.", {12, 12, 11, 8, 12, 4, 7, 3, 12, 12, 12, 15, 2, 13}, 1}, {
        "HOW LONG AGO DID THIS GUY RETIRE.", {12, 12, 12, 12, 12, 12, 15, 13},
          1}, {"WHAT HAVE I DONE.", {4, 7, 11, 15, 13}, 1}, {
        "WILL YOU TAKE IT EASY.", {15, 11, 15, 11, 7, 13}, 0}, {
        "WHO THE FUCK ARE YOU DR. JOYCE BROTHERS.", {11, 4, 7, 15, 11, 12, 12,
          12, 13}, 1}, {"IT NEEDS BLOOD.", {11, 15, 7, 13}, 0}, {
        "WHAT HAPPENS WHEN HE DIES.", {4, 15, 2, 11, 15, 13}, 1}, {
        "YOU REALLY THINK YOU'LL BE ABLE TO FOOL A JURY WITH THIS BULLSHIT.", \
{11, 2, 15, 11, 7, 15, 1, 10, 7, 7, 7, 10, 7, 12, 13}, 0}, {
        "IF YA WAS WANTIN' MY HELP WHY DIDN'T YA ASK.", {10, 12, 12, 12, 12, 
         12, 2, 12, 2, 12, 12, 13}, 1}, {
        "HOW DO YOU KNOW THIS.", {12, 12, 11, 15, 7, 13}, 1}, {
        "IS THAT A BEASTLY THING TO SAY.", {15, 4, 4, 1, 7, 10, 12, 13}, 0}, {
        "HEY WHERE'S THE FIRE SISTER.", {12, 12, 4, 7, 7, 13}, 1}, {
        "WHAT'S YOUR AIR READING.", {4, 15, 1, 12, 7, 13}, 1}, {
        "HAVE YOU HEARD THE TERMS OF THE SEVENTEEN POINT AGREEMENT.", {15, 11,
          15, 4, 7, 10, 4, 8, 1, 7, 13}, 0}, {
        "IS THAT AN OFFER.", {15, 4, 4, 7, 13}, 0}, {
        "YOU COULD LIFT ME IN YOUR BIG STRONG ARMS.", {11, 15, 15, 12, 10, 1, 
         12, 1, 7, 13}, 0}, {"THE BLAST.", {4, 7, 13}, 0}, {
        "YOU NEVER HEARD OF PHYSICS EINSTEIN.", {11, 2, 15, 10, 12, 12, 13}, 
         0}, {"CAN YOU DRIVE ME BACK NOW.", {12, 11, 15, 2, 2, 2, 13}, 0}, {
        "TWOMBLEY.", {12, 13}, 0}, {
        "AND WHAT IF I TRANQ HIM KELLY.", {3, 4, 10, 11, 15, 12, 12, 13}, 
         1}, {"WE CANNOT DEFEAT THIS -- PEACE.", {12, 12, 12, 12, 12, 13, 7, 
         13}, 0}, {"ARE YOU OKAY WADE.", {15, 11, 1, 7, 13}, 0}, {
        "HOW ABOUT SOME AMMO.", {12, 12, 12, 12, 13}, 1}, {
        "DOES THAT WORK.", {7, 4, 15, 13}, 0}, {
        "HOW THE HELL DID HE GET AWAY.", {12, 4, 7, 7, 11, 15, 2, 13}, 1}, {
        "EXCUSE ME SKIPPER--- WHAT ABOUT TIME....", {15, 12, 12, 13, 4, 12, 7,
          13}, 1}, {"SEE THAT PATCH OF SHIRT.", {15, 4, 7, 10, 12, 13}, 0}, {
        "DID YOU HAVE A PLEAANT FLIGHT.", {12, 11, 15, 4, 1, 7, 13}, 0}, {
        "DO YOU HAVE YOUR OWN CELL.", {15, 11, 15, 1, 7, 7, 13}, 0}, {
        "YOU SELL MUCH OUT HERE.", {11, 15, 12, 12, 2, 13}, 0}, {
        "WHAT WAS SHE DOING IN YOUR APARTMENT.", {4, 15, 12, 12, 10, 1, 7, 
         13}, 1}, {
        "YOU'LL GET PICKED UP.  RIGHT.", {11, 15, 15, 15, 9, 13}, 0}, {
        "WHAT IS NOT GOOD TO YOU.", {4, 15, 2, 1, 10, 11, 13}, 1}, {
        "DIDN'T THEY DUFFY.!", {12, 2, 12, 12, 13, 13}, 0}, {
        "NOW WHO ELSE.", {2, 11, 2, 13}, 1}, {
        "WHEN SHE WAS WILLING TO SACRIFICE US ALL.", {2, 12, 12, 12, 10, 15, 
         12, 7, 13}, 1}, {
        "YOU'VE GOT A COMEBACK FOR EVERYTHING DON'T YOU DANNY.", {11, 15, 12, 
         12, 12, 10, 12, 12, 2, 11, 12, 13}, 0}, {
        "GONNA KILL US ALL, IS THAT IT.", {12, 12, 12, 12, 7, 13, 15, 4, 11, 
         13}, 0}, {
        "NOW I'M WORKING THE DROP CAR.", {2, 11, 15, 15, 4, 7, 7, 13}, 0}, {
        "IS IT BEAUTIFUL.", {15, 11, 7, 13}, 0}, {
        "I'M ASSUMING THAT'S WHAT MADE HIM THE DEAD ONE.", {11, 15, 15, 4, 15,
          4, 12, 12, 4, 1, 8, 13}, 1}, {
        "PERMISSION TO LEAVE SIR.", {7, 10, 15, 7, 13}, 0}, {
        "WHERE IS HIS HOME LEX LUTHOR.", {15, 15, 11, 12, 12, 12, 13}, 1}, {
        "WHY THEY GOTTA MAKE MY NOSE SO BIG.", {2, 12, 15, 12, 15, 12, 12, 12,
          12, 13}, 1}, {
        "THAT MAKES IT ALL THE MORE DIFFICULT \.97\.97 HAVE YOU ANY OTHER \
RELATIVES MARY.", {4, 15, 11, 7, 4, 1, 7, 13, 13, 15, 11, 12, 12, 12, 12, 13},
          0}, {"AGRIPPA.", {12, 13}, 0}, {"THE DOLL.", {4, 7, 13}, 0}, {
        "REALLY THINK SO.", {12, 12, 12, 13}, 0}, {
        "DID YOU JUST ASK ME WHAT'S A NEGRO.", {12, 11, 2, 15, 7, 4, 15, 4, 7,
          13}, 1}, {
        "WHAT DO WE HAVE TO DO.", {4, 12, 12, 12, 10, 12, 13}, 1}, {
        "DID THE RANCHER FUCK YOU.", {12, 4, 7, 7, 11, 13}, 0}, {
        "JUST BECAUSE I DRESS WELL AND LIKE TO DANCE -- IS THERE SOMETHING \
ABOUT FLAMES.", {2, 10, 11, 15, 2, 3, 10, 10, 12, 13, 15, 12, 12, 12, 12, 13},
          0}, {"HOW'S OUR DEAL COMING ALONG.", {12, 12, 12, 12, 12, 13}, 1}, {
        "YOU HAVE ANY KIDS.", {11, 15, 12, 12, 13}, 0}, {
        "WHAT DO YOU FEAR.", {4, 12, 11, 7, 13}, 1}, {
        "CAN YOU MAKE IT THAT FAR.", {12, 11, 15, 11, 4, 2, 13}, 0}, {
        "WHAT DYA MEAN.", {4, 12, 7, 13}, 1}, {
        "HOW COULD IT BE A CHARADE.", {12, 12, 12, 15, 4, 7, 13}, 1}, {
        "BUT WHAT IS THE REAL ISSUE HERE.", {12, 4, 15, 4, 1, 7, 2, 13}, 1}, {
        "NOW WHY CAN'T I TELL THE STORY.", {2, 2, 12, 2, 11, 15, 4, 7, 13}, 
         1}, {"A PSYCHIATRIST.", {4, 7, 13}, 0}, {
        "HOW TERRIBLE CAN IT BE.", {12, 12, 12, 12, 15, 13}, 1}, {
        "STAKE YOU.", {15, 11, 13}, 0}, {
        "CAN YOU FIX IT.", {12, 11, 15, 11, 13}, 0}, {
        "MANTAN IT IS POSSIBLE THAT MY HYPHENATED SENTENCES ARE ENTIRELY TOO \
COMPLEX FOR ALL THE INTELLECT CONTAINED IN THAT DIMINUTIVE COCONUT.", {12, 12,
          15, 1, 4, 12, 12, 12, 15, 2, 2, 12, 10, 7, 4, 7, 15, 10, 4, 12, 12, 
         13}, 0}, {
        "THAT IT ALL SOUNDS MYSTERIOUS.", {4, 11, 7, 15, 1, 13}, 0}, {
        "I DON'T KNOW 14000 A KILO.", {11, 15, 2, 12, 8, 4, 7, 13}, 0}, {
        "YOU SURE YOU'VE LEFT NOTHING OUT.", {11, 15, 11, 15, 12, 12, 12, 13},
          0}, {"HAVE YOU PULLED YOURSELF TOGETHER.", {15, 11, 15, 12, 2, 13}, 
         0}, {"DON'T YOU REMEMBER.", {7, 2, 11, 15, 13}, 0}, {
        "BOYS.", {7, 13}, 0}, {
        "WHERE'D YOU GET THEM.", {15, 12, 11, 15, 7, 13}, 1}, {
        "WHAT IS THE POINT IN THAT.", {4, 15, 4, 1, 10, 4, 13}, 1}, {
        "OH GOD WHY.", {7, 7, 2, 13}, 1}, {"GOING NORTH.", {1, 12, 13}, 0}, {
        "YOU TWO ARE GONNA HELP ME TAME THE WILD BEAST.", {11, 8, 15, 12, 12, 
         12, 12, 12, 4, 1, 7, 13}, 0}, {
        "YOU ARE FUCKIN' DEAD YOU GO IN THERE TODAY.", {11, 15, 7, 13, 1, 11, 
         15, 10, 12, 12, 13}, 0}, {"OUT THE BACK.", {12, 4, 2, 13}, 0}, {
        "AND I AIM TO CURE YA OF YOUR WICKEDNESS.", {3, 11, 7, 10, 15, 12, 10,
          1, 7, 13}, 0}, {
        "AND I USED TO KNOW YOU PERSONAL WAY BACK WHEN.", {3, 11, 15, 10, 12, 
         11, 1, 7, 2, 2, 13}, 1}, {
        "IF YOU DON'T WANT MY FILM - I'LL CALL ANOTHER SHOW.", {10, 11, 15, 2,
          1, 7, 7, 13, 11, 15, 1, 12, 12, 13}, 1}, {
        "SHADOW GETS CRAZY-- IT'S NOT OUR JOB TO GET INVOLVED IN YOUR \
PERSONAL LIFE BUT WHEN IT INTERFERES WITH THE TRAINING HERE-- FROM BACK IN \
HOUSTON.", {12, 15, 12, 13, 11, 15, 12, 12, 12, 10, 15, 1, 10, 1, 1, 7, 12, 2,
          11, 15, 10, 4, 7, 2, 13, 10, 2, 10, 12, 13}, 1}, {
        "GREAT RUNNING INTO YOU, BUDDY.", {1, 15, 10, 11, 13, 12, 13}, 0}, {
        "I HAVEN'T FELT THIS GOOD IN A LONG TIME.", {11, 15, 2, 15, 7, 1, 10, 
         4, 7, 7, 13}, 0}, {"NERVES OF STEEL.", {7, 10, 12, 13}, 0}, {
        "I SHOULDN'T BE OVER HERE AT THIS HOUR.", {11, 15, 2, 15, 10, 2, 10, 
         12, 12, 13}, 0}, {
        "-- THE TRAIN FOR MARSEILLES LEAVES AT FIVE O'CLOCK.", {13, 4, 7, 10, 
         12, 15, 10, 8, 7, 13}, 0}, {
        "-- YOU SAID SO YOURSELF THE FIRM IS LARGE AND POWERFUL.", {13, 11, 
         15, 12, 12, 4, 12, 15, 12, 3, 12, 13}, 0}, {
        "THIS IS NOT MY USUAL FRIDAY NIGHT!", {12, 15, 12, 12, 12, 12, 12, 
         13}, 0}, {
        "I SENT IT TO MYSELF IN PARIS.", {11, 15, 11, 10, 12, 10, 12, 13}, 
         0}, {"YOU SAID IT CLARK.", {11, 15, 11, 7, 13}, 0}, {
        "I DON'T KNOW WHAT YOU'RE TALKING ABOUT MAN.", {11, 15, 2, 12, 4, 11, 
         15, 15, 10, 7, 13}, 1}, {
        "OUR RENDEZVOUS POINTS AND RADIO FREQS.", {12, 12, 12, 3, 12, 12, 13},
          0}, {"YOU STILL GOT A SHITLOAD OF PLOWING TO DO.", {11, 2, 15, 4, 
         12, 10, 12, 10, 12, 13}, 0}, {
        "HE TOLD ME THAT I WAS STUPID BECAUSE MY BOYFRIEND DIDN'T REALLY LOVE \
ME.", {11, 15, 12, 4, 11, 15, 1, 12, 12, 12, 12, 2, 12, 12, 12, 13}, 0}, {
        "BUT I...", {12, 12, 13, 13}, 0}, {
        "THIS SORT OF THING AIN'T MY BAG BABY.", {12, 12, 10, 12, 12, 2, 12, 
         12, 7, 13}, 0}, {
        "WE'RE MAKING A STATEMENT.", {12, 12, 12, 12, 12, 13}, 0}, {
        "I KNOW THIS.", {11, 15, 7, 13}, 0}, {
        "I THINK I SHOULD GO BACK.", {11, 15, 11, 15, 15, 2, 13}, 0}, {
        "NO QUESTION ABOUT IT.", {4, 12, 12, 12, 13}, 0}, {
        "HEY YOU HAVEN'T CHANGED YOUR CLOTHES!", {7, 11, 15, 2, 15, 1, 7, 13},
          0}, {"THE RESISTANCE THE ANGER IN YOUR VOICE.", {4, 7, 4, 7, 10, 1, 
         7, 13}, 0}, {"NO I'M OKAY FOR NOW.", {7, 11, 15, 1, 10, 2, 13}, 0}, {
        "NO ALL THE GOOD ONES ARE MARRIED.", {4, 7, 4, 1, 7, 15, 15, 13}, 
         0}, {"THE GOVERNMENT DOESN'T HAVE TO TELL PEOPLE TO DO IT.", {4, 12, 
         12, 2, 12, 10, 12, 12, 10, 12, 12, 13}, 0}, {
        "THAT'S COOL.", {4, 15, 12, 13}, 0}, {
        "SARAH LAWRENCE IS ON THE OTHER SIDE OF THE COUNTRY.", {12, 12, 15, 
         10, 4, 1, 12, 10, 4, 7, 13}, 0}, {
        "PLEASE ROSE BE A GOOD SPORT.", {15, 12, 15, 4, 1, 7, 13}, 0}, {
        "YOUR FACE WAS DARK AND YOUR HAIR WAS BACKLIT -- I COULD SEE A HALO \
OF FRIZZ -- YOU ASKED ME IF THINGS WERE OKAY BETWEEN NAOMI AND ME.", {1, 7, 
         15, 1, 3, 1, 7, 15, 12, 13, 11, 15, 15, 4, 7, 10, 12, 13, 11, 15, 12,
          10, 12, 15, 1, 12, 12, 3, 12, 13}, 0}, {
        "HER NOT BELIEVING ABOUT YOUR CONDITION..", {12, 12, 12, 12, 1, 7, 13,
          13}, 0}, {"WE SEE YOU NEXT HARVEST.", {12, 15, 11, 1, 7, 13}, 0}, {
        "THEY MAY LOOK GOOD BUT THEY WEIGH TWELVE POUNDS EACH THAT'S \
THIRTY-SIX POUNDS RIGHT THERE.", {12, 12, 12, 12, 12, 12, 15, 8, 12, 12, 4, 
         15, 8, 12, 12, 12, 13}, 0}, {
        "THIS IS ANTHONY ADAMS MR. HENRY.", {12, 15, 12, 12, 12, 12, 13}, 
         0}, {"NO. DADDY SAYS ROSE IS CALM AS LETTUCE.", {7, 13, 12, 12, 15, 
         15, 7, 1, 7, 13}, 0}, {
        "I'M SORRY IT'S JUST THAT..", {11, 15, 12, 12, 2, 4, 13, 13}, 0}, {
        "BUT THEN  --  --  THAT SILLY WAR..", {12, 12, 13, 13, 4, 12, 7, 13, 
         13}, 0}, {
        "SHE CALLED ME AN OLD LADY HERE TOO!", {12, 15, 1, 4, 1, 7, 2, 2, 13},
          0}, {"FIVE NIGHTS AGO HE FOUND THIS PARATROOPER CAUGHT IN A TREE \
WITH A BROKEN LEG.", {8, 7, 2, 11, 12, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13},
          0}, {"ALONE.", {2, 13}, 0}, {
        "I AVOIDED CAPTURE USING THE MAK'TAR STEALTH HAZE.", {11, 15, 12, 12, 
         4, 12, 13, 7, 7, 7, 13}, 0}, {
        "IT IS IT IS!", {11, 15, 11, 15, 13}, 0}, {
        "LEAVE THAT ALONE!", {15, 4, 2, 13}, 0}, {
        "I DON'T WANT TO TALK ABOUT HIM.", {11, 15, 2, 1, 10, 12, 12, 12, 13},
          0}, {"GOOD AFTERNOON MR. HARRIS.", {1, 7, 12, 12, 13}, 0}, {
        "JOHN I'D LIKE YOU TO MEET ONE OF THE BRIGHTEST LIGHTS OF THE BRITISH \
STAGE MRS. KENDAL.", {12, 11, 15, 10, 11, 10, 15, 8, 10, 4, 12, 12, 10, 4, 1, 
         7, 12, 12, 13}, 0}, {
        "DON'T KNOW IF I'LL STILL WANT IT.", {7, 2, 12, 10, 11, 15, 2, 1, 11, 
         13}, 0}, {"MADAM SENATOR...", {12, 12, 13}, 0}, {
        "I'LL GET HIM.", {11, 15, 15, 7, 13}, 0}, {
        "AT LEAST TALK TO HIM HEAR WHAT HE HAS TO SAY.", {10, 12, 12, 10, 12, 
         15, 4, 11, 15, 10, 12, 13}, 1}, {
        "LOUELLA PARSONS IS HERE.", {12, 12, 15, 2, 13}, 0}, {
        "THREE MEN AND A WOMEN.", {8, 12, 3, 4, 12, 13}, 0}, {
        "IT'S COSMETIC.", {11, 15, 7, 13}, 0}, {
        "AND YOU WILL GIVE ME OCCASION.", {3, 11, 15, 15, 12, 12, 13}, 0}, {
        "I'M HAPPY.", {11, 15, 12, 13}, 0}, {
        "LET ME OUT OF HERE!", {15, 12, 12, 10, 2, 13}, 0}, {
        "MAYBE HE DIDN'T KNOW EXACTLY WHAT HE WAS GONNA DO BUT HE HAD A \
PRETTY GOOD IDEA.", {2, 11, 15, 2, 12, 12, 4, 11, 15, 12, 12, 12, 12, 11, 15, 
         4, 2, 1, 7, 13}, 1}, {
        "AND BECAUSE HE'S MY FRIEND.", {3, 10, 11, 15, 12, 12, 13}, 0}, {
        "I DON'T KNOW WHY I SAID IT.", {11, 15, 2, 12, 2, 11, 15, 11, 13}, 
         1}, {"HOWE I HATE TO BRING IT UP BUT SHE'S GOT AN AWFUL TOOTHACHE \
WE'VE GOT TO CARRY HER TO THE DENTIST.", {12, 11, 15, 10, 15, 11, 9, 12, 12, 
         12, 4, 12, 12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 13}, 1}, {
        "WHENEVER PEOPLE SAY 'AW THAT DAMONE IS A LOUDMOUTH' -- AND THEY SAY \
THAT A LOT -- I SAY 'YOU JUST DON'T KNOW DAMONE.' WHEN SOMEONE SAYS YOU'RE AN \
IDIOT I TELL THEM 'DAMONE'S NOT AN IDIOT.", {12, 12, 12, 13, 12, 4, 12, 15, 4,
          7, 13, 13, 3, 7, 7, 4, 4, 7, 13, 11, 15, 13, 11, 2, 15, 2, 12, 12, 
         13, 13, 2, 12, 15, 11, 15, 4, 7, 11, 15, 12, 13, 12, 15, 12, 4, 12, 
         13}, 1}, {
        "GOOD THING HE DOESN'T ALWAYS KNOW WHAT HE'S GOT...", {1, 7, 11, 15, 
         2, 1, 7, 4, 11, 15, 12, 13, 13}, 1}, {
        "IT'S FOR SOMEBODY NAMED THOMPSON BUT IT SAYS 'CARE OF RAOUL DUKE'.", \
{11, 15, 10, 12, 12, 12, 12, 12, 12, 13, 12, 10, 12, 12, 13}, 0}, {
        "THEN TAKE IT FROM HIM.", {2, 15, 11, 10, 7, 13}, 0}, {
        "A WOW FINISH.", {4, 12, 7, 13}, 0}, {"EARS.", {7, 13}, 0}, {
        "TRADE YOUR EXCELLENCY.", {7, 1, 7, 13}, 0}, {
        "JUST ONE COMPADRE...", {2, 8, 7, 13}, 0}, {
        "I'LL TAKE EVERYTHING AT FACE VALUE.", {11, 15, 15, 15, 10, 12, 12, 
         13}, 0}, {
        "IT'S MUCH SAFER IN THERE SWEETY.", {11, 15, 12, 12, 10, 12, 12, 13}, 
         0}, {"WELL DO SOMETHING ABOUT IT.", {12, 12, 12, 12, 12, 13}, 0}, {
        "HOLD ON . . .", {15, 12, 13}, 0}, {
        "LET ME HAVE MANUAL CONTROL PLEASE.", {15, 12, 12, 12, 12, 12, 13}, 
         0}, {"MY AUTHOR.", {12, 12, 13}, 0}, {
        "NOW LISTEN BEFORE YOU DO SOMETHING YOU'LL REALLY REGRET YOU'D BETTER \
STOP AND THINK-- HERE ARE THE SLIPS FOR THE LAUNDRY AND THE CLEANING.", {2, 
         15, 10, 11, 15, 12, 11, 15, 12, 12, 11, 15, 12, 15, 3, 15, 13, 2, 15,
          4, 15, 10, 4, 7, 3, 4, 7, 13}, 0}, {
        "IF THAT'S THE WAY YOU WANT IT.", {10, 4, 15, 4, 7, 11, 15, 11, 13}, 
         0}, {"I SAW IT GOING DOWN.", {11, 15, 11, 12, 12, 13}, 0}, {
        "I'LL LAY YOU FIVE TO ONE YOU WON'T SLEEP.", {11, 15, 7, 11, 8, 10, 8,
          11, 15, 2, 7, 13}, 0}, {
        "THAT WON'T YOUR FAULT.", {4, 1, 2, 1, 7, 13}, 0}, {
        "I LIKED THE HORSE.", {11, 15, 4, 7, 13}, 0}, {
        "LET'S GET A PICTURE.", {7, 15, 4, 7, 13}, 0}, {
        "UHM..", {12, 13, 13}, 0}, {
        "THEN YOU ARE A FOOL -- A FOOL WHO HAS NEVER LOST A SON.", {2, 11, 15,
          4, 7, 13, 4, 7, 11, 15, 12, 12, 12, 12, 13}, 1}, {
        "NO ONE CAN STOP THEM.", {7, 8, 12, 15, 12, 13}, 0}, {
        "WELL IT SEEMS YOU ARE DETERMINED TO KEEP LASZLO HERE.", {12, 12, 15, 
         11, 15, 15, 10, 15, 12, 2, 13}, 0}, {
        "LIKE HE'S WILD.", {10, 11, 15, 12, 13}, 0}, {
        "HE'S NOT ARMY IT'S NOT OFFICIAL -- HE'S FORMER ARMY AND THE BEST \
I'VE EVER SEEN IN A ROOM.", {11, 15, 12, 12, 12, 12, 12, 13, 11, 15, 1, 7, 3, 
         4, 7, 11, 15, 2, 12, 10, 4, 7, 13}, 0}, {
        "NOTHING REAL OR SUPERNATURAL IS BUSTING THROUGH THIS LEAST NOTHING \
THE SIZE OF THE BEASTS.", {15, 7, 7, 1, 15, 12, 10, 12, 12, 12, 4, 7, 10, 4, 
         7, 13}, 0}, {"I WOULD HANG HIM!", {11, 15, 7, 7, 13}, 0}, {
        "I'M FEELING FINE THIS MORNING.", {11, 15, 15, 12, 12, 12, 13}, 0}, {
        "AND I HADN'T BEEN LIVING MY OWN LIFE.", {3, 11, 15, 2, 12, 12, 12, 
         12, 12, 13}, 0}, {
        "I JUST KNOW HOW YOU GET.", {11, 2, 15, 12, 11, 15, 13}, 1}, {
        "I MEAN IT'S NOT AS IF -- YOU'RE GREAT WITH THE ADVICE CLARK.", {11, 
         15, 11, 15, 2, 1, 10, 13, 11, 15, 1, 10, 4, 12, 12, 13}, 0}, {
        "SCREWIN' SOME POOR SLOB OUT OF HIS RETIREMENT.", {7, 13, 12, 12, 12, 
         12, 10, 11, 7, 13}, 0}, {
        "IT'S ALL WORKING OUT JUST LIKE WE PLANNED.", {11, 15, 7, 15, 12, 2, 
         10, 12, 12, 13}, 0}, {
        "THEY JUST STOOD THERE CONFUSED.", {12, 2, 15, 1, 1, 13}, 0}, {
        "COME ON STACY IT'S YOUR SECTION AND YOUR MAN.", {15, 12, 12, 12, 1, 
         7, 3, 1, 7, 13}, 0}, {"UH..", {12, 13, 13}, 0}, {
        "I HAVE NO LUGGAGE.", {11, 15, 7, 7, 13}, 0}, {
        "I -- I...", {11, 13, 7, 13, 13}, 0}, {
        "I TOLD YOU I'D GET IT.", {11, 15, 11, 11, 15, 15, 11, 13}, 0}, {
        "HAVE A DONUT.", {15, 4, 7, 13}, 0}, {
        "NOBODY WALKS AROUND LIKE THAT.", {7, 15, 10, 12, 4, 13}, 0}, {
        "WELL PERSONALLY MAJOR I WILL TAKE WHAT COMES.", {12, 2, 15, 11, 15, 
         15, 4, 15, 13}, 1}, {
        "YOU DID PICK A REAL STRANGE TIME TO GO AND BE BRAVE ALL ON YOUR \
OWN..", {11, 15, 12, 12, 12, 12, 12, 10, 12, 3, 15, 1, 7, 10, 1, 7, 13, 13}, 
         0}, {"CHARLES I MUST APOLOGIZE AGAIN FOR THE KRONOS MISHAP.", {12, 
         11, 15, 15, 2, 10, 4, 7, 7, 13}, 0}, {
        "I GAVE MY GRIEF TO JESUS CHRIST.", {11, 15, 7, 7, 10, 12, 12, 13}, 
         0}, {"NOW YOU MIGHT BE ONE OF THESE HOLLYWOOD TYPES CHANGE YOUR NAME \
AND ALL THAT BUT PEERLESS DOTHAN IS ON YOUR BIRTH CERTIFICATE.", {2, 11, 15, 
         15, 8, 10, 12, 12, 15, 12, 1, 7, 3, 7, 4, 12, 12, 12, 15, 12, 1, 7, 
         7, 13}, 0}, {
        "STOP SAYING YOU KNOW WHEN I SAY 'Y'KNOW.' I KNOW YOU KNOW.", {15, 12,
          11, 15, 2, 11, 15, 13, 12, 12, 13, 13, 11, 15, 11, 15, 13}, 1}, {
        "HE'S NOT A STAG HOUND.", {11, 15, 2, 4, 7, 7, 13}, 0}, {
        "SO IT'S ALL WORKED OUT PERFECTLY..", {12, 12, 7, 15, 12, 2, 13, 13}, 
         0}, {"SOUNDS DELIGHTFUL. ... MEANWHILE I'D LIKE TO PREPARE YOU FOR A \
COLONOSCOPY SO WE CAN TAKE A LOOK INSIDE.", {15, 12, 13, 13}, 0}, {
        "I ASKED IF WE COULD GIVE HIM ANYTHING ELSE.", {11, 15, 10, 12, 12, 
         15, 12, 12, 12, 13}, 0}, {"PAY'S GOOD THOUGH.", {7, 1, 7, 13}, 0}, {
        "DOESN'T MOVE.", {7, 2, 15, 13}, 0}, {
        "IT'S REALLY NICE TO TALK WITH YOU SAM.", {11, 15, 2, 1, 10, 12, 10, 
         11, 12, 13}, 0}, {
        "HOW YOU GOT ME LOCKED UP LIKE A DOG ON A...", {12, 11, 15, 7, 15, 9, 
         10, 4, 7, 10, 7, 13, 13}, 1}, {"TREVES.", {12, 13}, 0}, {
        "I DON'T KNOW HOW IT GOT THIS WAY..", {11, 15, 2, 12, 12, 12, 12, 12, 
         12, 13, 13}, 1}, {
        "IT SEEMED SHE WAS HARMING YOU.", {11, 15, 12, 12, 12, 11, 13}, 0}, {
        "OTHER PICTURES--I DON'T KNOW--IT'S NOTHING I WANT TO LOOK BACK ON.", \
{1, 7, 13, 11, 15, 2, 12, 13, 11, 15, 15, 11, 1, 10, 15, 2, 10, 13}, 0}, {
        "I'LL RISK IT.", {11, 15, 7, 11, 13}, 0}, {
        "I THINK THEY HAVE ANOTHER FELLA THERE TO KEEP IT OFF YOUR CHEST.", {
         11, 15, 12, 12, 12, 12, 12, 10, 15, 11, 7, 1, 7, 13}, 0}, {
        "I'LL GO OUT FOR A SMOKE.", {11, 15, 12, 12, 10, 4, 7, 13}, 0}, {
        "INDIA IS A NEWLY INDEPENDENT NATION.", {12, 15, 4, 2, 1, 7, 13}, 
         0}, {"I CAN'T BELIEVE WHAT A --!", {11, 12, 2, 15, 4, 4, 13, 13}, 
         1}, {"IT COULD BE PARASITES AN INFECTION..", {11, 15, 15, 12, 4, 7, 
         13, 13}, 0}, {
        "SAYS SHE CAN GET ME IN TO SEE THIS KILLER.", {12, 12, 12, 15, 7, 10, 
         10, 15, 7, 7, 13}, 0}, {"SEE YOU.", {15, 11, 13}, 0}, {
        "NO NO!", {7, 7, 13}, 0}, {
        "YOU CAN GO BACK WITH JACK.", {11, 15, 7, 2, 10, 7, 13}, 0}, {
        "WE WONDERED ABOUT THE DISCOLORATION SO HE RAN A SPECTRO.", {12, 15, 
         10, 4, 12, 12, 11, 15, 4, 7, 13}, 0}, {
        "OF COURSE YOU CAN'T!", {10, 12, 11, 12, 2, 13}, 0}, {
        "JUST HOPE.", {2, 7, 13}, 0}, {
        "LONGITUDE 109 -- LET'S GO.", {7, 8, 13, 12, 7, 13}, 0}, {
        "WELL I HAVEN'T HEARD ANYTHING ABOUT THE DISAPPEARANCE OR \
ANYTHING...", {2, 11, 15, 2, 15, 15, 10, 4, 7, 7, 7, 13}, 0}, {
        "TWENTY-FIVE YEARS.", {8, 7, 13}, 0}, {
        "LET ME SEE!", {15, 12, 15, 13}, 0}, {
        "WHY HE COULD OPERATE ON ME ANY OLD TIME AND I WOULDN'T EVEN BE \
SCARED.", {2, 11, 12, 12, 12, 12, 12, 12, 12, 3, 11, 15, 2, 2, 15, 12, 13}, 
         1}, {"THE PACE OF REFORM MUST MEET WITH THE DESIRES OF THE TIBETAN \
PEOPLE.", {4, 7, 10, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}, 0}, {
        "MY PLAN INVOLVES ALL FOUR OF US ACTING TOGETHER.", {12, 7, 15, 7, 8, 
         10, 12, 12, 2, 13}, 0}, {
        "ROSE, YOU'RE VERY SICK.", {7, 13, 11, 15, 2, 1, 13}, 0}, {
        "WHICH IS A WONDERFUL CROOK.", {4, 15, 4, 1, 7, 13}, 1}, {
        "I LOST A WORKER.", {11, 15, 4, 7, 13}, 0}, {
        "SHE SAYS HE COMES BACK IN DREAMS.", {12, 15, 11, 15, 2, 10, 7, 13}, 
         0}, {"THE DANGER.", {4, 7, 13}, 0}, {
        "ABOUT SIX MONTHS AGO SOME PARTS OF BODIES WERE FOUND DOWN BY THE \
RIVER.", {10, 8, 7, 2, 15, 7, 10, 7, 15, 15, 2, 10, 4, 7, 13}, 0}, {
        "THE PERSONALITY INVENTORIES WOULD TRIP HIM UP.", {4, 7, 7, 15, 7, 7, 
         7, 13}, 0}, {
        "IF FIRED UPON TELL OUR FIGHTERS THAT THEY ARE ORDERED TO ENGAGE.", {
         10, 15, 10, 12, 12, 12, 4, 12, 15, 15, 10, 15, 13}, 0}, {
        "IT WORKED!", {11, 15, 13}, 0}, {"JUST MY LUCK.", {2, 7, 7, 13}, 0}, {
        "LECTER DID IT TO AMUSE HIMSELF.", {12, 12, 12, 10, 15, 7, 13}, 0}, {
        "IT'S A STUPID TRADITION.", {11, 15, 4, 1, 7, 13}, 0}, {
        "I'LL GO OUTSIDE AND TAKE A LOOK IN THE GARAGE.", {11, 15, 7, 10, 3, 
         15, 4, 7, 10, 4, 7, 13}, 0}, {
        "SO MUCH FOR NUTSY FAGIN.", {12, 12, 10, 12, 12, 13}, 0}, {
        "SUPPOSE THAT YOU BEAR FIVE OR SIX CHILDREN WITH YOUR \
CHARACTERISTICS.", {15, 4, 11, 15, 8, 7, 8, 7, 10, 1, 7, 13}, 0}, {
        "IT DOES AND IT IS A BETTER LOOKIN' REASON THAN YOU JACK WINTHROP.", {
         11, 12, 3, 11, 15, 4, 1, 7, 13, 12, 12, 11, 12, 12, 13}, 0}, {
        "FUCK OFF FRAT BOY.", {12, 12, 12, 7, 13}, 0}, {
        "IT'S REALLY SOLID THIS TIME OF YEAR.", {11, 15, 1, 1, 7, 15, 10, 7, 
         13}, 0}, {
        "NO I READ IT ON THE MESSAGE.", {7, 11, 15, 11, 10, 4, 7, 13}, 0}, {
        "WELL SURE..", {12, 12, 13, 13}, 0}, {
        "GIVE MY BLESSING TO THE GIRL.", {15, 12, 12, 10, 4, 7, 13}, 0}, {
        "I FEEL ALL RIGHT TOO.", {11, 15, 7, 7, 7, 13}, 0}, {
        "PROBABLY HE MEANS NO HARM.", {12, 11, 15, 7, 7, 13}, 0}, {
        "SOMEDAY YOU'LL HAVE A SON JUST LIKE YOU JEREMIAH.", {12, 11, 15, 12, 
         12, 12, 2, 10, 11, 12, 13}, 0}, {
        "THESE ARE HIS PEAK HOURS.", {12, 15, 11, 7, 7, 13}, 0}, {
        "QUITE.", {12, 13}, 0}, {"GOOD THING.", {1, 7, 13}, 0}, {
        "HE KNEW WHERE HER ROOM WAS.", {11, 15, 12, 12, 12, 12, 13}, 1}, {
        "JOANNA GO FUCK YOURSELF!", {12, 12, 12, 12, 13}, 0}, {
        "NUMBNESS.", {7, 13}, 0}, {"NO I...", {7, 7, 13, 13}, 0}, {
        "I DO IT 'CAUSE IT WORKS-...", {11, 15, 11, 15, 11, 15, 13, 13}, 0}, {
        "JIM JONES Y'KNOW.", {12, 12, 12, 12, 13}, 0}, {
        "THERE'S NOTHING TO UNDERSTAND.", {7, 12, 10, 12, 13}, 0}, {
        "WHY IT DOES ME GOOD JUST TO SEE HIM SIT THERE ALL SOLEMN AND GO \
POKIN' IN HIS BAG LIKE HE'S GONNA CURE ME WHICH HE DID OF COURSE.", {2, 11, 
         15, 2, 1, 2, 10, 15, 12, 7, 7, 7, 1, 3, 7, 7, 13, 10, 11, 7, 10, 11, 
         15, 12, 12, 12, 12, 4, 11, 15, 10, 12, 13}, 1}, {
        "YOU KNOW THAT SOMETIMES IT'S HARD TO UNDERSTAND GOD'S GREAT PLAN.", {
         11, 15, 4, 2, 11, 15, 1, 10, 12, 12, 1, 7, 13}, 0}, {
        "HEY INSPECTOR I DON'T INTEND TO TAKE THE RAP FOR THIS.", {7, 7, 11, 
         15, 2, 15, 10, 15, 4, 7, 10, 7, 13}, 0}, {
        "YOU UNDERSTAND HOW I FEEL.", {11, 15, 7, 11, 15, 13}, 1}, {
        "HE DOES A LITTLE SPOT WHERE THE BUTTER HAD BEEN.", {11, 15, 4, 12, 
         12, 15, 4, 7, 15, 7, 13}, 1}, {
        "I CAN'T BELIEVE IT'S ALREADY STARTING TO GET DARK SO EARLY.", {11, 
         12, 2, 12, 12, 12, 12, 10, 15, 1, 7, 7, 13}, 0}, {
        "THERE'S NO FIRST ACT.", {7, 7, 12, 12, 13}, 0}, {
        "GOD PARDON SIN WAS THOU WITH ROSALINE!", {7, 7, 7, 15, 12, 10, 12, 
         13}, 0}, {"UNDERSTAND THAT.", {12, 4, 13}, 0}, {
        "LOOK DIFFERENT THAN YOU SOUNDED ON THE PHONE.", {8, 1, 10, 11, 15, 
         10, 4, 7, 13}, 0}, {
        "GEORGE WORK WITH ME I ALWAYS GET A LAUGH WITH THAT ONE.", {12, 15, 
         10, 7, 11, 15, 15, 4, 7, 10, 4, 8, 13}, 0}, {
        "I CAN'T DO THIS.", {11, 12, 2, 12, 12, 13}, 0}, {
        "ONLY BY A DIRECTOR OF THE FIRM.", {2, 10, 4, 7, 10, 4, 7, 13}, 0}, {
        "RICK'S WOULDN'T BE RICK'S WITHOUT THEM.", {12, 12, 2, 15, 12, 6, 12, 
         12, 13}, 0}, {
        "RICK'S GOT AN IMPORTANT ANNOUNCEMENT TO MAKE.", {12, 12, 4, 1, 7, 10,
          15, 13}, 0}, {
        "I SHOULD GO YOU ARE THE BOY ...", {11, 15, 15, 11, 15, 4, 7, 13}, 
         0}, {"THEY COULD CLEAN AROUND THE ARRANGEMENT.", {12, 12, 12, 10, 4, 
         7, 13}, 0}, {
        "REMEMBER LIKE I SAY I FOUND YOU IN THE ROAD..", {15, 10, 11, 15, 11, 
         15, 11, 10, 4, 7, 13, 13}, 0}, {
        "BUT LOVE ISN'T THE OPERATIVE WORD HERE PEACE IS!", {12, 12, 15, 2, 4,
          7, 7, 2, 15, 15, 13}, 0}, {
        "IT'S A PERSONAL THING.", {11, 15, 4, 1, 7, 13}, 0}, {
        "TEN'S STANDARD.", {8, 7, 13}, 0}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question"}, 
    "LogProbabilities" -> CompressedData["
1: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
fz26S5Q=
     "], "CountMatrix" -> {{167, 33, 0}, {83, 117, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwV0lsvFgAAgOFPmpuISlFik2idHNaUVarZqOYGyWJyVkP1WTVFq00HJB3+
hd9CF3ReSCJSraQDSY2ni+cHvNubWBMsuhASCAR66aOfxwwwyBOe8oznvOAl
r3jNEMOM8IZR3jLGO8aZ4D2TTPGBaT7yic984SszfGOW7/zgJ7+YY57fLPCH
Rf7yjyUCYkJYQSgrCWMV4USwmkiiWMNa1hHNejYQQywb2UQcm4kngUS2kMRW
kklhG9vZwU52sZtU0kgngz1kspd9ZLGfAxwkm0Mc5gg55JLHUY5xnHwKKKSI
ExRzkhJOUUoZ5ZymgkqqqKaGWuqo5wxnaaCRJs5xnv+zBGnmIpe4TAtXuEor
bVzjOjdo5ya3uM0dOuiki7t0c48e7vOAhzxiGf+nUHw=
       "], {204, 205, 206, 216, 
       236, 254, 261, 263, 264, 265, 266, 287, 288, 296, 306, 308, 313, 321, 
       323, 324, 330, 332, 333, 334, 335, 343, 347, 360, 369, 373, 380, 383, 
       384}, {}}, {{2, 3, 9, 11, 12, 13, 14, 15, 16, 26, 28, 29, 30, 33, 34, 
       38, 39, 41, 43, 52, 54, 55, 56, 60, 62, 63, 71, 72, 73, 76, 78, 82, 86,
        89, 91, 93, 94, 95, 96, 98, 99, 100, 102, 107, 108, 109, 114, 115, 
       117, 118, 120, 121, 123, 127, 129, 131, 134, 137, 138, 139, 140, 142, 
       143, 146, 151, 154, 156, 158, 161, 162, 163, 164, 166, 170, 171, 176, 
       185, 189, 190, 191, 194, 195, 200}, {1, 4, 5, 6, 7, 8, 10, 17, 18, 19, 
       20, 21, 22, 23, 24, 25, 27, 31, 32, 35, 36, 37, 40, 42, 44, 45, 46, 47,
        48, 49, 50, 51, 53, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 74, 
       75, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 92, 97, 101, 103, 104, 105,
        106, 110, 111, 112, 113, 116, 119, 122, 124, 125, 126, 128, 130, 132, 
       133, 135, 136, 141, 144, 145, 147, 148, 149, 150, 152, 153, 155, 157, 
       159, 160, 165, 167, 168, 169, 172, 173, 174, 175, 177, 178, 179, 180, 
       181, 182, 183, 184, 186, 187, 188, 192, 193, 196, 197, 198, 199}, {}}},
     "ExtendedClasses" -> {"Not Question", "Question"}, "Weights" -> 
    SparseArray[Automatic, {400}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0002780875, "SingleEvaluationTime" -> 
    0.0054564999999999995`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740158275742425*^9, 3.740159527510137*^9, 
  3.740159819982419*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"56daeab6-970f-4540-9c3d-5f354b7675a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"d28206d5-a1db-4b18-95a0-545724d10c77"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8869855653235188, 0.6757795894936992, 
   0.23694492347390503`}, {0.8848262355870498, 0.5344106476757106, 
   0.005734179482239837}}, {{1., 0.42, 0.}, {0.927742432085872, 
   0.8454016159152181, 0.605261077278872}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["167", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "167", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.668`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.835`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7422222222222222`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{167, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.668}], 
         Row[{"Recall = ", 0.835}], 
         Row[{"FScore = ", 0.7422222222222222}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["83", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "83", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.332`"}, "RowDefault"]}, {
          
           TemplateBox[{"\"Row fraction = \"", "0.415`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          83, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.332}], 
         Row[{"Row fraction = ", 0.415}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["33", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "33", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.22`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.165`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          33, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.22}], 
         Row[{"Row fraction = ", 0.165}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["117", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "117", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.78`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.585`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6685714285714285`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{117, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.78}], 
         Row[{"Recall = ", 0.585}], 
         Row[{"FScore = ", 0.6685714285714285}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "200", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.835`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{200, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.835}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "200", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.585`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{200, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.585}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "250", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.668`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{250, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.668}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "150", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.78`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{150, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.78}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["200", TraditionalForm]}, {0.5, 
       FormBox["200", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["250", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["150", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7401582818924913`*^9, 3.74015953613031*^9, 
  3.7401599061844063`*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"cdc81bd9-a871-4ad4-8cd2-04a7a030c728"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 3.7400883194708557`*^9}, {
  3.740158177371798*^9, 3.740158178411964*^9}, {3.740159552959792*^9, 
  3.74015955405449*^9}, {3.7401709864505367`*^9, 
  3.7401709868632593`*^9}},ExpressionUUID->"2288b0f8-e3ba-4450-b920-\
1b5299f6b207"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"createClasses", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"createClasses", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"createClasses", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "300"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"createClasses", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "300"}], "]"}], "]"}], "]"}]}]}], " ", 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 3.74015855015483*^9}, {3.740159429774341*^9, 
   3.7401594638126287`*^9}, 3.740159505209405*^9, {3.7401595565268803`*^9, 
   3.740159576062914*^9}, {3.740170957481477*^9, 3.740170970433209*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"e8e6a9d9-f107-4823-9ebf-2bb0f0877576"],

Cell[BoxData[
 TemplateBox[{
  "Java","excptn",
   "\"A Java exception occurred: \
\\!\\(\\*RowBox[{\\\"\\\\\\\"java.lang.OutOfMemoryError: Java heap \
space\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.trees.LabeledScoredTreeFactory.newTreeNode(\
LabeledScoredTreeFactory.java:56)\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.parser.common.ParserUtils.xTree(ParserUtils.java:41)\\\\\\\\\
n\\\\\\\\tat \
edu.stanford.nlp.parser.lexparser.LexicalizedParser.parse(LexicalizedParser.\
java:313)\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.parser.common.ParserGrammar.parse(ParserGrammar.java:84)\\\\\
\\\\n\\\\\\\\tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown \
Source)\\\\\\\"\\\"}]\\).\"",2,140,20,30944156347447667626,"Local",
   "JLink`Java"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.740171626222301*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"606f3cee-4934-4088-9042-53ea0ceb1eeb"],

Cell[BoxData[
 TemplateBox[{
  "Table","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"MachineLearning`Models`GrammaticalParser`Private`i\\\", \
\\\",\\\", RowBox[{\\\"$Failed\\\", \\\"[\\\", \
RowBox[{\\\"MachineLearning`Models`GrammaticalParser`Private`numChildren\\\", \
\\\"[\\\", \\\"]\\\"}], \\\"]\\\"}]}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,140,21,30944156347447667626,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.740171626292522*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"5808ba42-816f-43cd-b483-43b839a774c9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Boolean\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Boolean\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["10000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 10000, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"], "f3" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 3]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence", "Boolean"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f3" -> Association["Type" -> "Boolean", "Weight" -> 1], "f1" -> 
           Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQEAABdBvDDpRm+F2MMIlV5vNACoTiEWMIFEYQt5r3ljXpXVJziE5
rn2b+6nYtm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3b
tm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3b9l/O6/5+
ABCcesY=
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f3" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8638625972092938175]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2181139535596031377, "Output" -> 
             Association[
              "f3" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6345089180380480927, "Output" -> 
             Association[
              "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1], 
               "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1], 
               "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 631332860152842886]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 2682676190599947125]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 10000, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.2751}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2751}, 
                    "StandardDeviation" -> {0.4465646537736725}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2751}, 
                    "StandardDeviation" -> {0.4465646537736725}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.047873, "MaxTrainingMemory" -> 292848,
                     "DataMemory" -> 80152, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 7, 9, 19, 37, 59.607189`8.527873614598834}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                 "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                 5830460000005304866]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["Standardize", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                 10.197783592427275`, "StandardDeviation" -> 
                 3.9971902721809993`, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 3886868189269964860]], 
               MachineLearning`MLProcessor["Standardize", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Mean" -> {0.2751}, 
                 "StandardDeviation" -> {0.4465646537736725}, "Output" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 7098352295252712621]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7255900053155452923, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7649166098026585256, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 5208716758835946799, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxUnbuxBUlznFeACZSowQBG9HN6xgREUKIJFBhBCQLgJ11ifjl3sg4AEsC/
tefOq7u6HplZ//q///1//Z//99//+ec//uWff/75n//3P/7z3/6b/o//8Yz+
PPt6rr2u9tzz2b0M915tzHGes/s9Wgz97vvRz+6+9MMWQztP03++rnXua96z
l2HN9oz7Hlxkz1OG+Zy51z77GWusMux5y/DMPde67/WUofWnnznuPsY+14xh
ztnHucfU39nrvv4M/TnP7OeMOXdbezwthnmP0bpueJ6uZx0x9NVvXag9XFu/
/Qz6D11/qF36F1bXI8Vw+tB/z7GutYbMMfCfdVm9vmuP6xllGM961tGT6H2u
NmMYp6929HLPuG7d9Gc46z7XvvQ5+nXWs0cZRhtPH5ObO/fKxU+79Fi69j30
kGM+ZZh8i643cnXe0Ge47nWdsfs1rsHfyy9080sPfz1T77eNeiXXfC5d+ujr
nnbPe5fhOre+xb31+fa960/1qa+h/8Gbb1pZn0FLQP+yLrv603j5Mczn1p0N
fdVztELzp9ajf6b/0htY49n1gOvSAtQaarz666rFoH9t6KM/rNR1XfUFV+MD
aVE9eu160KwSLdCxltaI1u559L9i0DLv+oDXufSv9ydProe+jlZH0+fSP3/y
abWVmp5hTV1u7/9i0N9/Hi3H2ZYWRl1Di1Sr9zn6jpc+dG536Pm6nn5eXpP1
gHoR7e76Jlq2WzeYtzu0NFjBcy4tsefOn+r6R4/e7KO/tNfPate7uPTv6p9d
k7dYv9DtNhaiN4geJIa2pl7FuW/dNm/oM7SHlXbYObe25s6TN33aubccge54
/uwobeetnaCVqG2jr/i93SbHI3egzYPXmnfrMdxanc9ej/7UXlqlMTQtBd2s
dsejL55rNF7G4BPe7daCvO4fQ9OVscxraMXGcOQVhtbztffu++Qa2ufXkbPU
SpSjOa0Mcjhaz1pqciVX+zXog7AWHv1Q7m+WoeNA5QDa1Mp+vpfIK3purRUe
Uvs/C05O1JtZ61wLVK62fqEVN9n719TTtZ7n0JvQQpEz0Tdbcih5cj3GbhwD
cr5yOPV29Tb0TrbWkN7h1ov/DPto18iV2c/Kma8yaPHKIeDNzioPpzUytfvl
AJfWnt5/riGXr39NO0l+RG8sDlkG/bGFg9Wq06tfZdBqX037RH5DDievRP9A
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
uEazIAokaKt1H6/AZvhOZSpRPvXHpEDEAwoD7/zFMXDxL6GRSg/50FtVR30L
A63h0j8U1yeM/fmWhuaMhykln4FpeLuPYaiPRh1KHr2ppeL6KssRBXTwz6Pi
BC+PJJ9Wgv7eI6CTk9dHCG/1e+kFU86+6LRs3Y+9zBJNnYj5QbzV+Zzx3rSK
ajBt/b0nEXPoKZvP1fUUkFA4HODwDPnq/GkwInUpoelc1nlKNWDEVJwG2fW9
DrxzcIbJe8tHySDpgaVVpm7hOlbc3DedqKE/U89bIN3BxCvU972/9/s5KAzW
Q0PuOn/eIw/Ee2Q2zr7+N1W+qCtY50qHOWqqqh1j0tXsvs5fgrzGgxQzo/Sr
D40E3ejnHtSi/t4YdEdUX1+t/OsPuipLyjgiIm/vI1g3PHo1bqJ1W+/FG3ZT
9FVimz3f03uJYwB8inlr6VDBHS6ZrUb78izeDQbcyf9i46MKx3dU/AyPJpYY
T/vYGulEFSIDM2/S3vEwgb73Lu6Z9Z7yb4uwshYu8fVfnDiOXFDRcffx9cLT
kjitHsv5J540fB0SE3VfUiIa0ZKrQZe8f3EbZEbGtBDr81v45/EPQgCvdemG
+YkNVByGyh+N4jmx6zNmf+CHHWeyhVqDdW/2MOMQf2fQp8x2lz6fY9C48bO1
7vo6RxIi2hL8LM7q9/I43hnhLEQ7vmdjqfgTFiasBEHVp4/zZLeE7/iDn0TM
oUNLL4W/4tbnqaVIplG73YXuz2sVWsOeYLvruRV/s4nngj9Hx7EUtG+NQfbu
F90Bnl4xZ1NEVt/P5g4YiyKUgVZdH242dH+wLdI8qvgJaSDp5uH1ew7BQVGx
hshkzUl95aI+fJ6QK89+L2KYAOOF3XyVrsjY04IWWywh5S8jfWZBTXJzi4DS
2vGMNy2RsT+p64AJSGoGGZEqQMXR9WxWT9TXux/LC5j1TDSlLJRnx0FEHEBN
uvVzCLFjLTcJOVv/BAzf8D5rBxZ53y/tJflrtHHX0jkRD9T8iGzB/fb1jEEu
pRGQ57V4fwdUGZ09y1zIuHvFRytjywK1lx6yp2ZQRKKJaxY/44HHpwB+pdD1
3BLrNNLlY3t4fuZ9Sfat0Ul6A4GnvjfmmJiIlHve7p8gKkGF0vbgil3r+RNG
C2nmnd9y+UAR4EfY5Ve+k//Z+jgP8gY5JUVM4fNdsYjjETmzdVdeQVomHVoK
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
NBwbPwJNke4FYNc4uVDvlqQMic3jH+JD0Xk=
                    "], "Values" -> None,
                     "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy9XXuUllW9HsAZcMRhbgzIcFUxpQRDOyqiwLgMDy5QUCMUEGcOlw65QlPE
RC42LsEaNPAyB0iwkWIok8IIDIfxEqLoIcE8giJS2ICGYOIBkbB/+H2z1vOu
Zz2/vd+P/trr/b797svvftv77VH5vRHjW+Tk5GzulJOz4J19Hx9c0aPR2oMX
HmsovLJ75rlq6nkD9h/omvg/th+bB1sc7/CyVX8fVl3sft/aybsubXjopPLG
hW1b5BR170TXZ2392V26jnq1i3t86//qZSUbRu8vaXyw+9V9h9aUZ37v2Wf4
zrO+2lmOY/PZvpuabp05dvxpjZPufO/oqpyOmX4l8x+6bV2LssT8DG5sHrY/
hkd7fvva92/a9kHnRP+l37hv6cEfdZL7ZO25O/7xXq9Nzfsa9Gb/nz19uIz2
t3lVP7YPw5PtR+2b4Z09Iz4ZXnJGl+ffuSsvmN5C8W98gPPgM9KXlz9xHtYP
14v4YOtT8PHKGZvf+CuU/rGfF2+2Py8/Mvhav2u3zD19d3kpnQ/5kfGxWj/K
Ly8eFJ2xcVC+IL2M/mOPpVfe0IHSkY2L4yTofHOn8staFUu8sfErP1428Gsb
Orjpj60L9/36zroFI87ukMAj6qfeC8eO3XhZR8pfTO/kXP6n2pt7tXXji9G5
ze+lC0ZHoXaA0jNs391mVAyc9XBpYl8MH2f+YsP7VTnt6f6UnmXtzPLOLac1
nJZ5H+HI+EDJUUYXSA9KnjH5zfaP/1uL4zC9a+tCeYTzmR3khbu9/+CYbdv/
d14Ht12k9JRXXzB5H7oOth7kA7NvGT6sH+oNxX/9Vj52zi2/Lk2sn/EN2y+z
U2x+xrcMjqxVegHnZ3YAkyu2b1sX46v6pfO7PbqkrPGfByo2Tiw5LbEOk0ds
PrVvhBfT54reRr+/eu++K8P9Kus3fNv3tlS/3NEtz/H9LoPe2HLrEA4HpU/T
ymM1PtuP8uuMDr12ohpP2U9Mvyo70guX667Z239497bBcFT+T1o8eeWBlz5/
/h/nj127qMSNV8avofBlchPlLPq7jL6Y/n1u+5Sqe0a1p/C0/an92LzI/2af
M7q08Q+MmHnsy2ncvjI7GPUHo+tQ+bNvT7dLz7ijuHF2ZXWb/7u/hOqpfze9
Wsv0hpePWPwo2+3wsiM/yHvFL7+9cFF+IOMXez6pZkxFU9/mdaG9ZPDB98o2
v/RF0VNtMnSRbbx65b3aH7bM3w+dh42L+zS+t+ftrT6cX9u1UM6LfjDTtxVH
doxu6FqUoAO1H+w/rceCtff+T1LeKXx64ebtV1byjeffmxXPh4Z/73w7Dm5r
ceSsMhl3sNb8UiZPvfF8lP+h/IL/47qwX6idbHoxNF6NcZlQeyZUTjB968Wn
as0/QfmKcLVnlAO2HuvH9BWLOzL7hMEh1i63feH6lNxQ+SElnxl+bBzUyxfd
VrN8zIB8t/xn9Gf4sP+PTlrzypN7ihLzP/Le0LwzXzrZjQect/bpvr26fdFO
xk28/I75OS//sPX3275q1LNbiyWfrLhv6NmVp7eh+/Tin8UBcH0s3+Sl/z/V
vlp//e3cLlHrVHBV8v3iununfbqp0E2PsXTBxmP+Tlp/K7Zl69w5t8XkS/fl
N+5/pGRmZW5z3Bnt5SVPHXni6zeX0PHQzvK2TJ8zu9roV/lVDO4ZvVH70vkP
VCb9ARV39sLXxjG7zvgL7TyVx/PqJbZvg1us3MoWPWM/Zu9iv8HXNky4fnep
5Hf2POuM69eObJ8r12V6l+lf6zfy0u+3zXvk6HomN0Lh8/am628u+0P7xDgo
r+2ZrQ/jVwrfaeVs6Di2L+ZfXP7ctc/078LpQcVTkT5tHnvGPJnKP6jWG69T
cUXmH6j8ANs39p81fXn7ijWFCTs4Lf9aa3UY+UsOHxz5Ynh83gvnUD2H8t1+
N/7B9Sm7G/srv+xvNzXNWtSvmOId32f9zE9lctDrD3vxYv9/5dzDfyx5q1Ww
vsOW5d+RjmPXmZa+sGX04eVLhI83HqjsYQUftNd2PfPCkTO3ntw48u5x+3qO
K0jN56xfbB2itx/ji9ypt193+8jiYPlt9hPWxViL9WfWn/E7m5/VSyi5n7bF
9TO4sHiVknfKPzJ8WVwPx7X9svgbw7s9W95LrZ/pXeaHYx4L4afkLI731pDf
FB+8pETyLY6r6ohi/ZO0+aJ1FX89a8+xwuj3VVxZ6QHGry+csaiq/Zz8hP/J
4KT8VK/8Rfva8jShcQr83Zs3QDpWeQz8Hfkvbd6b2fssjsTw6a3Dxf9tfi8c
2H53NGwe/nSXXAlXex/5V9VNeteB/7P6HwUfr15U+Qt8xro473y0rvp4/Zva
D87H5Ea28+MMDqHnGMpL/zqj7qHmfCHSBcbFQ/HI6DA0jhsKH8SDqpNn+h31
P7OPjA689g7b348O7N618Y5knUq26CYUfvg71p0x+d/rvC8Xf9QvPH/M6NRa
JncYvJVdZnJfxUUQ/31mr1l9w/42if8TdRHEzlD+WLb8SWXnKLmB+UtcF8bJ
mL18ovIOLG6e6Afny3Df9ntovoXpV+/5KmtVPa3VfYXaVYyfsxUfSFt/6f09
VI8/0PTWFVsbWmaeb5n8/FMzLuB1mCYnTO975yn8/oz9c6qT8XyWJ7FnVf8V
aneqfTF/BPnV+nn9N3Y+LiN/yi+4YO/VJ8v9of9i45vfjvWVOJ/Kx+P5EaxL
YXDGdTJ6P9z7w1HTPzlZwq3vmu7VE4eVROeZ1fkpJtfUPCwPz/SDwdPkluHv
tc69+795jq7/y7YeYPhS+1XjIJ1n4jJT2nfM7di8z1+vyNv20aECmgdVemni
Das7bxpSJOGj4nN96reOqJ3dksLB8MTyeuhPsbxEqDwK9TOZnArVH6F1OqF6
i/0fynfsPW+9HaNnRo9e+GO/PjWvTeicWxBc56vwpurnUX+a/LG8/X07bh38
3V+2k3ys1uWNfzD/BONMOJ/33JTSS9714blts5eNXlheHs9hsTiHyvtOXjx4
4HkTijPjoX3F/G4vfX7zkXfrqo+elKAL4xsbx+ramDxh/G79ntwy7Zrc+qR8
Rvx44ySbys7fddeGU4PlkbXI1948eqi+RTgpeYTrwvOV3nlXTftg2YZxp1C5
hfRo84T6a4wvmZy0/CXyOauXVfoH426h9BBaj411B0p/MLph9iLKE5uH2S3e
fGOPvOXt6n/8eaLOiZ3TYetNe67O+5465x96vjDWX1ByRPVXekLlF1TdN86P
8jx2n2njpqHxbi9+vfmJ0HpS73ho/6v+oftmdJI2vuPVU97+tz+3/LRT72m2
Fy3/GOpHlKzJvWTVXK7HbTwVh842/Sq4MjpEOanwYvpnzOWzn/3d2HaJ8ZS8
iMV/rH+G+kKdP1BxFCbn0P70nn9h8WnlXyr5o+gJ6aFb5fZen/8kvr6C2WsY
Z8T9mH/A/D6Eq9o/4hfrvJl9au8xu1DB2+KW7Bwog3uGXo77S6FxD8W3Nh/z
Fywuzep8vHxq/XofmjfpjUdbUruL4Tltfb/xL/Kxei/UDvfaNwxPbF1p6wW8
/pB3PqMbvG+Q0ac3v6nggHToxY+6J8H8khOdX0f4mNxjfg+LIyAcvfcT2LyY
Bw6txwjNOzK+DZUfSl/GxjO8/WPpw+rtmd2OfMTgo/Jx7Pf19VWTlgwtc+uH
hfc9Nvdv875I+Ncsj+2FO+obPF+ErdnJjG6N7ll8JjbPkC26Nb5iclLNq+7b
9Y4Ta0+rOBDev5WtevGOV73yj3G7w++V9MoLswOYveWdx/CL9/cUVp51+kUf
cnvZa8eE2vkqvliz4LrpP8tJ1ifguEZ3Sr8a/Fj+HFuM99t9z156U/etKj8J
48i2b/P/Gby98RYVp/H6/ajPvXaOl67MHkK5xOaPlffWsnpqhl8vPBFPKo6K
Lfp/OK6tx3tfWGgckp3nmP3yx02lj+5Zz95T/Iv6ga0T9am3Xthbj3RwyqAz
l8xJysHQeHdauZ/2fcQPntf18h8+q3NbjP5Z3QZ73/CM8lfdp63ozVvXaa3d
u+Gtq8zQMdyzYy2rm8NzHbb/AfevXXH314oTcSW2XhW3D/WbmFxdWTN4yMi6
4vh7X4i9rujYq7/sd6vvxbo7pZeVvFT6Fe0ab530lHFPTty4sHXiPTwvxtb9
03H1bWtfTt7zbfk8r7zB/aNfY/3UOW+lVxkc0Y9g8Tz73eBtdgLGZ710j3hi
9efqvjOvfGT3FHjj6nYuEvcVmlf3+l1ePcrulfHqsbR6Ef1s+33uB69tzO95
bL2aJ3TdeF4E6c3wPGDeY+1Wbk/WE7OWxUFxfK+9rewrdp7T3rN7ExDP9nxs
XOklF95dSu+p9+pt5G+8x7+21ZbffnVqIa2nZnIY5RCeM2XrRDmA8SmmTy4v
X7a84IXChL9p/dh3V2LpP1TOsPlsPzs//+S2+uoi+d0Uxb+h8pLRs5Lb6n6B
2Nb2g+dwFN8i/NPG9/A9BQ/EOz4bXSs9ruo+2HcaQulYxVMYP7Pz4ljPn63z
UbF6yxufVfnvWH/Umwdh4xhfqfMWKi7F5rfzJWzd7P3Q71Ko823Kn2JwUvlE
NY619v0NpTdVa/FKfP+UX1xzxtXLW3C6F3kOFq/xxr+861f4vGL8eS2f7JWM
j3rlpIIr68fsJPSXMX5qeQIbf0DN3qo1ucl4k6qzV3kA9qz0FvqJaId5zx3h
M4Onyr9sKDo0/+MPdV2WzYN5c/zfG6c2vWj2LKP7JT1mfavngjZyn1694I23
e/EZqo+Unnj/rkPjOt2YpFd2P5Gaj/lp5k9578lR+1T2oOEb5dm7JTv79fn/
T9cjP4beB4nrY3lS44cH1y381bPrmuM4ti6kD1XXp/qFwlHpR7RzVXwOf2fr
ZvpBnbvyfv8Mfz86/83PPzm1UN5vhPc0Ysv0UWgdR2zdKduf2VmxfibSo53L
QvnK7gNh59RZ3ePR35TctWdpPtUXXvsP61oU3FA+sTiB/Y5xArsHWtEh4y+l
T8qf6V315fPJe97ZuCyvqeoADe7sfVwvy3PYePi9JW8cPa1fz+xyb/0AG4/V
yXrxHXo+MnR9sfrR3kO+VnHgWD8Ux0N8oN5kesTGt+89eeFl7zF8euNPbHzv
95gVPr33uIXygz3vrX7wW+98VkTtFq9/7J3X4O39rgvDS1PBihl1nzbbTebP
sPyRvbf4iQmv7qjLS9B52jwE40O8/zP2fnEvv3v9AK9eZPFd+9/u2QqNn8TC
u2zNwTtf39Hs93025J2591/RHBdAPw7taHYuQ8kZvH/L/rd4v5cP1XdjcB1K
zig5lfg+hciXevnd/sfvz8TiF/sb3rz1715/OvY71Qy+ti5vfjz0vjmkV3w/
2/yOcFJ11UqOZ+xK5/1nig7VOWqmz2PpA89bMnh6x7c4l9LvOI+qC2Jy5ren
LH38wlXh9crsPk1r0d/DdeB3qNn43jia97stjE+99KbuufHKL1a/yvjD3lf1
RN68G8JHxWuZ/lFxQ4xnxup1r7+v1ovvs/ua1TptXqvLW1g9tcWwz4oT8FTw
Z/URbP3MX8J74bx0aHxo9guj52zd73m4dvoDdw9qTeUU039o7yi6Z/C3fdrv
7B47xncq/oP7UfcKWntkdZ+Hao/lu+0qpHubR9X1KL3O6JzVtbBnq2eZPGrV
+te3JfOOsfZs2vhIaBwG9diJahkc2bntUPigXxRaz+Bdv1dfq+/VW/7O/Ccm
59l6Qu8BUvQfGpeJpU9r0Y41/Vfwwwl5t03MT6wPnzGu7v1uCv5ufktoXaH3
exDeugGLI+A6Wb7HxrF9K/2J92Cy8bz88PaVVa9d9cKfByi+VPSyad6Mw290
2TrAy1eKv716Qa3L8Pvc9ilV94xqH13vhXpU1S/guEofvPTWxUfmzf5ifWj8
VtEtsy9C72kIxYuSc7F05q3nRvyH7gPhl4nXHtdzsXnRk2rGVDT1LU3IA6xH
YOsxfsF4ktE327eyq2LzVPgei6N56croUslx9t0ML12w+e37HIrulN+p4iw4
ntn7+L0HbO08JdIlu4/V61dbfTjbn+LHiiM7Rjd01fd1evmcxTHYuKF6xPu9
YsuPx8phb3zRy6e4DsknUBep6FK1Kp+O+LK4ayZ/RM4ZIjxj/QfLn7J1es+/
q3qf0DpN7/w4X6h/yPg27f1GoedjrB5Y8WHCThbfg2Dzq3tdmb7G/sbviGf8
LkLacxCxeFDjsLyCfQ/UOz87/5L2XkVGt168Z6sNtYe8+kr1/8modYcu2thE
7Xw1jvceKqW/vfE3b95W2UEojzEP7Y1fKDsV16HOAWXuS3bSn9kN6rxobFyn
d+tdv+/WJk+uIzQPifUEiN/QuCujE9u3svdi7RCvv2/6B+mF3YOJ47N75Lz3
tnjtGFsf1vN5/Q02vsUjQ+MdaE8bnXn3g/OoeBaek130+Lx3p17Dv+/E6FHd
f234M/8y9PvHyEcsD6DuL0U7ks2P9Qp5kx8f+UCbfLlOrOdl50G8eSG2PgVv
rzxRdKzsbMvfxMalsE1b14Z5b6srZva4t74yE5+Y9vZ/vtHYKjgvEMpPCb10
PD6t6h2UXGH629Zp+RTveW/cB+p9pC/rh+c2cT7vd4zMfsB5jA+zlWfB1vv9
qFC+Zngzvafm9dqxbB5Fx6H17mwcxK/3XrTQ+2OwNTjad3oYXr3jsXiQ97sA
sXKS6T/Do9n3jI9MnnjtRLWe0H2EwlnpcRUnVOOi3cDsE5vH6GjQf68dNKeu
2V5C+azgwvQPoyMmZxT/2jyGdyafFV4RviOn97lz94gCGfcJvd9R+bWh5wrU
d4HTtl58s/PSTA6G8hnCg9HF5FkfNRRPau2eJ63csvXYPTyhclXFUQ4vW/X3
YdXF0eex2P8qXo7jhMo1L3wx7onzeOteWL7G+h9YMvMPDXUFwfSu6A39fmXn
e+MesfoztB43c5934D1aWG+J62X3/TO4Mr8xNI6Tbfmm8GXxe6tnxv4s3mtx
8xMlt2PlgldOq7ibdx2qvtDiFcsePja44i/x8Ir1l5BPVHxD0Q17j91nwOSR
un8L1+2VO948lPf7p7huVd9k9/MOq8+9N2dlsh4t9j5t9jvWK3nrVdBfY/AI
tUOt7XFL/ztWfkXH5dj5ulB5af1t/1gnzt67t/a/Bm9b1M59rp+do1L0if9j
HIT5EzjeuTMq23Wobh1cTxtK5973QuMadn4A96vq99PKf6ufVvoa9byiC6+f
4N1PrF+Pfrc3XpuRx8fzfJivYvMiHNV3gL11PmhHx8oBpcdC24y/fLxu6LoX
X1y69SP9vUXv99Cx9cpD1LssTxYrD2L7o95IW89v/5u8xnrI2DiX1+5j8rF/
9+8s7l/W7DervIyXrlnc1ejCe/8j8ytD7RCvH8zi32ycUD8+lM8YX4XGATNy
DOohQunOe6+t8ufY/yZni25pu+GZq9sl7j1i91CHygv8DkXa81rWqjrKUH3C
9JP9Hlq3FbovFn9h8gT3Zf/jeWNlT+Dv3QcOHX/xz1sn+nm/a2TP3z6ldNPs
3zePo/xf9p0Ar75i53u9eDp755ybdh5tk5gP8RH6nUq2Hu+9Wt7x2Lkpr37D
37Ge3av3Yume+Uvob7L+LP5k9f5sPbH50NC8iGpN/qrv73rp+0S/z/xZ5k8z
OcroT8nt4cM/2Pr8Yv89eCqexeocUR/gveNMPsfG4bz4CT2/by1+zwH3j/Ge
THwN/L5s05sah51rVXUxCv9euaXqYEP3id91Y/KN6W/Ud2wfXntL2YvZyk94
4ZPRv1/efNf4njmJ971xWTxvGEt/yg9ndrO3Dsorp0o2dyq/rJW+xwf5dOIN
qztvGlLUWNB6Q4eGGw8l6uetPbf4zZtyS5Ny1Qu/2Pt5cPwfHzp/wsPncPme
Vn956djuTTO9xc692X0msX6Ctaj/035XKbRl8WKVLwk9H4X3vLN9MP79VU3p
7h/mJe+TZfyP/3vlufVjeZqBN/5g4KLvtJT7tfwe+lHeunDbP37POBT/3vgH
+pHs/gXFj0pPxvJx6P15mE9Myz82ntLDCv6h8TK1XpUvTeuvYNzdG5djdKTm
UfeJee8nYHhg8Gd2oldueOU0i3OqeKjxJ36fIVT/xNqxrL4P6fVfGlDuXA==

                    "], "Version" -> {11.3, 0}, "ID" -> 6413031506679139115, 
                    "Output" -> 
                    Association[
                    "f1" -> 
                    Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3519824094447848605, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    1107852814282405113, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Spans" -> {
               Span[1, 6863], 
               Span[6864, 6864], 
               Span[6865, 6865]}, 
             "Wrappers" -> {SparseArray, Identity, Identity}, "Output" -> 
             Association["(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQEAABdBvDDpRm+F2MMIlV5vNACoTiEWMIFEYQt5r3ljXpXVJziE5
rn2b+6nYtm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3b
tm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3b9l/O6/5+
ABCcesY=
                  "], "Type" -> "NumericalVector"]], 
             "Version" -> {11.3, 0}, "ID" -> 599417332904572119]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2194942009040854653]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             2391994714275353545, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4783494484448582239]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Not Question" -> 0.5, "Question" -> 0.5]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1: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
TdoguHxQg4Z+F6HENgNfW8yGv+MvkXrRfeGO+zuoe34TuxR6g9+7WvQyVKVH
xfdo0MISds1vG816P40iHzRA12Vq4ragB8h72evgC7DgQV8w+0bkqaxOo4f+
waeFDhRg3Ex2GoLAeY9ahg6ZeV8SylEd/yok0DfXzrSzLE+I0CiR/mnPgXt7
EsH45Unc/mYNJKilo9stFVF1/ka86WsL6tt30sSC6SJ/PrXaqTjHcyHL1diI
/SzGsZNlX0T30XIwy1LTY6VvERgHda3s1vsyPPbpLax5OVFYENhbxqOWxkpk
tX/+60noce8AronXxoEfFosnUrvjmxZd+tZ+DHZuD6EZjj60KXsq6fuoiTp6
86m+Zwqt/fsEkk9J8cXLq6ipdsGjYsZOYdNKd/YGg9B34B0aeaEZqp7p4NsY
BVj5SyT+b8fq3WX18+kIS5CO2S24xmm4X647JfbvepYm/VdIB/rdhZbFSL9j
kyFh2C1hX9MxrG3sIa59EC/4diyCoZ/byHFLEQa2BQuLN3+DH03t8Lraihb+
twXUf5Sj6bpgnN69CqfW/+Povt3pv5Qy9E3cB0Z3PSl+9ljhy0Q3WDTGQeRc
cvz3gWxF9Sk6tbMrU4xXZtOP9iK19nxxq9O/nm/0Upqt8s0jYs4ulHyZI6S2
daOd8/aB85AE4e+8zqJFdIbE83yhdL7fBCj9EwB8b93Qyq7g+0v+UQNsHhiN
wVm5NE2rUlZrP82pp6xfD5D3uauTBkFRYxMtmpJG/Mz4+JynHRmdIHdLNh6Z
0YQ+l4aR7/r/8OdRa8xaGkOipRPWm7SD8Qw/KilNxo5ZurRgszVb6RBHGl86
scdFN+n+9j7ijEXHQKq9h+I94kTOb24MnkSf7iqLL/1Pol+EDnWyWAIeSz2w
W2139tAyTobngo+vg/v+pbj57F3aXbpYyLEsptQ0VUZGBdTr605a4WpED39e
p8K13eG3k60Q2MrE3ferIHuuFbPIb6XEirFU1x7IPj3SBtn1160kuxPTWbp1
sKRT0j+ebvxXyD8x6B/H+ovQ4oSfBv+mFQtchClemmDfyxeU0vag2GxNP4or
qHvCdcxYvV+IUpgLBRpWdOv5JAoeZQGu9ALnyJ2AIcyAXtgrifm/AsUXb2Mp
akQsDrC4IdSYH6M7V7NotcIu5r30OT6wKmDHCiuA4+PVF2uFo6+r0ebDA2n9
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

            "], "Biases" -> RawArray["Real32",{0.7264440655708313}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6865,
            "$InputDimensions" -> {6865}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{6865}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQAAQAMA3Bp3aECbQSAxAolbaxQ4iVpFoLKHXkCgMIXfN5d1Q90lE
bFlE89rLqVqXY0xt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt
27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt
+zfP7VVM9/n9AK9fpNQ=
            "], "Type" -> "NumericalVector"], "Key" -> 
         "(f1f2f3)", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.4220108316045738, 0.13865813271798896`], "Accuracy" -> 
         PlusMinus[0.06846205166342316, 0.11188514060581631`], 
         "EvaluationTime" -> 0.000046425000000000004`, "TestSize" -> 1200, 
         "TrainingSize" -> 15, "TrainingTime" -> 0.08977833333333332, 
         "TrainingMemory" -> 7.358885333333333*^6, "ModelMemory" -> 209072., 
         "ExperimentCount" -> 2, "ModelUtility" -> 0.9602525078289749, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.316772855741874, 0.014515596551694517`], 
           PlusMinus[0.5931465653521251, 0.018510536074443407`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.05239774374425653, 0.0032521079764738056`], 
           PlusMinus[0.2760802691075741, 0.011691404205058126`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.01, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 10000], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 126718857731932]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.9596857188086274`, 0.05643073182033348], "Accuracy" -> 
              PlusMinus[0.005857113363194886, 0.004718399781527288], 
              "EvaluationTime" -> 0.00010085000000000001`, "TestSize" -> 300, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.11439, 
              "TrainingMemory" -> 7358816, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.21911337621848087`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.9596857188086274`, 0.03990255313747729]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.005857113363194886, 0.0033364124818670697`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5877108196253501, 0.01896983121114877], "Accuracy" -> 
              PlusMinus[0.6417173339554264, 0.023397649764615603`], 
              "EvaluationTime" -> 0.00005370833333333333, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.237048, 
              "TrainingMemory" -> 13412248, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7301146676862308, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5877108196253501, 0.013413696287367513`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6417173339554264, 0.01654463681238752]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005370833333333333, "MeanCrossEntropy" -> 
             PlusMinus[0.5877108196253501, 0.01896983121114877], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 13412248, 
             "TrainingTime" -> 23.819190000000003`], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6352898055412624, 0.01890570837476181], "Accuracy" -> 
              PlusMinus[0.6029557828206106, 0.010848280712780944`], 
              "EvaluationTime" -> 0.000026189444444444446`, "TestSize" -> 
              1200, "TrainingSize" -> 15, "TrainingTime" -> 
              0.015697999999999997`, "TrainingMemory" -> 
              1.7097893333333333`*^6, "ModelMemory" -> 172672., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.6757778522591262, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.638288795122089, 0.026666467669362065`], 
                PlusMinus[0.6324031279110334, 0.026162374393728344`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6031413780244972, 0.015472174546504168`], 
                PlusMinus[0.602776414553792, 0.015210405334093586`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9579883891972325, 0.06688469276253942], "Accuracy" -> 
              PlusMinus[0.48743346314983793`, 0.02859631054369319], 
              "EvaluationTime" -> 0.000025866, "TestSize" -> 500, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.076874, 
              "TrainingMemory" -> 7767864, "ModelMemory" -> 172800, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.44460098284587135`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9579883891972325, 0.04729461980997041]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.48743346314983793`, 0.020220645102361823`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8446278466729408, 0.05678820787671979], "Accuracy" -> 
              PlusMinus[0.6021900384598233, 0.02805620701446776], 
              "EvaluationTime" -> 0.000023725, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.572374, 
              "TrainingMemory" -> 33115264, "ModelMemory" -> 173440, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5045294831746797, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8446278466729408, 0.04015532688105987]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6021900384598233, 0.019838734234303733`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7718717260927691, 0.07191046572937224], "Accuracy" -> 
              PlusMinus[0.6728919006982588, 0.026930293970623544`], 
              "EvaluationTime" -> 0.000014593333333333335`, "TestSize" -> 600,
               "TrainingSize" -> 1500, "TrainingTime" -> 5.435832, 
              "TrainingMemory" -> 165615200, "ModelMemory" -> 175488, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5492751875230865, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7718717260927691, 0.05084837795552194]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6728919006982588, 0.0190425934859751]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014593333333333335`, "MeanCrossEntropy" -> 
             PlusMinus[0.7718717260927691, 0.07191046572937224], 
             "ModelMemory" -> 175488, "TrainingMemory" -> 165615200, 
             "TrainingTime" -> 36.254578], "Index" -> 2], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.4390175452533502`, 0.5331366778443056], "Accuracy" -> 
              PlusMinus[0.4210503350222283, 0.09089947821227143], 
              "EvaluationTime" -> 0.0012812433333333332`, "TestSize" -> 200, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.38091166666666665`, 
              "TrainingMemory" -> 7.232706666666666*^6, "ModelMemory" -> 
              3.483429333333333*^6, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.13873288486306812`, "MeanCrossEntropyHistory" -> {
                PlusMinus[2.092831343531957, 0.19665017188263584`], 
                PlusMinus[3.110128289601555, 0.27380195790651957`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099009900990102, 0.04999512254661126], 
                PlusMinus[0.34158415841584144`, 0.047281198781485595`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1498267867665173`, 0.24877612148827774`], 
              "Accuracy" -> 
              PlusMinus[0.5792079207920797, 0.06993081195248246], 
              "EvaluationTime" -> 0.00138364, "TestSize" -> 100, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.735733, 
              "TrainingMemory" -> 22073360, "ModelMemory" -> 3649848, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2902407341613454, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1498267867665173`, 0.17591128250164956`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792079207920797, 0.049448551345481616`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6217726638521013, 0.09178244152011397], "Accuracy" -> 
              PlusMinus[0.6782178217821788, 0.06637035020526592], 
              "EvaluationTime" -> 0.00150575, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 2.316722, 
              "TrainingMemory" -> 69743600, "ModelMemory" -> 4038872, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.532562283438287, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6217726638521013, 0.06489998679273032]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6782178217821788, 0.046930924699869495`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00150575, "MeanCrossEntropy" -> 
             PlusMinus[0.6217726638521013, 0.09178244152011397], 
             "ModelMemory" -> 4038872, "TrainingMemory" -> 69743600, 
             "TrainingTime" -> 77.60497833333334], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0069142469746208`, 0.013768817341738276`], 
              "Accuracy" -> 
              PlusMinus[0.0049504950495049506`, 0.00700105723947077], 
              "EvaluationTime" -> 0.00185609, "TestSize" -> 100, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.027973, 
              "TrainingMemory" -> 5896472, "ModelMemory" -> 252232, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3966544788986678, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0069142469746208`, 0.009736024111262067]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.0049504950495049506`, 0.004950495049504952]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4076820816121767`, 0.016332640177235482`], 
              "Accuracy" -> 
              PlusMinus[0.0049504950495049506`, 0.0035005286197353847`], 
              "EvaluationTime" -> 0.0017351833333333335`, "TestSize" -> 200, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.016826333333333332`, 
              "TrainingMemory" -> 1.3623653333333333`*^6, "ModelMemory" -> 
              252216., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.2861719417170446, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3958748109488344`, 0.014991351274527926`], 
                PlusMinus[1.420390474112574, 0.015552898256432414`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.0049504950495049506`, 0.004950495049504952], 
                PlusMinus[0.0049504950495049506`, 0.004950495049504952]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471805599441, 0.007931464032162798], "Accuracy" -> 
              PlusMinus[0.0049504950495049506`, 0.00700105723947077], 
              "EvaluationTime" -> 0.0011259500000000001`, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.085981, 
              "TrainingMemory" -> 24859216, "ModelMemory" -> 252600, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6124645869496514, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471805599441, 0.005608392001879511]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.0049504950495049506`, 0.004950495049504952]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6871421645915398, 0.006862604189418797], "Accuracy" -> 
              PlusMinus[0.5451861224322693, 0.03510039641231978], 
              "EvaluationTime" -> 0.0010684450000000001`, "TestSize" -> 200, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.566304, 
              "TrainingMemory" -> 123834272, "ModelMemory" -> 260072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6219308378523204, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6871421645915398, 0.006862604189418797]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5451861224322693, 0.03510039641231978]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6173790842214556, 0.00788860160395793], "Accuracy" -> 
              PlusMinus[0.6906536131778911, 0.018086814292663674`], 
              "EvaluationTime" -> 0.00122361, "TestSize" -> 600, 
              "TrainingSize" -> 8000, "TrainingTime" -> 4.473715, 
              "TrainingMemory" -> 659787776, "ModelMemory" -> 315672, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6805455773437473, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6173790842214556, 0.00788860160395793]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6906536131778911, 0.018086814292663674`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00122361, "MeanCrossEntropy" -> 
             PlusMinus[0.6173790842214556, 0.00788860160395793], 
             "ModelMemory" -> 315672, "TrainingMemory" -> 659787776, 
             "TrainingTime" -> 5.620116750000001], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.704849798106209, 0.02864853475177631], "Accuracy" -> 
              PlusMinus[0.5880192299062454, 0.04003822909492901], 
              "EvaluationTime" -> 0.00010302666666666667`, "TestSize" -> 300, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.024423, 
              "TrainingMemory" -> 11563280, "ModelMemory" -> 4018080, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5046684926319107, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.704849798106209, 0.020257573194039494`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5880192299062454, 0.028311303299724824`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.42215449314343106`, 0.029290475985208505`], 
              "Accuracy" -> 
              PlusMinus[0.15220647944664933`, 0.023588257341967192`], 
              "EvaluationTime" -> 0.00006806688888888888, "TestSize" -> 1100, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.008504333333333332, 
              "TrainingMemory" -> 2.607989333333333*^6, "ModelMemory" -> 
              996960., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.9556114327602836, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3983057990755512, 0.0036974220990891047`], 
                PlusMinus[0.4566102747526156, 0.0044442428708889705`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.16931793748715623`, 0.0020282519080451608`], 
                PlusMinus[0.1222525478354248, 0.002683522875941606]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5856140585772721, 0.027888538732565207`], 
              "Accuracy" -> 
              PlusMinus[0.6560465509054935, 0.04747764377963665], 
              "EvaluationTime" -> 0.000140595, "TestSize" -> 200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.104681, 
              "TrainingMemory" -> 50909944, "ModelMemory" -> 16651896, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5149443305859227, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5856140585772721, 0.01972017485518054]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6560465509054935, 0.03357176387134038]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6441307410441415, 0.019683483873957224`], 
              "Accuracy" -> 
              PlusMinus[0.6210063425247143, 0.030441067741540533`], 
              "EvaluationTime" -> 0.0007716460000000001, "TestSize" -> 500, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.807302, 
              "TrainingMemory" -> 247291952, "ModelMemory" -> 82566912, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3820348757720943, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6441307410441415, 0.013918324924651207`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6210063425247143, 0.02152508542660237]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0007716460000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.6441307410441415, 0.019683483873957224`], 
             "ModelMemory" -> 82566912, "TrainingMemory" -> 247291952, 
             "TrainingTime" -> 5.406436333333332], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0059076566802898`, 0.1042249911603905], "Accuracy" -> 
              PlusMinus[0.6220644356559059, 0.025721726051975563`], 
              "EvaluationTime" -> 0.00004527833333333333, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.176691, 
              "TrainingMemory" -> 13403160, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4206137882799198, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0059076566802898`, 0.07369819801862008]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6220644356559059, 0.018188006915174602`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6273730070523942, 0.27308524396655126`], "Accuracy" -> 
              PlusMinus[0.09535949982420527, 0.09406057347192223], 
              "EvaluationTime" -> 0.00005341388888888889, "TestSize" -> 1200, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.11740866666666668`, 
              "TrainingMemory" -> 7.358805333333333*^6, "ModelMemory" -> 
              209072., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.6332443070011428, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4252402359017309, 0.036650715166619385`], 
                PlusMinus[0.9683138749695318, 0.04759963468585172]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.07743360198643634, 0.0041525141932356015`], 
                PlusMinus[0.2653888377636783, 0.012788882549928627`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.0872456224107947`, 0.37123810163749704`], 
              "Accuracy" -> 
              PlusMinus[0.6611180881358305, 0.027209037716115846`], 
              "EvaluationTime" -> 0.000046103333333333336`, "TestSize" -> 600,
               "TrainingSize" -> 300, "TrainingTime" -> 0.339887, 
              "TrainingMemory" -> 49631160, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1366020074358312, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.0872456224107947`, 0.2625049791026949]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6611180881358305, 0.019239695078626044`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000046103333333333336`, "MeanCrossEntropy" -> 
             PlusMinus[3.0872456224107947`, 0.37123810163749704`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 49631160, 
             "TrainingTime" -> 11.506257666666668`], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.693740679788452, 0.0036329214601581025`], 
              "Accuracy" -> 
              PlusMinus[0.11178810188710821`, 0.08308279717423767], 
              "EvaluationTime" -> 0.00008348, "TestSize" -> 800, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.030341999999999997`, 
              "TrainingMemory" -> 4.204296*^6, "ModelMemory" -> 209072., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.6218670478052845, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6922476123552012, 0.0022877863988662525`], 
                PlusMinus[0.6983300289239817, 0.004010987526072992]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875], 
                PlusMinus[0.0049504950495049506`, 0.0035005286197353847`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6903646122624848, 0.0032464222976965416`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.000047413333333333336`, "TestSize" -> 600,
               "TrainingSize" -> 70, "TrainingTime" -> 0.053547, 
              "TrainingMemory" -> 11731096, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.624974873784412, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6903646122624848, 0.002295567221296437]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6804688158192961, 0.003786350604649722], "Accuracy" -> 
              PlusMinus[0.7576598681761051, 0.02088800856078498], 
              "EvaluationTime" -> 0.00004564500000000001, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.132262, 
              "TrainingMemory" -> 49631224, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6339544720380822, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6804688158192961, 0.002677354188497603]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7576598681761051, 0.014770052498813715`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6497747483879469, 0.007583603396836884], "Accuracy" -> 
              PlusMinus[0.7619291004557469, 0.020738515548679785`], 
              "EvaluationTime" -> 0.00003753333333333334, "TestSize" -> 600, 
              "TrainingSize" -> 1500, "TrainingTime" -> 1.082644, 
              "TrainingMemory" -> 247381096, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6630922523404422, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6497747483879469, 0.005362417387732697]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7619291004557469, 0.014664344976214128`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003753333333333334, "MeanCrossEntropy" -> 
             PlusMinus[0.6497747483879469, 0.007583603396836884], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 247381096, 
             "TrainingTime" -> 7.247968666666666], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931470016891489, 0.0016190028349966734`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.001843714293820352], 
              "EvaluationTime" -> 0.00005223111111111112, "TestSize" -> 1200, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.024971999999999998`, 
              "TrainingMemory" -> 3.5441946666666665`*^6, "ModelMemory" -> 
              209072., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.62276064024822, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931463205767388, 0.002289612196120421], 
                PlusMinus[0.6931476828055667, 0.002289618932204452]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875], 
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931444889600662, 0.0032379878348064556`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.00004980166666666667, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.036961, 
              "TrainingMemory" -> 11731016, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6224722510421097, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931444889600662, 0.002289603155391191]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931315318370674, 0.0032378981526883844`], 
              "Accuracy" -> 
              PlusMinus[0.7576598681761051, 0.02088800856078498], 
              "EvaluationTime" -> 0.00009045166666666667, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.15304, 
              "TrainingMemory" -> 49630960, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6224838672164038, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931315318370674, 0.0022895397405573517`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7576598681761051, 0.014770052498813715`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009045166666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.6931315318370674, 0.0032378981526883844`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 49630960, 
             "TrainingTime" -> 5.126305333333335], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6550285279864587, 0.19721001823998688`], "Accuracy" -> 
              PlusMinus[0.13498950675301177`, 0.08308851159183454], 
              "EvaluationTime" -> 0.00018173666666666664`, "TestSize" -> 700, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.09911966666666668, 
              "TrainingMemory" -> 6.557805333333333*^6, "ModelMemory" -> 
              209072., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.6218640607557415, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6193792122363622, 0.0036542857931599905`], 
                PlusMinus[1.0137376514777725`, 0.011591726393114992`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875], 
                PlusMinus[0.0049504950495049506`, 0.004950495049504952]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6433495624853809, 0.008391426399647151], "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.00004669833333333334, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.112933, 
              "TrainingMemory" -> 13403256, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6695312841020752, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6433495624853809, 0.005933634511018316]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6248481088279504, 0.016055255188827677`], 
              "Accuracy" -> 
              PlusMinus[0.7588645020892837, 0.020896587953560204`], 
              "EvaluationTime" -> 0.00005570833333333333, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.411745, 
              "TrainingMemory" -> 49631088, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6876204454961329, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6248481088279504, 0.011352779817700552`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7588645020892837, 0.01477611904562354]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005570833333333333, "MeanCrossEntropy" -> 
             PlusMinus[0.6248481088279504, 0.016055255188827677`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 49631088, 
             "TrainingTime" -> 13.823953000000001`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4220108316045738, 0.13865813271798896`], "Accuracy" -> 
              PlusMinus[0.06846205166342316, 0.11188514060581631`], 
              "EvaluationTime" -> 0.000046425000000000004`, "TestSize" -> 
              1200, "TrainingSize" -> 15, "TrainingTime" -> 
              0.08977833333333332, "TrainingMemory" -> 7.358885333333333*^6, 
              "ModelMemory" -> 209072., "ExperimentCount" -> 2, 
              "ModelUtility" -> 0.9602525078289749, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.316772855741874, 0.014515596551694517`], 
                PlusMinus[0.5931465653521251, 0.018510536074443407`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.05239774374425653, 0.0032521079764738056`], 
                PlusMinus[0.2760802691075741, 0.011691404205058126`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6033636766725372, 0.032324817175636664`], 
              "Accuracy" -> 
              PlusMinus[0.6384715347402266, 0.02520643745458927], 
              "EvaluationTime" -> 0.000055016666666666665`, "TestSize" -> 600,
               "TrainingSize" -> 70, "TrainingTime" -> 0.173638, 
              "TrainingMemory" -> 13403320, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7081765125482669, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6033636766725372, 0.022857097425508066`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6384715347402266, 0.01782364285369465]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7542833594974224, 0.056296923906831414`], 
              "Accuracy" -> 
              PlusMinus[0.6462693052070282, 0.027645851737776332`], 
              "EvaluationTime" -> 0.00005766000000000001, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.417937, 
              "TrainingMemory" -> 49631160, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5641309014936704, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7542833594974224, 0.039807936654463555`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6462693052070282, 0.019548569235459543`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005766000000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.7542833594974224, 0.056296923906831414`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 49631160, 
             "TrainingTime" -> 14.021011666666666`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 3], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4038498829447066`, 0.20846093054652517`], 
              "Accuracy" -> 
              PlusMinus[0.48019801980198035`, 0.07062136698709694], 
              "EvaluationTime" -> 0.00106907, "TestSize" -> 100, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.154866, 
              "TrainingMemory" -> 8231280, "ModelMemory" -> 450016, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2956608483365728, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4038498829447066`, 0.14740413760190585`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.48019801980198035`, 0.04993684749324002]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5601518602713793, 0.05619594558443534], "Accuracy" -> 
              PlusMinus[0.7327289112539852, 0.04456253102770858], 
              "EvaluationTime" -> 0.000623725, "TestSize" -> 200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.303141, 
              "TrainingMemory" -> 66509800, "ModelMemory" -> 451248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7543038969420774, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5601518602713793, 0.03973653419794445]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7327289112539852, 0.03151046787652866]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5099382953505737, 0.02442756739328653], "Accuracy" -> 
              PlusMinus[0.751395264504647, 0.02674233394089168], 
              "EvaluationTime" -> 0.000620934, "TestSize" -> 500, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.822546, 
              "TrainingMemory" -> 313611952, "ModelMemory" -> 452176, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.8370914208297211, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5099382953505737, 0.0172728985516843]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.751395264504647, 0.018909685674359675`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4949088829237189, 0.016823629932724612`], 
              "Accuracy" -> 
              PlusMinus[0.7549190807026895, 0.017277867186711805`], 
              "EvaluationTime" -> 0.0011856083333333335`, "TestSize" -> 600, 
              "TrainingSize" -> 8000, "TrainingTime" -> 3.958172, 
              "TrainingMemory" -> 1758133576, "ModelMemory" -> 452448, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.8468147548007986, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4949088829237189, 0.016823629932724612`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7549190807026895, 0.017277867186711805`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.601843917592324, 0.32721393308169816`], "Accuracy" -> 
              PlusMinus[0.19306930693069296`, 0.05543801677019926], 
              "EvaluationTime" -> 0.00105075, "TestSize" -> 100, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.165446, 
              "TrainingMemory" -> 3014136, "ModelMemory" -> 443680, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.09183328330280326, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.601843917592324, 0.23137519098078993`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.19306930693069296`, 0.039200597593741435`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00105075, "MeanCrossEntropy" -> 
             PlusMinus[4.601843917592324, 0.32721393308169816`], 
             "ModelMemory" -> 443680, "TrainingMemory" -> 3014136, 
             "TrainingTime" -> 16.699466], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6928763191405616, 0.0032364132751397006`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.00004627333333333333, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.039766, 
              "TrainingMemory" -> 11731160, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6227132317650212, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6928763191405616, 0.0022884897735734456`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.691615261868796, 0.0032368127593337794`], 
              "Accuracy" -> 
              PlusMinus[0.7576598681761051, 0.02088800856078498], 
              "EvaluationTime" -> 0.00005124666666666667, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.19459, 
              "TrainingMemory" -> 49631024, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6238475197083653, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.691615261868796, 0.0022887722515560556`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7576598681761051, 0.014770052498813715`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6930607432864359, 0.0032374403598906037`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.00006663166666666667, "TestSize" -> 600, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.030639, 
              "TrainingMemory" -> 3837496, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6225474847569469, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6930607432864359, 0.0022892160321656627`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006663166666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.6930607432864359, 0.0032374403598906037`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 3837496, 
             "TrainingTime" -> 3.1036660000000005`], "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7047653296253066, 0.05125041354489611], "Accuracy" -> 
              PlusMinus[0.6168828731430706, 0.02677539128987848], 
              "EvaluationTime" -> 0.00004600666666666667, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.130585, 
              "TrainingMemory" -> 13403200, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6039958244881949, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7047653296253066, 0.03623951495621092]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6168828731430706, 0.018933060749996292`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004600666666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.7047653296253066, 0.05125041354489611], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 13403200, 
             "TrainingTime" -> 13.189085], "Index" -> 13], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8703224131761872, 0.08390606219971972], "Accuracy" -> 
              PlusMinus[0.6250167340626973, 0.025391949628179335`], 
              "EvaluationTime" -> 0.00005599166666666667, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.245106, 
              "TrainingMemory" -> 13412488, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4868273634689283, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8703224131761872, 0.05933054556408205]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6250167340626973, 0.01795481976963284]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005599166666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.8703224131761872, 0.08390606219971972], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 13412488, 
             "TrainingTime" -> 24.755706], "Index" -> 14]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 14], 
        Association["ID" -> 126714562764636]], "MaxTrainingSize" -> 10000, 
      "LastReportingTime" -> 3.740153936893049`16.32546446637846*^9, 
      "PreprocessorEvaluationTime" -> 3.94189453125`4.*^-6, 
      "PreprocessorMemory" -> 564888, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 4.171664831881501, 
          "ElapsedTimes" -> 4.827071999999999, "ExperimentCounts" -> 21], 
         Association[
         "TrainingSizes" -> 70, "TimeBudgets" -> 5.214581039851883, 
          "ElapsedTimes" -> 6.052282, "ExperimentCounts" -> 14], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 6.518226299814846, 
          "ElapsedTimes" -> 7.463446, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 1500, "TimeBudgets" -> 8.14778287476855, 
          "ElapsedTimes" -> 10.631184, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 8000, "TimeBudgets" -> 10.1847285934607, 
          "ElapsedTimes" -> 10.176549, "ExperimentCounts" -> 2]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[126723152699228]], "ID" -> 
         126727447666524]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"I'M GOING HOME."}, 
           "ID" -> 4528839483062865292], "f2" -> 
         Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{11, 15, 1, 12, 13}}, "ID" -> 2561069794756905755], 
         "f3" -> Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5024803803011978992]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 68.292265, "MaxTrainingMemory" -> 2343463928, 
      "DataMemory" -> 3777456, "FunctionMemory" -> 1001376, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 9, 19, 39, 7.721856`7.640296685731602}, "Instant", 
        "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740159512816429*^9, 3.740159782434148*^9, 
  3.740171947775867*^9},
 CellLabel->
  "Out[140]=",ExpressionUUID->"3cc3eea0-8d0b-4f7d-91f0-d4e5ef96dfba"]
}, Open  ]],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.74017140520592*^9},ExpressionUUID->"57cab30a-2b88-4a46-9b94-4a8b098b6a50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl200", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"createClasses", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"createClasses", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740158251434836*^9, 3.740158267226678*^9}, {
  3.7401594789628983`*^9, 3.740159482899502*^9}, {3.740159582199562*^9, 
  3.740159585588765*^9}, {3.740172014814617*^9, 3.740172018709688*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"62f46b42-ed9a-43b6-b3ba-cec748b2d139"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7089999999999999636`4.898643519004583", "\[PlusMinus]", 
                    "0.0143709959823781919`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 400, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"], "f3" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 3]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence", "Boolean"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f3" -> Association["Type" -> "Boolean", "Weight" -> 1], "f1" -> 
              Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2f3)" -> Association["Weight" -> CompressedData["

1:eJztxTEJgEAABdAvJhEnU3gZPG4XwdmEBrGFEQQHOwjvLW/YjmXvkpQ+adN4
rWedbdu2bdu2bdu2/c/zur8fzDND0A==
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8638625972092938175]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 2181139535596031377, "Output" -> A\
ssociation["f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6345089180380480927, "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    631332860152842886]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    2682676190599947125]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 400, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.2775}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.293546, "MaxTrainingMemory" -> 116768,
                     "DataMemory" -> 3448, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 7, 9, 16, 11, 48.862662`8.441552099376917}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                    5830460000005304866]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                    10.224338282763073`, "StandardDeviation" -> 
                    3.9951166871210613`, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 3886868189269964860]], 
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 7098352295252712621]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7255900053155452923, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7649166098026585256, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 5208716758835946799, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
wUX8uBmXoPEYOdoxSRe9TyH3kppNT2jI5RrQvHIRz7TKmFFFHp98W18wUcCe
z+SN9m1G34ZVD7tFc11R67B3rtowA0G+8zRWl0SBHbqMfs+LcBUdnVIiOyPb
naf0J5KpVfPir/y8/NLbHlZwvCh2nw+lMxOl15YUP5fnGNM9VuLdQ3Nu/ZNP
k3C2/Rv3rtTbsH5mlwAiS9zXz7aXpcrVCBxK3M+4clt1LPLomea6uCfc2vEs
EY6SYurHoq5ti3ZMbiOZlJv+LuHy2QoigPscu+m6TRzyAvvh7ueDnkTqIPqA
MrPV7M8Q4Xj/MY2ddhXVW/bG0NS7Pfu5clNCYE+zuDwNKa7ca08e66BeXnq6
cievBT3WnDDPnXJv4Lg9Joxm79/ntTYxVM/PKu577a625dDreE7txgtuonAb
99DweOXidrNF2xsoe+og1MQrD0e9vYkW7gTXeeXDm3bBus6JZPqVey5MTE8B
SAJ55QRfwoOZPKOn3Pcj4ZLMuJ3g1sUrW/js3Q4gtvHo2m03XrI3Uw4blax5
5bJwXqqT9+LT9Zu2ca0IFswGm6N89dDFQWumuqqYcLlyP20NXlcFT7h27oVT
rzmYQ8e+sIJ3XT0q2lhT5I+jFyDlAocpQkldeUrK5QgSrqgAm5W6cu9Eavkz
aibr2qFJP01KuNoWba8f6TaEmOkzTPI67MVP+5713raD2QCRvN2kf/eanKWg
affBc+U2SHlr0osOMvjyyc3umHztbwXklbuA19MCLXZ4Xj3YregVrcjwepTu
PD1p25gaa5Ybtfve6APFydu1E317d99NeFkam7YfVY3lys01GERwJlcku175
m09mhtEFDkDd509vVtUdGSpP0Y1rejRFNHHPkiZ/vHqe5p/kG3ayRt/1lXvb
yPa9teOyZu4jjmZ5b9HMk+WhXNeK/OZjhuux6+aTm4eaVlofKUpWQqIDe0rL
vZdmrvja245grZy49DJO+i+D5xrXiviDnP5m9D2dcTOJwKhEnv6uVyoh29WZ
Fmvh+ZwZaTrnRYzmyl+5twyawVwV/bwGceVegXyiq35Ey9Gd/4kGOa+EuWUm
7a7cPlS9r0Vn69F3v0yMMu0Znh/cuLxaNIq2Bq/a2mJ88dO0P98V498rNE9+
3srzsDHN5rlVLj7bLCKYFkmgzQQX9wAk02ReIzZ7aH/1lUvagv17d2eeey68
ohhcnEi0hTttn5yJuP2Wrue+cSjoAw7aCKVau2bwyvUEb8gc/2HjXznufnnj
yMuTof595Y+5iGZXFcdrpF/zwpStpGqnByO783QatgPYW2sy8vmRQzqbqGsK
sbd8r/nyuJNfvEFhg1nIuxTMhm4vG9p61lJums9stqGStdNP7p0478MVG2Iv
bxRCdvcRsl95bz7/vTpgjs1mx7RD2zfcbVPDHvly/cvAECV1w+Yx7yamnrvX
N6d3Fax1gTf3+Sram/BmtjySOX+vrnebwDzW5txnyuMiGJqwF8L88JXrmZsI
X6L5+OKe9zTsnDWssh38XL82LIkTGTDzKGafm6+LO2O2PHkivdaXdm525G2/
NWFnW8CVD0tKAKo9eHC7y/+9nAKx7d6Eqz7y+zx+1is0YqI/pZD7G0fElAHr
kFDW+/ll4TMo34gKbdo/xu9Y9YK8zf3Xrw3vQg978W2S6TYrXXk1YF3eSBVc
z42z7KP2pxviNrDtjZffDvMtXnCv1m2XxZMrtyfEtJ6tkSbS73pt/sVTrMsr
T9rDMbzm0Jjn9vbk5QMYsp+phgzbUzPf+Zh8s13X9k7Cg7pvxS/qS7apnLh0
w5vy896uFsj1YCp9XLl20IPumXkeOz8vEOqPbAW12+Td32klC38TSbxIgJ4r
N34wFWx32vjypdGAbZe9sUpcUChXvu0Y85aPlVE87pVXO1geqeSxNtlyvaZK
TQBAl+wdq1dvXnvxpv7wIp1n+fp3zHME87cjQj3lPG3+sDlqRW+1SrlyLxF5
h5932+Nz7WRacdteZTHC8/7L/Xy3X9TrjUy4hqu5cn9qgBVV+7UM8NaVixBV
9mugUsb1R/4SxmObT31b+/rK5xxvpWxrq5yW59vfYXkDRvB2+7TMl87gNrwQ
ja2g43f+JpfMxYu3cdRaynmGbfDWKKqx9JUvf7ljBmzZH53zHHEx0Xssywxr
4rlt+9MEmEmjYJB3nj4+ukcNRjgE1194H+D9OYPlma8Z303ji22VSOjY9Vx8
myvSL+yuLbUEEzcvMW20NzH/eNrjBzdeubtaovwld9AurrzHxedmMu+xZ/rO
B2Ycv/1B4EQc7SSu3P5aQE+gGf4exvv5+AUMy9ePTS3xux0pN9iecefHSO/m
RSV7BhVR5dfQSz5Hby2B1kC91fvaiS2RyzvX9uT72wf3HK24TOLR0tnZSJuf
33Hdr2ubQHTZ+XnElqg8i9s48r7X+3R8rJlNNlq58bhk+/a2jLime/Fzyc+f
aBKRtXtN+8qtjBx/Z8Lz1K23v/JwGJH9KGY2r9+UlFqsj1+3mWEvVy53s7oa
2Qz7YK78lPi5C+mYzc9jpnyYeZO12LZY9/d5Uwk1roXWuJf2yrsH154O2zej
SnDlxhEVXm1HfbW+eOXS5CVl945YSzuMa/emuqwdWUpKe/Dqj/Gh15HK+xMn
IdcLGbHW+FmJOVM/oJc5V4lkjQzv1YOOxNzYkFjHDyy8ciO1ZXeaZVV/LuQ+
384DS0ueoPhpjGsPU7fmZPqM/oub54kfjbDXOHojqxp55eYVMTWLLbYsnIvP
/sqE2SI5vTm0cv2+csKdaJmyP3CknZiStwboj6PoDcuVb5OTsLwV1x4tDF05
IXUkDQTEaVYp5UYLhIr6CgB55HM4Ws3S19J5YgT5HNZlUMiWY6Z2f73yY0ek
FXLvXlhmufMHQrw5EvFL9Dq+z9/+hsnbJW4+0js0Vy6ttbau7ZpSK1fuROzw
86rlOZkHsDdnvZfmbJTtWZeJS2PTy7+7RuHg4uT2ltTyh1TsqPL3cvL53h2x
g8ngxl+QuvO0o1xH4VVYb5vNlEvXe4178yd+rOnKV48YPZpBjZJe+5Ej2zC0
bfhTzze+3ma6xCtvzmyz6/n58fbG1ag8mNK4ckMsQTSuhtpG/crjdiAYGjVI
8/R3PqaNvTDjT74cr4qPlBtf2Dc1OAUn64a2+XtVf/ojIc1Ohdee5cJesbRf
dMmIV0n5bu/PvHjju2acK5e2BIWd6zTsp7xy3XXx6qd3JmqeI38FqRiTWya1
XJb70r3aYG1wS/NNVl056tlWKaxSc2JSP9FeFwFED0hJO7EV4XgRPLDNsuWV
i/I24fgO+/rz817Ct2fQXxwT9K8+7XzwV1qQ236zU/+Cs/lGQV7FpZ2YJd1R
KyqWF7732rv3dkLFb15lZ5xcrFvJ90JL8YrYnU/8HotVQu9o2mhx7XzZti3b
6MK6v+pz5ZbuvScITZzhr165iVv9rMmS6EItKcdB2nEZPYX+0saVs/yY5jBi
Nqp+5VFSter5WMjwN9auvAV6xm8YvY1SV2552ksxJpQkGSXl8pu4/G2Z/9w6
gpd9lxzc20YehuuXT4Tj1hgNSnQvM+VWjfwhiWNr27i47dGMtqsTNKVnPHVs
v2k+BKPWIO/8T9CMKZp5NcCs2pU3KSJG1f3hJx67U25ziA0kx4ut5fpB2cB8
b4PEpf+R7/U3g7y21v3RBGzok8fvlRgDeO/NkP9/CxcBIQ==
                    "], 
                    "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    Block[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy1WE1IVFEUfqHjT/NnOZmMUhNtkrFNLoYIW0yB6Yj0J02LlEITpmiiha6s
oU0EkTmLoowsUCQUSotEIt4ULQxsKFwUMUiFkIUFFUFUVps5sziPwzn3znN1
uPfdd+853/3Ozz0bjsT3dq4wDGN7gWG4+uqPPXrvT4FMN7Q5f1RXpi4ZZ0Zr
D6xJUd9hXDOfeBW64rWsa2pJzjzprbDMY2kGw5/HTvnYddT559wfNk9Xrhb/
r3sOJ6X2Lvc+aXPWteVbGYsrZR8+H3hw9HtvXySyavn0zuqjijteP3gj4fNW
WfkIUmpH8oL3+r9hD21f8b3jvybLeb5k12H7YD9Vu0EvWF/xd3fmhL9Un89Z
/aj74/Tj5s9f7Vk30OVk9VqMdb/YGfLk+Evdiyo/dP0ZSxwPdePOnmh9e5HT
zeqja6/0v63jL9uj+60454tfQ+fwu1szpRZ8lj5dbplwW88DXKV47psajHT0
8+t6ft41A/5y8jucC3ZReUwss35ExV0qn2I9MM7UPPgLjPG5wANpfsX3g/2Q
un9qfzjf7ZxqW5lxaOeHmtjt13/uuMT4Az8suKF4zfKcWS/1B3zvYnsUJYev
XfUJyNP9X5rGGx3i9RRPKL5zduB75u4JZC7uCfmgGxcLD68vCj5bMqW46+ZX
jMvi2+azD+eKyfvuijvDzTF3bjw/PdS67aY8D6jy/2Rmsuz+aEluDHFe1V4q
Xkp5lq+k4jfFM4w/zAe+LhycjVr9H+pSqj7UtYvLO1zegzxK+SnFs2vxZPXc
xQI6rgvzLdidb/1G2Y/1l/qr7vvWYgcTh6i6iKqTOV6CzL2D0PkUHhz/VeME
V5+p4i3lB16H62Cu7wG4c/Warn4cPtL8COOnQ899h1oXzLWO2onEm48m9V9d
wLGx+wGdz1XzrLR/JI2jOA6QfEDvbSneduUN6lzgGfee3hQaqWv0/CbvCSTu
A9ilL35XUBL6LFSew/viford8ZzzO7vrXwtOivUk9AHwPPYbCl/VvMitw/ZQ
fTDd/al9uDyA9bK8U5lzuX4g5f+6fKH+4/prynxH+R/XU6r5VVVK6wGKv3nr
MbZrYCRcQtY3WE/QY0dHMF31uNCiP1Wnce8M/B339+yyV9fPcb/sP5XBAvo=

                    "], "Version" -> {11.3, 0}, "ID" -> 6413031506679139115, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3519824094447848605, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    1107852814282405113, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
                  Span[1, 830], 
                  Span[831, 831], 
                  Span[832, 832]}, 
                "Wrappers" -> {SparseArray, Identity, Identity}, "Output" -> 
                Association[
                 "(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxTEJgEAABdAvJhEnU3gZPG4XwdmEBrGFEQQHOwjvLW/YjmXvkpQ+adN4
rWedbdu2bdu2bdu2/c/zur8fzDND0A==
                    "], "Type" -> 
                    "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
                599417332904572119]]}, "Invertibility" -> "Impossible", 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 504074388080892407]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                1867570019887632781, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7443894421457286454]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["Not Question" -> 0.5, "Question" -> 0.5]],
        "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association["Weights" -> CompressedData["
1:eJw1V3tcztcffyqpKETlMt0eubRcyqWFvuckS41lXYa0NtJla+XX8pDLFCla
IVPuiS6YZ3NZCKPv5ygjkkSkJPUyYpZLlkv82G/v83r9/niq53m+55zP5/O+
nRznxQdFG2o0Gp3pvz+CwhdPWrAgfGlwV7yJCo8bMzoOXxr8+/Iy0mhelTxU
nLQ/klPtYTbqr1Rhb5nB3vj9Qn62ipi2x41c9ueyo9OF4loWRCEXu4nkK5Vs
3+dDeeLIdNLaNKv569L56f4JdOvCfSKXw2S+3YO73sqg2Nar1LnKlqd8eI10
YWeVXom7KC/MmQ4E+/PLS0ezl9cT2EZfDUu/U8xMndfS0o06ml5oKuo1c+mN
Q1/hPGcIuzn7F6ZVVikxr5xEt4AtNK1mA/thWRtbHm5NTwYbkPZOKqH+ofmb
WPEbPdu2poxN152hRvdMQp1FvzxUrn3Xn1D/+QnDKOQS42RpyTPsUskzu5yW
llsrhkMW0ng1ktKs3bmrOKn4TtzB2yuthLatiO0Onk1hhUspqTP19N9uW2S/
+Lxf1moKtM+lnGA79qj9NTvmMJ4Z9TPjqPHVmpPqhKoY+Tu6dpIIN7Bk6qnz
bLrShT+tSKHhRaqy0GoP7TqynyYEdhdhZQdlffZPU5TIQoVHWzUo2nhjfvdk
VypgGsWVDDn2jktOZg3PrZhXy0PV9qRGvJ47hH9p4sFz8vPpyHFn6vLCQZS/
fMBWhcwlrBUGjcrNJ/vV+i4Owv6LruJt5ny2ZeVvpP/ykDI63I3bmjxWgIfD
bB8x52Y0b2xLIuDm1RHIWlYO5ph11cMXyt2LKqtsXUDXPrcSnj4fsYS2c/J9
7le7ad2iZnXeziMUMb6SLSrjIrY5jIBr4szJrLX6gooz3N4mEp7/PtCFjA75
UfvbLOV1rcIuV2fQfbvvqGJRE1l+c5J6bcuimT/6EPrcPLVMgJO23FCgH8yM
nv+jFqZvJpejx1n3M3Po+h1L/sDuOcuoM+Tzv+wp5+ZXsF2d2GOW8MldSOAI
eOF/rpDp1j2m0XG9+EC1DwOn3V5OlLU3/5UtzyxcuZUMruylEYPKqDQtg9kF
VdO7bv+ol2sTJYcxz0J/I9a7ZJiwGdPCEqv7i5bW+7SuvxUtuZLH15qZ0KW8
LDpg8Vyt9mhj4O4fa07Q0yku8u/d0bvo/toC1tL7a6mpaFNrarvemzLNMph6
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

               "], "Biases" -> RawArray["Real32",{0.19115674495697021`}]], 
            "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              832, "$InputDimensions" -> {832}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{832}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAUAMAnJlGYQ7RKCYlWoraAwiBaM/wh1OawgEI0dpDcNVeMcztl
EVHnEX33OqttLfdraGzbtm3btm3btv3Tj7Qc6b6+H+pSHFw=
               "], "Type" -> 
              "NumericalVector"], "Key" -> "(f1f2f3)", "Invertibility" -> 
            "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 1., "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.614118173014006, 0.05141519382548088], "Accuracy" -> 
            PlusMinus[0.6463414634146336, 0.1077717371085514], 
            "EvaluationTime" -> 0.0000149, "TestSize" -> 40, "TrainingSize" -> 
            60, "TrainingTime" -> 0.052871, "TrainingMemory" -> 1587432, 
            "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
            0.6917393730242389, "MeanCrossEntropyHistory" -> {
              PlusMinus[0.614118173014006, 0.036356032210018235`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6463414634146336, 0.07620612612971057]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 1., "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 400], 
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 178202630696649]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6870146135990522, 0.01960398948836083], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.0000261, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.018697, 
                 "TrainingMemory" -> 600704, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6251277481616853,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6870146135990522, 0.013862113905529737`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6693993832848402, 0.022281393431403684`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.000013325000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.022093, 
                 "TrainingMemory" -> 1356048, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6409724334266117,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6693993832848402, 0.01575532438963094]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000013325000000000002`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6693993832848402, 0.022281393431403684`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1356048, 
                "TrainingTime" -> 0.107069], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8900486491660474, 0.097762113526596], "Accuracy" -> 
                 PlusMinus[0.45005876293147196`, 0.07366539350591472], 
                 "EvaluationTime" -> 0.000012516666666666668`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.0075766666666666664`, "TrainingMemory" -> 
                 195861.3333333333, "ModelMemory" -> 32488., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 0.4748492443803536,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8256155695930784, 0.08416623342739597], 
                   PlusMinus[0.9744744617103884, 0.09634320115912236]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.4024390243902437, 0.07715223468995282]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9703704613747226, 0.19732274701258334`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000012224999999999999`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.017813, 
                 "TrainingMemory" -> 877912, "ModelMemory" -> 32616, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.42771676987798013`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9703704613747226, 0.13952825249495523`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.07790084880165644], 
                 "EvaluationTime" -> 0.000015375, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.200318, 
                 "TrainingMemory" -> 4449592, "ModelMemory" -> 33256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4181838886376063,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9909652934368359, 0.20944832834106417`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000015375, "MeanCrossEntropy" -> 
                PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                "ModelMemory" -> 33256, "TrainingMemory" -> 4449592, 
                "TrainingTime" -> 0.2579741666666667], "Index" -> 2], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9831052301834508, 0.14695736316119218`], 
                 "Accuracy" -> 
                 PlusMinus[0.5854527031917199, 0.05660919690222907], 
                 "EvaluationTime" -> 0.0009525999999999998, "TestSize" -> 80, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.04738966666666666, 
                 "TrainingMemory" -> 745026.6666666666, "ModelMemory" -> 
                 447104., "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.4265508031926865, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9239027906160499, 0.19256161689087925`], 
                   PlusMinus[1.0402509117513454`, 0.18918714823140675`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444], 
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6684929650137739, 0.10983241284740038`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.11016843689567841`], 
                 "EvaluationTime" -> 0.0008424, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.075356, 
                 "TrainingMemory" -> 2471504, "ModelMemory" -> 473384, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.62549464467201, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6684929650137739, 0.07766324391847729]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.782242546575857, 0.1440948112973481], "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.07845762192924444], 
                 "EvaluationTime" -> 0.000809625, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.317852, 
                 "TrainingMemory" -> 11530272, "ModelMemory" -> 518216, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5324801981558621,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.782242546575857, 0.1440948112973481]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000809625, "MeanCrossEntropy" -> 
                PlusMinus[0.782242546575857, 0.1440948112973481], 
                "ModelMemory" -> 518216, "TrainingMemory" -> 11530272, 
                "TrainingTime" -> 0.44470466666666675`], "Index" -> 3], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6969912772858453, 0.011167770262348994`], 
                 "Accuracy" -> 
                 PlusMinus[0.4877764677472049, 0.05712072069272695], 
                 "EvaluationTime" -> 0.00013925833333333333`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.012341333333333333`, "TrainingMemory" -> 236325.3333333333,
                  "ModelMemory" -> 110389.33333333333`, "ExperimentCount" -> 
                 2, "ModelUtility" -> 0.6177061704471231, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6987804360961366, 0.01673493701845681], 
                   PlusMinus[0.6956062614680996, 0.014724040495996129`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.47560975609756073`, 0.07882661924740107]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6943796219635396, 0.021306074971810893`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000136775, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.013327, 
                 "TrainingMemory" -> 734024, "ModelMemory" -> 110400, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6182225114812014,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6943796219635396, 0.01506567009303646]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6695285647147997, 0.016794150789926635`], 
                 "Accuracy" -> 
                 PlusMinus[0.6707317073170727, 0.07505505492736586], 
                 "EvaluationTime" -> 0.00023022500000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 320, "TrainingTime" -> 0.029232, 
                 "TrainingMemory" -> 3364352, "ModelMemory" -> 114800, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6418830450657396,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6695285647147997, 0.016794150789926635`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6707317073170727, 0.07505505492736586]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00023022500000000003`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6695285647147997, 0.016794150789926635`], 
                "ModelMemory" -> 114800, "TrainingMemory" -> 3364352, 
                "TrainingTime" -> 0.04888133333333333], "Index" -> 4], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6706809259088216, 0.04581923399439435], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.05586884030282884], 
                 "EvaluationTime" -> 0.000018091666666666665`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.004745333333333332, "TrainingMemory" -> 229216., 
                 "ModelMemory" -> 97560., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.6353168439046083, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.681864802362421, 0.047407523570423674`], 
                   PlusMinus[0.6395981709181233, 0.07903343206175434]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6232230096974638, 0.05481194009075559], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.000022000000000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.007065, 
                 "TrainingMemory" -> 1331352, "ModelMemory" -> 430824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6810048328513942,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6232230096974638, 0.03875789452816406]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5980360778718854, 0.050917801192207825`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.00004882500000000001, "TestSize" -> 40,
                  "TrainingSize" -> 320, "TrainingTime" -> 0.044524, 
                 "TrainingMemory" -> 8005440, "ModelMemory" -> 2163760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6401889137107134,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5980360778718854, 0.050917801192207825`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00004882500000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.5980360778718854, 0.050917801192207825`], 
                "ModelMemory" -> 2163760, "TrainingMemory" -> 8005440, 
                "TrainingTime" -> 0.060400333333333334`], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.4699393329353883`, 0.3403664903166638], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.0000169, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.05541, 
                 "TrainingMemory" -> 919048, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.2808318301048885,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.4699393329353883`, 0.2406754533915783]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8539205092579377, 0.20614413893915554`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000019925, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.053958, 
                 "TrainingMemory" -> 1587448, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4825149086371433,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8539205092579377, 0.1457659185457387]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000019925, "MeanCrossEntropy" -> 
                PlusMinus[0.8539205092579377, 0.20614413893915554`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587448, 
                "TrainingTime" -> 0.271242], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931402808957658, 0.019468354810628287`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000017825, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.0109, 
                 "TrainingMemory" -> 426904, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196583399374144,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931402808957658, 0.013766205705141005`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6928654062877444, 0.013758280934718845`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.000014675, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.021362, 
                 "TrainingMemory" -> 6447080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6209205123753709,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6928654062877444, 0.013758280934718845`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931134722249647, 0.019467226016634472`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.00001545, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.017153, 
                 "TrainingMemory" -> 1249080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196823757613998,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931134722249647, 0.013765407527253415`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00001545, "MeanCrossEntropy" -> 
                PlusMinus[0.6931134722249647, 0.019467226016634472`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1249080, 
                "TrainingTime" -> 0.079512], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6917718278486031, 0.053150641011307384`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000014275000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 10, "TrainingTime" -> 0.065649, 
                 "TrainingMemory" -> 919000, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6149226939087926,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6917718278486031, 0.037583178683507266`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.614118173014006, 0.05141519382548088], 
                 "Accuracy" -> 
                 PlusMinus[0.6463414634146336, 0.1077717371085514], 
                 "EvaluationTime" -> 0.0000149, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.052871, 
                 "TrainingMemory" -> 1587432, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6917393730242389,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.614118173014006, 0.036356032210018235`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6463414634146336, 0.07620612612971057]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000149, "MeanCrossEntropy" -> 
                PlusMinus[0.614118173014006, 0.05141519382548088], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587432, 
                "TrainingTime" -> 0.277133], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.256857008620053, 0.5962017585768732], "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.0000148, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.034848, 
                 "TrainingMemory" -> 918896, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.18177828484850891`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.256857008620053, 0.4215783064450519]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3302359386688085`, 0.41376042395331447`], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.000021825000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.050481, 
                 "TrainingMemory" -> 1587192, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.30568051008889097`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3302359386688085`, 0.29257280156400944`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000021825000000000002`, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.3302359386688085`, 0.41376042395331447`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587192, 
                "TrainingTime" -> 0.23677199999999998`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931462551126191, 0.009734303709166375], 
                 "Accuracy" -> 
                 PlusMinus[0.5992095617999024, 0.0733577253566291], 
                 "EvaluationTime" -> 0.000014166666666666668`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 0.010483, 
                 "TrainingMemory" -> 398037.3333333333, "ModelMemory" -> 
                 37240., "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.6213885495577779, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931464905173004, 0.013766391370773663`], 
                   PlusMinus[0.6931460197084198, 0.013766377272709985`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109], 
                   PlusMinus[0.6463414634146336, 0.07620612612971057]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931438084740744, 0.01946850383932111], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.00001335, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.014555, 
                 "TrainingMemory" -> 1249000, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196551802368115,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931438084740744, 0.013766311084340292`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931189437717526, 0.013765569362545015`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.0000146, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.086558, 
                 "TrainingMemory" -> 6449080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6206929824764315,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931189437717526, 0.013765569362545015`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000146, "MeanCrossEntropy" -> 
                PlusMinus[0.6931189437717526, 0.013765569362545015`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 6449080, 
                "TrainingTime" -> 0.1186805], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6456775130058557, 0.08568835948193107], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.00016675000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.103432, 
                 "TrainingMemory" -> 1300840, "ModelMemory" -> 163760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6516297811548131,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6456775130058557, 0.060590820058424054`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6157855875246737, 0.11537326026223872`], 
                 "Accuracy" -> 
                 PlusMinus[0.6219512195121948, 0.07715223468995287], 
                 "EvaluationTime" -> 0.000139975, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.128644, 
                 "TrainingMemory" -> 4370216, "ModelMemory" -> 169840, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6760625991034054,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6157855875246737, 0.11537326026223872`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6219512195121948, 0.07715223468995287]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000139975, "MeanCrossEntropy" -> 
                PlusMinus[0.6157855875246737, 0.11537326026223872`], 
                "ModelMemory" -> 169840, "TrainingMemory" -> 4370216, 
                "TrainingTime" -> 0.26423700000000006`], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 178198335729353]], "MaxTrainingSize" -> 400, 
         "LastReportingTime" -> 3.740141512330669`16.325463023676384*^9, 
         "PreprocessorEvaluationTime" -> 4.4814453125`2.*^-6, 
         "PreprocessorMemory" -> 174200, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000002, 
             "ElapsedTimes" -> 0.733886, "ExperimentCounts" -> 15], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             1.1450550000000002`, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 320, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             1.008427, "ExperimentCounts" -> 7]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[178206925663945]], "ID" -> 
            178211220631241]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, "Values" -> {"OKAY WADE."}, 
              "ID" -> 8454876219130345882], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{12, 12, 13}}, "ID" -> 4356659753071005787], "f3" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5106358782184230910]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 4.239985, "MaxTrainingMemory" -> 
         15050064, "DataMemory" -> 150864, "FunctionMemory" -> 385072, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 9, 16, 11, 52.773925`8.474994370507925}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"YOU DUMB BITCH.", {11, 1, 7, 13}, 0}, {
        "AND YOU COULD STAND TO GET A LITTLE SMARTER AIN'T THAT RIGHT YOU \
DUMB BLONDE FUCK.", {3, 11, 15, 15, 10, 15, 4, 12, 12, 12, 2, 4, 12, 11, 1, 
         12, 12, 13}, 0}, {"AN ITALIAN RIGHT.", {4, 1, 7, 13}, 0}, {
        "MAJOR WHAT DO YOU THINK COULD HAVE DONE THIS.", {1, 4, 12, 11, 12, 
         12, 12, 15, 7, 13}, 1}, {"YOU SAW THIS.", {11, 15, 7, 13}, 0}, {
        "HOW CAN YOU BE HERE AND SAY THIS.", {12, 12, 11, 15, 2, 3, 15, 7, 
         13}, 1}, {"NATALIE WHO.", {12, 11, 13}, 1}, {
        "WHERE WILL MY TOYS BE.", {15, 15, 12, 12, 15, 13}, 1}, {
        "THE CAR OR DEBBIE.", {4, 7, 7, 12, 13}, 0}, {
        "THAT ' S WHO YOU WANT ME TO BEND MY RULES FOR.", {4, 13, 7, 11, 11, 
         15, 7, 10, 15, 12, 7, 10, 13}, 1}, {
        "I'VE NEVER GOTTEN A LETTER LIKE THIS HAVE YOU.", {11, 15, 2, 15, 4, 
         7, 10, 7, 15, 11, 13}, 0}, {
        "YOU DON'T THINK SO.", {11, 15, 2, 12, 12, 13}, 0}, {
        "I BELIEVE WE SHARE AN ART INSTRUCTOR YOU KNOW CHASTITY.", {11, 15, 1,
          7, 4, 7, 7, 11, 15, 7, 13}, 0}, {
        "CALL THAT FRESH.", {1, 4, 12, 13}, 0}, {
        "OH SHUT UP HUH.", {7, 12, 9, 12, 13}, 0}, {
        "THE POET.", {4, 7, 13}, 0}, {
        "WHY DOESN'T SHE JUST HANG UP AND CALL THE POLICE.", {2, 15, 2, 12, 2,
          15, 9, 3, 1, 4, 7, 13}, 1}, {
        "IF YOU NEED TO COME TO WHERE I LIVE OK.", {10, 11, 15, 10, 15, 10, 
         15, 11, 15, 5, 13}, 1}, {
        "WHO WILL YOU KILL.", {11, 15, 11, 15, 13}, 1}, {
        "WHO IS DEAD.", {11, 15, 12, 13}, 1}, {
        "YOU REMEMBER HIM FROM HIGH SCHOOL.", {11, 15, 12, 12, 12, 12, 13}, 
         0}, {"YOU HUNGRY OR THIRSTY OR BOTH.", {11, 1, 7, 12, 7, 4, 13}, 
         0}, {"HOW OFTEN DO YOU SEE MR. KRAMER AND HIS SON.", {12, 12, 12, 11,
          15, 12, 12, 3, 11, 7, 13}, 1}, {
        "WHO'S MR. JOCULARITY.", {11, 15, 12, 12, 13}, 1}, {
        "SO NOW WHERE WERE WE HERE.", {12, 12, 12, 15, 12, 2, 13}, 1}, {
        "CHARGE SET.", {1, 7, 13}, 0}, {
        "YOU SERVE MARTINIS DONCHA.", {11, 15, 7, 12, 13}, 0}, {
        "GOIN' DOVE HUNTIN'.", {12, 7, 7, 13, 13}, 0}, {
        "AND MADEMOISELLE.", {3, 12, 13}, 0}, {
        "IS IT THAT BAD.", {15, 11, 4, 12, 13}, 0}, {
        "THEY'RE TRYING TO UNNERVE US. WHY DID THEY DO THAT.", {12, 12, 12, 
         10, 12, 12, 13}, 1}, {
        "WHAT NUMBER DID YOU TEAR OUT.", {4, 7, 15, 11, 15, 12, 13}, 1}, {
        "JUST A LITTLE JOKE MISS FARMER. ...DID YOU REALLY SAY THAT.", {2, 4, 
         7, 7, 7, 7, 13, 13}, 0}, {
        "HI VIV.  CARLOS YOU KNOW MY ROOMMATE VIV. YOU SPENT IT ON DRUGS \
DIDN'T YOU.", {12, 12, 13}, 0}, {
        "WHAT HAVE YOU GOT TO DO.", {4, 12, 11, 15, 10, 12, 13}, 1}, {
        "DO YOU KNOW HER.", {15, 11, 15, 7, 13}, 0}, {
        "WHAT THE HELL IS A TREADSTONE.", {4, 4, 7, 15, 4, 7, 13}, 1}, {
        "PAPA.", {7, 13}, 0}, {"AS A PLUMBER.", {10, 4, 7, 13}, 0}, {
        "WHAT TEN THOUSAND POUNDS.", {4, 8, 12, 12, 13}, 1}, {
        "UP GET IT.", {7, 15, 11, 13}, 0}, {
        "ARE YOU DECLARING AN EMERGENCY.", {15, 11, 15, 4, 7, 13}, 0}, {
        "SHALL I REMAIN HERE IN OUR HOTEL ROOM HIDING OR SHALL I CARRY ON THE \
BEST I CAN.", {12, 11, 15, 2, 10, 12, 12, 12, 15, 7, 7, 11, 15, 10, 4, 7, 11, 
         15, 13}, 0}, {"WHATSAMATTER.", {7, 13}, 1}, {
        "WHAT WAS I GONNA SAY.", {4, 15, 11, 12, 12, 12, 13}, 1}, {
        "AND THOSE WERE THE GUYS WHO WENT ON THE EXERCISE WITH YOU.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}, 1}, {
        "I WANT THE MONEY ASSHOLE WHAT DO YOU THINK.", {11, 15, 4, 7, 12, 4, 
         12, 11, 15, 13}, 1}, {
        "I MEAN WHAT KIND OF PEOPLE DO WELL AT THIS STUFF.", {11, 15, 4, 12, 
         10, 12, 12, 12, 10, 12, 7, 13}, 1}, {
        "HOW ARE THEY TREATING YOU.", {12, 15, 7, 15, 11, 13}, 1}, {
        "WANNA STAY WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}, 0}, {
        "AT WHAT EXACTLY.", {10, 4, 7, 13}, 1}, {
        "DO YOU THINK IT'S DONE.", {15, 11, 15, 11, 15, 12, 13}, 0}, {
        "WHAT IS SO GODDAMN VALUABLE IN YOUR LIFE THAT YOU'RE WORRIED ABOUT \
LOSING.", {4, 15, 12, 12, 12, 10, 1, 7, 4, 11, 15, 1, 10, 15, 13}, 1}, {
        "PITTSBURGH.", {12, 13}, 0}, {
        "[WAS IT] &QUOT;MEIRSCHULTZ&QUOT;.", {13, 12, 12, 13, 12, 12, 13, 13},
          0}, {"I KNOW YOU'RE EXPECTING SOME KIND OF -- EXTRAVAGANT BEHAVIOR \
BUT BELIEVE ME -- DO YOU BELIEVE ME.", {11, 15, 11, 15, 15, 12, 12, 10, 13, 1,
          7, 12, 12, 12, 13, 12, 11, 15, 7, 13}, 0}, {
        "WHAT'S A LUNCH COST THESE DAYS.", {4, 15, 4, 7, 7, 7, 7, 13}, 1}, {
        "WHERE IS INNER SPACE.", {15, 15, 12, 12, 13}, 1}, {
        "WHY WON'T YOU CHECK OUT LV-426. ...BECAUSE JUST ONE OF THOSE THINGS \
MANAGED TO KILL MY ENTIRE CREW WITHIN TWELVE HOURS OF HATCHING...", {2, 12, 2,
          11, 15, 7, 7, 13, 13, 12, 2, 8, 10, 4, 7, 15, 10, 15, 12, 12, 12, 
         10, 8, 7, 10, 15, 13}, 1}, {
        "LOOK BUTTHEAD I'LL TREAT YOU SO NICE YOU'LL NEVER WANT TO LET ME GO \
OKAY.", {8, 7, 11, 15, 15, 11, 2, 1, 11, 15, 2, 1, 10, 12, 12, 12, 12, 13}, 
         0}, {"THAT OBVIOUS HUH.", {4, 1, 12, 13}, 0}, {
        "PERMISSION.", {7, 13}, 0}, {
        "OKAY MISS STARLING.", {1, 12, 12, 13}, 0}, {
        "WHAT'S DR. GILLMAN SAY.", {4, 15, 12, 12, 12, 13}, 1}, {
        "WHY DID THEY TURN BACK.", {2, 12, 12, 15, 2, 13}, 1}, {
        "WHAT'S SHE DOING.", {4, 15, 12, 12, 13}, 1}, {
        "HOW YOU DOING SAM.", {12, 11, 15, 12, 13}, 1}, {
        "WHY DO YOU EAT THAT STUFF.", {2, 12, 11, 15, 4, 7, 13}, 1}, {
        "WHAT EXACTLY DID HE CALL OUT.", {4, 12, 15, 11, 1, 12, 13}, 1}, {
        "SAY---YOU THINK THAT'S THE SAME GUY WHO WAS IN THE ACCIDENT WITH \
LUCY.", {7, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}, 1}, {
        "AND YOU SVEN AREN'T YOU AFRAID OF CROSSING THE RAINBOW BRIDGE TO \
ASGAARD.", {3, 11, 12, 15, 2, 11, 12, 10, 12, 4, 12, 12, 10, 12, 13}, 0}, {
        "NOT GREAT.", {2, 1, 13}, 0}, {
        "RUNNING OUT OF TIME ARE WE.", {15, 12, 10, 12, 15, 7, 13}, 0}, {
        "YOU'RE NOT USING THE SAME GUY WHO TRIED TO FIX IT.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}, 1}, {
        "TO YOU ... .", {10, 11, 13, 13}, 0}, {
        "DID YOU KNOW YOU SHOULDN'T LIGHT THREE CIGARETTES WITH A MATCH.", {
         12, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}, 0}, {
        "MY MY MY HOW DID THINGS TURN SO HOSTILE SO QUICKLY.", {12, 12, 12, 
         12, 12, 12, 12, 12, 12, 12, 12, 13}, 1}, {
        "NO BUT MY DOG HE'S A GOT MILLIONS OF THEM -- HAVE YOU GOT A \
LICENSE.", {4, 12, 12, 12, 11, 15, 4, 15, 12, 10, 12, 13, 12, 11, 15, 4, 7, 
         13}, 0}, {"THIS THIS HAPPENED.", {7, 7, 15, 13}, 0}, {
        "HOW DID YOU MANAGE IT.", {12, 12, 11, 15, 11, 13}, 1}, {
        "WHOSE JUSTICE.", {1, 7, 13}, 1}, {
        "DID THEY TELL YOU TO SLEEP WITH ME.", {12, 12, 12, 11, 10, 15, 10, 7,
          13}, 0}, {"MAX, WHAT IS IT.", {12, 13, 4, 15, 11, 13}, 1}, {
        "WILL YOU COME SEE HER WITH ME.", {15, 11, 15, 15, 7, 10, 7, 13}, 
         0}, {"HOW YOU FEELING ALL RIGHT.", {12, 11, 15, 7, 7, 13}, 1}, {
        "IS IT INEVITABLE THAT THE GAME PLAYS YOU.", {15, 11, 1, 4, 4, 7, 15, 
         11, 13}, 0}, {
        "YOU FOUND ANYONE IN YOURS.", {11, 15, 7, 10, 12, 13}, 0}, {
        "DON'T YOU WANT TO SEE WHAT DADDY DOES FOR A LIVING.", {7, 2, 11, 1, 
         10, 15, 4, 12, 15, 10, 4, 7, 13}, 1}, {
        "WELL COULD YOU LEND ME SOME MONEY TILL YOU HAVE ONE.", {12, 12, 11, 
         15, 2, 12, 12, 12, 11, 15, 8, 13}, 0}, {
        "I'M JUST HERE SHOOTING THIS BAND WHAT ABOUT YOU.", {11, 15, 2, 2, 15,
          7, 7, 4, 12, 11, 13}, 1}, {
        "IT'S YOUR BANK AS WELL AS MINE ISN'T IT.", {11, 15, 1, 12, 12, 12, 
         12, 12, 15, 2, 11, 13}, 0}, {
        "VASQUEZ HOW YOU DOING.", {12, 12, 11, 15, 13}, 1}, {
        "YOU DON'T LIKE ME.", {11, 15, 2, 10, 7, 13}, 0}, {
        "PHILIP SWANN.", {12, 12, 13}, 0}, {
        "THE POLICE ALWAYS DO DON'T THEY.", {4, 12, 12, 12, 12, 2, 12, 13}, 
         0}, {"PEOPLE ARE GONNA BE THINKING THE YOUNGER JAMES GANG.", {12, 15,
          12, 12, 15, 15, 4, 1, 12, 12, 13}, 0}, {
        "SO WHY ISN'T IT ALL BLOODY.", {12, 2, 15, 2, 11, 7, 7, 13}, 1}, {
        "IS THAT ALL THERE IS.", {15, 4, 7, 7, 15, 13}, 0}, {
        "THEN WE'LL GO DANCIN' OKAY.", {2, 12, 12, 12, 12, 12, 13}, 0}, {
        "YOU'RE NOT FROM L.A. HUH.", {11, 15, 2, 10, 12}, 0}, {
        "WHY DIDN'T YOU SAY SOMETHING.", {2, 12, 2, 11, 15, 7, 13}, 1}, {
        "WITH ID AND A GUN....", {10, 7, 3, 4, 7, 13}, 0}, {
        "WHAT IS HE -- MUSCLEMAN.", {4, 15, 11, 13, 12, 13}, 1}, {
        "WHAT'S WRONG DID YOU MISS ME.", {4, 15, 1, 7, 11, 15, 7, 13}, 1}, {
        "WHAT'S A TREE.", {4, 15, 4, 7, 13}, 1}, {
        "- WHERE THAT COME FROM.", {13, 7, 4, 15, 7, 13}, 1}, {
        "YOU'RE BACK AGAIN HUH.", {11, 15, 2, 2, 12, 13}, 0}, {
        "PROFESSIONALLY.", {2, 13}, 0}, {
        "ABOUT THE DUMPER DIDN'T HE TELL YOU THAT.", {10, 4, 7, 15, 2, 11, 15,
          11, 4, 13}, 0}, {
        "KEEPING YOURSELF OUT OF JAIL.", {12, 12, 12, 10, 12, 13}, 0}, {
        "WHAT ABOUT THE CAPTAIN.", {4, 12, 4, 7, 13}, 1}, {
        "WHAT IS IT THE STAIRS.", {4, 15, 11, 4, 7, 13}, 1}, {
        "WHAT OF THE REPORTS OF THE REBEL FLEET MASSING NEAR SULLUST.", {4, 
         10, 4, 7, 10, 4, 7, 7, 15, 10, 7, 13}, 1}, {
        "TWO YEARS AGO.", {8, 7, 2, 13}, 0}, {
        "PERHAPS A LITTLE REFRESHMENT FIRST.", {2, 4, 1, 12, 12, 13}, 0}, {
        "THEN WHAT CAN I DO FOR YOU.", {2, 4, 12, 11, 15, 10, 11, 13}, 1}, {
        "HAVE THEY QUESTIONED YOU YET SID.", {15, 12, 15, 11, 2, 12, 13}, 
         0}, {"WELL DOES MARCUS HAVE AN ALIBI.", {12, 12, 12, 12, 4, 12, 13}, 
         0}, {"WHO WOULD EVEN KNOW TO DO THIS.", {11, 15, 12, 12, 10, 12, 12, 
         13}, 1}, {"HE WAS HERE.", {11, 15, 2, 13}, 0}, {
        "KEEPING A STIFF UPPER LIP.", {15, 4, 1, 12, 7, 13}, 0}, {
        "YOU KNOW WHAT HAPPENED TO THE TOWER OF BABEL DON'T YOU.", {11, 15, 4,
          15, 10, 4, 7, 10, 12, 12, 2, 11, 13}, 1}, {
        "YOU MEAN BESIDES THE WARRANT OUT ON US FOR BLOWING UP OUR COMMANDING \
OFFICER.", {11, 15, 10, 4, 12, 12, 12, 12, 10, 12, 9, 12, 12, 7, 13}, 0}, {
        "HOW ABOUT YOU TWO HIT THE STRIP AND START KNOCKING SOME HEADS \
TOGETHER.", {12, 12, 11, 8, 12, 4, 7, 3, 12, 12, 12, 15, 2, 13}, 1}, {
        "HOW LONG AGO DID THIS GUY RETIRE.", {12, 12, 12, 12, 12, 12, 15, 13},
          1}, {"WHAT HAVE I DONE.", {4, 7, 11, 15, 13}, 1}, {
        "WILL YOU TAKE IT EASY.", {15, 11, 15, 11, 7, 13}, 0}, {
        "WHO THE FUCK ARE YOU DR. JOYCE BROTHERS.", {11, 4, 7, 15, 11, 12, 12,
          12, 13}, 1}, {"IT NEEDS BLOOD.", {11, 15, 7, 13}, 0}, {
        "WHAT HAPPENS WHEN HE DIES.", {4, 15, 2, 11, 15, 13}, 1}, {
        "YOU REALLY THINK YOU'LL BE ABLE TO FOOL A JURY WITH THIS BULLSHIT.", \
{11, 2, 15, 11, 7, 15, 1, 10, 7, 7, 7, 10, 7, 12, 13}, 0}, {
        "IF YA WAS WANTIN' MY HELP WHY DIDN'T YA ASK.", {10, 12, 12, 12, 12, 
         12, 2, 12, 2, 12, 12, 13}, 1}, {
        "HOW DO YOU KNOW THIS.", {12, 12, 11, 15, 7, 13}, 1}, {
        "IS THAT A BEASTLY THING TO SAY.", {15, 4, 4, 1, 7, 10, 12, 13}, 0}, {
        "HEY WHERE'S THE FIRE SISTER.", {12, 12, 4, 7, 7, 13}, 1}, {
        "WHAT'S YOUR AIR READING.", {4, 15, 1, 12, 7, 13}, 1}, {
        "HAVE YOU HEARD THE TERMS OF THE SEVENTEEN POINT AGREEMENT.", {15, 11,
          15, 4, 7, 10, 4, 8, 1, 7, 13}, 0}, {
        "IS THAT AN OFFER.", {15, 4, 4, 7, 13}, 0}, {
        "YOU COULD LIFT ME IN YOUR BIG STRONG ARMS.", {11, 15, 15, 12, 10, 1, 
         12, 1, 7, 13}, 0}, {"THE BLAST.", {4, 7, 13}, 0}, {
        "YOU NEVER HEARD OF PHYSICS EINSTEIN.", {11, 2, 15, 10, 12, 12, 13}, 
         0}, {"CAN YOU DRIVE ME BACK NOW.", {12, 11, 15, 2, 2, 2, 13}, 0}, {
        "TWOMBLEY.", {12, 13}, 0}, {
        "AND WHAT IF I TRANQ HIM KELLY.", {3, 4, 10, 11, 15, 12, 12, 13}, 
         1}, {"WE CANNOT DEFEAT THIS -- PEACE.", {12, 12, 12, 12, 12, 13, 7, 
         13}, 0}, {"ARE YOU OKAY WADE.", {15, 11, 1, 7, 13}, 0}, {
        "HOW ABOUT SOME AMMO.", {12, 12, 12, 12, 13}, 1}, {
        "DOES THAT WORK.", {7, 4, 15, 13}, 0}, {
        "HOW THE HELL DID HE GET AWAY.", {12, 4, 7, 7, 11, 15, 2, 13}, 1}, {
        "EXCUSE ME SKIPPER--- WHAT ABOUT TIME....", {15, 12, 12, 13, 4, 12, 7,
          13}, 1}, {"SEE THAT PATCH OF SHIRT.", {15, 4, 7, 10, 12, 13}, 0}, {
        "DID YOU HAVE A PLEAANT FLIGHT.", {12, 11, 15, 4, 1, 7, 13}, 0}, {
        "DO YOU HAVE YOUR OWN CELL.", {15, 11, 15, 1, 7, 7, 13}, 0}, {
        "YOU SELL MUCH OUT HERE.", {11, 15, 12, 12, 2, 13}, 0}, {
        "WHAT WAS SHE DOING IN YOUR APARTMENT.", {4, 15, 12, 12, 10, 1, 7, 
         13}, 1}, {
        "YOU'LL GET PICKED UP.  RIGHT.", {11, 15, 15, 15, 9, 13}, 0}, {
        "WHAT IS NOT GOOD TO YOU.", {4, 15, 2, 1, 10, 11, 13}, 1}, {
        "DIDN'T THEY DUFFY.!", {12, 2, 12, 12, 13, 13}, 0}, {
        "NOW WHO ELSE.", {2, 11, 2, 13}, 1}, {
        "WHEN SHE WAS WILLING TO SACRIFICE US ALL.", {2, 12, 12, 12, 10, 15, 
         12, 7, 13}, 1}, {
        "YOU'VE GOT A COMEBACK FOR EVERYTHING DON'T YOU DANNY.", {11, 15, 12, 
         12, 12, 10, 12, 12, 2, 11, 12, 13}, 0}, {
        "GONNA KILL US ALL, IS THAT IT.", {12, 12, 12, 12, 7, 13, 15, 4, 11, 
         13}, 0}, {
        "NOW I'M WORKING THE DROP CAR.", {2, 11, 15, 15, 4, 7, 7, 13}, 0}, {
        "IS IT BEAUTIFUL.", {15, 11, 7, 13}, 0}, {
        "I'M ASSUMING THAT'S WHAT MADE HIM THE DEAD ONE.", {11, 15, 15, 4, 15,
          4, 12, 12, 4, 1, 8, 13}, 1}, {
        "PERMISSION TO LEAVE SIR.", {7, 10, 15, 7, 13}, 0}, {
        "WHERE IS HIS HOME LEX LUTHOR.", {15, 15, 11, 12, 12, 12, 13}, 1}, {
        "WHY THEY GOTTA MAKE MY NOSE SO BIG.", {2, 12, 15, 12, 15, 12, 12, 12,
          12, 13}, 1}, {
        "THAT MAKES IT ALL THE MORE DIFFICULT \.97\.97 HAVE YOU ANY OTHER \
RELATIVES MARY.", {4, 15, 11, 7, 4, 1, 7, 13, 13, 15, 11, 12, 12, 12, 12, 13},
          0}, {"AGRIPPA.", {12, 13}, 0}, {"THE DOLL.", {4, 7, 13}, 0}, {
        "REALLY THINK SO.", {12, 12, 12, 13}, 0}, {
        "DID YOU JUST ASK ME WHAT'S A NEGRO.", {12, 11, 2, 15, 7, 4, 15, 4, 7,
          13}, 1}, {
        "WHAT DO WE HAVE TO DO.", {4, 12, 12, 12, 10, 12, 13}, 1}, {
        "DID THE RANCHER FUCK YOU.", {12, 4, 7, 7, 11, 13}, 0}, {
        "JUST BECAUSE I DRESS WELL AND LIKE TO DANCE -- IS THERE SOMETHING \
ABOUT FLAMES.", {2, 10, 11, 15, 2, 3, 10, 10, 12, 13, 15, 12, 12, 12, 12, 13},
          0}, {"HOW'S OUR DEAL COMING ALONG.", {12, 12, 12, 12, 12, 13}, 1}, {
        "YOU HAVE ANY KIDS.", {11, 15, 12, 12, 13}, 0}, {
        "WHAT DO YOU FEAR.", {4, 12, 11, 7, 13}, 1}, {
        "CAN YOU MAKE IT THAT FAR.", {12, 11, 15, 11, 4, 2, 13}, 0}, {
        "WHAT DYA MEAN.", {4, 12, 7, 13}, 1}, {
        "HOW COULD IT BE A CHARADE.", {12, 12, 12, 15, 4, 7, 13}, 1}, {
        "BUT WHAT IS THE REAL ISSUE HERE.", {12, 4, 15, 4, 1, 7, 2, 13}, 1}, {
        "NOW WHY CAN'T I TELL THE STORY.", {2, 2, 12, 2, 11, 15, 4, 7, 13}, 
         1}, {"A PSYCHIATRIST.", {4, 7, 13}, 0}, {
        "HOW TERRIBLE CAN IT BE.", {12, 12, 12, 12, 15, 13}, 1}, {
        "STAKE YOU.", {15, 11, 13}, 0}, {
        "CAN YOU FIX IT.", {12, 11, 15, 11, 13}, 0}, {
        "MANTAN IT IS POSSIBLE THAT MY HYPHENATED SENTENCES ARE ENTIRELY TOO \
COMPLEX FOR ALL THE INTELLECT CONTAINED IN THAT DIMINUTIVE COCONUT.", {12, 12,
          15, 1, 4, 12, 12, 12, 15, 2, 2, 12, 10, 7, 4, 7, 15, 10, 4, 12, 12, 
         13}, 0}, {
        "THAT IT ALL SOUNDS MYSTERIOUS.", {4, 11, 7, 15, 1, 13}, 0}, {
        "I DON'T KNOW 14000 A KILO.", {11, 15, 2, 12, 8, 4, 7, 13}, 0}, {
        "YOU SURE YOU'VE LEFT NOTHING OUT.", {11, 15, 11, 15, 12, 12, 12, 13},
          0}, {"HAVE YOU PULLED YOURSELF TOGETHER.", {15, 11, 15, 12, 2, 13}, 
         0}, {"DON'T YOU REMEMBER.", {7, 2, 11, 15, 13}, 0}, {
        "BOYS.", {7, 13}, 0}, {
        "WHERE'D YOU GET THEM.", {15, 12, 11, 15, 7, 13}, 1}, {
        "WHAT IS THE POINT IN THAT.", {4, 15, 4, 1, 10, 4, 13}, 1}, {
        "OH GOD WHY.", {7, 7, 2, 13}, 1}, {"GOING NORTH.", {1, 12, 13}, 0}, {
        "YOU TWO ARE GONNA HELP ME TAME THE WILD BEAST.", {11, 8, 15, 12, 12, 
         12, 12, 12, 4, 1, 7, 13}, 0}, {
        "BUT LOOK -- AN EMPTY TOMB.", {12, 12, 13, 4, 12, 7, 13}, 0}, {
        "DOESN'T THE DREAM MASTER WORK FOR YOU ANYMORE.", {7, 2, 4, 7, 7, 15, 
         10, 11, 2, 13}, 0}, {
        "WHILE YOU'RE WAITING FOR YOUR FRIEND WOULD YOU LIKE TO SEE SOME NEW \
FIGURES I HAVE DOWNSTAIRS.", {10, 11, 15, 12, 10, 1, 7, 15, 11, 10, 10, 15, 
         12, 12, 7, 11, 15, 7, 13}, 0}, {
        "WHERE THE FUCK ARE THEY GOING.", {15, 4, 7, 15, 7, 7, 13}, 1}, {
        "THAT'S THE KIND OF MONEY IT TAKES ISN'T IT.", {4, 15, 4, 7, 10, 7, 
         11, 15, 15, 2, 11, 13}, 0}, {
        "EVERYONE SAYS THIS IS A BIG ACCIDENT.", {7, 15, 12, 15, 4, 12, 12, 
         13}, 0}, {"IS IT YES.", {15, 11, 7, 13}, 0}, {
        "WHERE ARE THEY THEN.", {15, 15, 7, 2, 13}, 1}, {
        "NO ROSE JESUS NO -- DO YOU HAVE ANY CHILDREN WITH ANYONE.", {7, 15, 
         12, 7, 13, 12, 11, 15, 12, 7, 10, 7, 13}, 0}, {
        "DALUTAN! ...'SCUSE ME.", {12, 13, 13, 13, 15, 7, 13}, 0}, {
        "TIRING ISN'T IT.", {15, 15, 2, 11, 13}, 0}, {
        "THIS PACKAGE WHATEVER IT IS DO YOU GIVE IT TO THE CIA.  DO YOU \
REALLY THINK THEY DESERVE IT.", {12, 12, 12, 12, 15, 12, 11, 15, 11, 10, 4, 
         12, 13, 15, 11, 2, 15, 12, 12, 12, 13}, 1}, {
        "WHERE'D THEY COME FROM.", {15, 12, 12, 12, 12, 13}, 1}, {
        "IT'S PAY DAY AIN'T IT.", {11, 15, 7, 7, 7, 2, 11, 13}, 0}, {
        "WHERE ARE YOUR FOLKS.", {15, 15, 1, 7, 13}, 1}, {
        "HONEY'S DEAD.", {7, 7, 13}, 0}, {
        "YOU'RE POLISH.", {11, 15, 7, 13}, 0}, {
        "WHAT KIND OF FILES.", {4, 12, 10, 12, 13}, 1}, {
        "DO ME.", {12, 12, 13}, 0}, {
        "DON'T YOU KNOW WHAT CAEN'S FAMOUS FOR SARGE.", {7, 2, 11, 15, 4, 12, 
         12, 10, 12, 13}, 1}, {
        "HOW 'BOUT THIS ONE.", {12, 13, 12, 12, 8, 13}, 1}, {
        "WHAT'S THE OCCASION.", {4, 15, 4, 7, 13}, 1}, {
        "HE'S A GUEST IN MY HOUSE ISN'T HE.", {11, 15, 4, 7, 10, 12, 12, 15, 
         2, 11, 13}, 0}, {
        "YOU'RE NOT GONNA STAY FOR THE ICE CREAM.", {11, 15, 2, 12, 12, 12, 
         10, 4, 7, 7, 13}, 0}, {
        "BOY YOU GUYS ARE REALLY SOMETHING Y'KNOW.", {7, 11, 15, 15, 12, 12, 
         12, 12, 13}, 0}, {
        "WHAT ARE YOU WAITING FOR.", {4, 15, 11, 15, 10, 13}, 1}, {
        "WHAT BUSINESS IS YOU IN JACK.", {4, 12, 15, 11, 10, 12, 13}, 1}, {
        "YOU BURN YOU PINE YOU PERISH.", {11, 15, 11, 15, 11, 15, 13}, 0}, {
        "NOW HOW SMART IS THAT.", {2, 12, 12, 15, 4, 13}, 1}, {
        "EDDIE ARE YOU OKAY.", {12, 15, 11, 1, 13}, 0}, {
        "NOT YET -- GIVE YOU THE CLUE FOR THE BUST IF YOU SHOW ME SOME TRUST \
-- OH YOU'RE A RAPPER HUH.", {12, 12, 13, 15, 11, 4, 7, 10, 4, 7, 10, 11, 15, 
         12, 12, 12, 13, 7, 11, 15, 4, 7, 12, 13}, 1}, {
        "IS THAT A TRICK QUESTION.", {15, 4, 4, 7, 7, 13}, 0}, {
        "WHAT POINT IS THAT.", {4, 1, 15, 4, 13}, 1}, {
        "IT ISN'T RAPE THEN IS IT.", {11, 15, 2, 7, 2, 15, 11, 13}, 0}, {
        "ANY SORT OF ABUSE.", {12, 12, 10, 7, 13}, 0}, {
        "COOPER TRUST ROBBERY.", {12, 12, 12, 13}, 0}, {
        "YOU THINK FOR ONCE WE COULD TALK ABOUT SOMETHING BESIDES \
BASKETBALL.", {11, 15, 10, 2, 1, 12, 12, 12, 12, 10, 7, 13}, 0}, {
        "OR DO YOU THINK YOU CAN FIND THE AIRPORT BY YOURSELF.", {7, 7, 11, 
         15, 11, 12, 12, 4, 12, 12, 12, 13}, 0}, {
        "WHAT DO YOU REMEMBER ABOUT THAT -- DUMPER.", {4, 12, 11, 15, 10, 4, 
         13, 7, 13}, 1}, {
        "HAVE A SNIFF OF THIS WHY DON'T YOU.", {15, 4, 7, 10, 12, 2, 12, 2, 
         11, 13}, 1}, {"PIMPS.", {7, 13}, 0}, {
        "HOW OLD. ...WHAT.", {12, 12, 13, 13, 13}, 1}, {
        "YOU GOT SOMETHIN' AGAINST THE CAP'N.", {11, 15, 12, 12, 4, 7, 13}, 
         0}, {"WHY'D YOU DO THAT.", {2, 12, 11, 15, 4, 13}, 1}, {
        "YOU HAVE SOMETHING DR. WEIR.", {11, 15, 12, 12}, 0}, {
        "YOU THINK I'M SILLY DON'T YOU.", {11, 15, 11, 15, 1, 7, 2, 11, 13}, 
         0}, {"WHAT DO MY EYES SEE.", {4, 12, 12, 12, 15, 13}, 1}, {
        "BUT WHAT BECAME OF YOUR LAMB.", {12, 4, 15, 10, 1, 7, 13}, 1}, {
        "WHAT'S HERE.", {4, 15, 2, 13}, 1}, {
        "IS DETECTIVE GORDON GOING TO BE AT YOUR HOUSE.", {15, 12, 12, 12, 10,
          15, 10, 1, 12, 13}, 0}, {"WHAT HAPPENS HERE.", {4, 15, 2, 13}, 1}, {
        "WHY DON'T YOU HAVE MORE TIME.", {2, 12, 2, 11, 15, 1, 7, 13}, 1}, {
        "-- DO YOU WANNA CUP.", {13, 7, 11, 15, 12, 12, 13}, 0}, {
        "HUH...", {12, 13}, 0}, {
        "NOW DARLIN' WHAT HAS THE SOUTH GOT TO DO WITH THIS.", {12, 12, 4, 15,
          4, 1, 12, 10, 12, 10, 7, 13}, 1}, {
        "UH YEAH COOP I'M STILL HERE. ...DO YOU COPY.", {12, 12, 12, 11, 15, 
         2, 2, 13, 13}, 0}, {"SO...THE STATION IS EMPTY.", {12, 13}, 0}, {
        "HAVE THEY LOCATED MY DAUGHTER YET.", {15, 12, 12, 12, 12, 12, 13}, 
         0}, {"MAY I SPEAK FREELY.", {12, 11, 15, 2, 13}, 0}, {
        "JASON WHAT HAVE YOU GOTTEN US INTO.", {12, 4, 12, 11, 15, 12, 12, 
         13}, 1}, {"NIGHTCAP.", {7, 13}, 0}, {
        "WHAT HAPPEND TO YOU.", {4, 12, 10, 11, 13}, 1}, {
        "ON THE DAY OF THE MURDERS  WHAT DID THE DEFENDANT REQUEST.", {10, 4, 
         7, 10, 4, 7, 4, 15, 4, 7, 7, 13}, 1}, {
        "ARE YOU DEAF TOO.", {15, 11, 1, 7, 13}, 0}, {
        "HOW COME YOU TOOK SO MUCH INTEREST IN HER DR. DARLING.", {12, 12, 11,
          15, 12, 12, 7, 10, 12, 12, 12, 13}, 1}, {
        "THEN WHAT ARE YOU DOING HERE.", {2, 4, 15, 11, 15, 2, 13}, 1}, {
        "LONG ENOUGH FOR YOU TO PRETTY MUCH READ ME LIKE A BOOK RIGHT.", {12, 
         12, 10, 11, 10, 12, 12, 12, 12, 12, 12, 12, 12, 13}, 0}, {
        "SO WHAT DEAD-END STREET DID YOU AND SHAWNEE HIT.", {12, 4, 1, 12, 12,
          11, 3, 12, 12, 13}, 1}, {
        "WANT TO REGISTER PLEASE.", {1, 10, 12, 12, 13}, 0}, {
        "FLEA.", {7, 13}, 0}, {
        "IF SHE HAD WHAT REASON WOULD SHE HAVE FOR NOT CALLING YOU.", {10, 12,
          12, 4, 12, 12, 12, 12, 10, 12, 12, 11, 13}, 1}, {
        "YOU'RE GOING TO GET YOURSELF UP AND GO OUT.", {11, 15, 1, 10, 15, 1, 
         7, 3, 7, 7, 13}, 0}, {
        "ARE YOU TWO ALL RIGHT.", {15, 11, 8, 7, 7, 13}, 0}, {
        "WHAT SIR.", {4, 7, 13}, 1}, {
        "IS THAT A GOOD SIGN DOCTOR.", {15, 4, 4, 1, 7, 7, 13}, 0}, {
        "WHERE'S THE HANDLE.", {7, 4, 7, 13}, 1}, {
        "BUT WHAT ARE YOU DOING MIXED UP IN ALL THIS.", {12, 4, 15, 11, 15, 
         15, 9, 10, 7, 7, 13}, 1}, {
        "NOW...WHEN DO I GET A TASTE.", {2, 13, 13}, 1}, {
        "YOU WROTE IT DIDN'T YOU.", {11, 15, 11, 15, 2, 11, 13}, 0}, {
        "MARK ARE YOU OKAY.", {12, 15, 11, 1, 13}, 0}, {
        "IS IT TRUE THE MOST YOU'VE EVER MADE IN A PRIZEFIGHT IS FIVE HUNDRED \
DOLLARS.", {15, 11, 1, 4, 1, 11, 15, 2, 15, 10, 4, 12, 15, 8, 15, 12, 13}, 
         0}, {"HOW LONG THEY BEEN LIVIN' HERE.", {12, 12, 12, 12, 12, 2, 13}, 
         1}, {"DOES THAT SCARE YOU.", {7, 4, 15, 11, 13}, 0}, {
        "BAUMGARTNER SOUND IRISH TO YOU FUCK FACE.", {12, 12, 12, 10, 11, 15, 
         7, 13}, 0}, {
        "WHY DIDN'T YOU TELL US ALL THIS IN THE FIRST PLACE.", {2, 12, 2, 11, 
         15, 12, 7, 15, 10, 4, 12, 7, 13}, 1}, {
        "WE'RE IN.", {12, 12, 10, 13}, 0}, {
        "NO SIR-- PRIVATE JOHNSON ARE YOU UNHAPPY IN THE ARMY.", {7, 7, 13, 
         12, 12, 15, 11, 1, 10, 4, 7, 13}, 0}, {
        "YOU MEAN YOU'VE ACTUALLY BEGUN SOME.", {11, 15, 11, 15, 12, 12, 12, 
         13}, 0}, {
        "DON'T YOU REALIZE YOUR WORDS COULD BE CONSIDERED HERETICAL.", {7, 2, 
         11, 15, 1, 7, 15, 15, 15, 1, 13}, 0}, {
        "HOW DO I GET IN TOUCH WITH YOU.", {12, 12, 11, 15, 10, 7, 10, 11, 
         13}, 1}, {
        "IS YOUR FAMILY IN THE APPLE BUSINESS TOO.", {15, 1, 7, 10, 4, 12, 12,
          12, 13}, 0}, {"YOU'RE WHAT.!", {11, 15, 4, 13}, 1}, {
        "BUT IF THEY <U>DO</U>.", {12, 10, 12, 12, 12, 12, 13}, 0}, {
        "YES THEY DO, THEY DO, BUT I'LL MAKE MY DREAMS COME TRUE, YOU SEE.", {
         12, 12, 12, 13, 12, 12, 13, 12, 11, 15, 15, 7, 7, 15, 1, 13, 11, 15, 
         13}, 0}, {"YELLO.", {12, 13}, 0}, {
        "THAT REALLY HAPPENED.", {4, 1, 7, 13}, 0}, {
        "SHE'S ALIVE.", {12, 12, 13}, 0}, {
        "YOU WANT TO HAVE KIDS WITH HIM.", {11, 15, 10, 12, 12, 10, 12, 13}, 
         0}, {"WE FINISHED THE COURSE AND CAME HERE THEN HEARD AN EXPLOSION \
--  WHERE'S PIKE.", {12, 12, 4, 12, 3, 12, 2, 2, 15, 4, 12, 13, 15, 12, 13}, 
         1}, {"CAN I SEE YOUR SECURITY BADGES.", {12, 11, 15, 1, 7, 7, 13}, 
         0}, {"IS IT GASSED UP.", {15, 11, 15, 9, 13}, 0}, {
        "WHAT ABOUT A DRINK ON THE WAY HOME.", {4, 10, 4, 7, 10, 4, 12, 12, 
         13}, 1}, {
        "YOU WOKE ME UP TO TELL ME THAT.", {11, 15, 12, 9, 10, 12, 12, 4, 13},
          0}, {"OH YEAH HOW.", {7, 7, 7, 13}, 1}, {
        "DON'T YOU CARE WHAT THE PEOPLE WILL SAY.", {7, 2, 11, 12, 4, 4, 12, 
         15, 15, 13}, 1}, {
        "IN VIEW OF YOUR INDECISION WHY NOT RELY ON THEIR ADVICE AND JUDGMENT \
AS WELL AS MINE.", {10, 12, 10, 1, 7, 2, 12, 12, 12, 12, 12, 3, 12, 12, 12, 
         12, 12, 13}, 1}, {"YOU A SENIOR.", {11, 4, 1, 13}, 0}, {
        "HOW DO WE DO THIS THEN.", {12, 12, 12, 12, 12, 2, 13}, 1}, {
        "ALL IT TAKES IS ONE SECOND.", {7, 11, 15, 15, 8, 7, 13}, 0}, {
        "DID YOU CALL THE COPS.", {12, 11, 1, 4, 7, 13}, 0}, {
        "FOUR DOOR.", {8, 7, 13}, 0}, {
        "WHATTA YOU GET OUTTA THIS. ...I'M DOIN' IT FOR A FRIEND.", {12, 11, 
         15, 1, 7, 13, 13, 11, 15, 7, 13, 11, 10, 4, 7, 13}, 1}, {
        "SO ARE YOU LIKE GONNA POLISH OUR NOBS OR WHAT.", {12, 15, 11, 10, 12,
          12, 12, 12, 12, 7, 4, 13}, 1}, {"YES CAPTAIN.", {2, 7, 13}, 0}, {
        "THEY DON'T.", {12, 12, 2, 13}, 0}, {
        "I'M NOT SURE I HEAR A QUESTION IN THERE.", {11, 15, 2, 1, 11, 15, 4, 
         7, 10, 7, 13}, 0}, {
        "WHERE'D YOU GET IT.", {15, 12, 11, 15, 11, 13}, 1}, {
        "MAKING A LOT OF MONEY HUH.", {15, 4, 7, 10, 7, 12, 13}, 0}, {
        "MUFFY -- COFFEE.", {12, 13, 7, 13}, 0}, {
        "BUSY WHEN YOU WERE GONE LAST YEAR -- WHERE WERE YOU.", {1, 2, 11, 15,
          12, 12, 12, 13, 12, 15, 11, 13}, 1}, {
        "I'II GO....IS IT...BACK HERE.", {11, 13, 8, 7, 13}, 0}, {
        "THEN WHY CAN'T I GO IN THERE.", {2, 2, 12, 2, 11, 15, 10, 7, 13}, 
         1}, {"DID YOU MAKE THOSE INQUIRIES WE SPOKE ABOUT. ...AS I SAID IT'S \
ONLY A PHYSICAL PROBLEM...", {12, 11, 15, 4, 12, 12, 12, 12, 13, 13, 10, 11, 
         15, 11, 15, 12, 12, 12, 7, 13}, 0}, {
        "WE CHANGE THE SCAM.", {12, 12, 4, 7, 13}, 0}, {
        "YOU THINK MAGRUDER WANTS TO HANG BESIDE ME.", {11, 15, 12, 12, 10, 
         15, 10, 7, 13}, 0}, {"MR. PIZZA.", {12, 12, 13}, 0}, {
        "YOU DON'T KNOW ANY WAY YOU'LL TRUST ME.", {11, 15, 2, 12, 12, 12, 11,
          15, 7, 7, 13}, 0}, {
        "IT'S A ZOO BACK THERE -- IS THAT WHY YOU DID IT.", {11, 15, 4, 7, 2, 
         15, 13, 15, 4, 2, 11, 15, 11, 13}, 1}, {
        "CAN YOU CONFIRM VISUALLY OR JUST RADAR.", {12, 11, 15, 2, 7, 2, 7, 
         13}, 0}, {
        "IF HIS FRIENDS DON'T HELP HIM WHO IS GOING TO HELP HIM.", {10, 11, 7,
          15, 2, 15, 12, 11, 15, 12, 10, 15, 7, 13}, 1}, {
        "WHY DOES IT ALL MEAN SO MUCH TO YOU.", {2, 15, 11, 7, 7, 2, 12, 10, 
         11, 13}, 1}, {"THIS IS -- WHAT.", {12, 15, 13, 4, 13}, 1}, {
        "YOU STILL WANT TO GO TO ASGAARD.", {11, 2, 15, 10, 12, 10, 12, 13}, 
         0}, {"WHAT TIME ARE WE SUPPOSED TO GET TO THE HOTEL.", {4, 12, 15, 1,
          1, 10, 15, 10, 4, 7, 13}, 1}, {
        "ROSE WHO WERE THOSE SCOUNDRELS IN BIRMINGHAM.", {12, 11, 15, 4, 12, 
         10, 12, 13}, 1}, {
        "JUST WHAT ARE YOU UP TO.", {2, 4, 15, 11, 9, 10, 13}, 1}, {
        "LLOYD HONEY JUST COME HOME OKAY.", {12, 12, 2, 15, 12, 12, 13}, 0}, {
        "CONINUED WELL WHAT IS IT.", {12, 12, 4, 15, 11, 13}, 1}, {
        "HOW IS IT YOU COME TO BE HERE.", {12, 15, 11, 11, 15, 10, 15, 2, 13},
          1}, {"WILL YOU SHUT UP!.!!", {15, 11, 15, 9, 13, 13, 13}, 0}, {
        "WHAT ABOUT MARGO WEST.", {4, 12, 12, 12, 13}, 1}, {
        "YOU CAN SEE WHY IT'S SENSITIVE.", {11, 15, 15, 2, 11, 15, 12, 13}, 
         1}, {"DID YA WIN.", {12, 12, 12, 13}, 0}, {"BANK.", {12, 13}, 0}, {
        "DO YOU HAVE THE SUSPECT IN CUSTODY.", {15, 11, 15, 4, 1, 10, 7, 13}, 
         0}, {"WORK RELATED OR OTHERWISE.", {15, 12, 7, 12, 13}, 0}, {
        "SO THAT'S ALL YOU DO....", {12, 4, 15, 7, 11, 15, 13}, 0}, {
        "MORNING AFTER. ...I'M AT LEAST HALF A BUM.", {15, 7, 13, 13, 11, 15, 
         10, 12, 12, 12, 12, 13}, 0}, {
        "YOU DON'T WONDER THAT.", {11, 15, 2, 12, 4, 13}, 0}, {
        "WHAT MAKES YOU THINK YOU CAN ORDER ME AROUND.", {4, 15, 11, 15, 11, 
         12, 12, 12, 12, 13}, 1}, {
        "WHY ADD TO YOUR MISERY BY CONFESSING TO MURDER.", {2, 12, 10, 1, 7, 
         10, 15, 10, 7, 13}, 1}, {
        "WHY DIDN'T YOU CALL IN FOR BACKUP INSTEAD OF MAKIN' A GRANDSTAND \
PLAY.", {2, 12, 2, 11, 1, 10, 10, 7, 2, 10, 12, 4, 7, 7, 13}, 1}, {
        "AND WHEN THE OTHER RABBITS HEAR OF FIVER'S VISION DO THEY BELIEVE \
HIM.", {3, 2, 4, 1, 7, 15, 10, 12, 12, 12, 12, 12, 12, 13}, 1}, {
        "ME I'M KINDA AGGRAVATED. ...FINE. ...HOW'S THE TURTLE FOOD THIS \
WEEK.", {7, 8, 15, 12, 12, 13, 13, 13}, 1}, {
        "ON WHAT GROUNDS.", {10, 4, 7, 13}, 1}, {
        "HOW ABOUT THIS CHILD.", {12, 12, 12, 7, 13}, 1}, {
        "HOW CAN THEY KNOW ANY OF THAT.", {12, 12, 12, 12, 12, 10, 4, 13}, 
         1}, {"ANYWAY WHAT THE FUCK DO YOU CARE.", {2, 4, 4, 7, 7, 11, 12, 
         13}, 1}, {
        "WELL THAT'S WHAT YOU THINK ISN'T IT.", {12, 4, 15, 4, 11, 15, 15, 2, 
         11, 13}, 1}, {"ANYBODY SEE MY BOY.", {7, 15, 7, 7, 13}, 0}, {
        "MAY WE PROCEED WITH THE BUSINESS.", {12, 12, 12, 10, 4, 7, 13}, 0}, {
        "THAT BUGS YOU TOO.", {4, 7, 11, 2, 13}, 0}, {
        "WHERE THE FUCK ARE YOU GOING.", {15, 4, 7, 15, 11, 1, 13}, 1}, {
        "WHAT THE FUCK POSSESSED YOU.", {4, 4, 12, 15, 11, 13}, 1}, {
        "SHE IS NOT DEAD.", {12, 15, 12, 12, 13}, 0}, {
        "WHAT GAPS.", {4, 7, 13}, 1}, {
        "Y'KNOW TO MAKE IT SO LONG.", {12, 12, 10, 15, 11, 12, 12, 13}, 0}, {
        "YOU BELIEVE ME DON'T CHA.", {11, 15, 7, 7, 2, 12, 13}, 0}, {
        "YOU LIKE THE CAR.", {11, 10, 4, 7, 13}, 0}, {
        "ROSE ROSE.", {12, 12, 13}, 0}, {
        "WHAT DO YOU WANT TO DO WITH IT.", {4, 12, 11, 15, 10, 12, 10, 11, 
         13}, 1}, {
        "I DON'T KNOW YOU THINK EDDIE WILL GIVE ME HIS AUTOGRAPH.", {11, 15, 
         2, 12, 11, 15, 12, 15, 15, 7, 11, 7, 13}, 0}, {
        "WHAT TERRIBLE THING IN CAVE SPRINGS.", {4, 1, 7, 10, 12, 12, 13}, 
         1}, {"HOW'D IT GO IN THERE.", {12, 12, 12, 12, 10, 12, 13}, 1}, {
        "A MAN OR A MOUSE.", {4, 7, 7, 7, 7, 13}, 0}, {
        "IS SHE AROUND.", {15, 12, 12, 13}, 0}, {
        "JACK'S PRETTY TOUGH ON YOU ISN'T HE.", {7, 2, 1, 10, 11, 15, 2, 11, 
         13}, 0}, {
        "AND DO WE HAVE ANY OF THAT BREAKFAST TEA AROUND HERE.", {3, 12, 12, 
         12, 12, 10, 4, 7, 7, 10, 2, 13}, 0}, {
        "YOU MEAN RAY DUNBAR.", {11, 15, 12, 12, 13}, 0}, {
        "WHAT VARIABLES.", {4, 7, 13}, 1}, {
        "WHERE ARE MY GODDAMN BOOKS.", {15, 15, 7, 1, 7, 13}, 1}, {
        "OH -- WELL I THOUGHT HE ONCE MENTIONED -- WHY WOULD YOU SUPPOSE \
SO.", {7, 13, 7, 11, 15, 11, 2, 15, 13, 2, 12, 11, 15, 2, 13}, 1}, {
        "WHAT ARE YOU NUTS.", {4, 15, 11, 7, 13}, 1}, {
        "THAT THE BIG PLAN.", {4, 4, 12, 7, 13}, 0}, {
        "A LITTLE.", {4, 7, 13}, 0}, {
        "WHAT'S TO EAT.", {4, 15, 10, 15, 13}, 1}, {
        "THEY WILL SEND A NURSE SOMEONE WHO CAN TAKE CARE OF ALL OF THAT FOR \
YOU -- I JUST I JUST -- I JUST -- I'M JUST IN A FUCKING STATE I KNOW HE'S \
GOING AND IT'S LIKE I DON'T KNOW HOW -- JUST TELL ME <U>PRACTICAL</U> THINGS \
-- WHAT THE FUCK DO I DO WITH HIS BODY.", {12, 15, 15, 4, 7, 7, 11, 12, 15, 
         12, 10, 7, 10, 4, 10, 11, 13, 11, 2, 11, 2, 13, 11, 2, 13, 11, 15, 2,
          10, 4, 1, 7, 11, 15, 11, 15, 1, 3, 11, 15, 10, 11, 15, 2, 12, 12, 
         13, 2, 15, 7, 12, 12, 12, 12, 13, 4, 4, 7, 7, 11, 15, 10, 11, 7, 13},
          1}, {"YOU KNOW HOW LONG IT'S BEEN SINCE I WAS BEHIND THE WHEEL.", {
         11, 15, 12, 12, 12, 12, 10, 11, 15, 10, 4, 7, 13}, 1}, {
        "ANY OTHER VICES.", {12, 12, 7, 13}, 0}, {
        "WHAT BANK ARE YOU WITH.", {4, 12, 15, 11, 10, 13}, 1}, {
        "MAYBE WE'VE BEEN PRETTY DUMB-- NOT TOO HARD IS IT.", {2, 12, 12, 12, 
         2, 1, 13, 2, 2, 1, 15, 11, 13}, 0}, {
        "NO DID HE TELL YOU ABOUT IT.", {4, 12, 11, 15, 11, 10, 11, 13}, 0}, {
        "YOU WANNA GO HOME.", {11, 15, 12, 12, 12, 13}, 0}, {
        "ARE YOU SURE YOU EVEN PACKED IT.", {15, 11, 15, 11, 2, 15, 11, 13}, 
         0}, {"WHAT THE HELL ARE YOU DOIN' IN THERE. ...", {4, 4, 7, 15, 11, 
         7, 13, 10, 12, 13, 13}, 1}, {
        "DO YOU HAVE ANYTHING DEROGATORY TO SAY ABOUT THE CHAMPION.", {15, 11,
          15, 12, 12, 10, 12, 12, 4, 7, 13}, 0}, {
        "DON'T WANNA GET YOUR DADDY IN HOT WATER DO YOU.", {7, 2, 12, 12, 15, 
         1, 12, 10, 12, 12, 12, 11, 13}, 0}, {
        "WOULD THEY BURN.", {12, 12, 12, 13}, 0}, {
        "WHEN *DOESN'T* HE HAVE BRONCHITIS.", {2, 14, 15, 2, 14, 11, 15, 7, 
         13}, 1}, {"WHY THE CROSSOVER.", {2, 4, 7, 13}, 1}, {
        "CRYSTALLIZED. ...HOW'S THE CLIENT.", {12, 13, 13, 13}, 1}, {
        "SO WHAT ARE YOU SEEING.", {12, 4, 15, 11, 15, 13}, 1}, {
        "WHERE'RE YOU HIT.", {15, 7, 11, 15, 13}, 1}, {
        "YOU WANT TO GET INTO A FINGER POINTING CONTEST ABOUT CHARACTER.", {
         11, 15, 10, 15, 10, 4, 7, 15, 7, 10, 7, 13}, 0}, {
        "WHAT IS SHE DOING <U>NOW</U>.", {4, 15, 12, 12, 12, 12, 12, 13}, 
         1}, {"BUT ARE HURONS DOGS.  ...MAGUA'S WAY IS FALSE.", {12, 15, 12, 
         7, 13, 13, 12, 12, 15, 12, 13}, 0}, {
        "HAD THAT SHAKING THING WHATD'YACALL IT EPOXY.", {12, 4, 12, 7, 15, 
         13, 12, 12, 12, 13}, 1}, {
        "HAS THAT GIRL -- HAS THEA EVER TOLD YOU WHERE SHE COMES FROM.", {15, 
         4, 7, 13, 15, 12, 12, 15, 11, 15, 12, 15, 12, 13}, 1}, {
        "YOU WANNA KILL YOURSELF THAT IT YOU LOOKING TO COMMIT SOME KIND OF \
DIVINE SUICIDE.", {11, 15, 12, 12, 12, 4, 11, 11, 15, 10, 12, 12, 12, 10, 12, 
         12, 13}, 0}, {
        "WHY NOT JUST BUY YOUR BABY A NIGHT LIGHT.", {2, 2, 2, 15, 1, 7, 4, 
         12, 12, 13}, 1}, {
        "YOU BEEN ON PROZAC LONG.", {11, 15, 10, 12, 12, 13}, 0}, {
        "WAS GOD EXPECTING ME TO OFFER FORGIVENESS IN THE FACE OF EVERY \
OFFENSE NO MATTER HOW PAINFUL.", {12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 10, 
         12, 12, 7, 7, 12, 12, 13}, 1}, {
        "IF YOU DIDN'T KILL HIM THEN WHO DID.", {10, 11, 15, 2, 15, 7, 2, 11, 
         15, 13}, 1}, {"AND SHALLOW AS WELL.", {3, 1, 1, 7, 13}, 0}, {
        "WHERE IS ROB.", {15, 15, 12, 13}, 1}, {
        "SATISFIED WITH YOUR CABIN.", {1, 10, 1, 7, 13}, 0}, {
        "HOW HARD DO YOU THINK IT IS TO SELL ONE DRUG DEALER'S DRUGS TO \
ANOTHER DRUG DEALER.", {12, 12, 12, 11, 15, 11, 15, 10, 15, 8, 7, 7, 7, 10, 
         12, 7, 7, 13}, 1}, {
        "RODERICK I'M GONNA HAVE TO CITE YOU FOR A VIOLATION OF STATE LAW-- \
NO SHERIFF I'M JUST-- YOU TELLING ME WHAT TO DO RODERICK.", {12, 11, 15, 12, 
         12, 12, 10, 15, 11, 10, 4, 7, 10, 12, 12, 13, 7, 7, 11, 15, 2, 13, 
         11, 15, 7, 4, 10, 12, 12, 13}, 1}, {
        "SO THAT'S IT JUST FORGET ABOUT US.", {12, 4, 15, 11, 2, 15, 10, 12, 
         13}, 0}, {"SURE YOU'RE OKAY.", {1, 11, 15, 12, 13}, 0}, {
        "JUST TO LEAVE HER LIKE THAT.", {2, 10, 15, 12, 12, 4, 13}, 0}, {
        "WHAT DO HERBS HAVE TO DO WITH IT.", {4, 12, 12, 12, 10, 12, 10, 11, 
         13}, 1}, {"ARE YOU STILL WITH US.", {15, 11, 2, 10, 12, 13}, 0}, {
        "WHAT ABOUT.", {4, 12, 13}, 1}, {
        "WHY PICK ON HIM .", {2, 12, 12, 12, 13}, 1}, {
        "DID YOU KNOW THAT'S WRITTEN IN THE CONSTITUTION OF THE UNITED \
STATES.", {12, 11, 15, 4, 15, 12, 10, 4, 12, 10, 4, 12, 7, 13}, 0}, {
        "WHERE DO YOU WANT TO GO.", {15, 12, 11, 15, 10, 12, 13}, 1}, {
        "YOU'VE HEARD NOTHING ABOUT THE INCIDENT.", {11, 15, 15, 15, 10, 4, 7,
          13}, 0}, {
        "YOU THINK THEY SOLD ME OUT.", {11, 15, 12, 12, 12, 12, 13}, 0}, {
        "IF GOD HAD INTENDED MAN TO FLY HE WOULD HAVE GIVEN US WINGS.", {10, 
         7, 7, 15, 7, 10, 15, 11, 12, 12, 12, 12, 12, 13}, 0}, {
        "PRETTY RIDICULOUS ISN'T IT.", {2, 1, 15, 2, 11, 13}, 0}, {
        "DO YOU HAVE ANY WITNESSES OR FINGERPRINTS.", {15, 11, 15, 12, 12, 7, 
         7, 13}, 0}, {"HOW'S AUSTIN.", {12, 12, 13}, 1}, {
        "HE SQUEEZED MONEY OUT OF YOU.", {11, 15, 7, 7, 10, 11, 13}, 0}, {
        "SO YOU WERE NEVER A PROSTITUTE.", {12, 11, 15, 7, 4, 7, 13}, 0}, {
        "MAY I BE QUITE FRANK WITH YOU.", {12, 11, 15, 1, 7, 10, 11, 13}, 
         0}, {"WHAT ARE YOU TALKING ABOUT FELLA.", {4, 15, 11, 15, 10, 7, 13},
          1}, {"DO THEY HAVE PRESSURE.", {12, 12, 12, 7, 13}, 0}, {
        "TWO OF US DIED IN THE LAST TWO DAYS DOES THAT STRIKE YOU AS \
PARTICULARLY NORMAL.", {8, 10, 12, 15, 10, 4, 7, 8, 7, 15, 4, 15, 11, 1, 7, 7,
          13}, 0}, {
        "THE UH CYNTHIA BRANSON ESTATE WAS WORTH HOW MUCH.", {4, 12, 12, 12, 
         12, 12, 12, 12, 12, 13}, 1}, {
        "PERHAPS YOUR DEAR WIFE MIGHT CARE TO PROFIT FROM MY INSTRUCTION.", {
         2, 1, 7, 7, 12, 12, 10, 12, 12, 12, 12, 13}, 0}, {
        "SHOULD WE STAY HERE.", {15, 15, 12, 2, 13}, 0}, {
        "YEAH. ...LEELOO.", {2, 13, 13, 12, 13}, 0}, {
        "WHY DO YOU WANT TO GO BACK AFTER ALL THIS.", {2, 12, 11, 1, 10, 15, 
         2, 10, 7, 7, 13}, 1}, {
        "ARE YOU ON ONE OF THOSE CONFERENCE CALLS.", {15, 11, 10, 8, 10, 4, 
         12, 12, 13}, 0}, {
        "YOU MEAN SOMEBODY ASKED.", {11, 15, 12, 12, 13}, 0}, {
        "THE HOLIDAY INN.", {4, 7, 7, 13}, 0}, {
        "WHAT DO YOU WANT FROM ME COLETTE.", {4, 12, 11, 15, 10, 12, 12, 13}, 
         1}, {"WHAT'S THAT IDIOT DOING NEXT DOOR.", {4, 15, 4, 12, 12, 12, 7, 
         13}, 1}, {
        "NOW WHAT'S WRONG WITH NATURE HUH.", {2, 4, 15, 1, 10, 7, 12, 13}, 
         1}, {"WHAT WOULD YOU CALL IT.", {4, 15, 11, 1, 12, 13}, 1}, {
        "IF YOU FOUND THIS DEED WHY DIDN'T YOU JUST ASK EDDIE.", {10, 11, 15, 
         7, 15, 2, 12, 2, 11, 2, 15, 12, 13}, 1}, {
        "SHE TRIUMPHED OVER EVERYTHING WHAT ARE YOU BLUBBERING ABOUT.", {12, 
         15, 10, 15, 4, 15, 11, 15, 12, 13}, 1}, {
        "SO WHY'RE YOU EVEN CONSIDERING IT.", {12, 2, 7, 11, 2, 15, 11, 13}, 
         1}, {"WHERE DO YOU LIVE JACK.", {15, 12, 11, 15, 7, 13}, 1}, {
        "BUT DID THEY TEACH YOU THIS.", {12, 12, 12, 15, 11, 7, 13}, 0}, {
        "GOT OUT OF MY OTHER COMMITMENT. ...YOU WANNA WORK -- HERE.", {12, 12,
          10, 12, 12, 12, 13, 13, 11, 12, 12, 15, 13, 2, 13}, 0}, {
        "DO YOU LOVE THEM.", {15, 11, 15, 7, 13}, 0}, {
        "WHAT DO WE HAVE.", {4, 12, 12, 12, 13}, 1}, {
        "HE TOLD YOU HE WASN'T COMING RIGHT BACK CAUSE HE WANTED TO QUESTION \
NORMAN BATES' MOTHER RIGHT.", {11, 15, 11, 11, 15, 2, 15, 7, 2, 15, 11, 15, 
         10, 12, 12, 12, 12, 12, 13}, 0}, {
        "WHAT DO YOU LIKE BEST ABOUT YOUR DADDY.", {4, 12, 11, 10, 12, 12, 1, 
         7, 13}, 1}, {
        "YOU DON'T READ DO YOU.", {11, 15, 2, 15, 7, 11, 13}, 0}, {
        "DON'T TELL ME YOU DON'T KNOW HOW ALL THIS WORKS.", {7, 2, 15, 7, 11, 
         15, 2, 12, 12, 7, 7, 15, 13}, 1}, {
        "MAYBE I SHOULD JUST YA KNOW...TURN TO THE CAMERAS AND SAY DO YOU \
MIND IF WE JUST WORK SOMETHING OUT.", {2, 11, 15, 2, 15, 12, 13, 13}, 0}, {
        "AND I'VE GOT A TEST TOMORROW ON - WELL.", {3, 11, 15, 7, 4, 7, 7, 10,
          13, 7, 13}, 0}, {
        "YOU THINK GOD FORGIVES PEOPLE LIKE ME.", {11, 15, 7, 15, 7, 10, 7, 
         13}, 0}, {
        "WHAT DIRECTION DOES THE SYSTEM INDICATE.", {4, 12, 15, 4, 12, 12, 
         13}, 1}, {
        "ARE THEY ALL IN THE BUSINESS.", {15, 12, 7, 10, 4, 7, 13}, 0}, {
        "WHAT'S THE MATTER WITH BJORN.", {4, 15, 4, 7, 10, 7, 13}, 1}, {
        "BIG-ASS TITTIES.", {1, 7, 13}, 0}, {
        "WHY DO YOU ALWAYS ANSWER A QUESTION WITH A QUESTION.", {2, 12, 11, 1,
          7, 4, 7, 10, 4, 7, 13}, 1}, {
        "WHAT YOU GONNA PUT ME ON YOUR CHRISTMAS CARD LIST.", {4, 11, 12, 12, 
         12, 12, 12, 1, 12, 12, 7, 13}, 1}, {
        "WHO'S LACERDA, HE'S WAITING FOR US IN A ROOM ON THE TWELFTH FLOOR.", \
{11, 15, 12, 13, 11, 15, 12, 10, 12, 10, 4, 7, 10, 4, 1, 7, 13}, 1}, {
        "YOU HAVE NOT MET A MAN WORTHY OF YOUR ATTENTION.", {11, 15, 2, 7, 4, 
         7, 1, 10, 1, 7, 13}, 0}, {
        "HAVE YOU SEEN MY GLASSES.", {15, 11, 15, 12, 12, 13}, 0}, {
        "AND YOU STILL MAINTAIN -- WHAT.", {3, 11, 2, 15, 13, 4, 13}, 1}, {
        "SO HOW IS IT THAT YOU GUYS ARE FLUENT IN RUSSIAN.", {12, 12, 15, 11, 
         4, 11, 15, 15, 1, 10, 12, 13}, 1}, {
        "HAS MR. KESSLER SAID ANYTHING REGARDING THE ATTACK ON THE MOORS.", {
         15, 12, 12, 15, 12, 12, 4, 7, 10, 4, 7, 13}, 0}, {
        "ANGELA.", {12, 13}, 0}, {
        "WAS EVER BOOK CONTAINING SUCH VILE MATTER'S SO FAIRLY BOUND.", {12, 
         12, 12, 12, 12, 12, 12, 12, 12, 12, 13}, 0}, {
        "YOU HEAR ME PRIVATE.", {11, 15, 2, 12, 13}, 0}, {
        "DO YOU THINK THAT GUY'S CUTE.", {15, 11, 15, 4, 7, 15, 12, 13}, 0}, {
        "DON'T YOU GAMBLE.", {7, 2, 11, 15, 13}, 0}, {
        "WELL WE PAY FOR THE [.].", {12, 12, 7, 10, 4, 13, 13, 13, 13}, 0}, {
        "MA. DID HE EVER SAY THAT HE FIGURED OUT A WAY TO RECALL A LOST \
MEMORY YEARS AFTER HE BLACKED IT OUT FOR THE FIRST TIME.", {12, 13, 12, 11, 2,
          15, 4, 11, 15, 12, 12, 12, 10, 12, 12, 15, 7, 7, 10, 11, 15, 11, 12,
          10, 4, 12, 12, 13}, 0}, {
        "HOW REAL DOES IT FEEL.", {12, 12, 15, 11, 7, 13}, 1}, {
        "SINCE WHEN IS IT A CRIME TO HAVE A SCALE IN YOUR HOUSE.", {10, 2, 15,
          11, 4, 7, 10, 12, 12, 12, 10, 1, 12, 13}, 1}, {
        "YOU WANT A WAR.", {11, 15, 4, 7, 13}, 0}, {
        "WHO THE FUCK WAS HE ROCCO.", {11, 4, 7, 15, 11, 12, 13}, 1}, {
        "DO YOU WANT ATHOS ARRESTED YOUR MAJESTY.", {15, 11, 1, 7, 15, 1, 7, 
         13}, 0}, {"WHEREFORE STORM YOU SO.", {1, 7, 11, 2, 13}, 1}, {
        "YOU GONNA LEAVE SOME CASH BY THE BED WHEN YOU PASS THROUGH TOWN.", {
         11, 15, 7, 15, 12, 12, 12, 4, 12, 2, 11, 15, 10, 7, 13}, 1}, {
        "DR. RUTH.", {12, 12, 13}, 0}, {
        "FOR FIVE HUNDRED WHAT DO I GET.", {10, 8, 15, 4, 12, 11, 15, 13}, 
         1}, {"AFRAID OF THE HOSPITAL.", {1, 10, 4, 7, 13}, 0}, {
        "WHO CAN WE TRUST.", {11, 12, 12, 12, 13}, 1}, {
        "NON LOQUIS LATINUM.", {12, 12, 12, 13}, 0}, {
        "DID YOU HELP HIM OUT OF A BIND.", {12, 11, 15, 12, 12, 10, 4, 7, 13},
          0}, {"YOU KNOW HOW SOMETIMES YOU JUST BECOME THIS PERSONA.", {11, 
         15, 7, 2, 11, 2, 15, 7, 7, 13}, 1}, {
        "WASN'T THAT THE PROBLEM WITH YOU TWO.", {12, 2, 4, 4, 7, 10, 11, 8, 
         13}, 0}, {
        "YOU ARE FUCKIN' DEAD YOU GO IN THERE TODAY.", {11, 15, 7, 13, 1, 11, 
         15, 10, 12, 12, 13}, 0}, {"OUT THE BACK.", {12, 4, 2, 13}, 0}, {
        "AND I AIM TO CURE YA OF YOUR WICKEDNESS.", {3, 11, 7, 10, 15, 12, 10,
          1, 7, 13}, 0}, {
        "AND I USED TO KNOW YOU PERSONAL WAY BACK WHEN.", {3, 11, 15, 10, 12, 
         11, 1, 7, 2, 2, 13}, 1}, {
        "IF YOU DON'T WANT MY FILM - I'LL CALL ANOTHER SHOW.", {10, 11, 15, 2,
          1, 7, 7, 13, 11, 15, 1, 12, 12, 13}, 1}, {
        "SHADOW GETS CRAZY-- IT'S NOT OUR JOB TO GET INVOLVED IN YOUR \
PERSONAL LIFE BUT WHEN IT INTERFERES WITH THE TRAINING HERE-- FROM BACK IN \
HOUSTON.", {12, 15, 12, 13, 11, 15, 12, 12, 12, 10, 15, 1, 10, 1, 1, 7, 12, 2,
          11, 15, 10, 4, 7, 2, 13, 10, 2, 10, 12, 13}, 1}, {
        "GREAT RUNNING INTO YOU, BUDDY.", {1, 15, 10, 11, 13, 12, 13}, 0}, {
        "I HAVEN'T FELT THIS GOOD IN A LONG TIME.", {11, 15, 2, 15, 7, 1, 10, 
         4, 7, 7, 13}, 0}, {"NERVES OF STEEL.", {7, 10, 12, 13}, 0}, {
        "I SHOULDN'T BE OVER HERE AT THIS HOUR.", {11, 15, 2, 15, 10, 2, 10, 
         12, 12, 13}, 0}, {
        "-- THE TRAIN FOR MARSEILLES LEAVES AT FIVE O'CLOCK.", {13, 4, 7, 10, 
         12, 15, 10, 8, 7, 13}, 0}, {
        "-- YOU SAID SO YOURSELF THE FIRM IS LARGE AND POWERFUL.", {13, 11, 
         15, 12, 12, 4, 12, 15, 12, 3, 12, 13}, 0}, {
        "THIS IS NOT MY USUAL FRIDAY NIGHT!", {12, 15, 12, 12, 12, 12, 12, 
         13}, 0}, {
        "I SENT IT TO MYSELF IN PARIS.", {11, 15, 11, 10, 12, 10, 12, 13}, 
         0}, {"YOU SAID IT CLARK.", {11, 15, 11, 7, 13}, 0}, {
        "I DON'T KNOW WHAT YOU'RE TALKING ABOUT MAN.", {11, 15, 2, 12, 4, 11, 
         15, 15, 10, 7, 13}, 1}, {
        "OUR RENDEZVOUS POINTS AND RADIO FREQS.", {12, 12, 12, 3, 12, 12, 13},
          0}, {"YOU STILL GOT A SHITLOAD OF PLOWING TO DO.", {11, 2, 15, 4, 
         12, 10, 12, 10, 12, 13}, 0}, {
        "HE TOLD ME THAT I WAS STUPID BECAUSE MY BOYFRIEND DIDN'T REALLY LOVE \
ME.", {11, 15, 12, 4, 11, 15, 1, 12, 12, 12, 12, 2, 12, 12, 12, 13}, 0}, {
        "BUT I...", {12, 12, 13, 13}, 0}, {
        "THIS SORT OF THING AIN'T MY BAG BABY.", {12, 12, 10, 12, 12, 2, 12, 
         12, 7, 13}, 0}, {
        "WE'RE MAKING A STATEMENT.", {12, 12, 12, 12, 12, 13}, 0}, {
        "I KNOW THIS.", {11, 15, 7, 13}, 0}, {
        "I THINK I SHOULD GO BACK.", {11, 15, 11, 15, 15, 2, 13}, 0}, {
        "NO QUESTION ABOUT IT.", {4, 12, 12, 12, 13}, 0}, {
        "HEY YOU HAVEN'T CHANGED YOUR CLOTHES!", {7, 11, 15, 2, 15, 1, 7, 13},
          0}, {"THE RESISTANCE THE ANGER IN YOUR VOICE.", {4, 7, 4, 7, 10, 1, 
         7, 13}, 0}, {"NO I'M OKAY FOR NOW.", {7, 11, 15, 1, 10, 2, 13}, 0}, {
        "NO ALL THE GOOD ONES ARE MARRIED.", {4, 7, 4, 1, 7, 15, 15, 13}, 
         0}, {"THE GOVERNMENT DOESN'T HAVE TO TELL PEOPLE TO DO IT.", {4, 12, 
         12, 2, 12, 10, 12, 12, 10, 12, 12, 13}, 0}, {
        "THAT'S COOL.", {4, 15, 12, 13}, 0}, {
        "SARAH LAWRENCE IS ON THE OTHER SIDE OF THE COUNTRY.", {12, 12, 15, 
         10, 4, 1, 12, 10, 4, 7, 13}, 0}, {
        "PLEASE ROSE BE A GOOD SPORT.", {15, 12, 15, 4, 1, 7, 13}, 0}, {
        "YOUR FACE WAS DARK AND YOUR HAIR WAS BACKLIT -- I COULD SEE A HALO \
OF FRIZZ -- YOU ASKED ME IF THINGS WERE OKAY BETWEEN NAOMI AND ME.", {1, 7, 
         15, 1, 3, 1, 7, 15, 12, 13, 11, 15, 15, 4, 7, 10, 12, 13, 11, 15, 12,
          10, 12, 15, 1, 12, 12, 3, 12, 13}, 0}, {
        "HER NOT BELIEVING ABOUT YOUR CONDITION..", {12, 12, 12, 12, 1, 7, 13,
          13}, 0}, {"WE SEE YOU NEXT HARVEST.", {12, 15, 11, 1, 7, 13}, 0}, {
        "THEY MAY LOOK GOOD BUT THEY WEIGH TWELVE POUNDS EACH THAT'S \
THIRTY-SIX POUNDS RIGHT THERE.", {12, 12, 12, 12, 12, 12, 15, 8, 12, 12, 4, 
         15, 8, 12, 12, 12, 13}, 0}, {
        "THIS IS ANTHONY ADAMS MR. HENRY.", {12, 15, 12, 12, 12, 12, 13}, 
         0}, {"NO. DADDY SAYS ROSE IS CALM AS LETTUCE.", {7, 13, 12, 12, 15, 
         15, 7, 1, 7, 13}, 0}, {
        "I'M SORRY IT'S JUST THAT..", {11, 15, 12, 12, 2, 4, 13, 13}, 0}, {
        "BUT THEN  --  --  THAT SILLY WAR..", {12, 12, 13, 13, 4, 12, 7, 13, 
         13}, 0}, {
        "SHE CALLED ME AN OLD LADY HERE TOO!", {12, 15, 1, 4, 1, 7, 2, 2, 13},
          0}, {"FIVE NIGHTS AGO HE FOUND THIS PARATROOPER CAUGHT IN A TREE \
WITH A BROKEN LEG.", {8, 7, 2, 11, 12, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13},
          0}, {"ALONE.", {2, 13}, 0}, {
        "I AVOIDED CAPTURE USING THE MAK'TAR STEALTH HAZE.", {11, 15, 12, 12, 
         4, 12, 13, 7, 7, 7, 13}, 0}, {
        "IT IS IT IS!", {11, 15, 11, 15, 13}, 0}, {
        "LEAVE THAT ALONE!", {15, 4, 2, 13}, 0}, {
        "I DON'T WANT TO TALK ABOUT HIM.", {11, 15, 2, 1, 10, 12, 12, 12, 13},
          0}, {"GOOD AFTERNOON MR. HARRIS.", {1, 7, 12, 12, 13}, 0}, {
        "JOHN I'D LIKE YOU TO MEET ONE OF THE BRIGHTEST LIGHTS OF THE BRITISH \
STAGE MRS. KENDAL.", {12, 11, 15, 10, 11, 10, 15, 8, 10, 4, 12, 12, 10, 4, 1, 
         7, 12, 12, 13}, 0}, {
        "DON'T KNOW IF I'LL STILL WANT IT.", {7, 2, 12, 10, 11, 15, 2, 1, 11, 
         13}, 0}, {"MADAM SENATOR...", {12, 12, 13}, 0}, {
        "I'LL GET HIM.", {11, 15, 15, 7, 13}, 0}, {
        "AT LEAST TALK TO HIM HEAR WHAT HE HAS TO SAY.", {10, 12, 12, 10, 12, 
         15, 4, 11, 15, 10, 12, 13}, 1}, {
        "LOUELLA PARSONS IS HERE.", {12, 12, 15, 2, 13}, 0}, {
        "THREE MEN AND A WOMEN.", {8, 12, 3, 4, 12, 13}, 0}, {
        "IT'S COSMETIC.", {11, 15, 7, 13}, 0}, {
        "AND YOU WILL GIVE ME OCCASION.", {3, 11, 15, 15, 12, 12, 13}, 0}, {
        "I'M HAPPY.", {11, 15, 12, 13}, 0}, {
        "LET ME OUT OF HERE!", {15, 12, 12, 10, 2, 13}, 0}, {
        "MAYBE HE DIDN'T KNOW EXACTLY WHAT HE WAS GONNA DO BUT HE HAD A \
PRETTY GOOD IDEA.", {2, 11, 15, 2, 12, 12, 4, 11, 15, 12, 12, 12, 12, 11, 15, 
         4, 2, 1, 7, 13}, 1}, {
        "AND BECAUSE HE'S MY FRIEND.", {3, 10, 11, 15, 12, 12, 13}, 0}, {
        "I DON'T KNOW WHY I SAID IT.", {11, 15, 2, 12, 2, 11, 15, 11, 13}, 
         1}, {"HOWE I HATE TO BRING IT UP BUT SHE'S GOT AN AWFUL TOOTHACHE \
WE'VE GOT TO CARRY HER TO THE DENTIST.", {12, 11, 15, 10, 15, 11, 9, 12, 12, 
         12, 4, 12, 12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 13}, 1}, {
        "WHENEVER PEOPLE SAY 'AW THAT DAMONE IS A LOUDMOUTH' -- AND THEY SAY \
THAT A LOT -- I SAY 'YOU JUST DON'T KNOW DAMONE.' WHEN SOMEONE SAYS YOU'RE AN \
IDIOT I TELL THEM 'DAMONE'S NOT AN IDIOT.", {12, 12, 12, 13, 12, 4, 12, 15, 4,
          7, 13, 13, 3, 7, 7, 4, 4, 7, 13, 11, 15, 13, 11, 2, 15, 2, 12, 12, 
         13, 13, 2, 12, 15, 11, 15, 4, 7, 11, 15, 12, 13, 12, 15, 12, 4, 12, 
         13}, 1}, {
        "GOOD THING HE DOESN'T ALWAYS KNOW WHAT HE'S GOT...", {1, 7, 11, 15, 
         2, 1, 7, 4, 11, 15, 12, 13, 13}, 1}, {
        "IT'S FOR SOMEBODY NAMED THOMPSON BUT IT SAYS 'CARE OF RAOUL DUKE'.", \
{11, 15, 10, 12, 12, 12, 12, 12, 12, 13, 12, 10, 12, 12, 13}, 0}, {
        "THEN TAKE IT FROM HIM.", {2, 15, 11, 10, 7, 13}, 0}, {
        "A WOW FINISH.", {4, 12, 7, 13}, 0}, {"EARS.", {7, 13}, 0}, {
        "TRADE YOUR EXCELLENCY.", {7, 1, 7, 13}, 0}, {
        "JUST ONE COMPADRE...", {2, 8, 7, 13}, 0}, {
        "I'LL TAKE EVERYTHING AT FACE VALUE.", {11, 15, 15, 15, 10, 12, 12, 
         13}, 0}, {
        "IT'S MUCH SAFER IN THERE SWEETY.", {11, 15, 12, 12, 10, 12, 12, 13}, 
         0}, {"WELL DO SOMETHING ABOUT IT.", {12, 12, 12, 12, 12, 13}, 0}, {
        "HOLD ON . . .", {15, 12, 13}, 0}, {
        "LET ME HAVE MANUAL CONTROL PLEASE.", {15, 12, 12, 12, 12, 12, 13}, 
         0}, {"MY AUTHOR.", {12, 12, 13}, 0}, {
        "NOW LISTEN BEFORE YOU DO SOMETHING YOU'LL REALLY REGRET YOU'D BETTER \
STOP AND THINK-- HERE ARE THE SLIPS FOR THE LAUNDRY AND THE CLEANING.", {2, 
         15, 10, 11, 15, 12, 11, 15, 12, 12, 11, 15, 12, 15, 3, 15, 13, 2, 15,
          4, 15, 10, 4, 7, 3, 4, 7, 13}, 0}, {
        "IF THAT'S THE WAY YOU WANT IT.", {10, 4, 15, 4, 7, 11, 15, 11, 13}, 
         0}, {"I SAW IT GOING DOWN.", {11, 15, 11, 12, 12, 13}, 0}, {
        "I'LL LAY YOU FIVE TO ONE YOU WON'T SLEEP.", {11, 15, 7, 11, 8, 10, 8,
          11, 15, 2, 7, 13}, 0}, {
        "THAT WON'T YOUR FAULT.", {4, 1, 2, 1, 7, 13}, 0}, {
        "I LIKED THE HORSE.", {11, 15, 4, 7, 13}, 0}, {
        "LET'S GET A PICTURE.", {7, 15, 4, 7, 13}, 0}, {
        "UHM..", {12, 13, 13}, 0}, {
        "THEN YOU ARE A FOOL -- A FOOL WHO HAS NEVER LOST A SON.", {2, 11, 15,
          4, 7, 13, 4, 7, 11, 15, 12, 12, 12, 12, 13}, 1}, {
        "NO ONE CAN STOP THEM.", {7, 8, 12, 15, 12, 13}, 0}, {
        "WELL IT SEEMS YOU ARE DETERMINED TO KEEP LASZLO HERE.", {12, 12, 15, 
         11, 15, 15, 10, 15, 12, 2, 13}, 0}, {
        "LIKE HE'S WILD.", {10, 11, 15, 12, 13}, 0}, {
        "HE'S NOT ARMY IT'S NOT OFFICIAL -- HE'S FORMER ARMY AND THE BEST \
I'VE EVER SEEN IN A ROOM.", {11, 15, 12, 12, 12, 12, 12, 13, 11, 15, 1, 7, 3, 
         4, 7, 11, 15, 2, 12, 10, 4, 7, 13}, 0}, {
        "NOTHING REAL OR SUPERNATURAL IS BUSTING THROUGH THIS LEAST NOTHING \
THE SIZE OF THE BEASTS.", {15, 7, 7, 1, 15, 12, 10, 12, 12, 12, 4, 7, 10, 4, 
         7, 13}, 0}, {"I WOULD HANG HIM!", {11, 15, 7, 7, 13}, 0}, {
        "I'M FEELING FINE THIS MORNING.", {11, 15, 15, 12, 12, 12, 13}, 0}, {
        "AND I HADN'T BEEN LIVING MY OWN LIFE.", {3, 11, 15, 2, 12, 12, 12, 
         12, 12, 13}, 0}, {
        "I JUST KNOW HOW YOU GET.", {11, 2, 15, 12, 11, 15, 13}, 1}, {
        "I MEAN IT'S NOT AS IF -- YOU'RE GREAT WITH THE ADVICE CLARK.", {11, 
         15, 11, 15, 2, 1, 10, 13, 11, 15, 1, 10, 4, 12, 12, 13}, 0}, {
        "SCREWIN' SOME POOR SLOB OUT OF HIS RETIREMENT.", {7, 13, 12, 12, 12, 
         12, 10, 11, 7, 13}, 0}, {
        "IT'S ALL WORKING OUT JUST LIKE WE PLANNED.", {11, 15, 7, 15, 12, 2, 
         10, 12, 12, 13}, 0}, {
        "THEY JUST STOOD THERE CONFUSED.", {12, 2, 15, 1, 1, 13}, 0}, {
        "COME ON STACY IT'S YOUR SECTION AND YOUR MAN.", {15, 12, 12, 12, 1, 
         7, 3, 1, 7, 13}, 0}, {"UH..", {12, 13, 13}, 0}, {
        "I HAVE NO LUGGAGE.", {11, 15, 7, 7, 13}, 0}, {
        "I -- I...", {11, 13, 7, 13, 13}, 0}, {
        "I TOLD YOU I'D GET IT.", {11, 15, 11, 11, 15, 15, 11, 13}, 0}, {
        "HAVE A DONUT.", {15, 4, 7, 13}, 0}, {
        "NOBODY WALKS AROUND LIKE THAT.", {7, 15, 10, 12, 4, 13}, 0}, {
        "WELL PERSONALLY MAJOR I WILL TAKE WHAT COMES.", {12, 2, 15, 11, 15, 
         15, 4, 15, 13}, 1}, {
        "YOU DID PICK A REAL STRANGE TIME TO GO AND BE BRAVE ALL ON YOUR \
OWN..", {11, 15, 12, 12, 12, 12, 12, 10, 12, 3, 15, 1, 7, 10, 1, 7, 13, 13}, 
         0}, {"CHARLES I MUST APOLOGIZE AGAIN FOR THE KRONOS MISHAP.", {12, 
         11, 15, 15, 2, 10, 4, 7, 7, 13}, 0}, {
        "I GAVE MY GRIEF TO JESUS CHRIST.", {11, 15, 7, 7, 10, 12, 12, 13}, 
         0}, {"NOW YOU MIGHT BE ONE OF THESE HOLLYWOOD TYPES CHANGE YOUR NAME \
AND ALL THAT BUT PEERLESS DOTHAN IS ON YOUR BIRTH CERTIFICATE.", {2, 11, 15, 
         15, 8, 10, 12, 12, 15, 12, 1, 7, 3, 7, 4, 12, 12, 12, 15, 12, 1, 7, 
         7, 13}, 0}, {
        "STOP SAYING YOU KNOW WHEN I SAY 'Y'KNOW.' I KNOW YOU KNOW.", {15, 12,
          11, 15, 2, 11, 15, 13, 12, 12, 13, 13, 11, 15, 11, 15, 13}, 1}, {
        "HE'S NOT A STAG HOUND.", {11, 15, 2, 4, 7, 7, 13}, 0}, {
        "SO IT'S ALL WORKED OUT PERFECTLY..", {12, 12, 7, 15, 12, 2, 13, 13}, 
         0}, {"SOUNDS DELIGHTFUL. ... MEANWHILE I'D LIKE TO PREPARE YOU FOR A \
COLONOSCOPY SO WE CAN TAKE A LOOK INSIDE.", {15, 12, 13, 13}, 0}, {
        "I ASKED IF WE COULD GIVE HIM ANYTHING ELSE.", {11, 15, 10, 12, 12, 
         15, 12, 12, 12, 13}, 0}, {"PAY'S GOOD THOUGH.", {7, 1, 7, 13}, 0}, {
        "DOESN'T MOVE.", {7, 2, 15, 13}, 0}, {
        "IT'S REALLY NICE TO TALK WITH YOU SAM.", {11, 15, 2, 1, 10, 12, 10, 
         11, 12, 13}, 0}, {
        "HOW YOU GOT ME LOCKED UP LIKE A DOG ON A...", {12, 11, 15, 7, 15, 9, 
         10, 4, 7, 10, 7, 13, 13}, 1}, {"TREVES.", {12, 13}, 0}, {
        "I DON'T KNOW HOW IT GOT THIS WAY..", {11, 15, 2, 12, 12, 12, 12, 12, 
         12, 13, 13}, 1}, {
        "IT SEEMED SHE WAS HARMING YOU.", {11, 15, 12, 12, 12, 11, 13}, 0}, {
        "OTHER PICTURES--I DON'T KNOW--IT'S NOTHING I WANT TO LOOK BACK ON.", \
{1, 7, 13, 11, 15, 2, 12, 13, 11, 15, 15, 11, 1, 10, 15, 2, 10, 13}, 0}, {
        "I'LL RISK IT.", {11, 15, 7, 11, 13}, 0}, {
        "I THINK THEY HAVE ANOTHER FELLA THERE TO KEEP IT OFF YOUR CHEST.", {
         11, 15, 12, 12, 12, 12, 12, 10, 15, 11, 7, 1, 7, 13}, 0}, {
        "I'LL GO OUT FOR A SMOKE.", {11, 15, 12, 12, 10, 4, 7, 13}, 0}, {
        "INDIA IS A NEWLY INDEPENDENT NATION.", {12, 15, 4, 2, 1, 7, 13}, 
         0}, {"I CAN'T BELIEVE WHAT A --!", {11, 12, 2, 15, 4, 4, 13, 13}, 
         1}, {"IT COULD BE PARASITES AN INFECTION..", {11, 15, 15, 12, 4, 7, 
         13, 13}, 0}, {
        "SAYS SHE CAN GET ME IN TO SEE THIS KILLER.", {12, 12, 12, 15, 7, 10, 
         10, 15, 7, 7, 13}, 0}, {"SEE YOU.", {15, 11, 13}, 0}, {
        "NO NO!", {7, 7, 13}, 0}, {
        "YOU CAN GO BACK WITH JACK.", {11, 15, 7, 2, 10, 7, 13}, 0}, {
        "WE WONDERED ABOUT THE DISCOLORATION SO HE RAN A SPECTRO.", {12, 15, 
         10, 4, 12, 12, 11, 15, 4, 7, 13}, 0}, {
        "OF COURSE YOU CAN'T!", {10, 12, 11, 12, 2, 13}, 0}, {
        "JUST HOPE.", {2, 7, 13}, 0}, {
        "LONGITUDE 109 -- LET'S GO.", {7, 8, 13, 12, 7, 13}, 0}, {
        "WELL I HAVEN'T HEARD ANYTHING ABOUT THE DISAPPEARANCE OR \
ANYTHING...", {2, 11, 15, 2, 15, 15, 10, 4, 7, 7, 7, 13}, 0}, {
        "TWENTY-FIVE YEARS.", {8, 7, 13}, 0}, {
        "LET ME SEE!", {15, 12, 15, 13}, 0}, {
        "WHY HE COULD OPERATE ON ME ANY OLD TIME AND I WOULDN'T EVEN BE \
SCARED.", {2, 11, 12, 12, 12, 12, 12, 12, 12, 3, 11, 15, 2, 2, 15, 12, 13}, 
         1}, {"THE PACE OF REFORM MUST MEET WITH THE DESIRES OF THE TIBETAN \
PEOPLE.", {4, 7, 10, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}, 0}, {
        "MY PLAN INVOLVES ALL FOUR OF US ACTING TOGETHER.", {12, 7, 15, 7, 8, 
         10, 12, 12, 2, 13}, 0}, {
        "ROSE, YOU'RE VERY SICK.", {7, 13, 11, 15, 2, 1, 13}, 0}, {
        "WHICH IS A WONDERFUL CROOK.", {4, 15, 4, 1, 7, 13}, 1}, {
        "I LOST A WORKER.", {11, 15, 4, 7, 13}, 0}, {
        "SHE SAYS HE COMES BACK IN DREAMS.", {12, 15, 11, 15, 2, 10, 7, 13}, 
         0}, {"THE DANGER.", {4, 7, 13}, 0}, {
        "ABOUT SIX MONTHS AGO SOME PARTS OF BODIES WERE FOUND DOWN BY THE \
RIVER.", {10, 8, 7, 2, 15, 7, 10, 7, 15, 15, 2, 10, 4, 7, 13}, 0}, {
        "THE PERSONALITY INVENTORIES WOULD TRIP HIM UP.", {4, 7, 7, 15, 7, 7, 
         7, 13}, 0}, {
        "IF FIRED UPON TELL OUR FIGHTERS THAT THEY ARE ORDERED TO ENGAGE.", {
         10, 15, 10, 12, 12, 12, 4, 12, 15, 15, 10, 15, 13}, 0}, {
        "IT WORKED!", {11, 15, 13}, 0}, {"JUST MY LUCK.", {2, 7, 7, 13}, 0}, {
        "LECTER DID IT TO AMUSE HIMSELF.", {12, 12, 12, 10, 15, 7, 13}, 0}, {
        "IT'S A STUPID TRADITION.", {11, 15, 4, 1, 7, 13}, 0}, {
        "I'LL GO OUTSIDE AND TAKE A LOOK IN THE GARAGE.", {11, 15, 7, 10, 3, 
         15, 4, 7, 10, 4, 7, 13}, 0}, {
        "SO MUCH FOR NUTSY FAGIN.", {12, 12, 10, 12, 12, 13}, 0}, {
        "SUPPOSE THAT YOU BEAR FIVE OR SIX CHILDREN WITH YOUR \
CHARACTERISTICS.", {15, 4, 11, 15, 8, 7, 8, 7, 10, 1, 7, 13}, 0}, {
        "IT DOES AND IT IS A BETTER LOOKIN' REASON THAN YOU JACK WINTHROP.", {
         11, 12, 3, 11, 15, 4, 1, 7, 13, 12, 12, 11, 12, 12, 13}, 0}, {
        "FUCK OFF FRAT BOY.", {12, 12, 12, 7, 13}, 0}, {
        "IT'S REALLY SOLID THIS TIME OF YEAR.", {11, 15, 1, 1, 7, 15, 10, 7, 
         13}, 0}, {
        "NO I READ IT ON THE MESSAGE.", {7, 11, 15, 11, 10, 4, 7, 13}, 0}, {
        "WELL SURE..", {12, 12, 13, 13}, 0}, {
        "GIVE MY BLESSING TO THE GIRL.", {15, 12, 12, 10, 4, 7, 13}, 0}, {
        "I FEEL ALL RIGHT TOO.", {11, 15, 7, 7, 7, 13}, 0}, {
        "PROBABLY HE MEANS NO HARM.", {12, 11, 15, 7, 7, 13}, 0}, {
        "SOMEDAY YOU'LL HAVE A SON JUST LIKE YOU JEREMIAH.", {12, 11, 15, 12, 
         12, 12, 2, 10, 11, 12, 13}, 0}, {
        "THESE ARE HIS PEAK HOURS.", {12, 15, 11, 7, 7, 13}, 0}, {
        "QUITE.", {12, 13}, 0}, {"GOOD THING.", {1, 7, 13}, 0}, {
        "HE KNEW WHERE HER ROOM WAS.", {11, 15, 12, 12, 12, 12, 13}, 1}, {
        "JOANNA GO FUCK YOURSELF!", {12, 12, 12, 12, 13}, 0}, {
        "NUMBNESS.", {7, 13}, 0}, {"NO I...", {7, 7, 13, 13}, 0}, {
        "I DO IT 'CAUSE IT WORKS-...", {11, 15, 11, 15, 11, 15, 13, 13}, 0}, {
        "JIM JONES Y'KNOW.", {12, 12, 12, 12, 13}, 0}, {
        "THERE'S NOTHING TO UNDERSTAND.", {7, 12, 10, 12, 13}, 0}, {
        "WHY IT DOES ME GOOD JUST TO SEE HIM SIT THERE ALL SOLEMN AND GO \
POKIN' IN HIS BAG LIKE HE'S GONNA CURE ME WHICH HE DID OF COURSE.", {2, 11, 
         15, 2, 1, 2, 10, 15, 12, 7, 7, 7, 1, 3, 7, 7, 13, 10, 11, 7, 10, 11, 
         15, 12, 12, 12, 12, 4, 11, 15, 10, 12, 13}, 1}, {
        "YOU KNOW THAT SOMETIMES IT'S HARD TO UNDERSTAND GOD'S GREAT PLAN.", {
         11, 15, 4, 2, 11, 15, 1, 10, 12, 12, 1, 7, 13}, 0}, {
        "HEY INSPECTOR I DON'T INTEND TO TAKE THE RAP FOR THIS.", {7, 7, 11, 
         15, 2, 15, 10, 15, 4, 7, 10, 7, 13}, 0}, {
        "YOU UNDERSTAND HOW I FEEL.", {11, 15, 7, 11, 15, 13}, 1}, {
        "HE DOES A LITTLE SPOT WHERE THE BUTTER HAD BEEN.", {11, 15, 4, 12, 
         12, 15, 4, 7, 15, 7, 13}, 1}, {
        "I CAN'T BELIEVE IT'S ALREADY STARTING TO GET DARK SO EARLY.", {11, 
         12, 2, 12, 12, 12, 12, 10, 15, 1, 7, 7, 13}, 0}, {
        "THERE'S NO FIRST ACT.", {7, 7, 12, 12, 13}, 0}, {
        "GOD PARDON SIN WAS THOU WITH ROSALINE!", {7, 7, 7, 15, 12, 10, 12, 
         13}, 0}, {"UNDERSTAND THAT.", {12, 4, 13}, 0}, {
        "LOOK DIFFERENT THAN YOU SOUNDED ON THE PHONE.", {8, 1, 10, 11, 15, 
         10, 4, 7, 13}, 0}, {
        "GEORGE WORK WITH ME I ALWAYS GET A LAUGH WITH THAT ONE.", {12, 15, 
         10, 7, 11, 15, 15, 4, 7, 10, 4, 8, 13}, 0}, {
        "I CAN'T DO THIS.", {11, 12, 2, 12, 12, 13}, 0}, {
        "ONLY BY A DIRECTOR OF THE FIRM.", {2, 10, 4, 7, 10, 4, 7, 13}, 0}, {
        "RICK'S WOULDN'T BE RICK'S WITHOUT THEM.", {12, 12, 2, 15, 12, 6, 12, 
         12, 13}, 0}, {
        "RICK'S GOT AN IMPORTANT ANNOUNCEMENT TO MAKE.", {12, 12, 4, 1, 7, 10,
          15, 13}, 0}, {
        "I SHOULD GO YOU ARE THE BOY ...", {11, 15, 15, 11, 15, 4, 7, 13}, 
         0}, {"THEY COULD CLEAN AROUND THE ARRANGEMENT.", {12, 12, 12, 10, 4, 
         7, 13}, 0}, {
        "REMEMBER LIKE I SAY I FOUND YOU IN THE ROAD..", {15, 10, 11, 15, 11, 
         15, 11, 10, 4, 7, 13, 13}, 0}, {
        "BUT LOVE ISN'T THE OPERATIVE WORD HERE PEACE IS!", {12, 12, 15, 2, 4,
          7, 7, 2, 15, 15, 13}, 0}, {
        "IT'S A PERSONAL THING.", {11, 15, 4, 1, 7, 13}, 0}, {
        "TEN'S STANDARD.", {8, 7, 13}, 0}, {
        "AND DO NOT TRY TO UNDERSTAND THEM.", {3, 12, 12, 12, 10, 12, 12, 13},
          0}, {"IT'S NO TROUBLE.", {11, 15, 7, 7, 13}, 0}, {
        "A 'QUICK FIX'...", {4, 13, 1, 7, 13, 13}, 0}, {
        "GOOD NIGHT!", {1, 7, 13}, 0}, {
        "THEN GO A LITTLE FORWARD IN TIME.", {2, 7, 4, 1, 2, 10, 7, 13}, 0}, {
        "DAMN STRAIGHT!", {1, 7, 13}, 0}, {
        "HE'S DOING VERY WELL.", {11, 15, 15, 2, 2, 13}, 0}, {
        "EXCEPT BACK TO NOWHERESVILLE.", {10, 2, 10, 12, 13}, 1}, {
        "I'M GOING TO BOW OUT ON YOU.", {11, 15, 12, 10, 12, 12, 12, 11, 13}, 
         0}, {"-- SIT DOWN.", {13, 7, 7, 13}, 0}, {
        "COLE DRAGS DEBBIE INTO ONE OF THE THEATERS.", {12, 15, 12, 12, 8, 10,
          4, 7, 13}, 0}, {
        "THERE IS ONLY ONE BED.", {15, 15, 12, 8, 7, 13}, 0}, {
        "DON'T JERK ME AROUND.", {7, 2, 12, 12, 12, 13}, 0}, {
        "YOU REMEMBER IN SCHOOL WE TALKED ABOUT WORKING TOGETHER.", {11, 15, 
         10, 12, 12, 15, 10, 15, 2, 13}, 0}, {
        "YOU SAID AS LONG AS I DON'T ACT LIKE A FUCKIN' NUT IMPLYING THAT \
I'VE BEEN ACTING LIKE A FUCKIN' NUT.", {11, 15, 1, 7, 10, 11, 15, 2, 12, 12, 
         12, 12, 12, 12, 4, 11, 15, 12, 12, 10, 4, 7, 13, 12, 13}, 0}, {
        "SO HAVE DINNER WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}, 0}, {
        "MAYBE I BETTER ASK AROUND SEE WHAT YOUR PALS THINK.", {2, 11, 15, 12,
          10, 15, 4, 1, 7, 7, 13}, 1}, {
        "QUIT ACTING ALL SQUEEZED OUT.", {12, 12, 7, 15, 12, 13}, 0}, {
        "WE'LL HAVE JUST ONE DRINK THEN WE'LL GO.", {12, 12, 12, 2, 8, 7, 2, 
         15, 12, 12, 13}, 0}, {
        "YOU AND EVERYBODY..", {11, 3, 7, 13, 13}, 0}, {
        "JUST NOT IN TIME FOR....", {2, 2, 10, 12, 10, 13}, 0}, {
        "CARLOS.", {12, 13}, 0}, {"THIS IS ADAM.", {12, 15, 12, 13}, 0}, {
        "I KNEW WHEN YOU CAME LOOKING FOR THE CHEMICALS.", {11, 15, 2, 11, 15,
          15, 10, 4, 7, 13}, 1}, {"MILLER COME IN...", {12, 12, 10, 13}, 0}, {
        "WHEN HE WAS KILLED.", {2, 11, 15, 15, 13}, 1}, {
        "WE GET MORE ACCIDENTS MORE ROBBERIES MORE RAPES MORE HOMICIDES MORE \
OF EVERYTHING WHEN THERE'S A FULL MOON.", {12, 15, 1, 7, 1, 7, 1, 7, 1, 7, 1, 
         10, 12, 2, 7, 15, 4, 1, 7, 13}, 1}, {
        "YOU SHOULD STICKAROUND SOMETIMES.", {11, 15, 15, 2, 13}, 0}, {
        "FOR ALL THOSE VACATION DAYS YOU GOT COMING.", {10, 7, 4, 12, 12, 11, 
         15, 15, 13}, 0}, {
        "I KNEW HOW PLANES FLEW BUT I WAS STILL A LITTLE NERVOUS.", {11, 15, 
         12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 13}, 1}, {
        "SHE'S BEEN PREPARING ALL MORNING.", {12, 12, 12, 7, 7, 13}, 0}, {
        "I AM SURE THAT YOU ARE AWARE OF THE HORRIBLE ALLEGATIONS AGAINST JIM \
CUNNINGHAM.", {11, 15, 1, 4, 11, 15, 1, 10, 4, 1, 7, 10, 12, 12, 13}, 0}, {
        "HONOUR AND PROTECT ALL BLACKSMITHS.", {12, 3, 12, 7, 7, 13}, 0}, {
        "THEY'VE GOT A GATLING!", {12, 12, 12, 12, 12, 13}, 0}, {
        "WE MET ONCE OR TWICE.", {12, 7, 2, 7, 2, 13}, 0}, {
        "I'LL NEVER REACH THE HOUSE.", {11, 15, 2, 15, 4, 12, 13}, 0}, {
        "MUSIC!", {7, 13}, 0}, {"VECCHIO.", {12, 13}, 0}, {
        "NO WE GOT PRESSURE FROM CALIFORNIA STATE.", {4, 12, 12, 12, 12, 12, 
         12, 13}, 0}, {"I SAW HIM ON T.V.", {11, 15, 12, 10, 12}, 0}, {
        "THIS IS AN ISOLATED INCIDENT COUNSELOR UNLESS YOU CAN PROVE \
OTHERWISE.", {12, 15, 4, 1, 1, 7, 10, 11, 15, 15, 2, 13}, 0}, {
        "AFTER ALL I GOT STUCK WITH A RAILWAY TICKET.", {10, 7, 11, 15, 1, 10,
          4, 7, 7, 13}, 0}, {"I SMASHED MY CAB.", {11, 15, 12, 12, 13}, 0}, {
        "THAT'S WHAT WE CALL IN THE TRADE AUDITION FREE-FOR- ALLS AND MOST OF \
IT SUCKS.", {4, 15, 4, 12, 12, 10, 4, 7, 7, 7, 13, 7, 3, 1, 10, 11, 15, 13}, 
         1}, {"I'M ALSO GOOD ENOUGH TO GO PRO.", {11, 15, 2, 1, 7, 10, 12, 6, 
         13}, 0}, {
        "SHE'S STRUNG OUT NOW; YOU WON'T FIND HER.", {12, 12, 12, 2, 13, 11, 
         15, 2, 15, 7, 13}, 0}, {
        "COME BACK AND HAVE A BEER!", {15, 2, 3, 15, 4, 7, 13}, 0}, {
        "I WARNED YOU DIGNAN.", {11, 15, 11, 12, 13}, 0}, {
        "'CAUSE THAT'S THE WAY GUYS ARE -- THEY LAUGH WHEN YA TALK DIRTY.", {
         12, 4, 15, 4, 7, 15, 15, 13, 12, 12, 2, 12, 12, 12, 13}, 1}, {
        "I DOUBT YOU EVEN REMEMBER OUTPOST 1.0 -- YOU'D HAVE TO START \
PRACTICALLY FROM SCRATCH.", {11, 15, 11, 2, 15, 7, 8, 13, 11, 15, 12, 10, 12, 
         12, 12, 7, 13}, 0}, {
        "HE SAYS HE'S GOTTA TALK TO YOU TONIGHT.", {11, 15, 11, 15, 12, 12, 
         12, 10, 11, 2, 13}, 0}, {"PLEASE BABY...", {15, 7, 13}, 0}, {
        "I WAS HOPING TO STOP THERE FOR LUNCH.", {11, 15, 12, 10, 15, 12, 10, 
         12, 13}, 0}, {
        "BUT NOW HE HAS COME TO LEAD HIS NATION.", {12, 12, 11, 15, 12, 10, 
         12, 11, 7, 13}, 0}, {
        "YOU DON'T NEED TO BE NERVOUS AROUND ME THOUGH.", {11, 15, 2, 15, 10, 
         15, 12, 10, 12, 12, 13}, 0}, {
        "WELL SHE DOESN'T COMPLAIN MUCH.", {12, 12, 15, 2, 12, 12, 13}, 0}, {
        "I WISH YOU'D GIVE ME A LITTLE MORE OF A CHANCE.", {11, 15, 11, 15, 
         15, 7, 4, 12, 1, 10, 4, 7, 13}, 0}, {
        "'GUESS WE'LL FIND OUT WHAT ELSE WE HAVE TO TALK ABOUT.", {13, 12, 12,
          12, 12, 12, 4, 2, 15, 12, 10, 12, 12, 13}, 1}, {
        "BUDDY DEEDS.", {7, 7, 13}, 0}, {
        "I KNEW WHO POISONED ME IN THE MAZE.", {11, 15, 11, 15, 12, 10, 4, 7, 
         13}, 1}, {"THAT SURE IS A THOUGHT.", {4, 1, 15, 4, 7, 13}, 0}, {
        "WRITING.", {12, 13}, 0}, {
        "AND THAT'S NOT FUCKING GOOD ENOUGH.", {3, 4, 15, 12, 12, 12, 12, 13},
          0}, {"HE'S COMATOSE.", {11, 15, 12, 13}, 0}, {
        "YOU SAID IT WAS A STRANGE WORLD.", {11, 15, 11, 15, 4, 1, 7, 13}, 
         0}, {"VERY GOOD JOE.", {2, 1, 7, 13}, 0}, {
        "ST. PETERSBURG.", {12}, 0}, {
        "IN OTHER WORDS SCURVY.", {10, 1, 7, 7, 13}, 0}, {
        "BUT MAYBE SOMEDAY.", {12, 12, 12, 13}, 0}, {
        "IF YOU'LL EXCUSE ME JUST A MOMENT -- BARNARD THOMAS MANAGER OF THE \
HOTEL.", {10, 11, 15, 12, 12, 2, 4, 7, 13, 12, 12, 7, 10, 4, 7, 13}, 0}, {
        "I SAW FRANCE AND AFRICA HALF OF SOUTH AMERICA.", {11, 15, 12, 3, 12, 
         12, 10, 12, 12, 13}, 0}, {
        "HE WAS IN ON THE SAME JOB.", {11, 15, 10, 12, 4, 12, 7, 13}, 0}, {
        "YOU'RE THE ONE WHO KEPT SAYING RAM HIM.", {11, 15, 4, 8, 11, 15, 15, 
         12, 12, 13}, 1}, {
        "GET CHECKED IN CLEANED UP...", {15, 12, 10, 12, 7, 13}, 0}, {
        "REPAIRING THE ANTENNA IS A PRETTY DANGEROUS OPERATION.", {15, 4, 7, 
         15, 4, 2, 1, 7, 13}, 0}, {
        "DIRECTED BY LASER.", {15, 10, 7, 13}, 0}, {
        "THE BOURBON.", {4, 7, 13}, 0}, {
        "BE GRATEFUL FOR SMALL MERCIES.", {15, 12, 10, 12, 12, 13}, 0}, {
        "THE GREATEST FIND IN HISTORY..CAN YOU IMAGINE THE IMPLICATIONS.", {4,
          12, 12, 10, 12, 13, 13}, 0}, {
        "MR. HARRIS DOESN'T CHECK OUT UNTIL TOMORROW.", {12, 12, 15, 2, 15, 
         12, 12, 12, 13}, 0}, {
        "SHOW SOME PRIDE HAMILTON.", {15, 12, 12, 12, 13}, 1}, {
        "JUST REACH ON IN.", {2, 15, 12, 10, 13}, 0}, {
        "I KNOW IT MAN.", {11, 15, 11, 7, 13}, 0}, {
        "READ MY LIPS: ZIMMERMANN OR NOTHING.", {15, 7, 7, 13, 12, 7, 7, 13}, 
         0}, {"FIVE SEVEN EIGHT DOLLARS.", {8, 8, 8, 12, 13}, 0}, {
        "YOU SAY SHE WAS BEAT ON.", {11, 15, 12, 12, 7, 10, 13}, 0}, {
        "THE SEMESTER'S ALMOST OVER SO YOU BETTER HURRY.", {4, 7, 12, 10, 12, 
         11, 1, 7, 13}, 0}, {
        "BOBBIE AND PHOEBE ARE THROWING ME A SHOWER.", {12, 3, 12, 15, 15, 7, 
         7, 7, 13}, 1}, {
        "DAD I'M ABOUT TO HAVE A KID OF MY OWN HERE.", {7, 8, 15, 10, 10, 12, 
         12, 12, 10, 12, 12, 2, 13}, 0}, {
        "THEY'VE ONLY JUST BEGUN ...", {12, 12, 12, 2, 15, 13}, 0}, {
        "QUIT ACTING LIKE SOME RETARD OR I'LL CALL YOUR MOTHER AND TELL HER \
WHAT A NAUGHTY LITTLE SHIT YOU'VE BEEN.", {12, 12, 12, 12, 15, 7, 11, 15, 1, 
         1, 7, 3, 7, 7, 4, 4, 12, 12, 12, 11, 15, 12, 13}, 1}, {
        "NEWT TIME THEN CAN WALK RIGHT UP AND KNOCK.", {12, 12, 12, 12, 12, 
         12, 7, 3, 7, 13}, 0}, {
        "MY PLATELETS LOOK GOOD TOO.", {7, 7, 15, 1, 7, 13}, 0}, {
        "WHAT YOU ARE SAYING IS YOU DON'T KNOW WHAT THIS..THING..IS.", {4, 11,
          15, 15, 15, 11, 7, 2, 12, 4, 12, 13, 13}, 1}, {
        "TOO GOD DAMN MUCH HEART.", {2, 12, 12, 12, 7, 13}, 0}, {
        "I SEEM TO HAVE TOUCHED A NERVE.", {11, 15, 10, 12, 15, 4, 7, 13}, 
         0}, {"EVERYTHING ELSE IS CONVERSATION..", {15, 2, 15, 7, 13, 13}, 
         0}, {"WELL SIR...", {12, 7, 13}, 0}, {
        "THERE MUST HAVE BEEN SOMEBODY.", {12, 12, 12, 12, 12, 13}, 0}, {
        "I BOUGHT IT FOR HIM -- ALL THE STUFF HE WAS USING IT WAS IN HIS \
CONTRACT.", {11, 15, 11, 10, 7, 13, 7, 4, 7, 11, 15, 12, 12, 12, 10, 11, 7, 
         13}, 0}, {
        "MIS-TER KRAMER IT'S...  ...ALMOST FOUR NOW.", {12, 12, 12, 13, 13, 2,
          8, 2, 13}, 0}, {
        "I JUST GOT A MESSED UP STOMACH.", {11, 2, 15, 4, 15, 9, 7, 13}, 0}, {
        "BY THE WAY ROGER YOU WERE RIGHT ABOUT YOUR WIFE.", {10, 4, 12, 12, 
         11, 15, 12, 12, 1, 7, 13}, 0}, {
        "I TRUST RICK.", {11, 12, 12, 13}, 0}, {
        "I TOLD YOU ABOUT SAMMY - I DUNNO...", {11, 15, 11, 10, 7, 13, 11, 15,
          13, 13}, 0}, {"MOVING ON.", {15, 9, 13}, 0}, {
        "I DON'T KNOW ANYTHING.", {11, 15, 2, 12, 12, 13}, 0}, {
        "WELL THAT'S GREAT COMING FROM A GLORIFIED GRAVE ROBBER!", {12, 4, 15,
          1, 15, 10, 4, 1, 1, 7, 13}, 0}, {
        "MOMMY'S COMING BABY!", {12, 12, 7, 13}, 0}, {
        "GOOD-BYE ADAM.", {12, 12, 13}, 0}, {
        "YOU'RE A BEAUTIFUL GUY.", {11, 15, 4, 1, 7, 13}, 0}, {
        "THEY *ARE* AGAINST THE LAW.", {7, 14, 15, 14, 10, 4, 7, 13}, 0}, {
        "THAT'S WHY YOU'RE A GAMBLING MAN.", {4, 15, 2, 11, 15, 4, 7, 7, 13}, 
         1}, {"KID GLOVES.", {7, 7, 13}, 0}, {"D.C.", {12}, 0}, {
        "YEAH THEY'RE GOIN' -- THAT'S NATURE..", {2, 7, 7, 7, 13, 13, 4, 15, 
         7, 13, 13}, 0}, {"DIG 'EM UP!", {12, 12, 7, 13}, 0}, {
        "GOT PLENTY TO EAT.", {12, 12, 10, 12, 13}, 0}, {
        "LISTEN GET A HOLD OF OUR AVAILABLE SECURITIES AND HAVE THEM TURNED \
INTO CASH.", {15, 15, 4, 15, 10, 12, 12, 12, 3, 12, 12, 15, 10, 7, 13}, 0}, {
        "GET SHEEP OVER SIDE..", {15, 12, 10, 12, 13, 13}, 0}, {
        "YOU MUST GET TO AMERICA.", {11, 15, 15, 10, 12, 13}, 0}, {
        "BEING A FOREIGNER I WOULD LOVE TO LEARN.", {15, 4, 7, 11, 15, 7, 10, 
         12, 13}, 0}, {
        "I'VE GOT A MEETING TONIGHT.", {11, 15, 12, 12, 12, 12, 13}, 0}, {
        "I'VE GOT FIFTY BUCKS TO THROW AWAY.", {11, 15, 15, 8, 7, 10, 15, 2, 
         13}, 0}, {"ONE THOUSAND FEET.", {8, 12, 12, 13}, 0}, {
        "UNCLE 'TIS A SHAME.", {7, 11, 15, 4, 7, 13}, 0}, {
        "I JUST WANTED -- YOU SET ME UP.", {11, 2, 15, 13, 11, 15, 7, 7, 13}, 
         0}, {"EVEN RESPECTABILITY.", {12, 12, 13}, 0}, {
        "I JUST TURN MY BACK ON THAT KIND OF TALK AND LOOK AWAY.", {11, 2, 15,
          7, 2, 10, 4, 7, 10, 12, 3, 12, 2, 13}, 0}, {
        "I CAN'T EXPLAIN IT NOW.", {11, 12, 2, 15, 11, 2, 13}, 0}, {
        "PATRIS BENEFACTUM ET --  ...IT WAS MALCOLM'S FAVORITE.", {12, 12, 12,
          13, 13, 11, 15, 12, 12, 13}, 0}, {
        "THE IDEA THAT YOU COULD DIE SUDDENLY WITH NO OFFSPRING DISCONCERTING \
LET'S MATE COMMIT YOUR GENES TO PERPETUITY.", {4, 7, 4, 11, 15, 15, 2, 10, 7, 
         12, 12, 12, 12, 12, 1, 7, 10, 12, 13}, 0}, {
        "LESGO LESGO LESGO.", {12, 12, 12, 13}, 0}, {
        "THAT'S ALL I DO WILL.", {4, 15, 7, 11, 15, 15, 13}, 0}, {
        "I'D LIKE TO THINK OUR NEXT SECRETARY OF THE NAVY WOULD BE PREPARED \
FOR ANYTHING MR. HAYES.", {11, 15, 10, 10, 12, 12, 12, 12, 10, 4, 12, 12, 15, 
         12, 10, 12, 12}, 0}, {
        "AND SAY EVERYTHING WENT WONDERFULLY.", {3, 12, 12, 15, 2, 13}, 0}, {
        "BUT YOU DON'T LOOK VERY HAPPY.", {12, 11, 15, 2, 15, 2, 1, 13}, 0}, {
        "YOUR FATHER CAN BE IN NOME ALASKA TOMORROW.", {1, 7, 12, 15, 10, 12, 
         12, 12, 13}, 0}, {
        "SHE SUPERVISED WORKERS REMOVING CORTODIAZAPINE FROM GEL CAPS BY HAND \
AND REPLACING IT WITH POWDERED SUGAR.", {12, 15, 7, 15, 12, 12, 12, 12, 12, 
         12, 3, 12, 12, 10, 12, 7, 13}, 0}, {
        "I'LL CALL TOMORROW..", {11, 15, 1, 12, 13, 13}, 0}, {
        "I WAS ONLY FIVE...", {11, 15, 2, 8, 13}, 0}, {
        "THAT'S WHAT THEY'RE GOING TO ASK YOU.", {4, 15, 4, 12, 12, 12, 10, 
         12, 11, 13}, 1}, {
        "FROM THE FIRST MOMENT I SAW YOU I SAW YOUR BAD QUALITIES AND \
TREMBLED AT YOUR VIOLENCE; BUT I COULD NOT HELP LOVING YOU.", {10, 4, 12, 12, 
         11, 15, 11, 11, 15, 1, 1, 7, 3, 15, 10, 1, 7, 13, 12, 12, 12, 12, 12,
          12, 11, 13}, 0}, {
        "I'LL SEND YOU A POSTCARD.", {11, 15, 15, 11, 4, 7, 13}, 0}, {
        "WE CAN'T LOSE.", {12, 12, 2, 15, 13}, 0}, {
        "HE'S A BLACK GUY.", {11, 15, 4, 1, 7, 13}, 0}, {
        "YOU AREN'T TALKING ABOUT MONEY THEIR BEADY LITTLE EYES GO DEAD.", {
         11, 15, 2, 15, 12, 12, 12, 12, 12, 12, 12, 12, 13}, 0}, {
        "NOT IF YOU'RE OVER SIXTEEN.", {12, 10, 11, 15, 10, 8, 13}, 0}, {
        "YOU CAN'T CHANGE IT.", {11, 12, 2, 15, 11, 13}, 0}, {
        "SS'KYA'TA'.", {7, 13, 7, 13, 13}, 0}, {
        "YOUR MOTHER'S.", {1, 7, 13}, 0}, {
        "WE STAY OFF HARD LIQUOR CIGARETTES..", {12, 12, 12, 1, 7, 7, 13, 13},
          0}, {"I WANT TO SHOW YOU SOMETHING.", {11, 15, 10, 15, 11, 7, 13}, 
         1}, {"BRAD THE BARTENDER.", {12, 4, 7, 13}, 0}, {
        "LET'S SEE...", {7, 15, 13}, 0}, {
        "I AM GOING TO BE FAMOUS.", {11, 15, 1, 10, 15, 12, 13}, 0}, {
        "JESUS. ... INTERVIEW EVERY EMPLOYEE SUPPORT STAFF ASSOCIATES \
PARTNERS.", {12, 13, 13}, 0}, {
        "NOT EVEN WHEN I'S DRINKIN'.", {12, 12, 2, 11, 15, 12, 13}, 1}, {
        "EITHER BECAUSE HE'S SO GOOD AT WHAT HE DOES HE DOESN'T THINK HE \
NEEDS IT OR HE'S SO INSECURE HE CAN'T ADMIT IT.", {12, 12, 11, 15, 2, 1, 10, 
         4, 11, 15, 11, 15, 2, 1, 11, 15, 11, 7, 11, 15, 12, 12, 11, 12, 2, 
         15, 11, 13}, 1}, {
        "HE'S SATAN'S LAP DOG OR SOMETHING.", {11, 15, 12, 7, 7, 7, 12, 13}, 
         0}, {"I JUST WANTED SOME MAKE-UP.", {11, 2, 15, 12, 7, 13}, 0}, {
        "IT'S BROKEN.", {11, 15, 12, 13}, 0}, {
        "I'M TELLING MOM.", {11, 15, 15, 7, 13}, 0}, {
        "FUCKING DUMP.", {15, 7, 13}, 0}, {
        "TOM I'M THIS CLOSE TO COMING WITH YOU..", {12, 11, 15, 7, 15, 10, 15,
          10, 11, 13, 13}, 0}, {
        "I GOT MY MIND MADE UP AND I AIN'T GONNA BE MOVED ON THIS.", {11, 15, 
         12, 12, 12, 7, 3, 11, 15, 2, 12, 12, 15, 15, 10, 12, 13}, 0}, {
        "I DON'T THINK I'LL BE HAVING SEX EVER AGAIN.", {11, 15, 2, 12, 11, 
         15, 15, 12, 12, 12, 2, 13}, 0}, {
        "I *HELPED* YOU NOT TO THINK ABOUT WALLY.", {11, 14, 15, 14, 11, 2, 
         10, 12, 12, 12, 13}, 0}, {"JACK!", {7, 13}, 0}, {
        "SPIKE!", {15, 13}, 0}, {
        "THAT'S WHY YOU GOT SCARED WHEN MRS. CHRISTIAN HIRED ME.", {4, 15, 2, 
         11, 15, 1, 2, 12, 12, 15, 7, 13}, 1}, {
        "I'LL BE BACK NEXT THURSDAY WE'LL TALK THE WHOLE THING OVER THEN.", {
         11, 15, 15, 12, 12, 12, 12, 12, 12, 4, 1, 7, 10, 2, 13}, 1}, {
        "AND YOU WERE HUNGRY REMEMBER.", {3, 11, 15, 1, 7, 13}, 0}, {
        "GROUND DEFENSE.", {7, 7, 13}, 0}, {
        "IT COULD SAVE THE VOYAGE.", {11, 15, 15, 4, 7, 13}, 0}, {
        "IF SHE GETS OUT LEGALLY THEY CAN'T COME AFTER HER.", {10, 12, 15, 12,
          12, 12, 12, 2, 15, 10, 7, 13}, 0}, {
        "THERE WASN'T ANY PLANE.", {15, 12, 2, 12, 7, 13}, 0}, {
        "I'M TRYING TO PUT OUT A NEWSPAPER HERE.", {11, 15, 15, 10, 12, 12, 
         12, 12, 2, 13}, 0}, {
        "IT'S HARD TO BELIEVE...", {11, 15, 1, 10, 15, 13}, 0}, {
        "EXTRACT OF PINEAL!", {15, 10, 7, 13}, 0}, {
        "HEY HEY HEY.", {7, 7, 7, 13}, 0}, {
        "SHE SLAMMED EVERY DOOR ON HER WAY DOWNSTAIRS -- EXCEPT THAT ONE.", {
         12, 15, 12, 12, 12, 12, 12, 12, 13, 12, 4, 8, 13}, 0}, {
        "YOU DON'T HAVE ANY MORE VACATIONS TO SELL, ON ANTHRAX ISLAND.", {11, 
         15, 2, 12, 12, 1, 7, 10, 15, 13, 10, 12, 12, 13}, 0}, {
        "AS SOON AS YOU GET BACK WE'LL TALK.", {1, 12, 12, 11, 15, 2, 1, 7, 
         12, 13}, 0}, {
        "YOU USED ME, MR. CRAWFORD.", {11, 15, 7, 13, 12, 12, 13}, 0}, {
        "LET THEM TALK.", {15, 12, 12, 13}, 0}, {
        "I CAN'T BELIEVE SHE'S WITH THAT GUY NOW!", {11, 12, 2, 12, 12, 10, 4,
          7, 2, 13}, 0}, {"MY MORE THAN SISTER.", {12, 1, 10, 7, 13}, 0}, {
        "BRAD AND I ARE WATCHING THE HOUSE.", {12, 3, 11, 15, 15, 4, 12, 13}, 
         0}, {"YOU WERE RIGHT MR. DICKSON!", {11, 15, 7, 12, 12, 13}, 0}, {
        "I KNEW THEIR FATHERS AND MOTHERS BEFORE THEM.", {11, 15, 12, 12, 3, 
         12, 10, 12, 13}, 0}, {
        "YOU WOULD TAKE A PAIN \[CapitalIAcute]N THE ARSE FULL STOP.", {11, 
         15, 7, 4, 7, 7, 4, 7, 1, 7, 13}, 0}, {
        "IF YOU'RE GOING TO TALK NONSENSE I DON'T WANT TO TALK TO YOU AT \
ALL.", {10, 11, 15, 1, 10, 12, 7, 11, 15, 2, 1, 10, 12, 10, 11, 10, 7, 13}, 
         0}, {"I BETTER GO I'LL TALK TO YOU LATER.", {11, 15, 7, 11, 15, 12, 
         10, 11, 2, 13}, 0}, {
        "THEN WE SHALL STATE ANOTHER TIME AND ANOTHER PLACE.", {2, 12, 12, 12,
          12, 12, 3, 12, 12, 13}, 0}, {
        "HE *LOVED* IT!", {11, 14, 15, 14, 11, 13}, 0}, {
        "SEE WHAT YOU DON'T KNOW IS YOU'RE ALREADY IN THE LAST TWO MINUTES OF \
YOUR LIFE.", {15, 4, 11, 15, 2, 12, 15, 11, 15, 12, 10, 4, 7, 8, 7, 10, 1, 7, 
         13}, 1}, {
        "DAMN I HATE THIS JOHNNY I REALLY DO.", {1, 11, 15, 7, 7, 11, 15, 7, 
         13}, 0}, {"BEAUTIFUL MORNING.", {1, 7, 13}, 0}, {
        "SO WHY DON'T YOU TAKE A DEEP BREATH JAKE AND I'LL COUNT TO TEN.", {
         12, 2, 12, 2, 11, 15, 4, 1, 7, 7, 3, 11, 15, 12, 10, 8, 13}, 1}, {
        "NO NOT GRUNEMANN.", {4, 12, 12, 13}, 0}, {
        "IT WAS AT LEAST AS GOOD AS THE SKY.", {11, 15, 10, 12, 12, 12, 12, 4,
          7, 13}, 0}, {
        "I JUST HAD A PHONE CALL.", {11, 2, 15, 4, 7, 7, 13}, 0}, {
        "YOU HAVE TO DRESS FOR SUCCESS.", {11, 15, 10, 12, 10, 7, 13}, 0}, {
        "SCARY MOVIES ARE GREAT FOREPLAY.", {1, 7, 15, 1, 7, 13}, 0}, {
        "DIGNAN THOSE AREN'T RUNNING SHOES.", {12, 4, 15, 2, 15, 7, 13}, 0}, {
        "HE AND HIS WIFE BOTH SAID SHE HAD A FINE MORAL CHARACTER AND WAS \
WONDERFUL WITH CHILDREN.", {11, 3, 11, 7, 4, 15, 12, 12, 12, 12, 12, 12, 3, 
         12, 12, 10, 7, 13}, 0}, {
        "OKAY I PROMISE..", {1, 11, 15, 13, 13}, 0}, {
        "I DIDN'T MAKE IT THIS FAR BY ATTRACTING A LOT OF ATTENTION.", {11, 
         15, 2, 15, 11, 7, 2, 10, 15, 4, 7, 10, 7, 13}, 0}, {
        "WE SHOULDA BEEN THERE TO BACK YOU UP.", {12, 12, 12, 12, 10, 2, 11, 
         9, 13}, 0}, {
        "SOMEONE WAS AT THAT WINDOW.", {7, 15, 10, 4, 7, 13}, 0}, {
        "YOU'RE EVEN SUSPICIOUS OF HIM.", {11, 15, 2, 1, 10, 12, 13}, 0}, {
        "WE SHOULD KNOW SOMETHING FIRST THING IN THE MORNING.", {12, 15, 15, 
         12, 12, 12, 10, 4, 7, 13}, 0}, {
        "OKAY DOWN BOY.", {1, 7, 7, 13}, 0}, {
        "BIRD DOG TO SCARECROW.", {7, 7, 10, 12, 13}, 0}, {
        "WHICH ANYONE COULDA TAKEN OUT OF MY GEAR ON THE CHOPPER.", {4, 12, 
         12, 12, 12, 10, 12, 12, 10, 4, 7, 13}, 1}, {
        "SIMPSON.", {12, 13}, 0}, {
        "WHEN THEY WATCHED AT ALL.", {2, 12, 15, 10, 7, 13}, 1}, {
        "I SAW IT IN THE EYE.", {11, 15, 11, 10, 4, 7, 13}, 0}, {
        "I'M JUST PROCRASTINATING.", {11, 15, 2, 15, 13}, 0}, {
        "YOU WAKE UP EVERY NIGHT SHEETS SOAKING THE SAME NIGHTMARE OVER AND \
OVER..", {11, 15, 9, 12, 12, 12, 12, 4, 1, 7, 10, 3, 10, 13, 13}, 0}, {
        "THIRTY MINUTES OR LESS.", {8, 7, 7, 7, 13}, 0}, {
        "SOME SHADE OF GREY MY EYES DON'T SEE.", {12, 12, 10, 12, 12, 12, 12, 
         2, 15, 13}, 0}, {"IT'S OKAY HONEY.", {11, 15, 1, 7, 13}, 0}, {
        "BUT I'LL BE IN TOMORROW NIGHT WITH A BREATHTAKING BLONDE AND IT WILL \
MAKE ME VERY HAPPY IF SHE LOSES.", {12, 11, 15, 15, 10, 12, 12, 10, 4, 1, 7, 
         3, 11, 15, 15, 12, 12, 12, 10, 12, 15, 13}, 0}, {
        "I APPRECIATE YOUR HONESTY GEORGE.", {11, 15, 1, 7, 7, 13}, 0}, {
        "IT WAS SOMEONE ELSE.", {11, 15, 12, 12, 13}, 0}, {
        "YOU WORTHLESS BASTARD.", {11, 1, 7, 13}, 0}, {
        "I LEAVE YOU ALONE FOR THREE MINUTES AND YOU START WAVING THAT \
GODDAMN MARLIN SPIKE AROUND -- YELLING ABOUT REPTILES!", {11, 15, 11, 2, 10, 
         8, 7, 3, 11, 12, 12, 4, 12, 12, 12, 12, 13, 15, 12, 12, 13}, 0}, {
        "DELIGHTED I'M SURE.", {1, 11, 15, 7, 13}, 0}, {
        "I ALSO PLACE LAS CHOCOLATES ON THE PILLOW.", {11, 2, 15, 12, 12, 12, 
         4, 7, 13}, 0}, {"SO IT'S MR CLEAN.", {12, 12, 7, 12, 13}, 0}, {
        "YOU PEOPLE ARE CRAZY!", {11, 15, 15, 7, 13}, 0}, {
        "HE COULD HAVE KILLED ME A DOZEN TIMES.", {11, 15, 12, 12, 12, 12, 12,
          12, 13}, 0}, {"AHHHHHH.", {2, 13}, 0}, {"TUMESCENT!", {1, 13}, 0}, {
        "THE WOUND IS BLEEDING!", {4, 12, 15, 12, 13}, 0}, {
        "ONE-SEVEN-FOUR-NINE-FIVE NATOMA.", {1, 12, 13}, 0}, {
        "CHECK YOUR PARENTS' BLOOD TYPES.", {15, 1, 7, 7, 7, 13}, 0}, {
        "FELLOW...", {12, 13, 13}, 0}, {
        "LOOK YOU'RE A PLAYER...", {15, 11, 15, 4, 7, 13}, 0}, {
        "I'M NOT USED TO SUCH KINDNESS.", {11, 15, 12, 12, 10, 12, 12, 13}, 
         0}, {"THEN I SIT BACK AND I THINK I MEAN WHO'S TO SAY I'M NOT A DUMB \
BITCH.", {2, 11, 7, 2, 3, 11, 15, 11, 15, 11, 15, 10, 12, 11, 15, 2, 4, 1, 7, 
         13}, 1}, {"THANK YOU MRS. PHILLIPS.", {15, 11, 12, 12, 13}, 0}, {
        "WHEN YA DON'T DO WHAT YA ARE TOLD IT MAKES ME LOOK BAD KID. \
...FINE.", {2, 12, 12, 2, 12, 4, 12, 15, 7, 11, 15, 12, 12, 12, 7, 13, 13, 7, 
         13}, 1}, {"IT IS A LIVING THING.", {11, 15, 4, 15, 7, 13}, 0}, {
        "HUMID OR DRY.", {1, 7, 7, 13}, 0}, {
        "SOMEBODY'LL SEE.", {7, 7, 15, 13}, 0}, {"MR...", {12, 13, 13}, 0}, {
        "WE APPRECIATE IT.", {12, 12, 12, 13}, 0}, {
        "QUIET AND DRAMATIC.", {1, 3, 7, 13}, 0}, {
        "IF YOU FEEL DIFFERENTLY BOB YOU SHOULD SAY SO WHEN YOU'RE CALLED TO \
THE STAND.", {10, 11, 15, 2, 2, 11, 15, 15, 12, 2, 11, 15, 15, 10, 4, 7, 13}, 
         1}, {"THAT'S RIGHT HOMER.", {4, 15, 12, 12, 13}, 0}, {
        "I HAVE NO CHOICE.", {11, 15, 7, 7, 13}, 0}, {
        "TRY THE PAY PHONE.", {7, 4, 7, 7, 13}, 0}, {
        "BE QUIET YOU FAT FOOL.", {15, 12, 11, 15, 7, 13}, 0}, {
        "HIS ARMY STARVES.", {11, 7, 15, 13}, 0}, {
        "IT GOT ME OUTTA WOODSBORO.", {11, 15, 12, 12, 12, 13}, 0}, {
        "COME ON WILL.", {15, 12, 15, 13}, 0}, {
        "THE GENERAL IS HERE.", {4, 12, 15, 2, 13}, 0}, {
        "IT'S NOT THAT -- IT'S ONLY TEMPORARY.", {11, 15, 12, 4, 13, 11, 15, 
         12, 12, 13}, 0}, {"SHE'S A JERK.", {12, 4, 7, 13}, 0}, {
        "YOUR ORDERS MIGHT BE DIFFERENT FROM MINE.", {1, 7, 15, 15, 1, 10, 7, 
         13}, 0}, {"I HAVE LOVE ALL OVER.", {11, 15, 7, 7, 10, 13}, 0}, {
        "YEAH GAL I BEEN HERE BEFORE.", {2, 7, 11, 15, 2, 10, 13}, 0}, {
        "SOMEDAY SCOTT THIS WILL ALL BE YOURS.", {12, 12, 12, 15, 7, 15, 12, 
         13}, 0}, {
        "PROBLEM IS DON'T WANT TO HOLD A CONVENTIONAL SUB OFF-SHORE FOR \
TARGET PRACTICE.", {7, 15, 12, 2, 12, 10, 15, 4, 1, 7, 7, 10, 7, 7, 13}, 0}, {
        "I DON'T EVEN KNOW WHAT THIS IS.", {11, 15, 2, 12, 12, 4, 12, 15, 13},
          1}, {"BUT LOOKED LIKE A BUNCH OF THOSE BIG BOYS CHEWIN' EACH \
OTHER'S GONADS OFF.", {12, 12, 10, 4, 7, 10, 4, 12, 7, 12, 12, 12, 6, 12, 12, 
         13}, 0}, {
        "THEY WERE SWEETIES UNTIL A MONTH AGO.", {12, 15, 7, 10, 4, 7, 7, 13},
          0}, {"THE DOGS HAVE A SCENT.", {4, 7, 15, 4, 7, 13}, 0}, {
        "WELL NO NOT REALLY.", {12, 7, 12, 12, 13}, 0}, {
        "HE WAS THERE IN THE STORM...", {11, 15, 12, 10, 4, 7, 13}, 0}, {
        "THAT'S ALL YOU CARED ABOUT.", {4, 15, 7, 11, 15, 12, 13}, 0}, {
        "REMEMBER: DIGNAN I -- HAVE THE CAR RUNNING AT THE NORTH- WEST \
CHECKPOINT.", {7, 13, 12, 12, 13, 12, 4, 7, 15, 10, 4, 12, 13, 7, 7, 13}, 
         0}, {"NO PICTURES-- TWO YEARS.", {7, 7, 13, 8, 7, 13}, 0}, {
        "IT MIGHT BE A GOOD IDEA FOR YOU TO DISAPPEAR FROM CASABLANCA FOR A \
WHILE.", {11, 15, 15, 4, 1, 7, 10, 11, 10, 12, 12, 12, 10, 4, 7, 13}, 0}, {
        "YOU'RE READY FOR THE QUIZ.", {11, 15, 1, 10, 4, 7, 13}, 0}, {
        "MAKE MINE A BLOODY MARY.", {15, 12, 4, 12, 12, 13}, 0}, {
        "S'NOT BAD S'VERY GOOD BUT..", {12, 12, 12, 12, 12, 13, 13}, 0}, {
        "I MEAN I'M...", {11, 15, 11, 15, 13}, 0}, {
        "IF ARLYN PAGE IS LIVING WITH TOM GRUNEMANN -- WHAT THE HELL DO YOU \
THINK'S THE MATTER.", {10, 12, 12, 15, 15, 10, 12, 12, 13, 4, 4, 7, 7, 11, 15,
          4, 7, 13}, 1}, {"I FROM MINE.", {11, 15, 7, 13}, 0}, {
        "BUT YOU CAN'T PROVE IT!", {12, 11, 12, 2, 15, 11, 13}, 0}, {
        "HE IS COMING TO MEET YOU.", {11, 15, 12, 10, 15, 11, 13}, 0}, {
        "WE'RE FUCKED I KNOW -- LET'S GO TALK TO BILL..", {12, 12, 12, 11, 15,
          13, 12, 12, 12, 10, 12, 13, 13}, 0}, {
        "IT WON'T EVER BE OVER LIKE THIS.", {11, 15, 2, 2, 15, 10, 12, 12, 
         13}, 0}, {"WIDOW'S BENEFITS.", {7, 7, 13}, 0}, {
        "CHARLEY MY HUSBAND AND I ARE ...DIVORCED AND KIM THAT'S OUR DAUGHTER \
IS ABOUT BILLY'S AGE AND THE CHILDREN PLAY TOGETHER A LOT.", {12, 12, 12, 3, 
         11, 15, 13}, 0}, {
        "THEN I'LL MAKE THIS EASY FOR YOU.", {2, 11, 15, 15, 7, 1, 10, 11, 
         13}, 0}, {
        "BARNES TOOK A BULLET RIGHT THERE.", {12, 15, 4, 12, 12, 12, 13}, 
         0}, {"DON'T GIVE ME THAT BULLSHIT.", {7, 2, 15, 12, 4, 12, 13}, 0}, {
        "WE SHOULD LET HIM REST.", {12, 15, 15, 12, 12, 13}, 0}, {
        "I'M TAKING YOU BACK.", {11, 15, 15, 11, 2, 13}, 0}, {
        "I HAPPEN TO KNOW THAT HE GETS TEN PERCENT.", {11, 15, 10, 12, 4, 11, 
         15, 8, 7, 13}, 0}, {
        "THE WOMAN I GOT IT FROM IS NEVER GOING TO GIVE IT A SECOND \
THOUGHT.", {4, 7, 11, 15, 11, 10, 15, 12, 12, 10, 15, 11, 4, 1, 7, 13}, 0}, {
        "YEAH WE GOT THAT PART.", {12, 12, 12, 4, 12, 13}, 0}, {
        "LAY OFF OF THAT STUFF SON.", {7, 7, 10, 4, 7, 7, 13}, 0}, {
        "NO I THINK A WHISKEY.", {7, 11, 15, 4, 7, 13}, 0}, {
        "THE RANCHER WAS SO ANGRY HE SENT ME TO LIVE AT THE LUTHERAN \
ORPHANAGE IN BOZEMAN.", {4, 7, 15, 12, 12, 11, 1, 7, 10, 15, 10, 4, 1, 7, 10, 
         12, 13}, 0}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question"}, 
    "LogProbabilities" -> CompressedData["
1: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
/1ZnUfF/KMuRTg==
     "], "CountMatrix" -> {{414, 86, 0}, {205, 295, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwV02dwDwYAxuG/xIy9RwSx92ztTSTaWrE3CUpoaKxra1M1Y52ajRa1Wiv2
3vtw1tVedUa568QpwuPD8/v0fn3DYwZHx6cKBAJJ8pwXvOQ1b3hLCu8+jIIC
gVQEEUwa0pKO9GQghIxkIjNZyEo2spODnOQiN3nIS34KEEpBwihEYYoQTlGK
UZwSlKQUpSlDOcpTgYpUojJVqUFNalGbOtSlHvVpQEMa0ZgmNCWCZkQSRXM+
oQUtaUVr2hBNW9rTgY50ojNd6Eo3utOT3sQQSx/68Tn9GUAcAxlEPF+SwFCG
MZyRjGI0YxjLOMYzgUl8y2SmMJVpTGcGM0lkFrOZw1zmMZ/vWcBCFrGYJSwl
iWX8yHJWsJKfWcVq1rKO9WxgI5vYTDJb2Mo2trODnexiN3vYyz72c4CDHOIw
RzjGCU5yitOc4RznucBFrnCNG9zkFre5w13ucZ8HPOQRT/iDpzzjT/7ib/7h
X/7jOS95xf+85g1vSeEdgWD/IYhgUpOWdKQnAyFkJBNZyEo2spODnOQmD/nI
TygFCaMQhSlCOEUpRnFKUJJSlKYMZSlPRSpRmSpUpRof8THVqUFNalGbOtSl
HvVpQEMa0ZgmNCWCZkQSRXM+5TNa0JJWtCaatrSjAx3pRGe60Z0e9KQXvYkh
lj70pR8DiGMgg/iCeAYzhASGMozhjGAkX/E13zCK0YxhLOOYwEQm8x1TmcZ0
ZjCTRGYxmznMYz4LWMgiFrOEpfxAEsv4ieWsYCWrWM0a1rKOX/iV9WxgE8ls
ZRvb2cEu9rCXfeznAAc5xGGOcJRjHOcEpzjNGc5yjvNc4CKXuMwVfuMq17jO
DW5yi9vc4S73uM/vPOAhj3jMe+HCyyU=
       "], CompressedData["
1:eJwNxr1KAmAAAMCvH8c2oXBrLRqi8iGqpUiHghAhcilzEbVJNGoOaRNyCIKC
kBZpDnEwEAqN1hBaagxt6oaDm09nt48nQghJRjLmj+nJEOZYYJkVVlkjzgab
7LBPigOOyHJCngJFSpxS4ZwadRrccsc9z7Tp8kKPV97oM+CdDz4Z8sU3P/wy
IjIVwgxRZomxyBLrbJFglz0OyZCjQJkqZ1xwSY0rrrnhgSaPtHiiQ5cefYb8
Ay8kMdA=
       "], {}}, {CompressedData["
1:eJwt0TlLFgAAgOFPJUjMI5wUNb4iRSxcvEhRosgECZLowCOxEKXUsEtrKBHU
ygwikiKk+qJBoyKkUFAhl7TTEgkDD6olE5GioalnaHj+wPsGa5rKGsMCgcBb
wokgkijWEU0MscSRSBLJpBBkI6mkkU4GWeSQSx4FFFJEMbspoZQ9lLGfQ5RT
SRWHqaaGIxyllmMcp4FmTnKaM7TQynku0EY7HVziMlfopodrXKeX29yhj3vc
J8QDHtLPAE8ZYoRRxnjJOK+YYJLX/9u+4z0f+cQMn/nCPAss8oMlfrLMKr/4
w18CZoURTgRrWEs0McSxnngSSCKFDQTZxGZSSSOdLWwlk2xyyGUb+RRQSBHb
2cFOdlHMXvZxgIOUU0ElddTTQBMnaOYUZ2mhlXNcpI1OuujmKj3c4Ca36OMu
Ifp5xGOe8IxBnvOCIYYZYZQxJpjkDR+YYpoZZpljngUW+co3vrPMCqv85h/r
lWQG
       "], CompressedData["
1:eJwV0+lPCAAABfBskWszKefMlWmO3JuYzZVRIvcxc5+x0lwbwsg9c+ROC3PO
LdHUBzeb+2iJ8sFROYY5hjl/ffi99w+812hC4qCEcgEBAc1EWQdSngoEUZHK
VCeYGoQQSk1qUZs61KMBDWlCGE0JpzktaUUErWlDW9rRno5E0pkudKUb3elB
T3oRRW+iiSGWAcQxkMEMYSjDGcEoRjOeyUxlGtOJJ4FEZpHEHOazgEUks5il
LCOFFaxiNevZyCZS2cJWtrGDnaSRTgZ7OMAhDnOEYxznBCc5zRkyOUsW5zhP
NhfIIZeLXOIq17jODW5znwc8Jo98CnhKIUU85wUvecVriimhlDd84COf+MxX
vvGdH/zkF7/5w1/+EWhYFQiiEpWpQlWqEUwIodSkFrWpSz3q05DGhBFOc1oQ
QRva0o72dKATkXSlGz2Iog99iSaGfsTSnwHEMYjBDGUYIxnFGMYyjvFMYCKT
mMwUphLPDGZSdq4kZjOXeSxkEcksZgnLWE4KK1jJGtayjg1sZBObSWUr29nB
LtLYTToZ7GUf+znAQQ5xmCMc5TinOE0mWWSTQy4XucRlrnCVa1znBje5xR3u
co+HPCKPfJ5QwDMKKeIFxZRQyhve8o73fOATn/nCfwdalY4=
       "], {}}}, 
    "ExtendedClasses" -> {"Not Question", "Question"}, "Weights" -> 
    SparseArray[Automatic, {1000}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.000318898, "SingleEvaluationTime" -> 
    0.0083802500000000005`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740158275742425*^9, 3.740159527510137*^9, 
  3.740159819982419*^9, 3.7401721103688717`*^9},
 CellLabel->
  "Out[141]=",ExpressionUUID->"c184602a-b01f-44df-acf8-2315027aa312"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"35bdf15f-09a1-4d42-addf-77b85136d58a"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8871316247249047, 0.6764183255598819, 
   0.23820103843132506`}, {0.8873338032309442, 0.5319196946388716, 
   0.005609334705243632}}, {{1., 0.42, 0.}, {0.927072712319429, 
   0.8428709171696687, 0.5986785116793221}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["414", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "414", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6688206785137318`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.828`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7399463806970509`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{414, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.6688206785137318}], 
         Row[{"Recall = ", 0.828}], 
         Row[{"FScore = ", 0.7399463806970509}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["205", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "205", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.33117932148626816`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.41`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          205, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.33117932148626816`}], 
         Row[{"Row fraction = ", 0.41}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["86", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "86", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.22572178477690288`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.172`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          86, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.22572178477690288`}], 
         Row[{"Row fraction = ", 0.172}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["295", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "295", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7742782152230971`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.59`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6696935300794551`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{295, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.7742782152230971}], 
         Row[{"Recall = ", 0.59}], 
         Row[{"FScore = ", 0.6696935300794551}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.828`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.828}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.59`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.59}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "619", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6688206785137318`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{619, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.6688206785137318}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "381", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7742782152230971`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{381, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.7742782152230971}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["500", TraditionalForm]}, {0.5, 
       FormBox["500", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["619", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["381", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.7401582818924913`*^9, 3.74015953613031*^9, 3.7401599061844063`*^9, {
   3.7401721625052567`*^9, 3.740172167147621*^9}},
 CellLabel->
  "Out[143]=",ExpressionUUID->"034ae511-7fce-4269-88b6-bfae1686d8dd"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{808, 755},
WindowMargins->{{Automatic, 30}, {-34, Automatic}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 137, 1, 45, "Subsubsection",ExpressionUUID->"cab4ee65-639b-4750-a1e4-975f2577e569"],
Cell[CellGroupData[{
Cell[742, 27, 274, 5, 30, "Input",ExpressionUUID->"d71059b3-665b-4950-867f-9bf72a6d367d"],
Cell[1019, 34, 243, 3, 34, "Output",ExpressionUUID->"d07504cd-4cf9-458b-bdb7-008023386f33"]
}, Open  ]],
Cell[1277, 40, 449, 11, 30, "Input",ExpressionUUID->"8413af67-812f-44eb-acb6-871039fc40cf"],
Cell[1729, 53, 479, 14, 30, "Input",ExpressionUUID->"18054f2b-965c-49cb-8804-2a7fbfca729b"],
Cell[2211, 69, 384, 9, 30, "Input",ExpressionUUID->"6106833c-4a76-4063-a956-dec4209f4060"],
Cell[2598, 80, 173, 3, 30, "Input",ExpressionUUID->"eb2ff9fe-4247-4574-abae-11656fdb5bbb"],
Cell[CellGroupData[{
Cell[2796, 87, 255, 4, 30, "Input",ExpressionUUID->"14e880f6-e239-45e4-9145-3be8f2c8060e"],
Cell[3054, 93, 225, 3, 34, "Output",ExpressionUUID->"2dd5deed-1af9-4aab-bf7e-c1bae71d6c03"]
}, Open  ]],
Cell[3294, 99, 243, 6, 30, "Input",ExpressionUUID->"3fd53a69-1c65-49c9-91ca-518a28b4a4dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3574, 110, 149, 1, 45, "Subsubsection",ExpressionUUID->"b49d2da7-adc3-45f2-b7b6-c68f0e7ec730"],
Cell[3726, 113, 219, 2, 35, "Text",ExpressionUUID->"92a8c79e-daf1-4081-b17e-f49b05eabc91"],
Cell[CellGroupData[{
Cell[3970, 119, 393, 8, 30, "Input",ExpressionUUID->"dedd85af-eeb0-43cf-80b7-74bc2f15bb0a"],
Cell[4366, 129, 8130, 211, 184, "Output",ExpressionUUID->"1cd8f8d6-5d36-4fe5-9e2b-af900e0ba35d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12533, 345, 565, 14, 52, "Input",ExpressionUUID->"c5e8a140-ec24-4682-b35a-20a6f28713cc"],
Cell[13101, 361, 8154, 211, 184, "Output",ExpressionUUID->"fbe5d00d-94d5-4e4c-b98b-102d3458e57d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21304, 578, 156, 1, 45, "Subsubsection",ExpressionUUID->"7b6c53ad-8577-466a-bfed-e5f158adc6fb"],
Cell[CellGroupData[{
Cell[21485, 583, 477, 10, 52, "Input",ExpressionUUID->"a7b6d6cc-7ef0-467e-9dde-60e19e6c7fe6"],
Cell[21965, 595, 8217, 213, 163, "Output",ExpressionUUID->"9a4341fb-1f3f-4ad4-81f1-7ccd6cf748df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[30219, 813, 216, 4, 30, "Input",ExpressionUUID->"262ad8a5-14f2-4740-b5c7-783cf07c0df5"],
Cell[30438, 819, 7895, 206, 163, "Output",ExpressionUUID->"c540d6ec-14c7-46f2-9753-7539db0ebb43"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[38382, 1031, 117, 1, 45, "Subsubsection",ExpressionUUID->"df29d1d5-fc99-48cd-ba8c-31b7c9564335"],
Cell[CellGroupData[{
Cell[38524, 1036, 350, 7, 30, "Input",ExpressionUUID->"f5a5e964-4f0a-4b95-af97-34c669344325"],
Cell[38877, 1045, 8064, 210, 184, "Output",ExpressionUUID->"9254a232-b237-409f-82e1-f249b2e9a6da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46978, 1260, 288, 6, 30, "Input",ExpressionUUID->"d2d17123-2450-4c92-8bfd-9e4f335ae4d6"],
Cell[47269, 1268, 8044, 209, 184, "Output",ExpressionUUID->"9d0c226a-1f98-46de-8e8b-e53c969185f2"]
}, Open  ]],
Cell[55328, 1480, 511, 11, 52, "Input",ExpressionUUID->"e9a06111-4bd6-4f73-a69f-7b65f263d0ed"],
Cell[55842, 1493, 471, 11, 52, "Input",ExpressionUUID->"e81c76ef-496b-451f-8f6b-f779b847fb8c"],
Cell[56316, 1506, 554, 12, 52, "Input",ExpressionUUID->"f56e3b0e-2dc7-4fd9-ae0b-89a1a7a7f4f5"],
Cell[56873, 1520, 497, 12, 73, "Input",ExpressionUUID->"cf5afbb1-9047-4c6c-8417-4e467840f6f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57407, 1537, 139, 1, 45, "Subsubsection",ExpressionUUID->"0ef2d266-dca6-4b95-9309-5085c4fdc9e4"],
Cell[CellGroupData[{
Cell[57571, 1542, 795, 16, 94, "Input",ExpressionUUID->"2e3d1310-7455-4cb5-b6e5-7872be0dac8b"],
Cell[58369, 1560, 1030, 19, 77, "Output",ExpressionUUID->"23240653-ded3-4eef-a54c-0d0f01276396"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[59448, 1585, 112, 1, 45, "Subsubsection",ExpressionUUID->"c3e68d7b-1c05-456d-a16e-0a3835c9a007"],
Cell[CellGroupData[{
Cell[59585, 1590, 1896, 43, 262, "Input",ExpressionUUID->"16520970-9419-43f2-9f32-e3c5b48f5c56"],
Cell[61484, 1635, 53845, 1029, 93, "Output",ExpressionUUID->"6fc05414-ce14-4584-bdf7-97ac005af35e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115366, 2669, 1193, 32, 136, "Input",ExpressionUUID->"ed243bc7-b166-488c-96c2-e32ab1bcf9e8"],
Cell[116562, 2703, 180, 2, 34, "Output",ExpressionUUID->"7f97979a-1d63-4317-aa9c-b7a27750bdde"]
}, Open  ]],
Cell[116757, 2708, 3425, 82, 680, "Code",ExpressionUUID->"f24b21c2-f4e4-4ce9-adab-28ec9139ee26"],
Cell[CellGroupData[{
Cell[120207, 2794, 1417, 38, 115, "Input",ExpressionUUID->"e5881c42-c5f6-4ba6-a1de-87adfe55fb2f"],
Cell[121627, 2834, 2301, 60, 261, "Output",ExpressionUUID->"bf186162-f187-4f7b-a97d-bf9ad8f4bfd7"]
}, Open  ]],
Cell[123943, 2897, 5903, 150, 514, "Input",ExpressionUUID->"54f1815f-e286-4c78-b929-24096a8edd1c"],
Cell[CellGroupData[{
Cell[129871, 3051, 6111, 154, 514, "Input",ExpressionUUID->"dd5bebd2-95f7-460e-81d7-b41b2e84a9a0"],
Cell[135985, 3207, 11109, 224, 112, "Output",ExpressionUUID->"6b90ff0b-125c-4cbf-9b27-462161bafb5a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[147131, 3436, 3175, 79, 262, "Input",ExpressionUUID->"92773ba6-c513-48fc-b7e8-6215dd347448"],
Cell[150309, 3517, 8721, 177, 111, "Output",ExpressionUUID->"f4d27a2a-681d-4304-90a6-cddc7955eef6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159067, 3699, 226, 3, 30, "Input",ExpressionUUID->"e12b0564-1f3c-4105-a841-3f359f8fa3f0"],
Cell[159296, 3704, 9618, 251, 321, "Output",ExpressionUUID->"b7314f76-072f-4d8c-b6f1-700665964a8f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168963, 3961, 167, 3, 54, "Subsection",ExpressionUUID->"4f87d1e5-e9c2-400c-b56b-14ca6ccffed4"],
Cell[CellGroupData[{
Cell[169155, 3968, 795, 16, 94, "Input",ExpressionUUID->"ab593a78-068a-4748-ad79-479c6bfcab2b"],
Cell[169953, 3986, 1008, 19, 77, "Output",ExpressionUUID->"da6a0587-bc3d-4810-b62f-a1e1ad284771"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170998, 4010, 6418, 159, 556, "Input",ExpressionUUID->"7c99db0d-c727-4d26-826f-ec0910fc5904"],
Cell[177419, 4171, 92403, 1669, 93, "Output",ExpressionUUID->"6c670d68-be30-4e1a-9524-065c42da0c60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269859, 5845, 3148, 79, 283, "Input",ExpressionUUID->"d078db54-3fb5-4f7d-a830-7291119b8496"],
Cell[273010, 5926, 119272, 2069, 92, "Output",ExpressionUUID->"e5cc3856-4b2d-4dc7-a1be-ea3687cbe143"]
}, Open  ]],
Cell[CellGroupData[{
Cell[392319, 8000, 160, 2, 30, "Input",ExpressionUUID->"76f749cb-8628-4673-a9de-a9c265a377e4"],
Cell[392482, 8004, 9602, 251, 321, "Output",ExpressionUUID->"4abb7f32-3900-4a1a-8331-9545f2c51f6d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[402133, 8261, 190, 3, 54, "Subsection",ExpressionUUID->"442669c2-296c-487d-933d-58838e62affc"],
Cell[402326, 8266, 353, 7, 30, "Input",ExpressionUUID->"05a4d2b2-86a2-487b-b829-35fa2b7bc77f"],
Cell[CellGroupData[{
Cell[402704, 8277, 2166, 43, 283, "Input",ExpressionUUID->"4a77f52a-47fc-426a-8bb2-14b305238994"],
Cell[404873, 8322, 11179, 226, 112, "Output",ExpressionUUID->"1bdcb11f-61c2-446e-9d92-9fffae167afb"]
}, Open  ]],
Cell[416067, 8551, 157, 3, 30, "Input",ExpressionUUID->"4f5700aa-442d-48ee-a951-c2cd0b983e3a"],
Cell[CellGroupData[{
Cell[416249, 8558, 878, 20, 73, "Input",ExpressionUUID->"8934d3ef-dd87-4142-8bed-ceca9391344b"],
Cell[417130, 8580, 8717, 177, 111, "Output",ExpressionUUID->"8f05786e-4d35-4ea5-a1c6-ddb2c4c49d78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[425884, 8762, 228, 3, 30, "Input",ExpressionUUID->"57535679-2960-420a-8ceb-6b07723069ad"],
Cell[426115, 8767, 18642, 399, 321, 9467, 248, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"08a5ca49-d4a9-4876-bad7-b433fea73cd8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[444806, 9172, 155, 3, 54, "Subsection",ExpressionUUID->"91183821-3108-44aa-a87f-8a7c1fe0310e"],
Cell[444964, 9177, 2197, 44, 262, "Input",ExpressionUUID->"20ce2fee-f182-4a76-8ef1-f2420b0008d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[447198, 9226, 203, 4, 54, "Subsection",ExpressionUUID->"0c2cda38-6288-407b-b6e4-407de0a266a2"],
Cell[CellGroupData[{
Cell[447426, 9234, 2179, 44, 220, "Input",ExpressionUUID->"0699803f-03ac-4b06-b522-2b05fb15ab8a"],
Cell[449608, 9280, 74596, 1376, 93, "Output",ExpressionUUID->"e6a6149c-29f2-4424-94c0-f516ca1c9f4f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[524241, 10661, 771, 18, 73, "Input",ExpressionUUID->"c88b7817-10bf-4c38-8017-f8f1193ed1f7"],
Cell[525015, 10681, 90313, 1611, 92, "Output",ExpressionUUID->"96549ca8-5001-4e69-b5ba-12f1ae4e3c56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[615365, 12297, 160, 2, 30, "Input",ExpressionUUID->"6cfdd4a1-d410-4d1f-8ed6-4fbf050556f7"],
Cell[615528, 12301, 9583, 251, 321, "Output",ExpressionUUID->"a914b72a-70f2-4af1-9e0f-187b994358e8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[625160, 12558, 252, 4, 54, "Subsection",ExpressionUUID->"aa2ca46c-0868-46f9-9183-0ab00f37703b"],
Cell[CellGroupData[{
Cell[625437, 12566, 2199, 43, 220, "Input",ExpressionUUID->"3e953368-3ba7-48e4-9f56-3cd26b2f2974"],
Cell[627639, 12611, 103948, 1856, 65, "Output",ExpressionUUID->"bf9e3740-1061-453f-bc41-e36d43b8ba70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[731624, 14472, 874, 20, 73, "Input",ExpressionUUID->"ff3e3682-e8a6-4fab-a152-1dffd7dd02f9"],
Cell[732501, 14494, 243692, 3992, 92, "Output",ExpressionUUID->"7a329f44-a841-4e2a-9c9d-6cc60b045aec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[976230, 18491, 160, 2, 30, "Input",ExpressionUUID->"a28f438c-b49b-4104-a35a-3130cb085a1f"],
Cell[976393, 18495, 9627, 250, 321, "Output",ExpressionUUID->"2ff93e4d-7ab4-43cd-b9e3-5ab0f946d6b6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[986069, 18751, 190, 3, 54, "Subsection",ExpressionUUID->"8c8c4504-2f1d-43ec-95ba-13964edcd4f7"],
Cell[986262, 18756, 757, 14, 52, "Input",ExpressionUUID->"2c39e4b2-e44e-4951-a038-6f2d45c565eb"],
Cell[CellGroupData[{
Cell[987044, 18774, 312, 5, 30, "Input",ExpressionUUID->"8ffd62dc-42f0-4668-98ee-f7ee71c8aef2"],
Cell[987359, 18781, 152, 2, 34, "Output",ExpressionUUID->"7276e46d-bd20-462d-90b4-aa990e1d8d55"]
}, Open  ]],
Cell[987526, 18786, 1481, 38, 167, "Code",ExpressionUUID->"b05ded02-c2b4-4cfe-b820-81ccea690354"],
Cell[CellGroupData[{
Cell[989032, 18828, 521, 13, 30, "Input",ExpressionUUID->"2e8f4877-cfc2-4e55-833b-a6cd59c8c11f"],
Cell[989556, 18843, 1307, 20, 98, "Output",ExpressionUUID->"007e139a-ba5d-40c2-bba4-d6b60ac6e021"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[990912, 18869, 249, 4, 54, "Subsection",ExpressionUUID->"e1bfd86c-b4d9-4adb-ab28-100e769c4867"],
Cell[CellGroupData[{
Cell[991186, 18877, 2347, 46, 241, "Input",ExpressionUUID->"2fa3af23-900f-4dfb-b4da-54d74ec65c98"],
Cell[993536, 18925, 11185, 226, 112, "Output",ExpressionUUID->"df4306c6-f894-4f11-9c3e-2f4b711cf376"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1004758, 19156, 863, 21, 52, "Input",ExpressionUUID->"b6d3bf9f-acfc-4af8-b284-392b2d2d911a"],
Cell[1005624, 19179, 149631, 2550, 92, "Output",ExpressionUUID->"56daeab6-970f-4540-9c3d-5f354b7675a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1155292, 21734, 164, 3, 30, "Input",ExpressionUUID->"d28206d5-a1db-4b18-95a0-545724d10c77"],
Cell[1155459, 21739, 9377, 243, 321, "Output",ExpressionUUID->"cdc81bd9-a871-4ad4-8cd2-04a7a030c728"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1164885, 21988, 302, 5, 54, "Subsection",ExpressionUUID->"2288b0f8-e3ba-4450-b920-1b5299f6b207"],
Cell[CellGroupData[{
Cell[1165212, 21997, 2369, 46, 241, "Input",ExpressionUUID->"e8e6a9d9-f107-4823-9ebf-2bb0f0877576"],
Cell[1167584, 22045, 927, 20, 110, "Message",ExpressionUUID->"606f3cee-4934-4088-9042-53ea0ceb1eeb"],
Cell[1168514, 22067, 613, 13, 42, "Message",ExpressionUUID->"5808ba42-816f-43cd-b483-43b839a774c9"],
Cell[1169130, 22082, 223660, 3853, 93, "Output",ExpressionUUID->"3cc3eea0-8d0b-4f7d-91f0-d4e5ef96dfba"]
}, Open  ]],
Cell[1392805, 25938, 126, 2, 30, "Input",ExpressionUUID->"57cab30a-2b88-4a46-9b94-4a8b098b6a50"],
Cell[CellGroupData[{
Cell[1392956, 25944, 909, 21, 52, "Input",ExpressionUUID->"62f46b42-ed9a-43b6-b3ba-cec748b2d139"],
Cell[1393868, 25967, 234383, 3857, 92, "Output",ExpressionUUID->"c184602a-b01f-44df-acf8-2315027aa312"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1628288, 29829, 164, 3, 30, "Input",ExpressionUUID->"35bdf15f-09a1-4d42-addf-77b85136d58a"],
Cell[1628455, 29834, 9712, 253, 355, "Output",ExpressionUUID->"034ae511-7fce-4269-88b6-bfae1686d8dd"]
}, Open  ]]
}, Open  ]]
}
]
*)

