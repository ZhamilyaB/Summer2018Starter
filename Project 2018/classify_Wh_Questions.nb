(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   3202101,      56364]
NotebookOptionsPosition[   3186638,      56098]
NotebookOutlinePosition[   3187015,      56115]
CellTagsIndexPosition[   3186972,      56112]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Data", "Subsubsection",
 CellChangeTimes->{{3.7402375556735163`*^9, 3.7402375566390667`*^9}},
 TextAlignment->Center,ExpressionUUID->"5302f39c-3660-4acc-b9b2-0f8436153de1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"quoraquestions", "=", 
   RowBox[{"SemanticImport", "[", "\"\<train.csv\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"quora", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"quoraquestions", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "5"}], "]"}], "]"}], ",", 
       RowBox[{"quoraquestions", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "4"}], "]"}], "]"}]}], "]"}], ",", "26654"}], 
    "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"movie", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{"\"\<movie_lines.tsv\>\"", ",", "\"\<Text\>\""}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\\t\>\"", ",", "\"\<\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"lines", "=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Partition", "[", 
       RowBox[{"movie", ",", "5"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", 
        RowBox[{"-", "1"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\\\"\>\"", "->", "\"\<\>\""}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"linesJoined", "=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"Riffle", "[", 
     RowBox[{"lines", ",", "\"\< \>\""}], "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"sentences", "=", 
   RowBox[{"TextCases", "[", 
    RowBox[{"linesJoined", ",", "\"\<Sentence\>\""}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"validChars", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\\t\>\"", ",", " ", "\"\<\\n\>\"", ",", " ", "\"\< \>\"", ",", " ", 
      "\"\<!\>\"", ",", " ", "\"\<\\\"\>\"", ",", " ", "\"\<#\>\"", ",", " ", 
      "\"\<$\>\"", ",", " ", "\"\<%\>\"", ",", " ", "\"\<&\>\"", ",", " ", 
      "\"\<'\>\"", ",", " ", "\"\<(\>\"", ",", " ", "\"\<)\>\"", ",", " ", 
      "\"\<*\>\"", ",", " ", "\"\<+\>\"", ",", " ", "\"\<,\>\"", ",", " ", 
      "\"\<-\>\"", ",", " ", "\"\<.\>\"", ",", " ", "\"\</\>\"", ",", " ", 
      "\"\<0\>\"", ",", " ", "\"\<1\>\"", ",", " ", "\"\<2\>\"", ",", " ", 
      "\"\<3\>\"", ",", " ", "\"\<4\>\"", ",", " ", "\"\<5\>\"", ",", " ", 
      "\"\<6\>\"", ",", " ", "\n", "    ", "\"\<7\>\"", ",", " ", "\"\<8\>\"",
       ",", " ", "\"\<9\>\"", ",", " ", "\"\<:\>\"", ",", " ", "\"\<;\>\"", 
      ",", " ", "\"\<<\>\"", ",", " ", "\"\<=\>\"", ",", " ", "\"\<>\>\"", 
      ",", " ", "\"\<?\>\"", ",", " ", "\"\<@\>\"", ",", " ", "\"\<A\>\"", 
      ",", " ", "\"\<B\>\"", ",", " ", "\"\<C\>\"", ",", " ", "\"\<D\>\"", 
      ",", " ", "\"\<E\>\"", ",", " ", "\"\<F\>\"", ",", " ", "\"\<G\>\"", 
      ",", " ", "\"\<H\>\"", ",", " ", "\"\<I\>\"", ",", " ", "\"\<J\>\"", 
      ",", " ", "\"\<K\>\"", ",", " ", "\"\<L\>\"", ",", " ", "\"\<M\>\"", 
      ",", " ", "\"\<N\>\"", ",", " ", "\"\<O\>\"", ",", " ", "\"\<P\>\"", 
      ",", " ", "\"\<Q\>\"", ",", " ", "\"\<R\>\"", ",", " ", "\n", "    ", 
      "\"\<S\>\"", ",", " ", "\"\<T\>\"", ",", " ", "\"\<U\>\"", ",", " ", 
      "\"\<V\>\"", ",", " ", "\"\<W\>\"", ",", " ", "\"\<X\>\"", ",", " ", 
      "\"\<Y\>\"", ",", " ", "\"\<Z\>\"", ",", " ", "\"\<[\>\"", ",", " ", 
      "\"\<\\\\\>\"", ",", " ", "\"\<]\>\"", ",", " ", "\"\<^\>\"", ",", " ", 
      "\"\<_\>\"", ",", " ", "\"\<`\>\"", ",", " ", "\"\<a\>\"", ",", " ", 
      "\"\<b\>\"", ",", " ", "\"\<c\>\"", ",", " ", "\"\<d\>\"", ",", " ", 
      "\"\<e\>\"", ",", " ", "\"\<f\>\"", ",", " ", "\"\<g\>\"", ",", " ", 
      "\"\<h\>\"", ",", " ", "\"\<i\>\"", ",", " ", "\"\<j\>\"", ",", " ", 
      "\"\<k\>\"", ",", " ", "\"\<l\>\"", ",", " ", "\"\<m\>\"", ",", " ", 
      "\n", "    ", "\"\<n\>\"", ",", " ", "\"\<o\>\"", ",", " ", "\"\<p\>\"",
       ",", " ", "\"\<q\>\"", ",", " ", "\"\<r\>\"", ",", " ", "\"\<s\>\"", 
      ",", " ", "\"\<t\>\"", ",", " ", "\"\<u\>\"", ",", " ", "\"\<v\>\"", 
      ",", " ", "\"\<w\>\"", ",", " ", "\"\<x\>\"", ",", " ", "\"\<y\>\"", 
      ",", " ", "\"\<z\>\"", ",", " ", "\"\<{\>\"", ",", " ", "\"\<|\>\"", 
      ",", " ", "\"\<}\>\"", ",", " ", "\"\<~\>\""}], "}"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{"wikiSimport", "=", 
   RowBox[{"Import", "[", "\"\<wikisentences1.mx\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"wikiS", " ", "=", " ", 
   RowBox[{"StringDelete", "[", 
    RowBox[{"wikiSimport", ",", " ", 
     RowBox[{"Except", "[", "validChars", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"questions", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"Normal", "[", "quora", "]"}], ",", 
     RowBox[{"Select", "[", 
      RowBox[{"sentences", ",", 
       RowBox[{
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"#", ",", "\"\<?\>\""}], "]"}], "&"}]}], "]"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"questionsWithoutQuestions", " ", "=", " ", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"questions", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<?\>\"", "->", "\"\<.\>\""}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"normalLines", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"wikiS", ",", 
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Complement", "[", 
         RowBox[{"sentences", ",", "questions"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"80", ";;", "64213"}], "]"}], "]"}], ",", "19653"}], "]"}]}],
     "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.740171337884294*^9, 3.74017136770111*^9}, {
   3.7401723329934387`*^9, 3.740172357518361*^9}, {3.740172511329248*^9, 
   3.740172538806169*^9}, {3.740176897945056*^9, 3.7401769077256823`*^9}, {
   3.74017694916899*^9, 3.740176967012704*^9}, {3.740181238944667*^9, 
   3.740181242277598*^9}, {3.740181383844449*^9, 3.7401813866833897`*^9}, 
   3.740181450341567*^9, {3.740181481523687*^9, 3.7401814881462793`*^9}, {
   3.7401815495606422`*^9, 3.740181555865614*^9}, {3.740186772994566*^9, 
   3.740186780716448*^9}, 3.7402350751478157`*^9, {3.740235130234358*^9, 
   3.740235132269972*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"08bad5e3-7483-4bc7-8b03-c86855f6a042"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"classesqs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{"#", "->", "\"\<Question\>\""}], "]"}], "&"}], "/@", 
    "questionsWithoutQuestions"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"classesnotqs", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"Thread", "[", 
      RowBox[{"#", "->", "\"\<Not a Question\>\""}], "]"}], "&"}], "/@", 
    "normalLines"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"classesJoined", "=", 
     RowBox[{"Join", "[", 
      RowBox[{"classesqs", ",", "classesnotqs"}], "]"}]}], ";", "\n", 
    RowBox[{"training", "=", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"classesJoined", ",", "20000"}], "]"}]}], ";", "\n", 
    RowBox[{"validationset", "=", 
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{"Complement", "[", 
        RowBox[{"classesJoined", ",", "training"}], "]"}], ",", "2000"}], 
      "]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"testset", "=", 
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{"Complement", "[", 
        RowBox[{"classesJoined", ",", "validationset", ",", "training"}], 
        "]"}], ",", "2000"}], "]"}]}], ";"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.740181715010005*^9, 3.740181717903517*^9}, 
   3.7401860506624804`*^9},
 CellLabel->"In[15]:=",ExpressionUUID->"b92cadde-ea69-4f2c-9251-ed4d2d0d940c"],

Cell["\<\
The data is loaded and divided into classes of questions and not questions!\
\>", "Text",
 CellChangeTimes->{{3.740185963222699*^9, 
  3.74018600775711*^9}},ExpressionUUID->"fc16104e-fc1f-4d17-98bd-\
cf9d015117e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classesnotqs", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.74023529663491*^9, 3.7402353055506773`*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"4010deeb-f308-4a4b-a232-fa3762034273"],

Cell[BoxData["46307"], "Output",
 CellChangeTimes->{{3.740235299254786*^9, 3.740235306186178*^9}},
 CellLabel->"Out[18]=",ExpressionUUID->"27a304bb-6266-4c83-a7c5-4e539d6ae721"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questions", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.740181313756524*^9, 3.740181318778392*^9}},
 CellLabel->
  "In[253]:=",ExpressionUUID->"6a9da494-48e0-4fa8-9208-cfa95c851bfa"],

Cell[BoxData["46307"], "Output",
 CellChangeTimes->{3.740181319275814*^9},
 CellLabel->
  "Out[253]=",ExpressionUUID->"7d3a119e-544b-406d-acfe-56ffc4329205"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"normalLines", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.740181335137847*^9, 3.7401813377138443`*^9}},
 CellLabel->
  "In[254]:=",ExpressionUUID->"5bec4431-0bc3-4093-912c-cfce30f5856b"],

Cell[BoxData["46307"], "Output",
 CellChangeTimes->{3.7401813381459103`*^9},
 CellLabel->
  "Out[254]=",ExpressionUUID->"f1211b6b-0de0-4cfc-ae5c-ccbc6a521da8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Changing parts of speech to numbers", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"c18f356c-250e-4723-bf55-1a1d3d53ac68"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", " ", "=", " ", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", " ", "\[Rule]", 
      RowBox[{"First", "[", "#2", " ", "]"}]}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adjective\>\"", ",", "\"\<Adverb\>\"", ",", "\"\<Conjunction\>\"", 
      ",", "\"\<Determiner\>\"", ",", "\"\<Interjection\>\"", ",", 
      "\"\<Missing\>\"", ",", "\"\<Noun\>\"", ",", "\"\<Numeral\>\"", ",", 
      "\"\<Particle\>\"", ",", "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", 
      ",", "\"\<ProperNoun\>\"", ",", "\"\<Punctuation\>\"", ",", 
      "\"\<Symbol\>\"", ",", "\"\<Verb\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.740085705554276*^9},
 CellLabel->"In[9]:=",ExpressionUUID->"757faebf-554c-49ea-80ed-1863100a06f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Adjective\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Adverb\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"Conjunction\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"Determiner\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"Interjection\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"Missing\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"Noun\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"Numeral\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"Particle\"\>", "\[Rule]", "9"}], ",", 
   RowBox[{"\<\"Preposition\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"Pronoun\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"ProperNoun\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"Punctuation\"\>", "\[Rule]", "13"}], ",", 
   RowBox[{"\<\"Symbol\"\>", "\[Rule]", "14"}], ",", 
   RowBox[{"\<\"Verb\"\>", "\[Rule]", "15"}]}], "}"}]], "Output",
 CellChangeTimes->{3.740085709225148*^9, 3.740157408809452*^9, 
  3.7401866507867193`*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"b80802a8-9f5b-4c7f-82cb-1c6b5e3bae9a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"whQuestions", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<which\>\"", ",", "\"\< what\>\"", ",", " ", "\"\<whose\>\"", " ", 
     ",", " ", "\"\<who\>\"", ",", " ", "\"\<whom\>\"", ",", " ", 
     "\"\<whose\>\"", ",", " ", "\"\<what\>\"", ",", " ", "\"\<which\>\"", 
     ",", " ", "\"\<where\>\"", ",", "\"\<whither\>\"", " ", ",", 
     "\"\<whence\>\"", ",", "\"\<when\>\"", ",", "\"\<how\>\"", " ", ",", 
     "\"\<why\>\"", " ", ",", "\"\<whether\>\"", ",", "\"\<whatsoever\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"6d32f185-1917-4908-acc4-781537df203b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Changing parts of speech to numbers", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"4f127c50-da6a-4647-b38a-d8499a04f014"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"vectorNumbers", " ", "[", " ", "line_", " ", "]"}], " ", ":=", 
   " ", "\n", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", " ", 
       RowBox[{
        RowBox[{"TextStructure", "[", 
         RowBox[{"line", ",", " ", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
         "]"}], "]"}], " ", ")"}], " ", "\n", "     ", "/.", " ", 
      RowBox[{
       RowBox[{"Missing", "[", "]"}], " ", "\[Rule]", " ", 
       RowBox[{"{", 
        RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}], "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}]}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"positionWh", " ", "[", "line_", " ", "]"}], " ", ":=", " ", 
   RowBox[{"StringContainsQ", "[", " ", 
    RowBox[{
     RowBox[{"StringSplit", "[", "line", "]"}], " ", ",", " ", "whQuestions", 
     ",", " ", 
     RowBox[{"IgnoreCase", " ", "\[Rule]", " ", "True"}]}], "]"}]}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"numberPositionWh", " ", "[", " ", "line_", " ", "]"}], " ", ":=", 
   " ", 
   RowBox[{"With", "[", " ", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"whPosition", " ", "=", 
       RowBox[{"Position", "[", 
        RowBox[{
         RowBox[{"positionWh", "[", " ", "line", " ", "]"}], ",", "True"}], 
        "]"}]}], "}"}], " ", ",", "\[IndentingNewLine]", 
     "                                ", 
     RowBox[{"If", "[", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", "whPosition", "]"}], " ", ">", "0"}], " ", ",",
        " ", 
       RowBox[{"whPosition", "[", 
        RowBox[{"[", 
         RowBox[{"1", ",", "1"}], "]"}], "]"}], ",", "0"}], "]"}]}], 
    "\[IndentingNewLine]", "                           ", "]"}]}], " ", 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{"whQuestionsChecker", " ", "[", " ", "lines_", " ", "]"}], " ", ":=", \
" ", 
  RowBox[{"StringContainsQ", "[", " ", 
   RowBox[{"lines", " ", ",", " ", "whQuestions", ",", " ", 
    RowBox[{"IgnoreCase", " ", "\[Rule]", " ", "True"}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.740158920961334*^9, 3.740159136230294*^9}, {
  3.740159202152775*^9, 3.74015920902262*^9}, {3.740173308836712*^9, 
  3.740173428810568*^9}, {3.740173619647334*^9, 3.7401736949316196`*^9}, {
  3.7401737680078583`*^9, 3.740173827042839*^9}, {3.7401741231712847`*^9, 
  3.7401741336397333`*^9}, {3.740174215857518*^9, 3.740174303256592*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"3858494d-99ad-48e2-8ce2-1ec79120c73b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"createClasses3D", "[", " ", "keyValuelines_List", " ", "]"}], " ", 
  ":=", " ", 
  RowBox[{"Map", "[", " ", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"Keys", "[", "#", "]"}], ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", "                                        ", 
        RowBox[{
         RowBox[{"vectorNumbers", "[", 
          RowBox[{"Keys", "[", "#", "]"}], "]"}], "/.", " ", "rules"}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        "                                    ", 
        RowBox[{
         RowBox[{"numberPositionWh", " ", "[", " ", 
          RowBox[{"Keys", "[", "#", "]"}], " ", "]"}], "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"True", "\[Rule]", "1"}], ",", 
           RowBox[{"False", " ", "\[Rule]", "0"}]}], "}"}]}]}], "}"}], " ", 
      "\[Rule]", 
      RowBox[{"Values", "[", "#", "]"}]}], "&"}], ",", "\[IndentingNewLine]", 
    "                                    ", "keyValuelines"}], 
   "]"}]}]], "Code",
 CellChangeTimes->{{3.740172651222309*^9, 3.740172666288371*^9}, {
  3.740172717613253*^9, 3.740172731216872*^9}, {3.740172775973336*^9, 
  3.7401727941382513`*^9}, {3.7401728271714697`*^9, 3.740172876714428*^9}, {
  3.740173030160413*^9, 3.7401730452574053`*^9}, {3.740173152404183*^9, 
  3.740173221563806*^9}, {3.7401741658091793`*^9, 3.740174174312379*^9}, {
  3.7401743108117857`*^9, 3.740174312339368*^9}, {3.7401744226087914`*^9, 
  3.740174584474345*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"ab891b51-e553-4c17-aef9-b548085c2aec"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"SeedRandom", "[", "234", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"classesqs2400", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"classesqs", ",", "2400"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"classesnotqs2400", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"classesnotqs", ",", "2400"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.740235235307577*^9, 3.740235284320565*^9}, {
  3.740235369352496*^9, 3.740235372434115*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"621753e3-5192-426f-9d3e-a5389c16577f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"How come The Simpsons predicted things correctly (see the \
image).\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What'd the girl say.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You know what we do to welchers Cluett don't you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What causes the energy losses in a centrifugal pump.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much did he give you how much did he keep for \
himself.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I remove my satellite dish.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to date someone who lives in Germany while \
you live in California.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You didn't want to farm.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some real life examples of \
\[OpenCurlyDoubleQuote]Karma\\\"\\\".\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Are they the ways of Huron men who hunt & work the land.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I maintain my long distance relationship to the best \
of my ability.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do other lawyers at the firm keep pictures of their spouses \
or fiances on their desks.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best answers \\\"\\\"Why you want to do \
job\\\"\\\".\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the top paying career options after doing a \
B.Tech in mechanical engineering.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Books.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Gunther.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You work at Borders right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where is God.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can the volume of an isosceles trapezoid be calculated.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What kind of goddamn monster are you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does it feel like studying dentistry at AIIMS.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How big does a vagina get.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the most difficult video games you've played.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How should one deal with depression.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My pen drive doesnot show up on my Mac. Is it corrupt. How \
can I solve this and get my data back.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What's a cool gift for a guy who's the groom in a gay \
wedding.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Now - where were we.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"OK before I loan you this I expect if you lose of course my \
money back within a week Crystal.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What happens to a London bus driver if a ticket inspector \
finds a passenger with no oyster card.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Is he your entertainment for tonight.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My parents are from Kolkata and I was born and brought up in \
Delhi. Am I considered to be from Delhi or Kolkata.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there any proof that there is no god.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I eat food.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Meaning.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you have any coke.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Is she always like this.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is MTNL for 6 months training purpose.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What time did this thing happen.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do to go abroad for my higher studies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"-- hang on -- -- yeah -- one guy -- I don't think he was \
ready -- -- it's just him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Herr Mozart what brings you here.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the most cheapest option to buy Lexus Cars from \
Europe and export.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When are English-speakers going to start empathising with \
their children and foreigners and reform their messed up spelling \
system.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some good techniques for controlling your \
anger.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Remove one element from vector c++.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the expected consequences of Declaring 500 and 1000 \
rupee notes as illegal.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you think of the President of the Philippines.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How good is TIME's CAT percentile predictor.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What!.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How would one become an ambassador.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who were the victims.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Boy Rimgale's as slow as a snail isn't he.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Would America's healing from the Civil War been aided by \
trying and executing the Confederate leadership for treason.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people in relationships cheat.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does a microwave oven work.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you tell him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What are the scopes of B.F.Sc.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does know.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So why did you come to my casino.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do girls like bad boys.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you learn Cucumber and RSpec at General Assembly's WDI \
program.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's goin' on in here Lad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who was the first U.S. President.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who really has all the power and directs the critical \
decisions of Thailand.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best new business idea in india with less \
investment.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why would a woman get angry and jealous of you talking to \
other girls if she didn't like you or at least have some sort of feelings for \
you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is a data visualization itself data.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does the network send internet to a SIM card.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do I love to people-watch.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the home remedies for getting rid from back \
pain.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many veterans never use the GI Bill.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You think I fit here where they just about chew your food for \
you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the basics of Digital Marketing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Now my flower do you understand.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does anyone find it odd/curious that women use makeup so \
regularly as a rule, whilst men do not.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"No chance of you lifting this sunbed up is there.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hey you couldn't help me with an incredibly important \
decision could you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When did surrealism start.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Japan still relevant.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you trying to read my palm.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Captain Oveur.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Ain't gonna be moved.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is Donald Trump really like in person.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Blame the nigger then huh.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"WHAT'S YOUR NAME. Yeah.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"How do dogs and cats get along.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Same thing isn't it.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Hello.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I boost stamina in order to not pass out during Muay \
Thai training.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How often should I change the tires of my skateboard.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is the course locked in.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can can I delete my yahoo email account.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Starting to recognize a pattern.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who cares.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will you let me look.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What can I do to increase my concentration in studies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do to improve my English .\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You saying its like part DeJesus part Sixpack part Bowman.! \
..\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can psychopaths and sociopaths fall in love.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the difference between IMAX and 4K digital movie \
theatres.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am going to be majoring in social work soon. I want to work \
with LGBT youth. Do you have advice on how to do that.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Non loquis Latinum.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What are the tips and hacks for getting the classes that you \
want as a freshman at CMU.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Square (company): What happens at a TownSquare.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Excuse me\.97 Got a handkerchief.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did Valentin.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's April 16th.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you mean.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What is Russia's nearest equivalent to the Grand Canyon.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What kind of God is He to will this.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Some good places in los angeles.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Your mother was blind.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Which are the best places to learn Spanish abroad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some good books for XAT preparation.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best laptop under 85k.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Sent it where.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Listen to her.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the most interesting app or program on mobile phone \
or computer.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Westworld: If only 1st generation hosts can navigate the \
maze, what do you predict will happen with the more recently built hosts in \
episodes to come.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you a giraffe.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who knows what bigger cosmic reason might exist.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should India do to increase its per capita income.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Knew what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A MiG.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did I give you a job this mornin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best digital marketing course available online \
and offline in India and Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I learn programming from scratch.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where are you . . . . Please leave your message at the \
beep.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why didn't you go to college.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does one feel the need to put a label on their \
significant other when having an argument.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I sign out of Apple Music.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does MSE not work as a metric for recommendation systems \
based on implicit feedback.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does Britain prefer tea to coffee.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I get over with depression or anxiety.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best sport bike.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are royalty fees paid to individual deductible as expenses on \
a LCC.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do telecoms trace my location.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you treat gunshot wounds.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you read me bomb.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What workout attire would guys wear in the summer like it's \
the year 1990.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do Facebook friend suggestions show up on both people.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Louis whatever gave you the impression that I might be \
interested in helping Laszlo escape.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The executioner of the king's nephew my husband's own cousin.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does magnesium oxide reacts in water.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Should I learn programming and Vim at the same time so I can \
get used to code on Vim.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do if I love a girl and she apparently doesn't \
love me.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do Muslims believes that it is okay to beat their wife.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And what are you like.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Is wbJEE board release marks officially in the wbJEE \
examination.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you sure you have to go.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some reasons your throat hurts when swallowing.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why doesn't Quora allow the use of emoticons.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the manga related episodes in 'Naruto Shippuden' \
anime.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is Kenya considered a Third World country.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I just realized this is for television, isn't it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Cannon or Gatling.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"No did you use a condom.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah Would you hold this for me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"As a language student, what would be your favourite way of \
maintaining materials & assignments.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How should you land in water if jumping from a tall height \
(e.g.: a cliff).\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long until it blows.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What kind of businessman are you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do Quora and Google earn money.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did Joe Rogan go to college.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best earphone under 1000rs.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You're not into kinky shit are you Angelo.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So I'll get a fair trial in front of a jury bought off by \
Thaddeus Rains.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do certain people stay at the top in likes in \
Instagram.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why did not Rupee get strong against the Dollar even we have \
demonetisation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the lyrics to the German happy birthday song.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is salt water taffy candy imported in France.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do someone live to be happy in 20s.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Back in the Czech Republic.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the chemical composition of space.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many guys they have on you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Apart from describing people, can \\\"\\\"affable\\\"\\\" be \
used to describe things, like \\\"\\\"affable time\\\"\\\".\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And what's that mean.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What exactly is this place.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are similar sites like Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does Balaji Vishwanathan think about the ban of \
\[Rupee]500 and \[Rupee]1000 currency notes in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the best gadgets of 2016.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What the fuck you talkin' about mischief.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Your bookie.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You could have infected him isn't that right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How are we doing.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"You okay.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"By burning down their homes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where are we.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is the Emperor angry with me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What prevented Mr. Acme from putting the will back in the \
safe before they killed him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can one solve z^3=-1.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How about taking to Uncle Larry into the old firm.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Your base isn't secure.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Where do bench presses work.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I find some of the best SEO services in India.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's going on.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the procedures to get CDC in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I have taken a job in IBM tech support. Will this job \
experience count when I apply for a job after an MIS degree in US.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I remove dark circles under eye.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why did they stop making the new Mauka Mauka ad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Frank.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You made him up didn't you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I increase my interest in programming.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does a dead skunk still spray.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do organisms evolve different numbers of \
chromosomes.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You sure you killed them.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is Jake Williams popular on Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it better for your neck / spine to sleep with or without a \
pillow if you sleep on your back.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What are some of the coolest looking passports from around \
the world.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's this about money.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are southern US religious and political values incompatible \
with the rest of the United States.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What would be the sample size for the assessment of \
knowledge, attitude and practice of mother's regarding breastfeeding in a \
government hospital..\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Alive.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"They either say 'Kill the nigger' or 'Hope you die Honky.' -- \
What ya got in the bag.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And who would you think of for such a task.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is nobody allowed to make fun of Robin Quivers when \
everybody else on the Stern show is insulted constantly.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hello.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I post a question in Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there a reason as to why in a deck of cards the queen of \
all four suits faces the front view, one king faces the side view and two \
jacks face the side view.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who did this.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where'd you get this.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How shall I get rid of hair fall.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Well are ye satisfied Mr. Mitchell.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Like Francais Black Robes do.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there a Google search operator for partial word \
search.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You want a tip.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do to prevent myself from commiting \
suicide.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does he say.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What'd Owens mean.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best way to earn money without working hard give \
examples.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"All right.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is voltage drop.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What's the farthest star we can see with the naked eye.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What've you got there.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Did you dream....\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Can I get pregnant a week after my cycle.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I was hilarious once wasn't I.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How are my friends earning millions from home just by using \
Uber app.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"More tea.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you go up and talk to a girl you like.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is another word for showing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Have you considered going into therapy yourself.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I can whole tomatoes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can someone lose weight quickly.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How reliable are property management service providers like \
renteazy or realtykart in Bangalore.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Does drinking green tea for weight loss really help. Does it \
have any adverse effects on your skin.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What could it mean to you as an employee of a startup if it \
gets acquired.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where did YOU come from.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are there any CEO's of holding companies that serve as CEO's \
of subsidiaries.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does an oscillator work.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If an object at the equator travels at 1040mph with earth's \
rotation, why does it not appear to move and stand still.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is wrong with the American education system.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You ever been in a hurricane Mueller.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If you were stranded on a Island which celebrity would you \
take with you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why the beach.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is Advanced Mathematics.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long does it take to design a simple 2D game character.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I kill the QUIRA Dipstick's that keeps waking me up \
at 3am.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I work in Silicon Valley.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does the EM Drive work.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"How do I find all of my Gmail accounts.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Well we pay for the [.].\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I convert CGPS marks in to Percentage.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to spread a Twitter hashtag.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"May I help you sir.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is zombo.com.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is suspension rail.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Should we learn C.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You mean you don't want the usual day and a half to think it \
over.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But I'd like to take a crack at that stiff- necked horse \
dollar.[6] Say Matt you haven't done anything about what you saw today have \
you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where are we going.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the difference between hobtop and gas stoves.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How would you compare the United States' euthanasia laws to \
Canadas.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best revenge after being rejected by \
someone.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What universities does Square 1 Financial recruit new grads \
from. What majors are they looking for.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What are some best American TV shows.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"An' now you're worried about a repeat of history.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the top MBA schools in Australia.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can stimulants increase Intracranial pressure.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I asked my mom to wear makeup and she said no angry. How do I \
convince her to let me wear makeup now.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What existed in the space before Big Bang.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is a suitable solar panel installation provider near \
Kingsburg, California CA.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Estoy perdido--[Where are you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which books should I prepare to crack IIT JAM in Biological \
Sciences.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the secret of happiness.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there any site for online sweatshirt shopping in \
India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you need a ride.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Nah why should you.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How did The Boss get greenlit. What's the backstory of how \
the movie got made.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If the latest version of PHP is now object-oriented, does it \
have class like Java or .NET. Is it more like JS.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I find subtitles for Tamil movies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your biggest accomplishment in life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"At what age do you think of a person as being \\\"\\\"old\\\"\
\\\".\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You think you'll have time for the water heater this weekend.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's it like to live in the Five Towns of New York.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But now that I am here will you speak with a woman.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You're sorry.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Latin America considered to be part of the Western \
World.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is Kim Jong-un considered to be funny.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you mean.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"How could there have been witnesses.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Oh yeah....\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is steel a pure substance.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you like my body.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Remember the guy who cheated at the table.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Anything harder.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And you don't know how they open is that what you are saying.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you remember what she said.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How different is film editing compared to digital strategy.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So the guy asks him where he's got all this money all of a \
sudden right.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between an adiabatic and isothermal \
process.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Smith where the hell have you been.!\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I was dreaming again.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Yes Prince Mishkin what can we do for you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Remember our first date here....\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How you doing Bob.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Jameson.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you think consumers have changed as a result of \
9/11.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Any luck.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How are they treating you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do I mean to you.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Should I take a Software Engineering job at Uber or Indeed.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I want to know reviews about point group \
\\\"\\\"Barcelona\\\"\\\" internship.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How do I get incoming and outgoing call details of a \
particular prepaid number here in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why don't you answer your phone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Ludwig.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I read a balance sheet.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will Trump's win affect the matriculation of students who \
wish to be graduate from USA.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But what if he dies on the way back.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What happens to all the queued posts, when a very active \
WhatsApp user logs in after a year. Will the mobile hang for an hour or so.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Evolution (process): From which animal have monkeys \
evolved.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I get money.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Which is best Laptop to buy in around 60000 Rupees, with best \
configuration.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who said anything about slicing you up.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it legal to carry bhang on a domestic flight in \
India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I mentally handle the fact that many guys pursue my \
girlfriend.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where you going.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Have you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could anti-matter be used as a futuristic and efficient form \
of energy storage.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Dr yeshi dhomdhon medicine effective in curing fourth \
stage of cancer.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between PaaS and API.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I don't think Miggs could manage again so soon even if he is \
crazy - do you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to be in the Bohemian Grove.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is critical thinking.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"From what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much does it cost to make a 2000 rupees note to Indian \
government.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will you marry me.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What weighs more, all of Earth's air, or all of Earth's \
water.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If x+2<0 then |x+2| is equal to.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best books for entrepreneurs to read.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you send a text message to a blocked number.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How good is DTU.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But where are you planning to stay in New York.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who do you think would win the election, Trump or \
Clinton.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which mobile has best camera.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I make TOR faster.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why not.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I become a white hat SEO.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A logic teacher said You don't have a brother and he likes \
cheese.how is this rational.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What did you want with me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why are all the Hindu Gods born in India and not in any other \
country.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does one kill a man.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Found somethin' worse than me huh.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Questions.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Miller.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"what... .!\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I made her feel guilty this morning --  Brother what are you \
doing up.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I multiply and divide fractions or decimals or a \
decimal and fraction together.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which one has higher a compression ratio, SI or CI \
engine.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who was Lord of Storm's End after Renly's death.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to live in Yakutsk Russia. I am fascinated \
with this place.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I have a 2 wheeler and double car parking below my flat. A \
guy today moved my 2 wheeler, which was on center stand and locked to the \
right side of the garage. What should I do.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Shut up -- shut up -- Did you piss your fuckin' pants \
Stanley.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How could he.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do one can call Ayurveda scientific when scientific \
methods are not used in it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you feel.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I have 6 years of experience in vehicle quality in an \
automotive OEM in India . I want to work abroad. Which countries offer good \
job opportunities.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How would you switch out isotopes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Passport police verification status pending, police officer \
says due to delay of verifying birth certificate, how much time does this \
usually take.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Sir.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do caucasians guys find Filipino ladies attractive.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.!\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is worse than death.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why didn\[CloseCurlyQuote]t RBI introduce the plastic \
currency in India with the new 500 and 2000 notes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a better car, the Mercedes Benz G LA or the Acura \
RDX.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If you have an 8 oz. Coke bottle and go into a drug store and \
switch it out with an exactly identical 8 oz Coke bottle would that be \
considered stealing.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What did you learn too late in your life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Killaine's wise to what.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"In this heart.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I travel without money to work voluntarily.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Oh yeah.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I reset my password to Gmail without my recovery \
information.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I start blog and earn money from it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it my son.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What side dishes should be served with Mac and cheese.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's this.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Blood: What is an immunoglobulin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can airplanes and jet fighters fly with no atmosphere.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What proportion of Quora users are atheists.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people believe the earth is flat when clearly earth is \
round from space.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you have any idea what those monks charge for that \
medieval torture.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I set up forwarding on Yahoo Mail.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I beg your pardon, epi-zoo-tics.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the most pretentious thing you have ever heard \
someone say.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best site for learning python from the \
scratch.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it acceptable to wear black shoes with dark khaki pants.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it easy/hard for international students to get a job in \
Dublin, Ireland.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is he going to kill.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Ever even been <u>in</u> one.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did biological viruses come into being.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Netaji Subhash Chandra Bose alive after 1945.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I delete all my posts from Facebook.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did he tell you how we finally met.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does he even *want* to come back.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is college even worth it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where're the others.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How do I deploy a Flask website to Google App Engine.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If you could thank one person that you've never met for \
contributing to your life in some way, through an invention or a quote or a \
piece of advice to a general audience, etc., who would that person be and \
why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I get shopping centre cleaning services in \
Sydney.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What evidence is there to say that the Christian God is the \
real one true God.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I know if I'm blocked on WhatsApp.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you understand.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When did Harp say they'd have the warrant.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"KTM Duke 390 or Suzuki Inazuma: which one is better.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much do fireworks cost.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"On news channels like CNN or cable networks like CNBC, \
Bloomberg, etc., do the guests/experts who are invited to talk or respond to \
questions get paid. If so, typically how much.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I raise my self esteem.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did our relationship with Stalin during WW II lead to the \
cold war.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many days will it take to release the offer letter from \
Capgemini.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Or Reno.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do people of Pakistan think about Uri attack.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which mobile I should buy under 15k.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you going to do.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does it feel like to be high on DMT. What are the \
consequences.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do you not like Hillary Clinton.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you think he'll take the job.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to enlarge my penis.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the difference between death and black metal.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are GATE lectures by Ravindrababu Ravula worth it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who owns the most AMOLED patents as of October 2014.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Art thou not Romeo and a Montague.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the problem.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Why do we connect the positive terminal before the negative \
terminal to ground in a vehicle battery.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is intelligence to you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you lookin' at.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does it mean if you blood results indicate high absolute \
monocytes.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What can I do to gain more attention on Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How Darwin's theory of evolution is right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I gain more weight.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is professor Thomas Cormen's favorite \
data-structure.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is it important for you to be married.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Absolutely -- Sparrin' with the Champ would be an honor -- \
y'know what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And what's that supposed to mean Seamus Reilly.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it interesting to work as a cyber security.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"have I broken any laws.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Guess who.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best digital marketing course.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a social justice warrior.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I easily pass the C2150-195 exam.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where is he anyway.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Data Recovery: I've lost all my contacts on my iPhone, \
however they are all there in iCloud. How can I get them back onto my iPhone.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"About clothing.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is best smartphone to buy under Rs 15000.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You're so quiet all the time.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Range.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I sent a message through WhatsApp. The recipient was online \
and I got two check marks. She said that she didn't get the messages till 5 \
hours after though. Is that possible. What could be the explanation for this.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the easiest way to transfer files from a PC to an \
iPad.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the main and most important characteristics \
of the Flamenco dance.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Wanna ask someone please. What is life. And what is the \
purpose of our life.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I improve my english language skills. I am basically \
from gujarati background.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are there any institutions that offer ethical hacking as a \
course.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How corsera certificate and examination works.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If I was taking calls full time would I be living in this \
kip.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What if mental illnesses didn't exist.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Really.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a good solar panel installation provider near \
Lemoore, California CA.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I accidentally waived my rights to Jury Duty compensation in \
the online questionnaire; how do I undo this.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do people do when they are really bored.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you describe to me your life using one word only.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the most useful devices or gadgets you own for your \
smartphone that maybe other people don't know about.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I know who I am.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Demonetization may be indirect result of Inviting more FDI \
into India. Do you agree.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you all right.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does radiant energy turn into. How is it used and what \
are some examples.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You didn't tell him did you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does Brexit affect Indian economy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is Foodpanda called panda when its a Germany company \
founded by a German.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you need.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Women: How can a guy tell if you are interested in having him \
kiss you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What would you call her.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there a place to find Netflix's entire online \
library.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I lose weight and reduce my waist quickly.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How you would create alternative to Shodan.io.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You heard of kickboxing sport of the future.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I have to go I don't have time and I have more drinking to do \
before I go march -- Did you tell her.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How do you redeem Google Play codes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do people with very few views become Top Writers on \
Quora.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where am I.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Tell me do you know what the word &quot;propaganda&quot; \
means.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do humans really exist or are we just living in a spiritual \
virtual reality.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is that your penance.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What do I say to Miss Sweet when I meet her.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you do any of that.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Why not.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is a suitable inpatient drug and alcohol rehab center \
near Valley County ID.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who put you up to this -- the manager.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was Adolf hitlers childhood like.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which was the longest active civil war.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you get out of it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can time travel ever be possible.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is Quora, and why should I use it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You don't like me.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How should I prepare SBI-PO exams.What are the Popular \
websites for preparing for Exams like SBI PO.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does that check out down there.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was your mother like.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best peaceful locations in India for \
holiday.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best places to visit in Kerala. What is the best \
way of transportation there.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between transformant and \
recombinant.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to perform in each of the high school track \
and field events.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My boyfriend (LD) is being forced by his parents to marry a \
girl of their choice. We tried everything possible to convince them but \
nothing worked. He says it's better to move on than to hurt his parents. But \
I don't have guts to see him with someone. He loves me so much, should we \
sacrifice our love.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the purpose of life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"did it look at you Brian.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your favorite quote, and why.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Islam: Why is pork forbidden in Islam.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How would an Indian parent react if they were to learn that \
their daughter was impregnated by a black guy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where's the shell.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You ever see Queen Elizabeth sleep.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What night.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are women sexually attracted to testicles.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you think this makes me look treating her like some \
tragic victim or something.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a good torrent download site.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the best way to get started learning about computer \
security.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That's all you've got to say you've got a bad cold.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to be a laser hair removal technician.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best love story books.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you mean never.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"How do I overcome a crush.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"This doesn't involve you don't you understand.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What made you happy today.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What were you gonna do.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Would you like a drink.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Did you have a nice day.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Up get it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you make anything of the tooth.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much do top management consulting firms charge clients \
per consultant in 2015.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How will the demonetization of Rs 500/1000 notes finish the \
black money in the market exactly.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you want.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Why did the Zune hardware fail.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I improve my communication skills specially \
pronunciation skill.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which programming language is the best nowadays.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the major highways in California and how are they \
compared to the major highways in Washington.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the strengths and weaknesses of the advising system \
at Penn State.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you think Paul Pogba is overrated.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are good exercises to get rid of belly fat.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hi Gale any leads.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can one get a Canadian work permit and then look for a job.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Gabriela ....\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What responses do Christians give when shown controversial \
verses like Exodus 22:20 or II Kings 2:23-24.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.!\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Sparrin'.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Oh is he.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am looking for website promotion. How can I find Best SEO \
company in Delhi for my website promotion.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"In a fucking seance.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What was I supposed to do.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the best android development companies for freshers \
in India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is tcs values.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Advantages of unitary government.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"HOW MUCH TIME.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a ventilation system.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which motor has high starting torque AC or DC.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much do Uber drivers make in Austin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who was the richest dead person.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I unsubscribe and delete my Quora account.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The Partridge Family.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What's wrong with that.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"But why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do Muslim women like to wear burqas.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do to get cellular companies to install a \
mobile tower on my plot of land in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it better for your brain to smoke weed during the day or \
before sleep.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is anatomy destiny.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What you gonna give it all up for a maple twist.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"There's cars back there right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I find the area of the shaded region.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Maybe I shouldn't have-- Ted will you take it easy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I learn to be a lighter sleeper.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Auto Repair: How much should it cost to rebuild a 2000 Honda \
Odyssey transmission.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How's Butkus this mornin'.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I want to prepare for civil service exam. Currently working \
in an MNC. How should I start preparing. I am 27 yrs. is it possible to crack \
before I hit 30 age limit.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How come you were in my truck.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Phase Transitions: How does water evaporate below its boiling \
point.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Was Alexander the great really \\\"\\\"great\\\"\\\".\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And his other companion.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the size of an average woman's vagina in length and \
girth.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is online wedding invitation.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mary still isn't in.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"If Arabs are considered white, why are they not recognized or \
treated as the same as whites.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many sugars.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does urine smell bad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hey Sugar you lookin' for a date.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So what do we do.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What is the difference between UTC and GMT.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did Uber really switch to using Dropbox instead of Box.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"May I ask you a question.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What will the filmmakers do with the Leia character in \
Episode IX, now that Carrie Fisher is dead.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's to become of us now.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does he always leave so early.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will Donald Trump actually make America great again.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why not.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The amusing house wine....\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is best gaming laptop under 60000.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Invitations.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"slip her one.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How well.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the pros and cons of using internet.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a good inpatient drug and alcohol rehab center near \
Union County GA.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does Bradley Cooper say \[OpenCurlyDoubleQuote]pour manger\
\[CloseCurlyDoubleQuote] in this French audio clip at 10:33. Yes or no.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That...\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is a loan-based crowdfunding platform classified as a \
financial institution.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it safe to buy a laptop online.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Wolfi who gave you this.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did she waltz in or fly on little bat wings.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the pros and cons of being a journalist.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do Bangladeshis and Sri Lankans look very similar.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You slept too near where you got in.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the best books or learning resources to prepare for \
the GRE.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Should I join the French Foreign Legion.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the basic difference between cv and resume.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you saying.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How can I grow my hair thicker.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was that armed.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Why did the Germans hate the Jews even before Hitler.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why are you here.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Mumbai University Law School, Fort (Besides high court and a \
100 Metres walking distancce from GLC) or Government Law College.Which one do \
I choose.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"May I introduce my father.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Man you really zinged the boss a couple times it was all I \
could do-- Yeah.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is whipping cream the same as cream.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does playing blitz make one a stronger chess player.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I like one of my junior. How can I ask her out.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So how come you could play basketball.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the highest frame rate (fps) that can be recognized \
by human perception.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Then why not give Miss Mayfield the benefit of the \
doubt.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How could Quora attract initial users.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How should I stop masturbating.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the best way to spend $2,000 on SEM for a lead \
generation campaign for a new investment product.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A Storm Dragon.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Really.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How are reservations helping Indian societies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I post an image in Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So Don Juan you pass out on all your dates.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best book to study for the GRE.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But the wisdom tooth will have to be pulled.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the best mystery novels.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are we locked up.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Power spells and chants.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What clan in clash of clans is level 10 with no wins.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"No.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the least useful courses that people typically take \
for a degree in archaeology.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best platform to learn online and get knowledge \
+ certification for Digital Marketing or every course in general.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who do you think about when you masturbate.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So what are you gonna do about it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can't you forget for just one night that you're completely \
wretched.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the sales figures of Coca-Cola in India. How much do \
they sell in India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I write SEO content fast.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best LOTR fan fiction stories.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Anything else you want.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"How do I conduct a job interview.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does Julian Assange have white hair.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the reasons for World War 1.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to have beautiful skin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Surfer grunge hip- hop Euro trash.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I've come to apply for membership in Brolly -- Really -- what \
happened in 1922.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You remember.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yes Griff.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to express your thoughts.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where is teach mashal art.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My phone Moto G2 haw can use Jio.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Donald Trump an agent for Vladimir Putin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And why should she.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You talking about the Opera House on the Main.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the Sahara, and how do the average temperatures there \
compare to the ones in the Karakum Desert.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between RIP and RIPv2.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The grammar.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I find stock prices.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Should I have something for you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are there good detective movies or TV series like Sherlock \
(already watched castle).\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Would you mind.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Nobody will ever know what happens here -- I was starting to \
believe you you know.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"FRIENDS vs Big Bang Theory: which one is the best TV series \
to watch.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A man or a mouse.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Sisters.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How effective is scrapping 500 and 1000 rupee notes. Will it \
reduce black money.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I get a removals service in Gosford.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I fix a broken friendship.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do I think.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And what job is that.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How do I keep a relationship when I can't talk to them \
everyday.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you ever think of that.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I recover deleted photos from a Samsung Galaxy \
S6/S5/S4/Note.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did Singapore universities (NTU, NUS) become world-class \
and climb up the university rankings in a relatively short time.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is CRR and SLR.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the best describe the differences and uses between \
storage classes in C.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your favorite Halloween costume for 2015.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I open password protected .txt file.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the best kpop singer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Okay by you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there any way to travel faster than light.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I pass lab drug test with baking soda.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"No blood vengeance.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Guaranteed eh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the list of US universities that accept 15 years of \
education for a MS in computer science.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Is that your idea of a winner.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between an APU quad-core A8 and an \
Intel i3.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your greatest regret in life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who are some well-known Quora users who have become \
disillusioned with the platform.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I become a good web designer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there any valid research supporting the claim that massage \
therapy rids the body of \\\"\\\"toxins\\\"\\\".\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you wish him to be amongst us.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"All in yellow.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Your wife.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How strict are hostels.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What do you miss the most from your childhood.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I love to listen to slow/romantic/sad/hip-hop-rock Punjabi \
songs. What are some suggestions.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What ethical issues do operators of restaurant need to be \
aware of.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why not go to the N.C.I.C. or N.C.M.E.C..\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You've been here before.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are some of the best laptops to buy in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Quora Spanish for what.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I control my emotion and sadness.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best Perl web app framework.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are best places to visit around delhi.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What type of government does Guatemala have. How does it \
compare to the one in Japan.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You want my heart.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best programming languages for beginners and \
why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best profession for me. I love to travel the \
world and I am 25 now.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you recommend some products you bought that have improved \
the quality of your life greatly.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What are you talking about.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will foreign students studying in the USA be unwelcomed after \
Donald Trump is elected as president.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Has he sent the challenge yet.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you a socialist Mr. Penfield.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What toughened you up.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the significance of a name.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Reef and I can take the Explorer down clamp it around the eye \
and --- 'Us.' You've got to let us try Skipper -- Skipper!\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the easiest way to lose weight faster.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Red Bull Stratos Mission (October 2012): What did Felix \
Baumgartner say before he jumped off his capsule.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I have a 7KVA generator which I use for multi-purpose. I \
sometimes run the AC on it and sometimes I don't. Will the generator consume \
less fuel when I utilize its power generation less.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Were you and my father having an affair.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Trubshaw again.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you find motivation to work out.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How painful is it to get a daith piercing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hey -- Did these guys teach you to talk dirty.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it possible to play the piano without knowing how to read \
musical notes.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do we need a device driver.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"This is my first time in MUN. How should I prepare for the \
committee GA-DISEC.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's that on your forehead pal.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yosemite National Park: How was Half Dome formed.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can covalent bonds be described.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why are there 24 hours in a day, and how does the lenght of \
day on Earth compare to the one on Mars.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What would be the best way to control anger.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You expect *her* to be responsible.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What would be impact on India if Donald Trump becomes \
President.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where are you from originally. ...just wait..\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Then.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who the fuck was he Rocco.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will drinking Coke after food help in digestion.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Besides advertisement, how does Facebook earn money.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Was it alright.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it true.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is Harry Potter rude to Colin Creevey.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I make friends with people on Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which's the best state in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And hope to die.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Austin what's your point.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Shall we.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are we alone in the universe.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Special Relativity: What would stop someone accelerating \
beyond the speed of light if they had achieved 99.9% of the speed of light.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can you tell if someone has blocked you on iPhone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you ok.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What could cause them.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What's a good symbol to represent knowledge.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What can I do.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How  many other girls Miss Teschmacher are lucky enough to \
have a Park Avenue address like this.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Where did you get it.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Hey who cared about me yesterday huh.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Joanna what the hell is-- Ted when we got married it was \
because I was twenty-seven years old and I thought I should get married \
and...when I had Billy it was because I thought I should have a baby...and I \
guess all I did was mess up my life and your life and-- Ted do you love \
him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What would be a cool name for a consumer electronics \
start-up.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could modern army beat Pokemon army.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do letters of recommendation work for college admissions.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many solar panels do I need to charge 4 200ah.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I know that she like me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Dr. Weir.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the major development initiatives Modi's government \
is working on.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where is the Management Tasks link on my Google groups home \
page. Am I blind.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does McDonald's place playgrounds in their restaurants.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I flirt with any girl.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Something wrong with the stairs.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is that all.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is that possible to live without money Can you live without \
money.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best platform to learn online and get knowledge \
+ certification for Digital Marketing or every course in general.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I delete my Quora account in one minute.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Maybe we should bail.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Can somebody help me with the list of best top horror movies \
of all time.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why did Quora remove my question.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why aren't I am getting views even after writing \
answers.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Approximation inverse matrix.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I join the army after finishing college.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is he.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"how much will the whole thing cost.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why wasn't there an insurgency in Germany after the end of \
World War II.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can black money brought out by discontinuing 500 and 1000 \
notes.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"See.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can anime exist in a parallel universe of some kind.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do some people hate Shahrukh Khan so much.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you think.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the most charming small towns in USA.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who's Guilder.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is the service tax for Ola Cabs' rides calculated.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"HE IS DEAD and WHO TOLD YOU TO DO THAT.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What where the things that Apple introduced in the September \
2016 Apple Event.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is consolidation and creep same or do they have some \
difference.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So where is it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people study mathematical cognition.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is that better.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does that feel.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Does he know that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is  'Dabiq' magazine an effective recruitment tool for ISIS. \
If yes, why is it easily available.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Is dinner ready.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That's Sean.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Still bothering you.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"No  You think she's a tweaker.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between a Bar code and a QR Code.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does stretching your spine gives you permanent height.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'm interested in creating my own product for private \
branding. Can I do this on a shoestring budget.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are good movies on Netflix.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So where are you from.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What did you find out about your teacher that shocked \
you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You know what you look like.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Even though people are educated, and even after they have \
knowledge of science, why do they still believe in God.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"On average, how much does a CEO make per year.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you mean.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What does Islam say about homosexuals, their rights, \
marriage, punishment if any. And what issues do gay Muslims face in their \
daily lives.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's a Good Disney movie.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did you two fuckin' fucks..........\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If you only have one day left, what will you do.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who's they.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best ways to deal with depression.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why us.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are your views on demonetization of 500 and 1000 rupee \
notes by the Modi Government.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you say.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Would RFID be the mark of the beast spoken of in the book of \
Revelation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I find the second largest number in an unsorted array \
using \\\"\\\" FOR \\\"\\\" loops in turbo c++. Without using arrays.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's goin' on.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between class and structure.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between social anxiety disorder and \
avoidant personality disorder.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best medicine for a cold.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I don't find my husband as attractive, like before. How do I \
change this.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How to creat a blog on quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Rum and coke.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is acetic acid.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A power drain -- What's happening....\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I study one day before an exam.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can I have some chips.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"But why would they --.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You know him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"O'Neil.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If God is all powerful can he make a rock so heavy even he \
cannot lift it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mmmnnn....\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My computer has got a folder virus. Whenever I connect a USB \
all files are turning into shortcuts. What should I do.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you keep photos in iCloud and delete on iPhone with iOS \
10.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does YouTube get paid when we skip the ad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Look at her ya can see she ain't feelin' good -- needs a few \
minutes exercise -- This a con.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can and how long can I preserve aloe vera gel without a \
refrigerator.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can hadoop replace data warehouse.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'd love to show them to you. ...Hello.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best book of bridge design.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You know who Muhammad was.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the lyrics to the rap song \\\"\\\"Hold \
Up\\\"\\\".\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is he handsome.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some life lessons learned through reading Plato that \
are useful in other parts of life.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best unlocked 4G/3G USD Data card to use in \
India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the main branches of science. How do they compare.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You Killaine.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Armenia a European country or an Asian country.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What the hell's wrong with you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a proper Latin translation for \\\"\\\"From here the \
way leads to the stars\\\"\\\".\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some things new employees should know going into \
their first day at Universal.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you serious.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"We won because Christ...triumphed over Satan.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is that good or bad.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Do you how do you get meth out of your system.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I understand the following sentence.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How we doing Colonel.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"God's permission.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Ratio of Einstein s co efficients.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do I do to get orders on fiverr.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did this conversation come before or after we saw the \
house.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best ways to take care of your health and to \
stay active all the time.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which do you prefer to spend time on: Quora or Reddit.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is RNA polymerase and what is its function.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the derivative of [math]xye^{-\\\\frac{1}{2} \
(x^2+y^2)}[/math].\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If there any collage of architecture which give admission \
only based on NATA score. By not adding the higher secondary mark.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you understand what I'm saying.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do we differentiate between A, B & C grade movies in \
India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Tell me this though - has he ever once shown you his \
appreciation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why every one ask the repeated questions on Quora that \\\"\\\
\"what makes India happy or sad\\\"\\\".\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you come here with Wally--to *not* watch movies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I know about moving from Pennsylvania to South \
Carolina.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the target reader of TechCrunch or VentureBeat.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is the iCloud lock a big issue when using the iPhone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Like Ralph Lauren.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the differences between Android and iOS.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do i replicate the changes done on one server to other \
automatically. Suppose i copy the data on server one, then it be copied to \
another server\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"the fuck do you know.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"can't you just force yourself awake.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's Earl doing here.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"He's not here.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you really a virgin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you doing.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What happened.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How so I ask questions on Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is Instagram's contact number to call.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does a DC series motor have fewer windings.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I cope with distrust.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I fix my Yahoo email account.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What would cause the skin where a tattoo is to break out in \
white bumps.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which candidate in the 2016 U.S. presidential election do you \
support.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Nuclear.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people have really good ideas in the shower.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could a metallic planet being ripped apart by tidal forces \
explain what has been happening to \[OpenCurlyDoubleQuote]KIC-8462852\
\[CloseCurlyDoubleQuote] in the last hundred years of observation.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What medicine should I take to abort a week pregnancy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you make of the whole China Taiwan trump fiasco.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I increase free RAM on my phone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What minimum marks should I get in NEET 2016 for admission \
into any private or government medical college.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My boyfriend says he deleted his Facebook Messenger app, but \
he is still available for video calling. Next to his chat name the mobile \
icon always says 1 min. What does that mean.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some good services for outsourcing web design.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does it mean when soldiers say 'actual' in a radio \
conversation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That much is obvious isn't it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Oh you got a problem with that.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Well you liked it didn't you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can I get my deposit back for an apartment that I haven't \
signed the lease.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Has Narendra Modi proved his credibility as the lion PM of \
India via the surgical strike in POK.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Where is Kamal.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the [math]n^{th}[/math] derivative of \
[math](1+x^n)^n[/math].\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is the water of seas and oceans salty.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do 800 people a year die from being tangled in bedsheets.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Application of thermodynamics in telecommunication \
engineering.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How ya feeling.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do employees at US Ecology have a good work-life balance. \
Does this differ across positions and departments.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a turbine.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some instances that the future was predicted.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"you mean got into bed with them.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do I lose followers if I temporarily disable my Instagram \
account.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is any kind of bond such as a friendship or a \
relationship so strong that it doesn't allow us to get out of it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What channels have you subscribed on YouTube. What video do \
you watch. Favourite youtuber.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you try.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you ever turn tricks before.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And what about you anything.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I get a job as a film and TV critic.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'm of the opinion that these mutants will eventually kill \
each other off and then-- For how long.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Let's just kick it here alright.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you like England.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Where can I do an online business analyst certification for \
free.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How come you guys aren't going.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much time does an average student take to complete \
CA.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Then how come she never said anything like that to me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why are humans bent on killing each other for God.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to live in Hanover, Germany.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How could I avoid laziness.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best book for gate preparation.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Was that a threat.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Wake up in the dark with the lambs screaming.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Not so very far-- Where were you going when you got in that \
cab.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the benefits of using quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Haven't you already done a bit of that.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How are virtual particles formed. Why does it occur in such \
way.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do legal disclaimers work on Quora. What is Quora's \
policy on questions and answers about legal issues and problems.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best book to learn data structures using \
Java.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You want what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you really think I'm mad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is infrastructure management services.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Natalie.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Teacher's Day games.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Phillippe.!\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I learn statistics and probability for machine \
learning.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Would the YMCA ever hire a registered dietitian.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could The President pardon himself if he committed a crime.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Should Real Madrid sign James Rodriguez.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is diet green tea good for you. If so, why.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could Bruce Lee actually play table tennis with his \
nunchucks.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When are the applications for the CDS exams 2015.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"After the first date, what are some indicators that the girl \
doesn't want you to ask her out on a second date.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long will you set it for this time.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the infant mortality rate for Russia.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the relation between the physical size of a \
electrical machine and speed of that machine.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am 12 and I want to work for Google when I grow up. What \
programming languages are the best to learn.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I've got a girlfriend remember.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I mean what do they actually have on Future Man.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the Lewis structure for BBr3.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is giving a watch as a gift, to a girlfriend or anyone \
else, bad.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's his name.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I become an orchestra composer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Oh okay can I call.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"We've known Debbie what since the eighth grade.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You know what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you have here Billy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your favourite sports team and why.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How should I prepare for GSoc 2017.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the most interesting products and innovations that \
Amazon is coming out with in 2016.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Have you ever faced any paranormal activities in your entire \
life.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.!\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Really What exactly are you working on.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How difficult is it for a Hindu boy to marry a Muslim girl in \
India. Do I have to convert.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to propose to a girl.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How important were the Federalist Papers in convincing \
American public to support the Constitution.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So you can't tell me anything.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That was the night he disappeared.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"It's bad isn't it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some local laws in regards to nudity in Vermont, and \
how do they differ from nudity laws in Indiana.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you think we've got a plan or not.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between \\\"\\\"where\\\"\\\" and \\\"\
\\\"were\\\"\\\" in a sentence.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What products do the Iranian middle classes want from the UK.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Todd.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are George R. R. Martin's strengths and weaknesses as a \
writer and a storyteller.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why are there still some women who are voting for Donald \
Trump.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why some people post stupid & dumb question on Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Donald Trump secretly working for Hillary by intentionally \
acting stupid so that people vote for Hillary and if so, why.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What difference does that make.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you have any relatives in jail.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"being denied those Hungry Hungry Hippos.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What trivia (and/or little-known facts) do you find \
interesting about Antarctica.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You have any idea who might have put him there.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I live for 130 years.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the best Hindi short films.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the easiest country to give a permanent residency \
for Indians.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I lose weight.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How should I use \\\"\\\".\\\"\\\" In Java.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I deal with an irritating friend.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do special ops forces emerging from underwater have to drain \
their gun barrels before shooting.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"It's blind luck that deep-salvage team caught you when \
they...are you all right.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the easy ways to earn money online.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was your biggest facepalm moment.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where'd she get you.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Shit why argue.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That's not a helluva lot is it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"In the Biblical story of Adam and Eve, why did God have Eve \
eat the apple.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I understand quantum mechanics.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Daddy . . . . Didn't we have our little talk about personal \
involvement with the help.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is running 10 km on a regular basis a good thing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Majesty may I ask you to do me the greatest favour.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could you get me Superman's autograph.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it OK if a teacher says, \\\"\\\"I don't know\\\"\\\" to \
students.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Question is what are you doing here.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When was the last time republicans controlled congress \
president and supreme court.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"In fact it is a little more than a bit of a problem isn't it.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How hard is frc off season.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the most paranormal thing that has ever happened to \
you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I know if this girl likes me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was the significance of the battle of Somme, and how did \
this battle compare and contrast to the Battle of The Yellow Sea.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Had you heard.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"With all due respect I told you to abort -- Didn't go as \
planned.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some NGO's in Cyberabad for weekend \
volunteering.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best new products or gadgets that most people \
don't know about.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Until then don't sweat it huh.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Aren't you coming.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Not nervous.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can she I.D. them.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does supernova form.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"It would look bad for the Bureau right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are good Github project where novice programmer can \
contribute.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some examples of information technology.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But you know what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is time travel already possible on Earth.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"what would you need to get away to start a new business \
somewhere else.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Anybody call for me.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How will demonetization affect India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best laptop under 45k rupees.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is forex trading profitable.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But chickens.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there any way to prove 1 = 0 practically.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So just how big was this fare.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Then when.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you think is the most important thing in life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the matter.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can we change a smart TV's OS.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much income do I need to show to bring my non-US fiance \
to the US.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Whose is the car.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"You know how that can just bug a guy don't you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'd like to know what the hell kind of courage it takes to \
walk out on your husband and your child.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hey what are you doing here in the middle of the day.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What will be.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That was a loud one wasn't it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What can USA learn from the Middle East.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will we be in this war.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Which is better, CSE in BIT Mesra or ECE in BITS Goa.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can a girl get pregnant after her last day of periods.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your name.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you need shoes.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Care for a stroll outside.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can hemangioma formation of the skin and subcutaneous \
tissue be treated.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"First question Your girlfriend's counting on you Name your \
girlfriend's character in STAB 2.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"How has Quora changed your view/belief about schizophrenia.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So who stands to gain if Jordan flames out in a big way.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What change in focal length of lens when it is dissolve in \
water.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Business Challenges of Gardening Service provider in \
Melbourne.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the \\\"\\\"Elon Musk\\\"\\\" of aging.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What universities does Sientra recruit new grads from. What \
majors are they looking for.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you want.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Which is better modern education system or ancient education \
system.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are requirement to get a job in ISRO.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are biophysics PhD programs that many biophysics \
students apply for.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Look I made it very clear from the start you're a yokel you \
don't excite me you don't even interest me and so I only have one question \
which is what the hell are you doing in my bed.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You're really a mixed-up oddball aren't you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is project management certification.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you stupid or what.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What is the best recipe for buckwheat pancakes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When can Indian courts take suo motu action.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's that a gram.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What do you see.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What problems does cloud computing solve.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"WHAT.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My 9 y/o homeschooling daughter will study only if we are \
there with her. Then she will do very well. What can we do.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"what is that silk.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to improve conversion rates on landing \
pages.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there anyone who has actually earned money using paid \
surveys in India. If yes, then how.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Anybody in the back room.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My husband and me are not having sex at all. He's not even \
touched me casually in past 10 months. Is he not attracted to me or is he \
gay.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it worth it to get a degree in accounting.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Under there.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the rules and regulations when visiting an inmate at \
Valdosta prison and how does it compare to prisons in Arkansas.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How accurate is a galvanometer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the prevailing winds called in Canada.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the best video editing softwares.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I compare the universal and relativist positions with \
regard to ethical intercultural interaction.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When will NDTV be off air for one day ban.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's it all about.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"From what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'm always anxious thinking I'm not living my life to the \
fullest y'know.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Would you say you understand Josephine.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many generals are there in the US army.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does anybody truly fear a Donald Trump presidency.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How's it look.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I have e-liquid but no e-cigarette how can I use it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best books for preparation of gate \
exam(me).\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to break up a fight between two dogs \
without hurting them.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Last I remember we were talking economics then this....\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the easiest way to get a Dribbble invite.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is gay marriage acceptable.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are First World, Second World and Third World countries.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you understand this sentence.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which way is my way.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Did my heart love till now.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You plotted the course of Cyclops.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the current salary average for a senior motion \
editor.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Surprised I agreed to Reed's proposal.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"To ski.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it fine to Snapchat my ex everyday or do I look desperate \
and clingy.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Let's see: you got Victor stud of the year more coin than \
God.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did Donald Trump give a date as to when he will release his \
tax returns.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I study medicine in UK.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the capital of India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Shut up will you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Did you know.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does IAESTE manipal offer technical \
internships/apprenticeships for Biotechnology Stream.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Any more questions.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Who is the best South Indian actor.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What other measures can be taken to curb pollution in \
Delhi.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Just that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you personally believe Hillary Clinton has committed voter \
fraud.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What're some good songs to make a lyric text prank.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some ways to solve systems of equations graphically.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can meditation make me grow taller.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are 3 good reasons NOT to abandon the pursuit of \
knowledge for a life of alcohol and women.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can a person get into an IIT MTech after completing an MSc.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why don't you just kill him.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yes, dear, what is it.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Where you been.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Was NAFTA (North American Free Trade Agreement) good for the \
United States.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'm 13 and according to all research I've done about people \
my age im supposed to be smart\[Ellipsis] How am I sure. I can't rely on IQ \
tests on the internet\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why can't I wash the ashes from my forehead year after year \
after year.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"'Cause I know about getting' them half-centses.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why don't you ask her about the gun.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How are we going to live Wolfi.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Really.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's this nothing shit.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What did you do and what did you think.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"so why spin your wheels.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it okay to be stupid.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who invented the numbers 0-9.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's wrong.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why don't you take off your clothes Mike.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who the fuck are you.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How do parents react to their kids watching porn.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Psychopaths: do you like having sex.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I get the best deal when buying a car.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are we on Cops.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What universities does Osiris Therapeutics recruit new grads \
from. What majors are they looking for.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Who is Prometheus in the TV series \
\[OpenCurlyDoubleQuote]Arrow\[CloseCurlyDoubleQuote].\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You can't let the ravings of a madman disturb you okay.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long will you be.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How can you tell if your message has been blocked on an \
iPhone.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I crop a shape in Sketch 3.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can the Lewis Structure for COF2 be determined.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does the distance between the two glasses in polarization \
by reflection affect the polarization.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What would happen if galaxies didn't spiral around.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's it like to work at Public Services Enterprises for \
your first job.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best business, with the biggest potential to \
start right now.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you drive this car.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\".\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can the drive from Edmonton to Auckland be described, and \
how do these cities' attractions compare to those in Calgary.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do you not have sex.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Show me something.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which Quora policy Vichitra Zawar violated leading to his \
account getting banned.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the heads.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is an example of the word inveigh in a sentence.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best ways to preserve very old negatives on \
glass.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the matter.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is fulfillment by Amazon.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Atheists: What caused you to become atheists.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You'll have more product day after tomorrow right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Have you tried it with a little cinnamon.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I like this guy who is committed but he is attracted to me \
and took me on long rides many times but hid this from his gf. Is he not \
cheating on her.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Permission to leave sir.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Factors involved in artificial intelligence.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Huh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who didn't.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will there ever be another Witcher game.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it now.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So. Because..\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who will win the Delhi MCD 2017 elections.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I get wonderful flavors on cupcakes in Gold \
Coast.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What were the worst two minutes of your life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best C++ books.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can you watch this crap.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'm...that's then what you get. ....are you still walkin' in \
that car....\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will Hillary Clinton create war.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I identify fake and original Adidas.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If we were lucky enough to catch him with his power \
depleted.... ....in such a way as to prevent his returning to it and as you \
put it....  ...'recharging his batteries'.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Would an atheist get in trouble for publically acknowledging \
their atheism in your country.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the scope of jobs after Barch. From IIT or nits.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can you describe a genetic drift.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Well who says life is fair.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Any good songs.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the basic knowledge required while starting an \
indvidual research on computer science, artificial intelligence.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does yellow mustard relieve a burn.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where you going.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Projectile diarrhea.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"But hell what's that.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Any sign of the goddess Barrington.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why doesn't SRK's sister Shehnaz appear in public.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If my ultimate goal is to become a vegan, should I go vegan \
straight away, or should I try a vegetarian diet first.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I repair corrupt JPEG files. I deleted a folder with \
many JPEG files. After I restored it, many of the images were corrupt and \
would not open. Is there any way to recover them.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I reduce body fat by working out only 30 minutes \
daily. After how many months will it start showing some effects.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you see what god just did to us.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to work at Volvo IT Bangalore.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best QuickBooks error support number.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best source to learn data structure from \
scratch.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I get a job in San Francisco.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do American police always handcuff people they \
arrest.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many Twitter users are there in Switzerland.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"ah, the skirt is a little tight.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best place to get a loan.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you going to ride that wave.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Must have alot goin' on for all that stuff you got back there \
eh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"well yes of course; it's just we're looking for the Horn \
Resounding and -- What's the matter don't you WANT to hear our singing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you think they'll go along with us.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"He's in here --.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do so many people ask questions on Quora.com when they \
could easily find the answers themselves online.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Having a good time Vivian.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you talking about Erik.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why education is expensive.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So. Let's give him half an hour.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the chief election commissioner of Maharashtra.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I participate in a stock buyback offer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I don't know I think maybe I broke it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Then he didn't send you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does pop music suck so much.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When did you take your first bribe.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why the users of Quora are so politically correct.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I avoid sleep while studying.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You mean to tell me you coulda taken your hand outta that \
cuff at any time.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's your favorite scary movie.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you going to put a spell on me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Don't you sometimes wonder if it's worth all this.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Uh...sure...I...what.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"No but my dog he's a got millions of them -- Have you got a \
license.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it true.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are four examples of pathogens.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When you buy a shoe from an international website like \
Pro-Direct Soccer what is the customs duty to be paid in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which stream is better when it comes to job opportunity. Big \
data or Cloud computing.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You mean about the possibility of your becoming a monster in \
two days or about visits from dead friends.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I integrate [math]\\\\dfrac{1+x}{x^2 + 3x + 1} \
\\\\mathrm{d}x[/math] .\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the things about money, life and \
relationships that you wish you knew when you were 20.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the greatest villain in television history and \
why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How are clean room created.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I have a masters in English from India and I want to become a \
doctor. Can I apply for the post-bacc pre-med programmes in USA.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"For that old possession charge.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the necessity of introducing 2000 rupee notes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are good gifts for a foreign visitor to bring when \
they're invited to someone's home in Equatorial Guinea for the first \
time.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"As of January 2016, is Obama no longer the President of the \
United States.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How--how much do you want for the Mickey Mantle rookie \
season.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I prepare for IIM Indore IPM Aptitude Test and \
Personal Interview.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is so goddamn valuable in your life that you're worried \
about losing.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'm pretty naive.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What do economists think of demonetization of \[Rupee]1000 \
and \[Rupee]500 notes. How much help could it be.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is quora.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"All the scumbags in the quiet city of Boston start dropping \
dead and you think it's unrelated.!\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What are the best books for inspiration.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best porn movies you watch.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you think that conflict in Syria is a proxy war between US \
and Russia.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do Sicilians have Berber or North African ancestry.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who designed the new Emoji set in Google Hangouts.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you prove verbal abuse in a divorce case.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is he, his name.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Can castor oil be applied to hair daily.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which laptop is best under 50K now a days.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you think our alternatives are.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am currently pursuing B.Tech in ECE and have just started \
with my 2nd year. I wish to start a project in electronics. How can I start \
it and what is the basic knowledge I would be needing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you unlock an iPad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What makes a great TV show.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You can all see me.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Jean.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What're your taking down.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was the last hand animated Disney movie.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the biggest lies ever told by people and why.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you remain positive despite all the negativity around.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Boy you're so perfect you can look down on me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the interesting facts about prophet \
Muhammad.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why will India attack Pakistan.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was the first thing you did after you lost your \
job.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which CFA institution in better: Shah institution or VD \
Shah\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I make the Instagram search bar stop giving me \
suggestions for what I am typing before I finish typing it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the difference between Linux and Mac OS.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why did America vote for Donald Trump as President in the \
2016 Elections.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Don't we.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is physical chemistry important.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the academic pressure and workload at UMass \
like.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does Dorothy know her husband is dead.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So now they're best friends.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So how many whiskers has the little white kitten got.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I become freelance writer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much money have you got.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where do you live.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Won't you join us.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"See what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there any evidence that aliens visited our planet.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Me. Am I.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Otis what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You think I'm a coward don't you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a good inpatient drug and alcohol rehab center in \
Madison County IA.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is Dr. Sarvepalli Radhakrishnan's contribution to the \
Indian teaching community. What exactly is the reason Teachers' Day is \
celebrated on his birthday only.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The beaches are always being closed because of waste spills \
right.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You tell Cole Younger where and when to ride.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Ah what'd you say Pinback.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will the requests module ever replace urllib2 in the Python \
standard library.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are oasis.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is most important thing in life. Is it money or \
relations or status.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'm overweight. How can I begin to lose weight.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Assassins falling from the sky now.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When you got bored what did you do.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do angels fall according to the Bible.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some good movies rated low on IMDb.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is my dog licking everything.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does relieving illness symptoms through drugs have to do \
with curing disease.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who the hell came up with them.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's in Lisbon.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Why would someone fabricate a witness statement.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where is the well in IIT Madras.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does one have to check about a secondhand car before \
buying that car.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the correct abbreviation for cell phone on a business \
card.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"-- You thought what.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How should I stop thinking about someone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best hindi movie in 2016.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between Information technology and \
Computer Science & Engineering.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And the bodies.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best mobile below 15000.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some revolutionary ideas in making a city \
\\\"\\\"smart\\\"\\\".\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is mirror.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which countries offer free university education for \
international students.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mrs. Kramer how can you consider yourself a fit mother when \
you have been a failure at virtually every relationship you have undertaken \
as an adult.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Now what is up with that.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Excuse me Skipper--- What about time....\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why can't you give me your confidence.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the most famous European anime series.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which universities for MS in CS should I apply to.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best book for JEE.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you recognize him.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What can I do to stop being irritated so easily.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My articleship completion is in last week of April 2017. If \
it gets extend, my CA final result will be withheld..\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Quora addiction unhealthy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What will be favourable and unfavourable impacts of \
demonetisation of 500 and 1000 notes on the lives of people.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who was the last most famous and popular leader of the US \
legal and registered Communist party.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How the black money be recovered by simultaneously \
demonetising 500, 1000 notes and introducing 500 , 2000 notes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So how is she.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What this.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How should I reduce hair fall.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Or--since one is a well-known and respected guest--one could \
go to the desk in the lobby and say Miss Mayfield seems to have lost her room \
key--have you another.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are examples of antonyms to use in a sentence.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is salsa considered a Mexican dish.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Buffalo Bill....\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I don't know you very well you know but I wanted to ask you \
how did you get Diane Court to go out with you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you see his hair color.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Philosophical.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does cash back work.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can a nation become an empire at this modern era.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some good website which provide free mock tests for \
SSC and IBPS.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the strategic importance of Yemen.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you know if your cell phone is being tapped by police.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do I am in great confusion how to score good \
marks in CBSE.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"For what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you alright.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Tomorrow night.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do eCommerce portals such as Flipkart, Snapdeal, \
Homeshop18, etc. perform better at search placement for key keywords than \
content portals such as Techtree and Tech2.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people ask questions on Quora that are easily \
answerable via a quick internet search.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Boolean Logic: how can i prove that x AND y = NOT(NOT(x) OR \
NOT(y)).\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a list of formula sheets for each subject for the \
GATE in mechanical to cope with last minute preparation.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is an Indian rupee note signed in Hindi as well by the \
Finance Secretary/RBI governor. Shouldn't the sign in English suffice.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I know if period cramps are period cramps.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is awesomebazar.com.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best gift you can give to yourself on your \
birthday.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And that's a form of time travel right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are revenue streams of Dream11.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could you please give some weight loss advice for me and my \
husband.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you kill a spider without touching it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What makes a person a hater.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you feel people on Quora get easily offended.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will you please sit down now.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the online resources for learning javascript.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I get part-time job in Bangalore.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is my predicted height.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Excuse me.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Was there ever a Doom II arcade machine.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where is it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What happens to employees after a company being \
acquired.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you out of your mind.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best book for self learning German (beginners).\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hey pal do I look like a stenographer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When black holes form from a star collapsing, why do they \
become black holes. Won't they have the same amount of mass as the original \
star, just more dense.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why would you need me.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What's the matter with you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How To speak English Fluently .\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much time required to learn c.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do I have to submit samples of my work to some stupid \
committee.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the Personal Property Security Act and how is Nova \
Scotia's different from New Brunswick's.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you have the tape.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the origin of Snow White.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best reggae songs.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How big is a photon.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What product can help get rid of Mop and Glo.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I evaluate the expression 4(3/2) ^-1.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I've got two cousins on the job you think I'd work for him if \
I didn't believe in it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And which one of you told me she wouldn't last a week.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you get me my freshman yearbook.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am very much interested in computer science but \
unfortunately I have taken up commerce, what options do I have after my \
graduation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Fifteen minutes ago where were those cards.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Academic and Educational Advice: What are the top one-year \
master's programs in computer science in the US.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best laptop to buy under 25000INR.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That'll be a test won't it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you doing Ted.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"When did the Roman Empire start.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Donald Trump on Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the wildest thing you have ever done in life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will you shut up!.!!\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Is Eric just trying to separate Daryl from the group when he \
proposes a job in Forget (S5E13) of Season 5 of The Walking Dead.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people hide their 'last seen' status on WhatsApp. Does \
this say anything about their personality.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there a way to get a domain for free.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I find the IP address of my IP camera.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why was Jayalalitha buried and not cremated.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does Naruto become a Chunin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I recover a hacked Instagram.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What about him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How about you cutie pie.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why'd you ask for a cop Ray.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the ways to gain height.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can I develop something with Raspberry Pi or Arduino for \
Android phones and attach it to the phone from the headset jack, like a \
square card reader or Android breathalyzer. Or should I use another \
technology to develop the product to be able to use the headset jack.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the best way to be calm.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to improve my questions on Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How would you explain the concept of current and charge to a \
child.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is ff14gilhub.com Legit and Safe.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What'chu sayin'.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yes Hicks.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there a way to remove captions from saved Snapchat \
pictures.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do paramedics cut clothes off of emergency patients.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I get very innovative technology for floor \
polishing in Rydalmere.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Wrong.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you believe in a religion.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does AppleCare handle cracked screens.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The best fun programming talks\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best passive investment strategy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who will win the 5th match between India and Australia in the \
2016 Kabaddi World Cup.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Shall we unpack it.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the difference between a seagull and an \
albatross.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can someone translate this picture from Arabic to \
English.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does it mean to be one with God.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"THE DORM THAT DRIPPED BLOOD.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where's your husband.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the best technique for SEO.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why doesn't common carriage apply to health insurance.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does WTF mean.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How does it feel to have a beautiful body.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How banning 500 and 1000 rupees note will curb the corruption \
and black money in India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is this.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The other one.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's your bartlett's.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Can I live a wealthy life style in Manhattan making $25k a \
week.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was the matter with it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You sure.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some tips for self study.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I control my emotion and feeling.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How has the experience of almost dying changed you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Huh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"In want job in area of Digital marketing as entry level in \
abroad.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many men have walked on the moon.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you have Mr. Deegan.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If you love me you can wait right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why don't I get answers for some of my questions on \
Quora.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can anybody share their articleship experience.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Then why the hell are you so quick to disbelieve me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hello.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I contact someone on Quora and send private \
message.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Indian media worst in the world.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the function of a chromosome in an animal cell.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What will USA be like in the year 2050.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did you know the rest.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You made that move huh.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What is the Sahara, and how do the average temperatures there \
compare to the ones in the Great Victoria Desert.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where are we headed.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"If I take Amphetamines drugs prescribed by a doctor for my \
ADHD will that cause brain damage after a while. Or will that only happen, if \
I abuse it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it true that they say the moon pulls the water up due to \
gravity, even though they have never found any gravitons.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you prefer public transportation or private \
transportation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How's that sit in your gut Utah.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If we had a good 1st date and he tried to kiss me and texted \
me right after to say he had fun, why is he not contacting me at all for 2 \
days now.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What features do you expect the iPhone 7 to have.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could you explain the Datum concept that is used in \
engineering drawing.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I beg your pardon.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best hotel for unmarried couples in paharganj.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"CONTINUED Still you really don't believe it do you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you like speaking Chinese.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could quantum computers in the future access parallel \
realities.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are personality disorders mental illnesses by \
definition.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The what man.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will being a part of shell eco marathon team of my college \
add to my CV even if we don't make it to the actual competition.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where has it been for the last seven years.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the physical and chemical properties of diamond and \
graphite.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the stereotypes of white people in America \
that nonwhite people have.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The truck.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some cool hacks for Android phones.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the safety precautions on handling shotguns proposed \
by the NRA in Rhode Island.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I want to reach a larger audience of people through Facebook, \
mostly from the US and UK. What are the open groups in Facebook where I can \
post.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I study properly.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Whole different story; isn't it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Was Vladimir Oulianov Lenin Jewish.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I lose 15 kilos in 5 months.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What about the engineer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which engineer is best.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"If you write the numbers from 1 to 100 how many digits will \
you have written.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I start a blog. And what are the basics of blogging.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Nobody saw you bring her in.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the latest trends in marketing 2016.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How was your NEET result.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Isn't that a wonderful beginning.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who the hell cares what I think.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Now how smart is that.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Is vacuum energy the same as dark energy. is it infinite. if \
it is, how and why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do I need for a 225 cubic meters concrete slab.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you ever scared of finding a dead body in one of these \
rooms.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can you search on Facebook without a logging in to the \
site.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I prepare for UGC NET (political science).\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Have not saints lips and holy palmers too.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mm. You're not police or FBI; you're just a private \
investigator.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I thought how could you be talking to me if you couldn't talk \
to people.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Or Halcyon.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is that a threat.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Mother is that you.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How friendly is a new born possum.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Ten sir and make them short ones do you hear Captain \
Grogan.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you guys want some shots.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Now I want you to go work the drop car okay Angelo.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do I!.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What about me.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Next year if your grades are high enough-- Dad I talked to \
the track coach-- Dad can I talk to you about track.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it possible to learn to speak another dialect of your \
native language perfectly.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Pleasant.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am writing a book and want to get it published. How do I go \
about it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best study strategies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a momentum stock.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How we can satisfy a girl in sex.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best Laptop for College in 2016.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"my car.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"To our new life.  ...What's wrong.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is embeded s.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Your friend Mr. Raban dealt only with claims that came \
<u>in</u> another department being responsible for compensation that goes out \
-- this is correct. ...\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How important is sex in a marriage.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some things new employees should know going into \
their first day at Capital Bank.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does it feel to be a part of Clash Royale developing \
team.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And who do I go to about you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Wunderlist vs. todoist.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What is the difference between a patent agent and patent \
attorney.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you improve speaking skills in public.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can INTPs become successful entrepreneurs.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Huh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the best music to listen to during meditation.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where are you Nagpur's quorans. Any activity or meetups in \
2016.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you call the cops.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How can I download a video from this website.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A Chigro.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the post study work options in the UK for an \
undergraduate international student.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Why would my daddy hit me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who has suffered from depression and is finding it hard to \
overcome.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the key differences between Green, Sustainable, \
Clean, Renewable, and Alternative Energy Technologies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why did Trump win.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Unique Indian baby boys named.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A man is 5 times as old as his son 2 years ago the sum of \
square of their ages was 114 find the age of son.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the star sign that Scorpio men love most.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it possible to get a British girlfriend in New York.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You feel good not nervous.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the best books for CA-CPT preparation.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some common examples of non-vascular plants, and how \
do they compare and contrast to embryophytes.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You bring him up yourself.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My present age is 21 yr and 5 month can I fill the delhi \
police form which is asking age 18-21.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"She didn't know.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the Best movies to watch after getting high.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I find social media life of my husband.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I avoid alcohol.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What are the best industrial application washing machines. \
Where can I buy them in India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But doesn't the Son of Sam Law prevent criminals from \
profiting from their crimes.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Velvetcsse.com business model.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many keywords are there in AWK programming language in \
the latest version.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"They will make fun of you for listening to an old woman's \
stories.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best earphone under 1000 rs.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Insider trading.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You call that John Travolta/Denny Terio shit dancing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are good gifts for a foreign visitor to bring when \
they're invited to someone's home in Lesotho for the first time.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does banning 500 and 1000 rupee notes help to control \
black money.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it safe to masturbate or have sex thrice a day.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is MNIT jaipur.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Scotty you sure you don't want a drink.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You think I'm a Judas.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What are the questions asked in campus interviews to a civil \
engineer.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did the concept of Quora originate. Who are the founders \
and what's their background.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some venture capital firms that focus on early stage \
investments in Denmark.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Slowly or quickly.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do to get into a Masters program in Europe. I \
have 24 credits left of my undergraduate and I want to raise my GPA as much \
as I can.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you smiling about.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which building has the best architecture in Delhi.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can weed induce a depersonalization.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When will Muslims be out of minority status in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Now then Mr. O'Connor how long did Ted Kramer work for you.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does pnb bank provide HRA to newly appointed officers.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do programmers need multiple monitors.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does it feel to get armpit licked.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"For what purpose JavaScript is used.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is dibasic acid.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Listen what's your name.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do distance relationships work. How can you make it \
work.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between torque and moment.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I ask my married sister to give me a blowjob.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If a woman blows into one of her boob does the other one gets \
bigger.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Politics of India: How do you differentiate between an \
article and a schedule of the Indian Constitution.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I make a website like GreatAndhra.com.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"It's not your given name right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"He told you he wasn't coming right back cause he wanted to \
question Norman Bates' mother right.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How can I sprint faster.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I get along with my teacher in university.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"In layman's terms, what is conjugacy in statistics.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A better life than the one you could have had with Zee.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Y'ever think of that.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Social Media: Do you get any money from Facebook for having a \
page with more than a million likes.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the best way to stop doubting yourself.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Senator's son.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you like Aaj Tak.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How's that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Shall I be married then tomorrow morning.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it about you that makes you undateable.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You know when the first con was ever played.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I make my birthday very special.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is required to own a Rolls Royce.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How small can a black hole be.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do we find the number of trailing zeros at the end of a \
factorial.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"'How do I know it's true.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What exactly do you mean.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where do baby spiders get their first meal.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do to control my anger.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does YouTube sound quiet on my Android phone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You're nervous around me huh.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Cash or check.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to overcome porn and masturbation \
addiction.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What parameters should we consider in linear regression and \
can someone explain the significance of each output parameter.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If I enjoy singing and I know I have a good voice, should I \
pursue music as a career.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Excuse me for saying this but what is wrong with you this \
week.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do sociopaths know when someone is on to them.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much money can you make on YouTube if your video goes \
viral and is monetized.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Or what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What makes you feel bad and why.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is the hostel life of JSS Noida.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What'd you think.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"How do you become a better writer.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is Fedora 22 installing updates when I restart my \
machine.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah Jimmy.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You just don't get it do you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can I get pregnant two days after my period ends.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mr. Kramer do you ever have sex in here with anyone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where is my Lady's lord.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you eat raw salmon from the supermarket. How is sushi \
grade salmon different than regular.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What makes the price of a stock go up.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What've I got to lose.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Does the ice help, Rose.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why did computers get faster.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A mute went to a completely new place. He wanted to drink \
some water in a house owned by a blind person. How will the mute ask the \
blind person for water.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"His plight is obvious isn't it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many camera men are killed annually filming reality TV \
shows like deadliest catch, ax men, gold rush, etc..\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does the song \\\"\\\"Hey Soul Sister\\\"\\\" from Train \
mean.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The character Frank Underwood from House of Cards is \
nominated as the Democratic Party candidate for President in 2016 and is \
running against Donald Trump. How would a presidential race between them go \
down.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can we transfer money from SBI Bank account to ICICI \
bank.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where'd you get all these riders.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you want to hear.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best places to hangout in Pune.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But can you love me for the sake of all you loved and lost.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did Seinfeld become popular.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can we send a mass email for free.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Pharmacology: Why some drugs could not be taken orally, only \
as muscular or venous injections.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What is rural management. Why is it important.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can you get rid of shame and guilt.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You are Cassandra.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people ask so many Googleable questions on Quora.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who're you trying to con.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I write my thesis.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How effective is Ayurveda.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Cole and Munoz.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I control sleep while studying.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can you make money while you are a college student.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the biggest lie you have ever told on Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I guess Skipper Neilsen re- tired before you enrolled at the \
Academy didn't he.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I buy picture frames for photographic artwork in \
Ireland.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Everyone's working an angle right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Knowing your uncle to be distressed for money and try and \
break off a match which will bring fifteen hundred a-year into the \
family.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the pros and cons of long distance \
relationships.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I have 6+ years of Exp in Telecom. . .which MBA will be \
better IT Management/ Operation Management/Finanace Management/International \
Management.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it legal for a campaign to work together covertly with DNC \
to ensure their cadidate has every possible advantage during nominations \
process.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why are you not talking to me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What causes borderline personality disorder. What are the \
symptoms.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What about our grenades.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Didn't you feel it.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Ahh can't you smell the sweet aroma of the ripe watermelons \
and high cotton.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to work at a Chinese VC (such as GGV) versus \
an American VC (such as a16z).\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does touching someone under the chin mean.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You have to do all this and what have you got to show for it.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How competitive is the hiring process at Chesapeake \
Util.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the proper way to dispose of light bulbs.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"See.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Your mother.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some books similar to \\\"\\\"Sula\\\"\\\" by Toni \
Morrison.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hang the system.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So this is what a test.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Oh yeah does bein' in love make you stupid.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Yes.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the most beautiful Bollywood actress.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is IIIT-H better than the IITs in Computer Science.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is fair trade.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You love me.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"This is all that survived.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did you know that Tommy had your dog.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I crack the GMAT.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you alright young man.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How would you like to go back to teasing hair, big \
mouth.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could somebody give me an example of casual end users of \
database.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can you define love in one word.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I see someone's private instagram account.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many languages does John Cleese speak fluently.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Was it a boyfriend of yours.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Lots of people worked for her she had the business from all \
these retail stores.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Having a commerce background, if I have an app idea then what \
should be my initial few steps to execute the idea.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"On Snapchat, if I remove someone as a friend, can they still \
see the last message I sent them.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Guess who's here.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Are you crazy.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What crime is Hillary Clinton guilty of.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you mind if I do.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A pretty young woman to turn him on.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the safety precautions on handling shotguns proposed \
by the NRA in New Hampshire.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is the northeast part of India called Seven Sisters.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I find the p-value for an ELISA test using Microsoft \
Excel.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are considered the best movies about the Holocaust.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is Martin Luther King Jr. important.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I get a list of family offices in California.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I look.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I buy a genuine birth certificate and a passport.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does it feel like to have a strict and conservative dad.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is boric acid. Is it just borax and water.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"During election night, how do media organizations have the \
results (or projections) immediately after polls close.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the difference between BA and BA (hons.).\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Profit or Non profit organization .\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Right.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am a commercial pilot license holder now want to be a IAS. \
How I start the preparation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do intelligent people do with their smart phone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can we make this quick.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Is it realistic to earn $500 to $1000 in a day as a web \
designer/internet marketer.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why should I be.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you all right.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the Famous Leader in Chhattisgarh.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do you care.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That's what you given me see.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do links on Quora prefer opening a new window/tab.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you follow me.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What did you think of that Wadja film.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people believe the earth is flat when clearly earth is \
round from space.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the advantages of using maternity tights. Are they \
worth it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to go through Course 10 at MIT.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"-- the brothers.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Tonight.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who will win the 2015 Cricket World Cup final.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Jeremiah.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Richard!.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do Pakistani girls and boys hug opposite sex friends.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If this thing is contagious -- What.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Okay.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You do sleep don't you.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Why you - what have you done with Janet.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How should I actually BE confident.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is BF3 written in two ways.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can't make you change your mind.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did I.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I want you to stand like that until you're sick of it because \
I don't ever want to see it again you hear me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which one is the best Digital marketing course in India.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Nice to be married isn't it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is that a raincoat.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What do you think foreigners think about Brazil.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What field would building engines fall under.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So...you...survived the blast did you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best photos of spaceflight.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can you prevent sebaceous cysts on your labia.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the fastest way to learn and start using WordPress.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I control my mind from thinking too much.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"To ask a lot of stupid questions about Robin Hood.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do men with beautiful wives or girlfriends tend to flaunt \
them more and bring them to events to show off.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You handcuffed a civilian to a tree.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Learned from the Chink.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"How soon....\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people write their own answers as a comment and not \
realize it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I tune an acoustic guitar.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the good food stuffs to gain a weight.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How could a straight-arrow like you ever pick a roommate like \
him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Really.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mr. Kent could I ask you something.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What're these.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What can I expect for freshman year in college.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you have a nice flight.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does one go about learning graphic design on my own.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How's the case going.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What do you say during sex.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What can I write in my statement of purpose for law school.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can I crack ESE prelims (mechanical) in two months \
preparation if I start from scratch. Or should I try next year.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which music do you like best.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You mind if I come in check things.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which course should I take in winter training.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which programming language is the best to make online \
chatting site.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Any shops nearby.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Is there any nutritional value in semen.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Jacob the one who looks kind of sad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is World War 3 closer than it has ever been.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What if Samsung buys Apple.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"She say what time I should call.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And what is that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"The volute casing in a centrifugal pump serves the purpose of \
increasing pressure. But, pressure should decrease with an increasing cross \
section area as pressure is inversely related to c/s area. So how does a pump \
achieve high pressure despite the above contradiction.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who the fuck fucked this fuckin'.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hmm what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What about the Cromwells.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Grounded for the rest of the year.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is World War III coming.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What can I do'.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The brush-off huh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is the processor upgraded in a Dell Dimension E521.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who's this fuck.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you overcome the fear of failure.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What kind of programming language should I learn if I want to \
debug a game-making website like Zondle.com.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is mobile security system.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What stream should I take in 11th if I have to become an \
automobile engineer.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people generally type faster on their cellphones than \
their other gadgets like laptops and tablets.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How 'bout a spare twenty.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some daily food habits/exercises/routines that one \
should follow as an asthmatic patient with ILD.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the english word for 'kharta'.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why should we be proud of being Indian.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I buy a Xiaomi Mi TV in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is Tina Fey's scar from.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I m feeling.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And how will you make him keep it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the most awkward situation you have been in.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who are you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are Walmart brand CR2032 batteries good quality.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the unsolved mysteries of chemical engineering.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What the hell happened to you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What options do I have after doing MSc mathematics if I don't \
want to go for teaching.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which laptop should I buy for data analysis and programming. \
How important is processor speed. Which is better, i5 or i7.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will you abide by the Council's opinion.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I deal with a rude woman.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it possible to create a home server using Ubuntu server in \
virtual machine.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it drugs.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What are the top/best restaurants in London.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What disease do I have.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Did I ever tell you I hate costume parties.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is the world gonna end on October 31 2016.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"No hash browns.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I hack WhatsApp online.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some lesser-known sights to see when visiting \
Amersfoort, Netherlands.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How 'bout we check with Eve first.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the bigger global competitor of bizbilla.com the \
global marketplace.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Haven't you got a conscience of your own.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can one prevent chicken pox.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hmm.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did you know she/he is the one.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mommy.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You think you can take me now.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I integrate the Stanford parser in a Java \
program.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you doing.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What do people like about sleeping with strangers.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the easiest way to make a little money online.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was the reason behind the removal of Cyrus P. Mistry \
from the position of Chairman of The Tata group.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I started doing USMLE after my MBBS studied 2 years at home \
then stopped, now after 2 more years can I start it again. I want to apply in \
psychiatry.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can witches fly on brooms.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can we keep everyone in our family happy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Because she won't sleep with you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did he go to jail.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best activities to do with children while \
visiting India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are the top places to visit in Kerala.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You can't drink with a friend you haven't seen in \
months.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How will demonetization affect India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the least useful martial art to know in a street \
fight situation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My God Austin what have you done.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Any poop on the John Doe you found out there today.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am good on organizing events, making vacation plans etc. \
What job options I have.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does the Earth have a magnetic field.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you think people in the New Town care what happens over \
here.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"up here for a reading.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How do guys feel after kissing a girl.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"There it is...now what about the others.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your internet speed.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'm doing electronics and communication engineering. What \
should I do for my final year project.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"That was you wasn't it.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Right Clarence.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best comics/blogs/YouTube channels on the \
Internet.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you serious.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What makes you so sure.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What are the best aspects of living in Columbus, GA as a \
young adult.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is a suitable inpatient drug and alcohol rehab center \
near White County GA.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You want to go home.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Or do you think you can find the airport by yourself.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which gaming console should I buy: PS4 or Xbox One.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I force myself to stop loving him.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can't you see I'm praying.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Compulsary subiect for bsc in du.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Please is there nothing I can do to repay you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why are skinny girls preferred over curvy girls. Is it wrong \
to be curvy.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where are we sending it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why should/shouldn't violent video games be banned.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What percentage of Americans drive from coast to coast at \
least once in their life.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the similarities and differences between dominant \
and recessive alleles.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which car services are available in Atlanta. How good are \
they compared to taxis and relative to each other.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Oh is that what I'm doing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was that Doolittle.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it possible to have a World free of visa.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That's what you're paying me for ain't it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Shake your keyboard. What comes out.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you remove rat trap glue from your skin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do modern Japanese think of \\\"\\\"The Mikado\
\[CloseCurlyDoubleQuote] by Gilbert and Sullivan.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is the formula for carbon oxygen determined.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some high paying jobs that involve a civil \
engineering degree.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long should one meditate.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I get PokeCoins on Pok\[EAcute]mon GO.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did Layne Staley ever meet Kurt Cobain.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the Bohr Rutherford diagram for calcium.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Perrier.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The streamers.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can one stay focused throughout ones' IAS \
preparation.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best hospital for Intracytoplasmic Sperm \
injection treatment in Bangalore.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"I'm trying Marie Okay.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Why is Yahoo not working. How can this be fixed.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which smartphone should I buy, Le eco 2 or redmi note 3 (32 \
GB) .\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the matter with you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"East above the river heading for the Eagle Pass.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You mean from the beginning.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is the Patanjali honey a real honey.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does penis size really matter during sex.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the prediction for my career, finance, marriage and \
yoga as per Indian astrology.My DOB is 22nd March1992 , 3:10 am \
bhilai.Chhatisgarh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the fastest ways to lose belly fat.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the body that governs sports in Japan, and its (email) \
contact point.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the QuickBooks Hosting Support Number.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who's the father.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What are the must travel places in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you see.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You have to make a decision: is this guy partner material. \
...\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Britney Spears retiring.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do people hate accounting.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"A wino.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And you could stand to get a little smarter ain't that right \
you dumb blonde fuck.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the taboos, if any, in mathematics.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When can I see you again .\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can an individual choose the right career.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How calculate the battery backup.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the difference.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"All right Darling.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Outside it's--it's such a mess--it's-- Because it's a \
job.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I control emotions and reactions in nervousness.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Quora biased against Donald Trump.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What can be the ultimate goal of our life and why.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who will have to buy medical insurance for student visa. \
University or student.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can a women live without sex.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Romania.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can I see him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are your favorite few lyrics.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some amazing facts about Swami Vivekananda.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's going on.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the kid gonna say - sorry.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My SIM card is stuck in my Moto G (2nd Gen.) mobile. What \
should I do.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"One: how did a celebrated life of the mind bring me  to this \
particular switching station.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Could I have that please.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does sex feel like for the first time.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mr. Harris.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the most surreal places in movies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you say happy birthday.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the term 'anagram' called in Chinese.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And do you think it's radical for a man to have a job and \
feed a family.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That's enough! ...you break all the laws of physics you think \
there won't be a price.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can the Big Bang be created by vacuum fluctuations if \
time didn't exist before the Big Bang.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What are the top market research companies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it a good idea to buy a pet racoon.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How addictive is ecstasy.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When will Cognizant start off campus for 2016 for developer \
post.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where did this ship go.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Why the fuck do we need to blow up the car.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did you know.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Do employees at Wesco International have a good work-life \
balance. Does this differ across positions and departments.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which books should I prefer for ssc cgl 2016 tier 1 for self \
study.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there any law in India to avoid forcefully to sign non \
disclosure agreement.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you want to lie down for a little while.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who was the greatest supporter of the Catholics.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is If there was one thing you would like to change about \
Quora what would it be. That one thing where Quora need to improve.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you hungry.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some fun activities for audience.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"They ever love you back.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can someone intentionally kill themselves but make it \
look like an accident.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can your PC really get attacked on the deep web.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I said Did you really do this just today.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Didn't they Duffy.!\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"well underdeveloped.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Sir.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to work in CERN's Large Hadron Collider.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the ongoing projects of TCS.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you think she'll be all right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is there a way to do a mass deletion of all mp3 files on a \
macbook without deleting anything else.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What shall we call him.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Why are separatists burning schools in Kashmir.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I am gonna buy a Laptop from Amazon worth INR 30k in next \
week, how can I save maximum money on it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much does it cost to develop mobile application.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is Pamela Landy.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do schizophrenic voices know what other people are doing \
when you see them like they will say she knows.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long do dermal piercings last.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many kilometers can we ride an Enfield bike continuously \
at a speed of 80-90 kmph to get better mileage. How many breaks do I need to \
take if I am riding for 300 kilometers.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Isn't that terrible.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Is it ever okay to slap a child in the face.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"It wasn't very good last night was it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What wouldst thou have with me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I killed him..\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How and where can I report a store which sells fake Nike \
shoes.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do you hate animals.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Still makin' jokes.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Stuck in traffic.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What are you doing here.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are dubsmash videos private by default saved in 'my \
dubs'.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I hate it when people listen to my phone conversations, so I \
don't pick up calls in public. Is it ok for me to switch it off when in \
public places.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who are the generals at Gettysburg.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Feeling better.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"The Republicans.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is't my soul.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What is the big bone of contention between Catholics and \
Protestants.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is the word \\\"\\\"pretentious\\\"\\\" an oxymoron.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to create an ebook cover.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I create an online training website.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Como se llama.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Call that fresh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You want to help me watch Frank.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When some of the catholic priests are in the habit of taking \
liquor should they be allowed to take confessions from others.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Well what shall I swear by.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What tech companies offer winter internships.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You called it in.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Do deer make sounds. If so, what noises do they make.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I make my own wallet out of fabric or denim since I'm \
vegan I can't use leather product .\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"When was the last time you cleaned this place.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Tough day.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does eukaryotic and prokaryotic cells differ.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Dies.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the most interesting physics phenomenon.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How long did you live there.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"In what circumstances central banks can print money.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why some answers don't have comment option.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Tennessee.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"At the end of 'Cast Away' (movie) where does chuck (Tom \
Hanks) head towards.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How good are the MMS/MiM programmes at schools like LBS, \
Fuqua, LSE, HEC and their type, in terms of knowledge gained, career \
opportunities and return on capital invested.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So you got cozy with she who stings.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's funny.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What does it mean if someone has good eye contact while \
talking to you but when talking about a specific subject, the person looks \
down while talking.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You know classical music.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some suggestions for movies like The Social Network.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Hasn't this 'incident' as you call it jump started your \
career as an artist.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the benefits of oil extract from seeds at home over \
industry..\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best wireless speaker in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What type of government does Turkey have. How does it compare \
to the one in Canada.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"About what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your one purpose in life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is the best program to use for write HTML+CSS \
code.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is Google not showing the given meta description under \
the search result.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I apply for TCS 2017 batch off campus.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some things new employees should know going into \
their first day at Cousins Properties.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Know who I am Jake.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How does travel shops work.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is the Jaguar company's biggest automobile \
competitor.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does an upgrade to iOS 10 take away the jailbreak.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What magic.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do so many people ask questions on Quora that can be \
found in a Google search.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I acquire a British accent.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How should I fill the new form 15-G .\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When will the clouds be aweary of fleeting.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I run a business here -- I'm cleanin' house -- \
...Tomato.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How tough is it to get into MIT Media Lab.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you believe that you can be in love with two people at the \
same time.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"want a beer.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of the best Japanese anime, and why.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You like to fight.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where'd this gargoyle come from anyway.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Job.  Being a great date.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can one purchase cotton wool in the US.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are good gifts for a foreign visitor to bring when \
they're invited to someone's home in Australia for the first time.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did Mrs. Tatopoulos handle it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's your name.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What. ...He knows.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is EMDR therapy.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What's the matter.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the world's best smartphone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"He had a manager -- September 14 1923. ...What.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I know if someone has blocked me on WhatsApp.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the most popular sports in India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why don't you get another one.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why doesn't it never work out.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is Lucius Malfoy a Parselmouth.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Shaw's fighting in South America -- Why not postpone the bout \
until July Fourth.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do so many people ask google-able questions on \
Quora.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does doing MBA after engineering help in building carrier in \
the IT industry.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are bond basics.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Normally we'd be eager to oblige -- Sir August \
Merryweather.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do some people study a lot and get bad grades and others \
without studying get good grades.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What is the significance of 'de', 'le' or 'du' at the \
beginning of French surnames before the French Revolution.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How many air craft carriers India presently have.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Not exactly.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What afterlife do you believe in.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are credit rating agencies.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How does long distance relationship work.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Credit.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did Donald trump win.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You like Huey Lewis and the News.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"See anything.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Captain Renault are you entirely certain which side you're \
on.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"But are Hurons dogs.  ...Magua's way is false.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Well what did he say.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Do you care what other people think about you.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I get more volume (hair) for men.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is online birth certificate is accepted for passport.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I love Quora.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is vacuum energy infinite.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How I find out my ram memory.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is that all you have to say.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does people refuse to mind their own business.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some examples of biodegradable.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the ZIP code of India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best IAS coaching centres in Hyderabad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"That a nice way of saying I rode the bench.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What would happen if 10 million Malaysians marched into \
Singapore illegally.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"When will he be back.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Who's this.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some things new employees should know going into \
their first day at Universal Insurance.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Where.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you become the hardest worker.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How to get into Kean University.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the limitations of correlated data, when testing for \
causality.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You--or the Vancouver Police Department.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some advantages of media.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where's the best place to live in London.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some interesting board games for adults.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Then what what are you.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"How is Bonfire Night celebrated in the USA.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What would be the best way to quit smoking.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the most outstanding life hack.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"There ain't no *almost* about this stuff Homer--ain't that \
right.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you connect HDMI computer to VGA monitor.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was your favorite movie of 2015.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is your review of Sri Lankan History.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where is he now.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"If you accept a follow request on Instagram, do you \
automatically follow the other person back.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I suck at competitive programming. Where I am lagging. And \
how can I improve.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I delete my questions off Quora.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Infetic World the game development, what would you like to \
add to the game.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best book for bridge design.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Of what.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best way to reduce belly and arm fat.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it this time.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What are things one should keep in mind while having sex for \
the first time.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You planning on being a bachelor your whole life Jesse James.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I know someones password without changing it.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Just take a couple of gallons okay.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do for belly fat.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a tag on YouTube.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the best Real Estate website company.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why do all of my questions on Quora need improvement.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is BeFrugal.com legit or a scam.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Should I seek love or just let it come my way \
realistically.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are they.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the definition of a plant cell.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I learn to be an interaction design.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"It's more Perm.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What's the difference between \\\"\\\"organization\\\"\\\" \
and \\\"\\\"organisation\\\"\\\".\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"What are advantages and disadvantages of having a girlfriend \
in college.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why didn't ekranoplans ever enter widespread use for \
transporting armies.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Lacerda.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"So what's unique.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Is it a crime.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.!\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is the coding environment in IIT Guwahati. Like their \
participation in ACM-ICPC and open source contribution.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"- Where are the others.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"Where will my toys be.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Is it possible to get a custom specified pair of handcuffs.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you put the cigarette out.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why don't we send preserved human remains into deep space as \
a DNA time capsule of sorts.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What happens when I remove someone on snapchat.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Have you ever been given an alleged illegal order. What \
happened.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do Indian girls, like boys, also share dirty and adult jokes.\
\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can I build iPhone apps using Python.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some of our freedoms.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I make a resume.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"You do.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I learn the stock market.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it possible to crack IIT JEE in 9 months.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why are transition metals good catalysts.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How should I learn hacking by myself.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is this.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is he your husband.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You mean Twombley.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do you want.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Which is the best bass in earphone under 1000.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you protect me.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Are you going to have women at your party.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the signs of a manipulative person.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some ways to get a girlfriend.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is the U.S working so hard to divert all East Asia and \
ASEAN from economical development to internal conflicst.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What hotel in Shimla Hill-station would be safe for unmarried \
couples, without the harassment of police, hotel staff, and moral \
police.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Softwares used for designing in automobile industry which one \
should know.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"but what is the real issue here.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is it her that's bothering you--or your gardener.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who is Machine.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Excuse me.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are you doing.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Hello.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What would it take to reverse an atheist's or theist's \
position on the existence of God.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"How did you get me into this.!\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the Gmail tech support help phone number.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is a credit score and why does it matter.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you know she didn't make a call.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I stop caring about what people think about me.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And Theo can't pick up his own check because....\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why should they think that.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best laptops under 50K in India presently.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I get a slim face.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How can I deal with an irritating friend.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Eddie are you okay.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"How can I get an FMCG distributor or a wholesaler to notice \
my product.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much money do you get on YouTube as a kid.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You'd take no offense if we called you DeLa for short.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How is discontinuing 500 and 1000 rupee note going to put a \
hold on black money in India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which are some of the biggest mistakes you have made in your \
love life.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you get admitted into Hult International Business \
School.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Do you find Chinese very difficult to learn.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why aren't you writing this down.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Valiant and Valiant.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Has any trick or any other way which shows my number on other\
\[CloseCurlyQuote]s whatsapp account if i saved his/her whatsapp number in my \
contact list but they've no\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are your daily routines.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"I'M SMART SO THAT SHOULDN'T MAKE ME SOMETHING SOMETHING SO \
PEOPLE CAN WATCH HOW SILLY IT IS THAT HE'S SMART.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Your brother huh.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   
   RowBox[{"\<\"Look Sid why don't you take off.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And you sure you can control this thing.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How'd you do that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I edit my devices on my Google play account.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What makes American invasion right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who appointes the Governor of Reserve Bank of India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"My right eye turned red although it's not itchy or pain. \
What's happening.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"WHAT.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you know that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are my chances of getting into PhD Finance program at \
MIT Sloan, Chicago Booth or NYU Stern with an engineering background from \
India.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"And what about Ricky.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Got anything to drink in there.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does Quora \\\"\\\"Add to Reading List\\\"\\\" checkbox \
is hard to find for a new user.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How are worm holes and black holes differed.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Are you apprehensive.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What if your chute fails Bodhi.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is KFC chicken halal.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What would make Quora go viral.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"You don't recognise me.\"\>", "\[Rule]", "\<\"Question\"\>"}],
    ",", 
   RowBox[{"\<\"What do the Bhutanese people think of India.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Mr. Gordon did you take over this place after Mrs. Lippman \
died.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is reality. Is this real life.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What should I do to avoid being jealous of someone.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Did you see him.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"m436  u6563 u6568 u6563 u6563 u6568 u6563 u6563 u6568 u6568  \
L377510 L377497 L377496 L377495 L377494 L377493    * Sometimes you stop \
taking his calls so    u6563      * Why not.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What if I petitioned one of the Directors.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Andrew Ng: Is time ripe for setting up a machine learning \
consultancy.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is the current state of race relations in France.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are some must-watch movies on Netflix.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How did you find a job abroad.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Now if you were a flavor of ice cream what would you be.\"\>",
     "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How much money do Indian youtubers make.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What do we tell him about the guns and money.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Has Quora turned into a political hack for Clinton.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Does it hurt to die of a sleeping pill overdose.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Is homeschooling better than traditional schooling.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What a header file.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the meaning of stonerindia.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Which is better for programming: MacBook Pro 15 or Lenovo \
ThinkPad T450s.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why doesn't HK follow in the footsteps of all former British \
colonies amd abolish the jury system.\"\>", "\[Rule]", "\<\"Question\"\>"}], 
   ",", 
   RowBox[{"\<\"What is the use of credit card.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Right back at the start right.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How about that.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why is it taking so long.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the psychological effects of a parent yelling at a \
child in a harsh manner.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What are the best jobs for a college student in Dallas.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Can you love someone without a reason.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do you get rid of a double chin.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What phone should I buy under Rs 15000.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Where can I get Jon after completing MSc.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Okay who.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"This is Cooper what the hell do you do on this ship anyway.\"\
\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Will this go on my record.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Why does the cone of light form on the tympanic \
membrane.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What variables.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"How do I start learning to read people like Sherlock Holmes. \
Is there a good method for that, what do you suggest.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is another word for \\\"\\\"would\\\"\\\".\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who wrote Hamilton (the musical).\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"Who are you.\"\>", "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What is it like to participate in the Jagriti Yatra.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}], ",", 
   RowBox[{"\<\"What was Ramanujan's IQ.\"\>", 
    "\[Rule]", "\<\"Question\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.740235316913772*^9, 3.740235373234877*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"00159c7c-460d-47c5-9c34-be38657edb1e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"We don't show him but I figured he might be part of your \
team.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hang on get it up go on higher.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although cadmium has no known biological function in higher \
organisms, a cadmium-dependent carbonic anhydrase has been found in marine \
diatoms.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She hates you guys.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Oh okay.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, sometimes the words are simply synonymous.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Joanna go fuck yourself!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We are also in need of judges.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Also, argumentation scholars study the post hoc \
rationalizations by which organizational actors try to justify decisions they \
have made irrationally.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's alright Peter we're fine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And I understand that I am to walk the earth one of the \
living dead until the wolf's bloodline is severed and the curse lifted.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The city is considered an alpha+ world city  as listed by the \
GaWC's 2008 inventory  and in 2014, Tokyo was ranked first in the \\\"Best \
overall experience\\\" category of TripAdvisor's World City Survey (the city \
also ranked first in the following categories:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Historically, the vest can be worn either in the place of or \
underneath a larger coat dependent upon the weather, wearer, and \
setting.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are many chemicals with pharmacological properties, but \
need special measures to help them achieve therapeutically relevant amounts \
at their sites of action.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the United Kingdom, the Judicature Acts merged the courts \
of equity (historically based in England's Court of Chancery) with the courts \
of common law, and as a result the concept of fiduciary duty also became \
applicable in common law courts.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The grains are made to germinate by soaking in water, and are \
then halted from germinating further by drying with hot air.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"During their governance of the Kingdom of Hispania, the \
Visigoths built several churches that survive.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Each suit has 14 cards, ten pip cards numbering from one (or \
Ace) to ten and four face cards (King, Queen, Knight, and Jack/Knave).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is performed by physical therapists (known as \
physiotherapists in many countries).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Impressive.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Yeah well you know doctors.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Startin' to acclimate anyhow.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If untreated, gonorrhea can spread to joints or heart \
valves.Gonorrhea is spread through sexual contact with an infected \
person.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Eggplant is the common name in North America, Australia and \
New Zealand; in British English, it is aubergine, and in South Asia and South \
Africa, brinjal.The fruit is widely used in cooking.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rowing is the act of propelling a boat using the motion of \
oars in the water, displacing water, and propelling the boat forward.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"See \\\"Other animals\\\" below.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are also non-precision reamers which are used for more \
basic enlargement of holes or for removing burrs.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The classical tradition of rhetoric and composition refers \
more to philosophers like Aristotle, Cicero, and Quintilian than to the \
sophists.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It was placed among the top 100 cities in the world for the \
quality of life by the consulting company Mercer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Greek word polyglottos means multiple languages.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The upper-case version consists of the two slanting sides of \
a triangle, crossed in the middle by a horizontal bar.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The day your Da left us when you were almost too young to \
remember he said the two of you would do me right and make me proud but he \
was wrong and I got nothin' ta live for.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Historically, banks sought to ensure that they could always \
pay customers in coins when they presented banknotes for payment.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Internships are usually arranged by third-party organisations \
which recruit interns on behalf of industry groups.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term can also be used metaphorically to cover moral \
obligations and other interactions not based on economic value.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's not cool!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Oh it's fine.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The opposite to a tributary is a distributary, a river or \
stream that branches off from and flows away from the main stream.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Gretchen..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Simptico (Gbor Szab album) an album by Gbor Szab and Gary \
McFarland\\nSimptico (The Brian Lynch/Eddie Palmieri Project album), an album \
by The Brian Lynch/Eddie Palmieri Project\\nSimpatico (The Charlatans album), \
an album by The Charlatans (known in the US as The Charlatans UK)\\nSimpatico \
(Velocity Girl album) an album by Velocity Girl.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"LaRiviere says he ain't gonna pay for the fixin' of your car.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sometimes, this terms refers to either (1) any relatively \
shallow place in a stream, lake, sea, or other body of water; (2) a rocky \
area on the sea floor within an area mapped for navigation purposes; (3) a \
growth of vegetation on the bottom of a deep lake that occurs at any depth; \
(4) and as a verb for the process of proceeding from a greater to a lesser \
depth of water.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"During the Russian Civil War, Don and Kuban Cossacks were the \
first nations to declare open war against the Bolsheviks.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Thanks Harry really but..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But I have no experience.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Australia has the largest Fijian expatriate population, \
according to the Ministry of Pacific Island Affairs, while Fijians were also \
the fifth largest Pacific ethnic group living in New Zealand; a decrease of 8 \
percent between 1996 and 2001.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It is the subjectively unpleasant feelings of dread over \
anticipated events, such as the feeling of imminent death.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm on it When I shell out fifty I expect results.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Humans expel feces with a frequency varying from a few times \
daily to a few times weekly.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Agglomerates are typically found near volcanic vents and \
within volcanic conduits, where they may be associated with pyroclastic or \
intrusive volcanic breccias.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've been waitin' three years for that.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He likes to cut.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"As such, it continues to generate extensive and highly \
contested debate with regard to its therapeutic efficacy, its scientific \
status, and whether it advances or is detrimental to the feminist cause.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rolls Royces are made to last -- as least they were.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The biological habitat in the immediate vicinity of a stream \
is called a riparian zone.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"OK a family matter.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A few species, like the harbour porpoise, are highly \
sociable, but pods generally do not exceed ten individuals for most \
species.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You were his best friend.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When a bank employee does this they understand.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Shut your hole Slutnik.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This corresponds to 273.15 C on the Celsius scale, 459.67 F \
on the Fahrenheit scale, and 0.00 R on the Rankine scale.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah that'll work..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At thy good heart's oppression.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is a variant of Bridget.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nisan usually falls in MarchApril on the Gregorian \
calendar.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's called Hinckley Cold Storage.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Saint Francis Xavier, a Roman Catholic missionary, whose \
veneration led to \\\"Xavier\\\" being ubiquitous in the Catholic world\\nSt. \
Francis Xavier (disambiguation)\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Attitudes toward suffering may vary widely, in the sufferer \
or other people, according to how much it is regarded as avoidable or \
unavoidable, useful or useless, deserved or undeserved.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is also used in Wi-Fi, GPRS and EDGE, as well as in the \
DVB-T and DRM Standards.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The general Faroese term for skuas is kjgvi [tkv].\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He's a wonderful man..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It was nothing to these guys..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now it's my friend.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The bone is formed from a fusion of left and right processes, \
and the point where these sides join, the mandibular symphysis, is still \
visible as a faint ridge in the midline.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"album), 1994\\nSerious (Luther Allison album), \
1987\\n\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are particularly common in Eastern Asian cuisine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I lost my job..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You're right it's bad business but it's over with it's \
done.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Come work for me.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Osteopathy is a type of alternative medicine that emphasizes \
manual readjustments,  myofascial release and other physical manipulation of \
muscle tissue and bones.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Who knows where this ship has been...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Deadline(s) or The Deadline(s) may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm too old to be an assistant anymore.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've never LOVED anybody!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Its name comes from the word Sunnah, referring to the \
exemplary behaviour of the Islamic prophet Muhammad.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Samoan may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It became the tenth province to enter the Canadian \
Confederation on March 31, 1949, as \\\"Newfoundland.\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Thus in North America and Australia, where many ports were, \
until recently, built on the multiple pier model, the term tends to imply a \
current or former cargo-handling facility.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She sings little peasant songs quite nicely -- a completely \
untrained voice of course.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Reclaim, reclaiming or reclamation means \\\"to get something \
back\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It authorizes federal natural resource agencies, primarily \
the Environmental Protection Agency (EPA), states and Native American tribes \
to recover natural resource damages caused by hazardous substances, though \
most states have and most often use their own versions of CERCLA.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I turn my hand against him.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"How did you know -- No.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"See you next weekend Dad.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"More informally, temptation may be used to mean \\\"the state \
of being attracted and enticed\\\" without anything to do with moral, \
ethical, or ideological valuation; for example, one may say that a piece of \
food looks \\\"tempting\\\" even though eating it would result in no negative \
consequences.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It was estimated in 2014 that the number of cars was over \
1.25 billion vehicles, up from the 500 million of 1986.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Because of this, the term is used mostly in a historical \
context.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You bet.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They seem to have appeared in Europe and expanded into \
Southwest and Central Asia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Like other symphyses in the body, this is a midline \
articulation where the bones are joined by fibrocartilage, but this \
articulation fuses together in early childhood.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At most, as in the case of Homo neanderthalensis, they are \
believed to have worn only capes, if any coverings at all.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Later, it was borrowed for the study of decision-making and \
information transmission systems.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Grant may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She is a young noblewoman of Denmark, the daughter of \
Polonius, sister of Laertes, and potential wife of Prince Hamlet.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Under the company rule, and later under the British Raj, \
Calcutta served as the capital of British-held territories in India until \
1911, when its perceived geographical disadvantages, combined with growing \
nationalism in Bengal, led to a shift of the capital to New Delhi.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"My game is still strong.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There, the neutrophils release granules which destroy the \
bacteria.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Generally, a fully cooked custard should not exceed 80 C \
(~175 F); it begins setting at 70 C (~160 F).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I am not being brutal to her!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Printing is a process for reproducing text and images using a \
master form or template.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fixed verse poems, such as sestinas, can be defined by the \
number and form of their stanzas.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"The Sophists turned away from the theoretical natural science \
to the more rational examination of human affairs and the betterment and \
success of human life.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The shaft is usually made of tough steel to resist bending or \
twisting.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nuts & Bolts\\nPathetically trivial and trifling as in \
piddling little questions\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The novella has been widely translated, with English versions \
titled Candide: or, All for the Best (1759); Candide: or, The Optimist \
(1762); and Candide: Optimism (1947).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he swastika was adopted by several organizations in preWorld \
War I Europe and later, and most notably, by the Nazi Party and Nazi Germany \
prior to World War II.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A bath sponge is an example of an open-cell foam: water \
easily flows through the entire structure, displacing the air.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mid-level newspaper editors often manage or help to manage \
sections, such as business, sports and features.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Even a slight deformation in a disc (called a \\\"taco,\\\" \
which in extreme cases looks like a taco shell) can cause negative effects \
when throwing long range.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well then cut it in half.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Women are all you have on your mind!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm a saloon keeper.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Britain, heavily influenced by the railways, did not build \
its first motorway, the Preston By-pass (M6), until 1958.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The pendulum clock invented by Christian Huygens in 1658 \
became the world's standard timekeeper, used in homes and offices for 270 \
years, and achieved accuracy of about one second per year before it was \
superseded as a time standard by the quartz clock in the 1930s.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is usually defined by sexual penetration, while \
non-penetrative sex (such as mutual masturbation and non-penetrative forms of \
cunnilingus) has been termed outercourse, but non-penetrative sex may also be \
considered sexual intercourse.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You'd never believe it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You screw around like that again and-- That's great.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Individual peat moss plants consist of a main stem, with \
tightly arranged clusters of branch fascicles usually consisting of two or \
three spreading branches and two to four hanging branches.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It puts me at such a distance.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Quiet down please!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This usage is now obsolete.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"With a total area of 238,397 square kilometres (92,046 sq \
mi), Romania is the twelfth-largest country in Europe.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"People like Elias get wasted and people like Barnes just go \
on making up rules any way they want and what do we do we just sit around in \
the middle and suck on it!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although they look superficially like baboons, they are more \
closely related to Cercocebus mangabeys.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Bishkek is a city of wide boulevards and marble-faced public \
buildings combined with numerous Soviet-style apartment blocks surrounding \
interior courtyards.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is not his handwriting.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This was considered far safer (if not as fun) as riding \
perched 15-20 feet on top of a slippery pile of hay on a moving vehicle.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"ontos), \\\"being, creature\\\" and , logos, \\\"speech, \
thought, study\\\".Paleontology lies on the border between biology and \
geology, but differs from archaeology in that it excludes the study of \
anatomically modern humans.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Jean I need help!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Rods is a commune in the Pyrnes-Orientales department in \
southern France.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Bed bugs are not known to transmit any pathogens as disease \
vectors.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"How would he know I was going to suddenly slip.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Destruction refers to damage to an object, system, being or \
idea, as in legal damages and physical vandalism\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Within high-altitude and Antarctic environments, the seasonal \
temperature difference is often not sufficient to release meltwater.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term originated in the United States, but has spread to \
Australia, Canada, New Zealand, South Africa and Nepal.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If that was your knife Muddy I wanna thank you for givin' it \
to her-- no girl should be goin' *hitch-hikin'* if she don't got a good knife \
with her.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A razor strop (or razor strap) is a flexible strip of \
leather, canvas, denim fabric, balsa wood, or other soft material, used to \
straighten and polish the blade of a straight razor, a knife, or a \
woodworking tool like a chisel.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"If you have to use this use it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They never told us anything except what to do.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Flame on flame off.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sunlight is a portion of the electromagnetic radiation given \
off by the Sun, in particular infrared, visible, and ultraviolet light.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It has two analog input terminals \\n  \\n    \\n      \\n    \
    \\n          V\\n          \\n            +\\n          \\n        \\n    \
    \\n      \\n    \\n    {\\\\displaystyle V_{+}\\\\,}\\n   and \\n  \\n    \
\\n      \\n        \\n          V\\n          \\n            \\n          \
\\n        \\n        \\n      \\n    \\n    {\\\\displaystyle V_{-}\\\\,}\\n \
  and one binary digital output \\n  \\n    \\n      \\n        \\n          \
V\\n          \\n            o\\n          \\n        \\n        \\n      \\n \
   \\n    {\\\\displaystyle V_{o}\\\\,}\\n  .\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hundreds of enzymes require magnesium ions to function.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Unless you immediately release the hibernation control and \
follow every order I give from this point on I will immediately got to \
control central and carry out a complete disconnection.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fatigue and 'feelings of fatigue' are often confused.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll come back as soon as I have the Power Source.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Later...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A pension may be a \\\"defined benefit plan\\\" where a fixed \
sum is paid regularly to a person, or a \\\"defined contribution plan\\\" \
under which a fixed sum is invested and then becomes available at retirement \
age.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Whitewash is a paint-like covering of hydrated lime or a \
cheap white paint.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Furthermore, anxiety has been linked with physical symptoms \
such as IBS and can heighten other mental health illnesses such as OCD and \
panic disorder.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You can ask anyone in town.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The dance is similar in its look to waltz, although the \
rhythm is in a 44 time signature instead of 34.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You should talk to Matt.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"WALKER LT.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's no surprise to want to love.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nine meters.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In organic chemistry, phenols, sometimes called phenolics, \
are a class of chemical compounds consisting of a hydroxyl group (OH) bonded \
directly to an aromatic hydrocarbon group.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Anonymous community artists, including painters, sculptors, \
designers, and stylists, make the clothes, costumes, carnival floats, and \
cars, opening the doors of schools of samba.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The United States Navy followed suit in 1846.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's Alexander Hamilton's idea[5] - the finest banking mind \
this country has ever known.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And that CICI chick wasn't that bad either but I'm really \
concerned about my safety now.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The parts of the head used vary, but the brain, eyes, and \
ears are usually removed.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"With the victory of the Red Army, the Cossack lands were \
subjected to Decossackization and Holodomor.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I mean back to your home.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just hold onto that stick and try to control this hunk of tin \
as best you can.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, most ancient sculpture was brightly painted, and \
this has been lost.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Flooding may occur as an overflow of water from water bodies, \
such as a river, lake, or ocean, in which the water overtops or breaks \
levees, resulting in some of that water escaping its usual boundaries, or it \
may occur due to an accumulation of rainwater on saturated ground in an areal \
flood.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Four digits.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is said to help in the acceptance of a robot in certain \
replicative behaviors usually performed by people.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't remember any more.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't want to talk about it here Brad.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In its broadest sense, however, fantasy consists of works by \
many writers, artists, filmmakers, and musicians from ancient myths and \
legends to many recent and popular works.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For example feral animals are domesticated, but not \
tamed.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Polysaccharides () are polymeric carbohydrate molecules \
composed of long chains of monosaccharide units bound together by glycosidic \
linkages, and on hydrolysis give the constituent monosaccharides or \
oligosaccharides.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He's not Army it's not official -- He's former Army and the \
best I've ever seen in a room.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"In both senses, an axiom is any mathematical statement that \
serves as a starting point from which other statements are logically derived.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In most affluent countries, microlights or ultralight \
aircraft now account for a significant percentage of the global \
civilian-owned aircraft.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In 1991 the band performed a song in the Israeli primer \
contest of the Eurovision Song Contest.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Diseases may cause difficulty swallowing (dysphagia), painful \
swallowing (odynophagia), chest pain, or cause no symptoms at all.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I think it's a crochet hook.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The study of past and current formations of landscapes is \
called geomorphology.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Bullock Report (Industrial democracy) (1977)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It alludes to their manner of procuring food, as they impale \
fishes with their thin, pointed beak.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Adultery (from Latin adulterium) is extramarital sex that is \
considered objectionable on social, religious, moral, or legal grounds.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Photocopying is widely used in the business, education, and \
government sectors.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The girl's dryin' up!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hooker may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is usually used in combination with a profession: for \
example, a career civil servant with political prowess who nonetheless never \
attained political office might be described as a \\\"politician manqu\\\".\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rmi Astruc has argued that although there is an immense \
variety of motifs and figures, the three main tropes of the grotesque are \
doubleness, hybridity and metamorphosis.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We can get out of the apartment.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Larboard continued to be used well into the 1850s by whalers.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"SAAVIK SPOCK SPOCK LT.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In Europe, some people use a bidet to wash their external \
genitalia and the anal region after using the toilet, in addition to using \
toilet paper.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The killer leaves a newspaper clipping at each murder Sidney.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These processes can lead some people to experience changes in \
mental operation defining their self-identity (whether in momentary acuity or \
chronic development) different enough from their previous normal state that \
it can excite feelings of newly formed understanding such as revelation, \
enlightenment, confusion, and psychosis.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I will as soon as I get the sand out of my nose.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You'd be saving the life of a friend.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We're coordinating with Palmdale P.D..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The NE corner overlaps with the Powellhurst-Gilbert \
neighborhood.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is another one of your schemes to get me off \
alone..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Newel posts turned on a lathe are solid pieces that can be \
highly decorative, they typically need to be fixed to a square newel base for \
installation.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The binding of a virus to its target cell\\nTechnology\\nAn \
email attachment\\nAT Attachment, a computer disk drive interface \
standard\\nPrecision attachment, the functional mechanical parts of a \
removable partial denture\\nRental attachments, components attached to rental \
machinery\\nExcavator#Excavator_attachments added onto construction equipment \
to alter its function\\nThe Arts\\nAttachments (TV series), a BBC \
comedy-drama that ran from 2000 to 2002 about an Internet startup \
company\\nAttachments (novel), a 2011 novel by Rainbow Rowell\\nAttachment \
(album), a 2015 album by Jason van Wyk\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Take the squad ahead.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It may refer to:\\nPraetorian Guard, a special force of \
skilled and celebrated troops serving as the personal guard of Roman Emperors\
\\nPraetorian legate, the title of a high military rank in the Roman \
Empire\\nPraetorian prefect, the title of a high office in the Roman \
Empire\\nPraetorian prefecture, the largest administrative division of the \
late Roman Empire, above the mid-level dioceses and the low-level \
provinces\\nPraetorian prefecture of Africa, division of the Eastern Roman \
Empire established after the reconquest of northwestern Africa from the \
Vandals\\nPraetorian prefecture of Gaul, included Gaul, Upper and Lower \
Germany, Roman Britain, Spain and Mauretania Tingitana in Africa\\nPraetorian \
prefecture of Illyricum, included, in its greatest expanse, Pannonia, \
Noricum, Crete and most of the Balkan peninsula except Thrace\\nPraetorian \
prefecture of Italy, included the Italian peninsula, the Western Balkans, the \
Danubian provinces and parts of North Africa\\nPraetorian prefecture of the \
East, included the larger part of the Eastern Roman Empire\\n\\nPraetorian \
Palace, a 14th-century Venetian palace in the city of Koper, \
Slovenia\\nPraetorian Building, one of the first high-rise buildings to be \
constructed in Dallas, Texas\\nPraetorians Roma, an Italian rugby union team \
scheduled to begin play in the Magners League in 2010\\nPraetorians (video \
game), a 2003 real-time strategy computer game\\nPraetorians (album), a 2008 \
black metal album by Naer Mataron\\nPraetorian (novel), book by Simon Scarrow\
\\nPax Praetoriana, refers to the relative stability of modern South Africa \
and its encouragement of democratic governments in other African \
states\\nPraetorian (business), A provider of IT risk assessment and advisory \
services headquartered in Austin, TX\\nThe Praetorian, a conservative \
newspaper at the University of California, Riverside\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Doll and Waski are upstairs taking their nap you go get them \
and bring them down to the living room.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is an ambiguous term that lies somewhere between hiking, \
hillwalking, mountaineering, and rock climbing.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Events are held over two consecutive days and the winners are \
determined by the combined performance in all.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the non-pejorative sense, dogma is an official system of \
principles or tenets of a church, such as Roman Catholicism, or the positions \
of a philosopher or of a philosophical school such as Stoicism.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"After fermentation, the beans are dried, cleaned, and \
roasted.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yasunari Kawabata ( , Kawabata Yasunari, 11 June 1899  16 \
April 1972) was a Japanese novelist and short story writer whose spare, \
lyrical, subtly-shaded prose works won him the Nobel Prize for Literature in \
1968, the first Japanese author to receive the award.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Trawler may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hey bud..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Arabs yellow people whatever.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Of course -- You saw West's body.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm shocked shocked to think that you'd believe him.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These are the \\\"true\\\" gophers, but several ground \
squirrels in the distantly related family Sciuridae are often called gophers, \
as well.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fijians (Fijian: iTaukei) are a nation and ethnic group \
native to Fiji, who speak Fijian and share a common history and culture.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Initiation is a rite of passage marking entrance or \
acceptance into a group or society.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is already here in my head.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This occurs typically somewhere between Mach 0.8 and Mach \
1.23.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Prior to the 2009 revision of the geologic time scale, which \
placed the four most recent major glaciations entirely within the \
Pleistocene, the Pliocene also included the Gelasian stage, which lasted from \
2.588 to 1.806 million years ago, and is now included in the Pleistocene.As \
with other older geologic periods, the geological strata that define the \
start and end are well identified but the exact dates of the start and end of \
the epoch are slightly uncertain.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"It has been suggested that genres resonate with people \
because of the familiarity, the shorthand communication, as well as because \
of the tendency of genres to shift with public mores and to reflect the \
zeitgeist.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Elaine I'm sorry about that little outburst a moment \
ago.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some cultures sweeten foods that are more commonly savory to \
create desserts.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sometimes so I could kill him myself.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dare may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In Korean cuisine, a soup made with oxtail is called kkori \
gomtang (see gomguk).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A fugitive (or runaway) is a person who is fleeing from \
custody, whether it be from jail, a government arrest, government or \
non-government questioning, vigilante violence, or outraged private \
individuals.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Kleptothermy is any form of thermoregulation by which an \
animal shares in the metabolic thermogenesis of another animal.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The name of the tree (Latin fagus, whence the species name; \
cognate with English \\\"beech\\\") is of Indo-European origin, and played an \
important role in early debates on the geographical origins of the \
Indo-European people.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"--warning.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is in contrast to partisanship, where an individual or \
political party only adheres to their interests without compromise.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The many things named after this include:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But I have to go dear.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I murdered my parents Mr. Kelson.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fibreglass is used increasingly in smaller fishing vessels up \
to 25 metres (100 tons), while steel is usually used on vessels above 25 \
metres.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Entertainment evolves and can be adapted to suit any scale, \
ranging from an individual who chooses a private entertainment from a now \
enormous array of pre-recorded products; to a banquet adapted for two; to any \
size or type of party, with appropriate music and dance; to performances \
intended for thousands; and even for a global audience.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"On top of the world.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nobody fucking cares!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Do you hear me sir!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You must find out if the Chevalier cheats.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mostly demerol cut with a little crank because we might need \
you awake in the real near future.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"oron\\\" (KMFDM song)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pressure ulcers occur due to pressure applied to soft tissue \
resulting in completely or partially obstructed blood flow to the soft \
tissue.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You're my eternal favorite.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The disruption of normal breathing by choking deprives oxygen \
delivery to the body, resulting in asphyxia.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This involves an impersonator who is employed (or forced) to \
perform during public appearances, to mislead observers.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Originally flatcars fitted with cabins or modified box cars, \
they later became purpose-built with projections above or to the sides of the \
car to allow crew to observe the train from shelter.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"ex DC.) S.Gould ex Kitam.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He didn't have a lot of fans up there.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Something that seems to cost little is \\\"inexpensive\\\".\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ideas of nonconforming Protestants during the Puritan \
Reformation of the Church of England laid foundation for these churches.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Gestation is the carrying of an embryo or fetus inside \
viviparous animals.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's a beautiful city.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Athena was regarded as the patron and protectress of various \
cities across Greece, particularly the city of Athens, from which she most \
likely received her name.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll call your secretary about reservations.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In contrast, malodor, stench, reek, pong and stink are \
generally used to describe unpleasant odors.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They involve the application of four battlefield functions \
which are closely related  kinetic or firepower, mobility, protection or \
security, and shock action.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Scintillation can refer to:\\nScintillation (astronomy), \
atmospheric effects which influence astronomical \
observations\\nInterplanetary scintillation, fluctuations of radio waves \
caused by the solar wind\\nScintillation (physics), a flash of light produced \
in certain materials when they absorb ionizing radiation\\nScintillation \
(radar), an apparent rapid target displacement occurring on radar \
displays\\nScintillation (medicine), a rapidly oscillating pattern of visual \
distortions, often associated with migraine aura\\nScintillation counter, a \
device that measures ionizing radiation\\nScintillating grid illusion, an \
image in which compounded color contrasts cause an optical illusion of visual \
artifacts\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"My dad's a lieutenant colonel in the army he wants me to join \
he wants to pull some strings.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Type 1 DM must be managed with insulin injections.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Evangelicalism (), evangelical Christianity, or evangelical \
Protestantism, is a worldwide, crossdenominational movement within Protestant \
Christianity which maintains the belief that the essence of the Gospel \
consists of the doctrine of salvation by grace through faith in Jesus \
Christ's atonement.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"JOHNS!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term \\\"innovation\\\" can be defined as something \
original and more effective and, as a consequence, new, that \\\"breaks \
into\\\" the market or society.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I'm looking for a private island.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well-known legumes include alfalfa, clover, peas, beans, \
chickpeas, lentils, lupin bean, mesquite, carob, soybeans, peanuts  and \
tamarind.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Solis is a Spanish name derived from the Latin sol solis, \
literally meaning sun.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Good morning Private James.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Things are pretty hectic right now but thanks.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't even care.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But that's cheating!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Though they are strangers they are at least entitled to a \
Christian burial!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The choice of style may depend on community standards of \
modesty, as well as current fashions, and personal preferences.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In June 622, after being warned of a plot to assassinate him, \
Muhammad secretly left his home in Mecca to emigrate to Yathrib, 320 km (200 \
mi) north of Mecca, along with his companion Abu Bakr.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We must give time for time.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There was someone with me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are often worn together with ballet skirts on top and \
tights or sometimes bike shorts as underwear.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An academy (Attic Greek: ; Koine Greek ) is an institution of \
secondary education, higher learning, research, or honorary membership.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term is used, generally, of one guilty of an \
offence.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Everyone likes that story.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Innsbruck also hosted the first Winter Youth Olympics in \
2012.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's game time.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Listen close then fuckbag.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Everyone concerned thought..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He was always so nice!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"DVD and Blu-ray only differ in using run-length encoded \
graphics instead of text, as well as some HD DVB broadcasts.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The formula \\\"Culprit, how will you be tried?\\\" in answer \
to a plea of \\\"not guilty,\\\" is first found in the trial for murder of \
the 7th Earl of Pembroke in 1678.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Infest may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In large bilaterians, the gastrointestinal tract generally \
also has an exit, the anus, by which the animal disposes of feces (solid \
wastes).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is an agreement among firms or individuals to divide a \
market, set prices, limit production or limit opportunities.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"if constructing the future and settling everything for \
all times are not our affair, it is all the more clear what we have to \
accomplish at present: I am referring to ruthless criticism of all that \
exists, ruthless both in the sense of not being afraid of the results it \
arrives at and in the sense of being just as little afraid of conflict with \
the powers that be\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Staking (manufacturing), a process for connecting two \
components\\nPoker staking, the act of one person putting up cash for a poker \
player to play with in hopes that the player wins\\nConstruction staking, a \
form of land surveying in which wood and metal stakes are placed in the \
ground to establish points which guide the construction of buildings and \
infrastructure.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Strictly speaking, it refers to text that is inscribed on a \
tombstone or plaque, but it may also be used in a figurative sense.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"By 1897, spiritualism was said to have more than eight \
million followers in the United States and Europe, mostly drawn from the \
middle and upper classes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She's a bad influence.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"ptight\\\" (Share Nelson song), 1994\\n\\\"Uptight\\\", a \
song by Green Day from the album Nimrod\\n\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Materials such as paper, plastic film, foil and cloth often \
are produced in long, continuous sheets that are rolled up for more \
convenient handling and transportation.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll call the coroner.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Social problems, such as long-term unemployment, poverty and \
homelessness are common.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's none of my business what you write.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If every brother married separately and had children, family \
land would be split into unsustainable small plots.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We find a body it's either Skinny or Stinky depending on how \
much meat there is on the bones.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You're supposed to be a smart guy.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Proportionality (mathematics), the relationship between two \
variables whose ratio is constant\\nProportionality (law), A legal principle \
under municipal law in which the punishment of a certain crime should be in \
proportion to the severity of the crime itself, and under international law \
an important consideration when assessing the military necessity of an attack \
on a military objective\\nProportion redirects here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"C'mon you drive.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You're a little scrawny but thanks to the concert we're low \
on amateurs.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Museo del Prado; Spanish pronunciation: [museo el pao]) is \
the main Spanish national art museum, located in central Madrid.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Psychotherapists may be mental health professionals such as \
psychiatrists, psychologists, clinical social workers, marriage and family \
therapists, or professional counselors.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The acute form is common while the chronic form  is not.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The undead.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"She's right over there.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Lieutenant thank you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"To capitalize on the demand, local farmers began offering \
\\\"genuine hayrides\\\" on wagons loaded with hay, since one could make more \
cash income selling rides to \\\"summer people\\\" than by selling the same \
wagon-load of hay (although most farmers did both).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A bomb with enough radiation to incinerate an average man \
like . . .  that.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is traditionally regarded as a color in the visible \
spectrum, as well as one of the seven colors of the rainbow: the color \
between violet and blue; however, sources differ as to its actual position in \
the electromagnetic spectrum.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"No I just happen to take the Captain's advice and look at the \
bright side of things.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Anyway cheers!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Bunkers can be destroyed with powerful explosives and \
bunker-busting warheads.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Homecoming Game!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I lay there in my hammock and every time I hear the sound of \
breaking glass I know we're one step closer to winning it all.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term was first introduced by civil rights leader James \
Charles Evers in 1968; however, it was popularized by Richard Nixon in a \
televised speech August 1969.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A step-grandparent can be the step-parent of the parent or \
the step-parent's parent or the step-parent's step-parent (though technically \
this might be called a step-step-grandparent).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Long-lived nuclear isomers and singlet oxygen are two \
examples of this.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One of those chunks of Sixpack!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If you want my advice you'll take the jackknife..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Head cheese or brawn is a cold cut that originated in Europe.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I just wanted to see if you were all right.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The corresponding term in Old English was ow.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As a result, early nightstands were often small cabinets, \
sometimes fitted with a drawer, and usually containing an enclosed storage \
space below covered by one or more doors.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The estimated Pacific Islander population size is 231,800 in \
2001 Fijians comprising about 7,000 of that.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sid get in my car.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"So Claudia lemme just say so I can get my role of LAPD \
officer out of the way before we enjoy our coffee  I'm not gonna write you up \
or anything I'm not gonna give you a citation here -- but the real problem we \
have is that there are people around here people that work from their homes \
people tryin' to get some work done and if you're listenin' to your music \
that loud:  They're incovenienced by that.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Candy.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An island in a river or a lake island may be called an eyot \
or ait, and a small island off the coast may be called a holm.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's not enough that I succeed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Gothics is a mountain in the High Peaks Region of the \
Adirondack Mountains.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Flexion and extension are examples of angular motions, in \
which two axes of a joint are brought closer together or moved further apart.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The chief threat to most of the endangered species is loss of \
tropical rainforest habitat, though some populations are further imperiled by \
hunting for bushmeat.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well maybe it was.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"From 1960 to 1966, twenty-two of his singles reached the \
Billboard Top 40, and he wrote or co-wrote almost all that rose to the Top \
10, including \\\"Only the Lonely\\\" (1960), \\\"Running Scared\\\" (1961), \
\\\"Crying\\\" (1961), \\\"In Dreams\\\" (1963), and \\\"Oh, Pretty Woman\\\" \
(1964).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Going out as friends.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"- Gerbera bonatiana (Beauverd) Beauverd\\nLeibnitzia \
nepalensis (Kunze) Kitam.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A thin candle\\nPhiladelphia Tapers (also New York Tapers and \
Washington Tapers), a defunct professional basketball team\\nTaper (cymbal), \
the reduction in thickness of a cymbal from center to rim\\nTaper pin, used \
in manufacturing\\nTaper insertion pin, used in body piercing\\nTapering, a \
period of rest before competition\\nA Taper (concert), A person who records \
audio concerts, usually via portable setup\\nA tapered steerer tube on a \
bicycle\\n\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some hypochondriacal individuals completely avoid any \
reminder of illness, whereas others frequently visit medical facilities, \
sometimes obsessively.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"4:17\\\"we will be caught up\\\", [Latin: rapiemur]), \
Catholics, like Eastern Orthodox, Anglicans, and Lutherans, and most Reformed \
Christians do not generally use \\\"rapture\\\" as a specific theological \
term, nor do any of these bodies subscribe to the premillennialist \
dispensationalist theological views associated with its use, but do believe \
in the phenomenonprimarily in the sense of the elect's gathering with Christ \
in Heaven after his Second Coming.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Closer and closer \.97- until they bite into your \
throat!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Kamikaze (, [kamikaze]; \\\"divine wind\\\" or \\\"spirit \
wind\\\"), officially Tokubetsu Kgekitai (, \\\"Special Attack Unit\\\"), \
were a part of the Japanese Special Attack Units of military aviators who \
initiated suicide attacks for the Empire of Japan against Allied naval \
vessels in the closing stages of the Pacific campaign of World War II, \
designed to destroy warships more effectively than possible with conventional \
air attacks.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Meteorologists (and most of the temperate countries in the \
southern hemisphere) use a definition based on Gregorian calendar months, \
with autumn being September, October, and November in the northern \
hemisphere, and March, April, and May in the southern hemisphere.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Chloroplasts, like mitochondria, contain their own DNA, which \
is thought to be inherited from their ancestora photosynthetic cyanobacterium \
that was engulfed by an early eukaryotic cell.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is also used for props and moving images for film and \
television, testimonials, birth and death certificates, maps, and other \
written works.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For example, something that is long entails that it is not \
short.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In common usage, an expense or expenditure is an outflow of \
money to another person or group to pay for an item or service, or for a \
category of costs.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Members might be chosen by a  first-past-the-post system or a \
proportional representative system, or another voting method entirely.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Time's up.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term jail tends to describe institutions for confining \
people for shorter periods of time (e.g. for shorter sentences or pre-trial \
detention) and are usually operated by local governments.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Internationally he is best known for his opera The Bartered \
Bride and for the symphonic cycle M vlast (\\\"My Homeland\\\"), which \
portrays the history, legends and landscape of the composer's native \
land.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Also commonly, negation is considered to be a unary \
connective.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Individualists promote the exercise of one's goals and \
desires and so value independence and self-reliance and advocate that \
interests of the individual should achieve precedence over the state or a \
social group, while opposing external interference upon one's own interests \
by society or institutions such as the government.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That oughta help you cope with the injustice of the world a \
little.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Casuistry () is a method in applied ethics and jurisprudence, \
often characterised as a critique of principle - or rule-based \
reasoning.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"All the years of summer school all the vacations you gave up \
it's all working out just the way we planned..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Daddy don't start with this again.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There is still active debate about the extent to which \
perception is an active process of hypothesis testing, analogous to science, \
or whether realistic sensory information is rich enough to make this process \
unnecessary.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Alright..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've got a broken back from carrying you all these years \
anyway.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This observation is equivalent to the mathematical expression \
\\\"3 + 2 = 5\\\" i.e., \\\"3 add 2 is equal to 5\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"By contrast, creams and gels have higher viscosity.Lotions \
are applied to external skin with bare hands, a brush, a clean cloth, cotton \
wool, or gauze.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The population was 497,973 as of the 2010 census, made up of \
mostly ethnic Russians and a smaller Korean community.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If you ask me she's pretty aggressive.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Following extended phases of (primarily sea- or river-borne) \
exploration, expansion and settlement, Viking (Norse) communities and \
polities were established in diverse areas of north-western Europe, European \
Russia, the North Atlantic islands and as far as the north-eastern coast of \
North America.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Find it and deal with it -- before one of your survey teams \
comes back with a little surprise..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The various words for grandparents at times may also be used \
to refer to any elderly person, especially the terms gramps, granny, \
grandfather, grandmother, nan, Maw-Maw, Paw-Paw and others which families \
make up themselves.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The local people are known as Orcadians and have a \
distinctive dialect of Insular Scots and a rich inheritance of folklore.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Surname:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Persuasion can attempt to influence a person's beliefs, \
attitudes, intentions, motivations, or behaviors.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In scientific research, the behavior of the two fluid phases \
of helium-4 (helium I and helium II) is important to researchers studying \
quantum mechanics (in particular the property of superfluidity) and to those \
looking at the phenomena, such as superconductivity, produced in matter near \
absolute zero.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now the tenors.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"No I don't want to bug you if you're trying to -- I mean it's \
okay if you want to sit down here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In logic, it is the practice of treating two distinct \
concepts as if they were one, which produces errors or misunderstandings as a \
fusion of distinct subjects tends to obscure analysis of relationships which \
are emphasized by contrasts.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We spend a fortune on you more than we can possibly afford \
and all you do is criticize morning to night.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As vintners and consumers have become aware of the \
characteristics of individual varieties of wine grapes, wines have also come \
to be identified by varietal names.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Output or response, the result of telecommunications \
input\\nResponse, a phase in emergency management\\nThe second half of the \
stimulus-response relationship in psychology\\nThe National War Memorial \
(Canada), also known as The Response\\nThe Northumberland Fusiliers Memorial \
in Newcastle upon Tyne, titled \\\"The Response\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The symptoms of mania include heightened mood (either \
euphoric or irritable); flight of ideas and pressure of speech; and increased \
energy, decreased need for sleep, and hyperactivity.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Clothing also provides protection from ultraviolet radiation.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tenure signifies the relationship between tenant and lord, \
not the relationship between tenant and land.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although it has been historically believed to help keep the \
head clean when feeding, the bare skin may play an important role in \
thermoregulation.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I didn't baby you just told me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Blackmouth Cur use this method.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Oh my bags.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Economic sanctions are not necessarily imposed because of \
economic circumstancesthey may also be imposed for a variety of political, \
military, and social issues.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I think I know.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"During the Second World War I busted out of Tule Lake \
detention camp; as a Japanese-American I had been put there and watched over.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just the facts General.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"' was how you described it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Eight bodies have been stolen in New York within the last \
eighteen months.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Second Story\\nPRECIS (Providing Regional Climates for \
Impacts Studies), a regional climate model written by the United Kingdom Met \
Office\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You hide and get the guns ready.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We were only supposed to scare him!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I was there when she arrived.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"the day-care center I have to build where an officer's lounge \
used to be...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"During the Middle Ages, the Inquisition attached to the Roman \
Catholic Church alleged that various heretical Christian sects and groups, \
such as the Knights Templar and the Cathars, performed secret Satanic \
rituals.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Thus, Protestant bibles do not include the books within the \
Old Testament but have often included them in a separate section.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In some countries the shared social aspect of cleansing the \
body is still important, as for example with sento in Japan and the \
\\\"Turkish bath\\\" (also known by other names) throughout the Islamic \
world.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The news about Ugarte upset me very much.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"it's not fading.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Ya gotta have a guy help ya exercise mebbe somebody to be \
standin' by with a towel or run errands y'know.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In fact I've only met the guy once.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Watercolor (American English) or watercolour (British \
English; see spelling differences), also aquarelle (French, diminutive of \
Latin aqua \\\"water\\\"), is a painting method in which the paints are made \
of pigments suspended in a water-based solution.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They're gonna kill her anyway.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Honey I have survived a host of things.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I got tired of them.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Your loyalty to me and your service to the regiment has \
pleased me very well -- and now there is another occasion on which you may \
make yourself useful to us; if you succeed depend on it your reward will be \
your discharge from the army and a bounty of 100 guineas.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Both parents care for the young.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He is a mercenary!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Except that he disappeared when things got too hot.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When a student graduates without attending the ceremony, then \
it is called graduation in absentia.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Been just fine thanks.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Often, the participants do not wear costumes or ride in \
formation.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"assortment may refer to:\\nGenetic assortment.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah she is.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It gets worse.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I was driving back from Apache Wells when they got me on the \
radio.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Other mollusc families that have a nacreous inner shell layer \
include marine gastropods such as the Haliotidae, the Trochidae and the \
Turbinidae.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But that's all we got.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Get the hookers in a circle.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Logical axioms are usually statements that are taken to be \
true within the system of logic they define (e.g., (A and B) implies A), \
often shown in symbolic form, while non-logical axioms (e.g., a + b = b + a) \
are actually substantive assertions about the elements of the domain of a \
specific mathematical theory (such as arithmetic).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't know you just passed out.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he company was restructured in 2012 as a spin off from Kraft \
Foods Inc., which in turn was renamed Mondelez International.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rommel was a highly decorated officer in World War I and was \
awarded the Pour le Mrite for his actions on the Italian Front.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This includes viral, bacterial and parasitic infections such \
as the common cold, urinary tract infections, meningitis, malaria and \
appendicitis among others.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the Western world, it was historically a symbol of \
auspiciousness and good luck; but in the 1930s, it became the main feature of \
Nazi symbolism as an emblem of Aryan race identity, and as a result it has \
become stigmatized in the West by association with ideas of racism and \
antisemitism.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"On the Beat tour, for example, it closed all of the shows and \
began with a Bill Bruford drum solo.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The system can be open to exploitation by unscrupulous \
employers.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's the tension.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"That's perfectly clear.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's the only place.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"According to John Woodward (with reference to the Heraldic \
coat of arms):\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Let's be foolish tonight.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The propulsive power is limited by the user's strength of \
respiratory muscles and the vital capacity of the lungs.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This outflow of cash is generally one side of a trade for \
products or services that have equal or better current or future value to the \
buyer than to the seller.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Education can take place in formal or informal settings and \
any experience that has a formative effect on the way one thinks, feels, or \
acts may be considered educational.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He will fight you forever.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Not chopped up.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Less widely used starch sources include millet, sorghum and \
cassava.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A layoff is the temporary suspension or permanent termination \
of employment of an employee or, more commonly, a group of employees \
(collective layoff) for business reasons, such as personnel management or \
downsizing an organization.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"It is likely that Aldebaran hosts a planet several times the \
size of Jupiter.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The numerous works by Francisco Goya, the single most \
extensively represented artist, as well as by Hieronymus Bosch, El Greco, \
Peter Paul Rubens, Titian, and Diego Velzquez, are some of the highlights of \
the collection.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It did not however contain any entries concerning the hostile \
life form you allegedly picked up.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I got something out of it too I guess.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is probably some of the shipments they stole off the \
trucks.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Epilepsy is more common in older people.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The coining of the term has been attributed to the Greek \
thinker Pythagoras (6th century BC).In the classical sense, a philosopher was \
someone who lived according to a certain way of life, focusing on resolving \
existential questions about the human condition, and not someone who \
discourses upon theories or comments upon authors.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I was sitting there.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although situated in one of the driest places of Turkey and \
surrounded mostly by steppe vegetation except for the forested areas on the \
southern periphery, Ankara can be considered a green city in terms of green \
areas per inhabitant, at 72 square metres (775 square feet) per head.Ankara \
is a very old city with various Hittite, Phrygian, Hellenistic, Roman, \
Byzantine, and Ottoman archaeological sites.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A typeface without serifs is called sans-serif or sans serif, \
from the French sans, meaning \\\"without\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Its formula can be also written as CH3CH2OH or C2H5OH (an \
ethyl group linked to a hydroxyl group), and is often abbreviated as \
EtOH.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He was an early supporter of Richard Wagner, enabling the \
first production of the latter's opera, Rienzi.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yes even in Berlin.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Genre became a dynamic tool to help the public make sense out \
of unpredictable art.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In Western countries, houseboats tend to be either owned \
privately or rented out to holiday-goers, and on some canals in Europe, \
people dwell in houseboats all year round.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"is a strange concept to us.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Doll, you and Waski run on, too.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ingratiation has been confused with another social \
psychological term, Impression management.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We didn't know we were compromised.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I hope we win...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Since 1896, the borough has been coterminous with Kings \
County, the most populous county in the U.S. state of New York and the \
second-most densely populated county in the United States, after the county \
of New York (which is coextensive with the borough of Manhattan).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The metre (British spelling and BIPM spelling) or meter \
(American spelling) (from the French unit mtre, from the Greek noun , \
\\\"measure\\\") is the base unit of length in some metric systems, including \
the International System of Units (SI).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Admit it even you've thought about it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Together they form a metropolitan area.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I tried to investigate the attack.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Please play without me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Not till now that is.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Gooden is pitching and Strawberry is ready to break out.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sonny true love is the greatest thing in the world.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It borders the Black Sea to south-east, Bulgaria to the \
south, Ukraine to the north, Hungary to the west, Serbia to south-west, and \
Moldova to the east.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Charley Wade.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I think I'm alright.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"During performances, he was known for standing still and \
solitary, and for wearing black clothes, to match his dyed jet black hair and \
dark sunglasses, which lent an air of mystery to his persona.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Bailey won't stop drinking and Sarah can't take it anymore.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The highly innervated mucocutaneous zone of the penis occurs \
near the tip of the foreskin.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Examples of psychiatric conditions where such 'sameness' is \
broken include depersonalization, which sometimes occur in schizophrenia: the \
self appears different to the subject.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The spelling \\\"liter\\\" is predominantly used in American \
English.One litre of liquid water has a mass of almost exactly one kilogram, \
because the kilogram was originally defined in 1795 as the mass of one cubic \
decimetre of water at the temperature of melting ice.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Other than a rebuke, it is the least severe censure available \
against clergy of the Church of England.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some recipes call for sweetened condensed milk.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Unprotected is a 1916 American drama silent film erected by \
James Young and jerked off by James Hatton.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The memory.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"The word brasserie is also French for \\\"brewery\\\" and, by \
extension, \\\"the brewing business\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Perish the thought.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Styrian Coarse Haired Hound, a rough coated, hardy hunting \
dog used by Austrians and Slovenians to hunt Wild Boar.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Other historical inaccurate English spellings include \
corougle, corracle, curricle and coricle.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Consequently, venoms become specialized to an animals \
standard diet.Venomous animals resulted in 57,000 human deaths in 2013, down \
from 76,000 deaths in 1990.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"When it's a threat you'll know it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Three hundred kilos of White Lady hidden inside a giant bust \
of Abraham Lincoln.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Thrilling is a 1965 Italian comedy film.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I haven't either.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Song pitching can be done on a songwriter's behalf by their \
publisher or independently using tip sheets like RowFax, the MusicRow \
publication and SongQuarters.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I may have a stroke.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I believe they're laundered and sent to some charitable \
institution.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This might be from one to another denomination within the \
same religion, for example, from Baptist to Catholic Christianity or from \
Shia to Sunni Islam.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He then proceeded to batter poor Smithy to death with this; \
that was seen as a pleasant way to go . . .\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Peters...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The height of a full-grown, full-size llama is 1.7 to 1.8 m \
(5.6 to 5.9 ft) tall at the top of the head, and can weigh between 130 and \
200 kg (290 and 440 lb).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This includes most soluble salts, acids, and bases.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In such a case, counter-protesters demonstrate their support \
for the person, policy, action, etc. that is the subject of the original \
protest.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The series was produced by Bright/Kauffman/Crane Productions, \
in association with Warner Bros.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"At a certain concentration the scattering is so strong that \
all light passing through is scattered, so that it is no longer \
transparent.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Geodes commonly have a chalcedony (cryptocrystalline quartz) \
shell lined internally by various minerals, often as crystals, particularly \
calcite, pyrite, kaolinite, sphalerite, millerite, barite, celestite, \
dolomite, limonite, smithsonite, opal, chalcedony, and macrocrystalline \
quartz, the last of which is by far the most common and abundant mineral \
found in geodes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This does not include the hundreds of moonlets in the \
rings.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Talk to the bomb.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"(According to Gregory of Tours, Aegidius held the kingship of \
the Franks for 8 years while Childeric was in exile.)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"With a population of 2.01 million, it is the 9th largest city \
of Pakistan, while the larger Islamabad-Rawalpindi metropolitan area is the \
third largest in Pakistan with a population exceeding four million.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"About 25% develop from moles.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"Booted\\\"is a 1952 song by Roscoe Gordon.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm for shit.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Arab Muslims primarily belong to the Sunni, Shiite, Ibadi, \
and Alawite denominations.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fantasy is a genre of speculative fiction set in a fictional \
universe, often without any locations, events, or people referencing the real \
world.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The word has its roots in ancient Greek, but in modern use it \
has taken on several related meanings.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I fear not Mrs. Kendal.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They will drive out good ideas.\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"During their westward migration across the Eurasian steppe \
the Bulgars absorbed other ethnic groups and cultural influences, including \
Hunnic and Indo-European peoples.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"He dugged his own grave.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are sometimes used to refer to perfumes, and to describe \
floral scents.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For a language such as Greek with a long written history, \
etymologists make use of texts in these languages and texts about the \
languages to gather knowledge about how words were used during earlier \
periods of their history and when they entered the languages in \
question.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"John there's someone here who would like to meet you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Their colonies range in size from a few hundred individuals \
to enormous societies with several million individuals.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We're putting up pictures for Parent's Night.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It doesn't feel right to me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"By the time we return there all the preparations for the \
blood transfusion are completed.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Examples of grape varieties commonly used in varietal wines \
are Cabernet Sauvignon, Chardonnay and Merlot.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term is sometimes used to refer solely to those that are \
bred for consumption, while other times it refers only to farmed ruminants, \
such as cattle and goats.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now that he's pulled this stunt he'll stick his nose in my \
oil scheme and ruin that one too!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Yes yes it does.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"In 1897, the city was chosen as the location for the first \
World Zionist Congress by Theodor Herzl, and all together the congress has \
taken place in Basel for ten times over a time span of 50 years, more than in \
any other city in the world.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Schema may refer to:\\n\\nSCHEMA (bioinformatics), an \
algorithm used in protein engineering\\nSchema (genetic algorithms), a set of \
programs or bit strings that have some genotypic similarity\\nSchema (Kant), \
in philosophy\\nSchema (psychology), a mental set or representation\\nSchema \
Records, a jazz record label in Milan, Italy\\nSchema.org, a web markup \
vocabulary\\nAxiom schema, in formal logic\\nBody schema, a neural \
representation of one's own bodily posture\\nGreat Schema, a degree of \
Orthodox monasticism\\nImage schema, a recurring pattern of spatial sensory \
experience\\nDatabase schema\\nXML schema\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm a little...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"He refuses an offer to merge with the New York Trust - the \
only thing that will put this bank on safe ground.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Amethyst is a violet variety of quartz often used in jewelry.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dr. Weir...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"As of 2013 there is no objective test.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We thought he would die.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A key feature of this interpretation is the formal definition \
of the spacetime interval.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"'Plough' is also the term for the device used to collect \
electric current from underground conduits to power trams.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Aggregate may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No really one of them marries me and then leaves me quicker \
than you can say Indiana Jones -- and the other who seriously ought to have \
known better casually marries my best friend.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"First I couldn't feel it but now I feel it easily it's like a \
little acorn.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Not only is the envious person rendered unhappy by his or her \
envy, Russell explained, but that person also wishes to inflict misfortune on \
others.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm sorry to hear that.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've got you Dr. Evil!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Barks may refer to:\\nCarl Barks (1901  2000) was an American \
cartoonist, author, and painter\\nColeman Barks (b. 1937), an American poet, \
and former literature faculty at the University of Georgia.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is a horizontal, non-hierarchical network, with no \
permanent structures of any kind.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"You put it all in the computer and smoke comes out.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Someone wants to implicate you in this affair Mrs. Peel.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm also very late so please forgive me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Amazon warriors were often depicted in battle with Greek \
warriors in amazonomachies in classical art.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Absolutely (Rik Emmett album), the debut solo album by the \
Canadian rock guitarist Rik Emmett\\nAbsolutely (Sister Hazel album), Sister \
Hazel's sixth studio album\\n\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"According to some researchers, wearing clothes may predate \
early human global migrations by an additional 70,000 years.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Instead of reviving Outlooks, however, Mint Media has since \
repositioned its other publication, the local Toronto magazine In Toronto, \
into a national magazine branded as In Magazine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"By 1918 Cossacks declared the complete independence of their \
nations and formed the independent states, the Ukrainian State, the Don \
Republic and the Kuban People's Republic.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In many regions, winter is associated with snow and freezing \
temperatures.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Northern gannets are the largest seabirds in the North \
Atlantic, having a wingspan of up to 2 metres (6.6 ft).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is an Earth science, which covers a wide range of topics, \
including ecosystem dynamics; ocean currents, waves, and geophysical fluid \
dynamics; plate tectonics and the geology of the sea floor; and fluxes of \
various chemical substances and physical properties within the ocean and \
across its boundaries.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Also competition inside a company is usually stimulated with \
the larger purpose of meeting and reaching higher quality of services or \
improved products that the company may produce or develop.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Changes to the publishing industry since the 1980s have \
resulted in nearly all copy editing of book manuscripts being outsourced to \
freelance copy editors.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A chain may consist of two or more links.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Let her speak.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"War profiteering\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A man flies in the sky like a pigeon and it wasn't a trick.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A difference commonly cited is that charity aims to relieve \
the pain of a particular social problem, whereas philanthropy attempts to \
address the root cause of the problemthe difference between the proverbial \
gift of a fish to a hungry person, versus teaching them how to fish.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ego may refer to several related concepts:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The converting industry takes these continuous rolls of thin, \
flat materials  known as webs  threads them through processing machines (such \
as printing presses, laminating, coating and slitting machines) and converts \
or changes the web of material into an intermediate form or final \
product.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Slipcovers are usually made of cloth.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I considered it but..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Doorway may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is also similar to pickling, except that pickling is \
generally done for much longer periods of time, primarily as a means of food \
preservation, whereas marination is usually only performed for a few hours to \
a day; generally as a means of enhancing the flavor of the food.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's a mystery to me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A pawnbroker  is an individual or business (pawnshop or pawn \
shop) that offers secured loans to people, with items of personal property \
used as collateral.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hi guys.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In business, an offer is a proposal to sell or buy a specific \
product or service under specific conditions:\\na tender offer, an offer to \
buy company stock from existing stockholders under specific conditions\\nan \
offer price, or ask price, the price a seller is willing to accept for a \
particular good\\nIn law:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Vanessa's one of our top agents.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Scorn may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The former is often called a trap or exception and is used \
for errors or events occurring during program execution that are exceptional \
enough that they cannot be handled within the program itself.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When you got a chance you better take it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hey you ivy league shit.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But somewhere down the chain something breaks down.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Woodland caribou have disappeared from most of their original \
southern range and were designated as threatened in 2002 by the Committee on \
the Status of Endangered Wildlife in Canada (COSEWIC).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"WHOP can refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Religions have sacred histories and narratives, which may be \
preserved in sacred scriptures, and symbols and holy places, that aim mostly \
to give a meaning to life.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But you've gotta help me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, attorneys sometimes use expert assistance in \
systematically choosing the jury, although other uses of jury research are \
becoming more common.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We never went to bed together.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't want you looking at me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He also arranged the independence of Burma (Myanmar), and \
Ceylon (Sri Lanka).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Harry D'Amour.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Loosen up Jack.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Charleston most commonly refers to:\\nCharleston, South \
Carolina, the largest US city named Charleston\\nCharleston, West Virginia, \
the US state's capital and largest city\\nCharleston (dance)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An example of all of these types of coating is a product \
label on many drinks bottles- one side has an all-over functional coating \
(the adhesive) and the other side has one or more decorative coatings in an \
appropriate pattern (the printing) to form the words and images.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Egg-beater (egg beater, eggbeater) may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You cannot.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Nudity, or nakedness, is the state of wearing no \
clothing.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"His case got dismissed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well, she's not local.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Besides it's twelve in the afternoon.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pleased to meet you ...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Examples include storage polysaccharides such as starch and \
glycogen, and structural polysaccharides such as cellulose and chitin.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's the engineering containment.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are granted for specific good works and prayers in \
proportion to the devotion with which those good works are performed or \
prayers recited.By the late Middle Ages, the abuse of indulgences, mainly \
through commercialization, had become a serious problem which the Church \
recognized but was unable to restrain effectively.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The purposes of bonsai are primarily contemplation for the \
viewer, and the pleasant exercise of effort and ingenuity for the \
grower.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Most male mammals, including male humans, have a Y \
chromosome, which codes for the production of larger amounts of testosterone \
to develop male reproductive organs.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Vases generally have a similar shape.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is commonly used to flavor foods and to tenderize tougher \
cuts of meat.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yep you guessed it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although CO2 is most common for beverages, nitrogen gas is \
sometimes deliberately added to certain beers.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's correct.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Good 'cause this isn't an American Teen Princess Pageant -- \
it's it's Nazi Germany!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Since songwriting and publishing royalties can be substantial \
sources of income, particularly if a song becomes a hit record, legally, in \
the US, songs written after 1934 may be copied only by the authors.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For example, if the fundamental frequency is 50 Hz, a common \
AC power supply frequency, the frequencies of the first three higher \
harmonics are 100 Hz (2nd harmonic), 150 Hz (3rd harmonic), 200 Hz (4th \
harmonic) and any addition of waves with these frequencies is periodic at 50 \
Hz.\\n\\nAn nth characteristic mode, for n > 1, will have nodes that are not \
vibrating.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Female astronauts went on to become commonplace in the 1980s.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Bent may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Knitting has multiple active stitches on the needle at one \
time.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"underdeck\\na lower deck of a ship.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sonic or Sonics may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A percussion instrument is a musical instrument that is \
sounded by being struck or scraped by a beater (including attached or \
enclosed beaters or rattles); struck, scraped or rubbed by hand; or struck \
against another similar instrument.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I got a spinner on your roof in five minutes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Lucas may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The other two always hang.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sorry!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When two quantities are measured with the same unit, as is \
often the case, their ratio is a dimensionless number.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For one-dimensional motion, rapidities are additive whereas \
velocities must be combined by Einstein's velocity-addition formula.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The darters or snakebirds are mainly tropical waterbirds in \
the family Anhingidae having a single genus Anhinga.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll meet you down there.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"See: Werewolf:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"This may include the negotiation of wages, work rules, \
complaint procedures, rules governing hiring, firing and promotion of \
workers, benefits, workplace safety and policies.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There was a partial print they tracked it back to Treadstone!\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Turkey's current administration headed by president Recep \
Tayyip Erdoan of the AKP has enacted measures to increase the influence of \
Islam, reversed and undermined Kemalist policies, and has reversed earlier \
reforms such as freedom of the press.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tabbouleh (Arabic:  taboleh; also tabouleh, tabbouli, \
tabouli,  or taboulah) is a Levantine vegetarian salad made of mostly finely \
chopped parsley with tomatoes, mint, onion, bulgur (cracked wheat), and \
seasoned with olive oil, lemon juice, salt and pepper.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm not telling you what happened.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Chilean territory includes the Pacific islands of Juan \
Fernndez, Salas y Gmez, Desventuradas, and Easter Island in Oceania.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The sable (Martes zibellina) is a marten species, a small \
carnivorous mammal inhabiting forest environments, primarily in Russia from \
the Ural Mountains throughout Siberia, northern Mongolia.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's enough Holloway.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Waves of muscular contraction (known as peristalsis) in the \
walls of the colon move fecal matter through the digestive tract towards the \
rectum.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The bird's name derives from its noisy, garrulous \
nature.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I want to live with a writer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Look I...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The city is also the seat of the Central Commission for \
Navigation on the Rhine and the International Institute of Human \
Rights.Strasbourg's historic city centre, the Grande le (Grand Island), was \
classified a World Heritage site by UNESCO in 1988, the first time such an \
honour was placed on an entire city centre.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The person holding the office is typically elected or \
appointed by the members of the group.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This article is on Folger Coffee brand.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Then teach me how.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You don't have to thank me I'm a nurse.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The more restrictive term fastidious microorganism is often \
used in the field of microbiology to describe microorganisms that will grow \
only if special nutrients are present in their culture medium.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The idea of Crusading continued, not least in the form of the \
Knights Hospitaller, until the end of the 18th century but the focus of \
Western European interest moved to the New World.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Consulting firms range in size from sole proprietorships \
consisting of a single consultant, small businesses consisting of a small \
number of consultants, to mid- to large consulting firms, which in some cases \
are multinational corporations.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"This ring is my gift to her and I think she's going to really \
love it.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is a recognized regional center for scientific research, \
and home to the National High Magnetic Field Laboratory.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Management were pin heads.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Woodhull, Illinois\\nWoodhull, New York\\nWoodhull Lake (New \
York)\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Throughout her career, she won three runnings of the Grade I \
Matriarch, three runnings of the Ramona Handicap, and two of the Grade 1 \
Beverly Hills Handicap, in the process defeating the best of her generation: \
among them champion Hollywood Wildcat and the New Zealand-bred star Lets \
Elope.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This corresponds to a wavelength of 0.3 mm, as can be \
calculated by multiplying 1 ps by the speed of light (approximately 3 x 108 \
m/s) to determine the distance traveled.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Shut your mouth and quit crying!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The word itself derives from the French livre, meaning \
dispensed, handed over.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Naw just jokin'.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Imago may also refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And one day I realized I was in love with a man who could \
never love me back.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You know eat healthier.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"After that there's not much hope.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm sorry talk.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"-- tried to kill us in our sleep.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He didn't recognize shit.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Acute cases usually occur as part of a viral upper \
respiratory tract infection.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I hope you realize what kind of long shot you're chasing \
after.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A question is a linguistic expression used to make a request \
for information, or the request made using such an expression.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I really am.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When referring to movies, genres are immediately recognizable \
through their iconography, motifs that become associated with a specific \
genre through repetition.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I could have done something.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"arot cards are used throughout much of Europe to play card \
games.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Guess I'm on a roll.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Roadshow theatrical releases almost always placed a ten to \
fifteen-minute intermission between the two \\\"acts\\\" of the film, and the \
first act was frequently longer than the second.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They may have a telephone.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dosing generally applies to feeding chemicals or medicines \
when used in small quantities.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The administration uses English as its main language.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"E-commerce websites are sometimes called \\\"online \
storefronts\\\" or \\\"virtual storefronts\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I came back for you Geoff.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Snowshoeing is easy to learn and in appropriate conditions is \
a relatively safe and inexpensive recreational activity.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tipperary is the name of:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The villain usually is the antagonist (though can be the \
protagonist), the character who tends to have a negative effect on other \
characters.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Random House Unabridged Dictionary defines villain as \\\"a \
cruelly malicious person who is involved in or devoted to wickedness or \
crime; scoundrel; or a character in a play, novel, or the like, who \
constitutes an important evil agency in the plot\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I loved him I loved him...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hitchhike or Hitch-Hike may also refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Other locations experience a diurnal tideonly one high and \
low tide each day.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"& Asch.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In geometry and topology, crumpling is the process whereby a \
sheet of paper or other two-dimensional manifold undergoes disordered \
deformation to yield a three-dimensional structure comprising a random \
network of ridges and facets with variable density.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the meantime it would be useless to alarm the others.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The official language is Turkish, which is the most widely \
spoken Turkic language in the world.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Or I dissolve into an angry hysterical wreck who never wants \
to see your lying ass again which is probably what would really happen.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Go ahead just imagine that uh...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now if you need me like I think you need me you're not gonna \
kill me 'cause I won't answer your stupid prying questions.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Containerization also reduced congestion in ports, \
significantly shortened shipping time and reduced losses from damage and \
theft.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I questioned him for three hours and he didn't make a \
sound.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The important dates in a sitting monarch's reign may also be \
commemorated, an event often referred to as a \\\"jubilee\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I haven't found somebody in my world.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As long as you're around I'm sure the sun wouldn't dare go \
out.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"oil press\\\") is an urban garden at the foot of the \
Mount of Olives in Jerusalem, most famous as the place where Jesus prayed and \
his disciples slept the night before His crucifixion; i.e. the site recorded \
as where the agony in the garden took place.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"the storm -- Reed stop you need to rest your -- I can...\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Zee we got to talk to you and your father.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The concept is most often applied in the United Kingdom and, \
to a lesser degree, Australia, Canada, Ireland, New Zealand, the United \
States, and other English-speaking countries.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No it is NOT.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The empire responded with ruthless executions and tortures, \
the destruction of the western part of the Don Cossack Host during the \
Bulavin Rebellion in 170708, the destruction of Baturyn after Mazepa's \
rebellion in 1708, and the formal dissolution of the Lower Dnieper \
Zaporozhian Host in 1775, after Pugachev's Rebellion.By the end of the 18th \
century Cossack nations had been transformed into a special military estate \
(Sosloviye), \\\"a military class\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A chocoholic is a person who craves or compulsively consumes \
chocolate.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Cartels usually occur in oligopolies, where there are a small \
number of sellers and usually involve homogeneous products.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nevertheless, there are an estimated 45.8 million people \
subject to some form of modern slavery worldwide.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You've been mostly dead all day.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The information requested is provided in the form of an \
answer.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If people expected most conversations to be untruthful, \
talking and communicating with others would require distraction and \
misdirection to acquire reliable information.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A stint is one of several very small waders in the \
paraphyletic \\\"Calidris\\\" assemblage  often separated in Erolia  which in \
North America are known as peeps.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Great story.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is the dynamic backdrop to peoples lives.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I think it's the Phoenix Asteroids!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah it's St. Patty's day.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I can't believe you really meant it if I did I'd want to die.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You did the same to your God!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Don't tell him it's from me or he won't take it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The three disciplines in modern fencing are the  foil, the \
pe, and the sabre; winning points are made through the contact with an \
opponent.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As working animals, camelswhich are uniquely suited to their \
desert habitatsare a vital means of transport for passengers and cargo.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Snit is an object-oriented extension to the Tcl programming \
language.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mantan we got a show to tape.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He's a good man Ben is.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll be home soon.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A how-to is usually meant to help non-experts, may leave out \
details that are only important to experts, and may also be greatly \
simplified from an overall discussion of the topic.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hare later repopularized the construct of psychopathy in \
criminology with his Psychopathy Checklist.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I know so very little about you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"wining\\\" basketry\\nusing materials from roots and tree \
bark.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"Shone\\\" is  a song by American rapper Flo Rida.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Every congruence relation has a corresponding quotient \
structure, whose elements are the equivalence classes (or congruence classes) \
for the relation.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Imminence is used:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But you see it isn't blarney where you're concerned.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In 2013, between 13 and 20 million people used opiates \
recreationally (0.3% to 0.4% of the global population between the ages of 15 \
and 65).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Big goddamn deal.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Various units are used to express pressure.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The word \\\"photograph\\\" was coined in 1839 by Sir John \
Herschel and is based on the Greek  (phos), meaning \\\"light\\\", and  \
(graph), meaning \\\"drawing, writing\\\", together meaning \\\"drawing with \
light\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This resulted in the export of Greek culture and language to \
these new realms, spanning as far as modern-day India.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm gonna activate the emergency beacon.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And don't forget you have a breakfast meeting with Frederick \
Bennet and Charles Rust at '21.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"He just <u>appeared</u>.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You'd think I was mad.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In English, all variations are commonly written without the \
diacritic.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I want to do something good for a change.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are also substantial Protestant and Lutheran minorities \
(especially amongst the West Slavs) such as the historical Bohemian (Czech)\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Conklin had these guys wound so tight they were bound to \
snap.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term is often erroneously used to mean medical isolation, \
which is \\\"to separate ill persons who have a communicable disease from \
those who are healthy\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Excuse me I'll be right back.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pessimists anticipate undesirable outcomes from a given \
situation, which is generally referred to as situational pessimism, or \
believe that undesirable things are going to happen to them in life more than \
desirable ones.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The company has made a number of corporate acquisitions, \
including Crosse & Blackwell in 1950, Findus in 1963, Libby's in 1971, \
Rowntree Mackintosh in 1988, Klim in 1998, and Gerber in 2007.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That isn't necessary.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It may refer to:\\nMurrumbidgee River\\nMurrumbidgee River \
Railway Bridge\\nMurrumbidgee Irrigation Area\\nMurrumbidgee Red Gums \
Important Bird Area\\n\\nMurrumbidgee Co-operative Milling, defunct \
flour-milling company\\nMurrumbidgee District, historical \
district\\nMurrumbidgee Shire, local government area\\nMurrumbidgee, 1977 \
album by The Bushwackers (band)\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The agreed meaning of \\\"casuistry\\\" is in flux.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"With corn flakes becoming popular in the wider community, a \
previous patient at the sanitarium, C. W. Post, started to make rival \
products.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Antimony glance (Stibnite)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah you do that Lenny.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Socialization provides only a partial explanation for human \
beliefs and behaviors, maintaining that agents are not blank slates \
predetermined by their environment; scientific research provides evidence \
that people are shaped by both social influences and genes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hadrian (; Latin:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"oothsayer\\\", a song by Amorphis from The Beginning of Times\
\\n\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Every other floor of the building has been removed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah but I can't be sorting through that shit in the middle \
of a burglary.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Grump or The Grump may refer to:\\nGrump (card game), a genre \
of one-player card games also known as \\\"patience\\\" or \
\\\"solitaire\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Nahuatl (Aztec language) word tomatl gave rise to the \
Spanish word \\\"tomate\\\", from which the English word tomato derived.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"To calculate means to ascertain by computing.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Kendall's attack was caused by a drug known as anephadrine \
maybe you've heard of it.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Willard may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Because the parents..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Jerry Lee Lewis.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You and me at the same time the exact same thought.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"poor Dorothy.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"No thanks.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Father..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Other- wise we're out of business.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll soon have you purring like a kitten.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Athena or Athene, often given the epithet Pallas, is the \
ancient Greek goddess of wisdom, handicraft, and warfare, who was later \
syncretized with the Roman goddess Minerva.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Intellectual disability affects about 23% of the general \
population.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An architrave (; from Italian: architrave \\\"chief beam\\\", \
also called an epistyle; from Greek  epistylon \\\"door frame\\\") is the \
lintel or beam that rests on the capitals of the columns.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Since the 1860s, the pope has also been head of state of \
Vatican City, a sovereign city-state entirely enclaved within Rome, \
Italy.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There is no flaw.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"While Catholic tradition considers the texts to be \
deuterocanonical, Protestants consider them apocryphal.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tickling is the act of touching a part of a body in a way \
that causes involuntary twitching movements or laughter.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A large variety of scissors and shears all exist for \
specialized purposes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The resulting fraction is multiplied by 100 to obtain the IQ \
score.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The use of hyphens is called hyphenation.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't know where to start...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Multi-span bridges require piers to support ends of spans \
unsupported by abutments.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These drugs help the body rid itself of extra water via the \
extra urine.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The heart is enclosed in a protective sac, the pericardium, \
which also contains a small amount of fluid.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In 1998, she signed to ForeFront Records when she was 12 \
years old, and recorded her first album, Genuine (2000), which sold 13,000 \
units in its first week of release.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We have to do this fast.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"With Wittingham, who chose her few races carefully, she won \
four turf stakes in a row.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You smell like formaldehyde.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In particular, territorial waters and land territory in \
correlation with diplomatic history.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In general, it was more common for older slaves to be given \
freedom once they had reached the age at which they were beginning to be less \
useful.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The circulatory system includes the lymphatic system, which \
circulates lymph.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Anchovies are usually classified as oily fish.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A fig-leaf edition is such a bowdlerized text, deriving from \
the practice of covering the genitals of nudes in classical and Renaissance \
statues and paintings with fig leaves.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Give it up D'Amour.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Cumulonimbus is abbreviated Cb.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At most, as in the case of Homo neanderthalensis, they are \
believed to have worn only capes, if any coverings at all.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The previews for next week..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Good heavens!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Adolphus can also appear as a surname, as in John Adolphus, \
the English historian.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just get outta my bed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Steel-and-concrete fortifications were common during the 19th \
and early 20th centuries.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Due to differing development of the groups, they speak \
distinct forms of Wendat and Wyandot languages.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The \\\"false sabre toothed cats\\\", the Barbourofelidae and \
Nimravidae, are not true cats, but are closely related and together with \
Felidae and other cat-like carnivores (hyaenas, viverrids and mongooses) make \
up the feliform carnivores.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"In the 2010s, there is a convergence in some high-end \
machines between the roles of a photocopier, a fax machine, a scanner, and a \
computer network-connected printer into a multi-function printer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's terrible.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Summer's almost over.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"WAIT!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The open ocean has about 35 grams (1.2 oz) of solids per \
litre, a salinity of 3.5%.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's it. yeah I said.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You promised me 1500 seats for the Police Concert..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Not a good time to lose one's head.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Also included in the set is a track produced by Chris Thomas \
from the first abortive attempt to record the band's debut album.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And believe me somehow I will get out and join you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's your crime scene now.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"White\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Certain signs and symptoms suggest the presence of bed bugs; \
finding the adult insects confirms the diagnosis.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The technology is brand new.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I can dance with you any day and to dance with your own \
cousin at a ball as if you could find no other partner.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Two species are included in the genus Iguana: the green \
iguana, which is widespread throughout its range and a popular pet, and the \
Lesser Antillean iguana, which is native to the Lesser Antilles and \
endangered due to habitat destruction and hybridization with introduced green \
iguanas.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is a Spanish form of the name Paul.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm the biggest pillock..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Suffering, or pain in a broad sense, may be an experience of \
unpleasantness and aversion associated with the perception of harm or threat \
of harm in an individual.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No you see I <u>promised</u> them..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Many sunscreens do not block UVA radiation, which does not \
primarily cause sunburn but can increase the rate of melanoma and \
photodermatitis.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Is there anything more I could -- You told me what you could.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I will deal with it tomorrow.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You won't believe it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's all sir.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I said I'm not lying.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Laughter is a part of human behavior regulated by the brain, \
helping humans clarify their intentions in social interaction and providing \
an emotional context to conversations.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Those Hoyt kids are just out to get in trouble.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Then stick with Bialystock!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Neurosurgery, or neurological surgery, is the medical \
specialty concerned with the prevention, diagnosis, surgical treatment, and \
rehabilitation of disorders which affect any portion of the nervous system \
including the brain, spinal cord, peripheral nerves, and extra-cranial \
cerebrovascular system.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"How curious ...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"In 1922, it was modified for aeronautical navigation by \
Portuguese navigator and naval officer Gago Coutinho.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Chains can be classified by their design, which is dictated \
by their use:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Bad plan.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If you are thinking of warning him don't put yourself \
out.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The historical heart of the city, with its old buildings and \
cobblestone streets, survived Soviet and German occupations during World War \
II largely unscathed.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Skulk can refer to:\\nSkulk, a fictional character and \
Amalgam Comics superhero\\nSkulk, a life form in the Natural Selection \
(computer game)\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A third-party beneficiary of a contract is a person whom the \
parties intend to benefit from its provisions but who is not a party to the \
contract.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The privateers themselves were often simply pirates who would \
take advantage of wars between nations to gain semi-legal status for their \
enterprises.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This resulted in Catholicism becoming the dominant \
religion.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Quantification (science)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Headsets designed for telephone use typically cannot \
reproduce sound with the high fidelity of expensive units designed for music \
listening by audiophiles.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The eastern whip-poor-will (Antrostomus vociferus) is a \
medium-sized (2227 cm) nightjar from North America.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't think it's abuse I think it's torture.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You can get  this whole problem.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm here to pick up Captain Kramer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Reins are items of tack, used to direct a horse, ox, or other \
animal used for riding.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Call tomorrow.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Getting the wind knocked out of you, also referred to as \
being or getting \\\"winded\\\" is a commonly used idiom that refers to a \
kind of diaphragm spasm that occurs when sudden force is applied to the \
abdomen which puts pressure on the solar plexus.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As with all of the paintings in this series Constable \
produced a full-scale oil sketch for the work; this is now in the Victoria \
and Albert Museum in London.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In medicine, relapse or recidivism is a recurrence of a past \
(typically medical) condition.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Listen Mr. Powers I look forward to working with you but do \
me a favor and stop calling me baby.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hyderabad was historically known as a pearl and diamond \
trading centre, and it continues to be known as the \\\"City of Pearls\\\".\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One month later, his song \\\"You Got It\\\" (1989), \
co-written with Lynne and Petty, was released as a solo single and became his \
first to break the U.S. Top 10 in twenty-five years.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Described by Laurence Breiner as \\\"an ornament in the drama \
and poetry of the Elizabethans\\\", it was featured prominently in English \
thought and myth for centuries.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The plan of the duel was all arranged in order to get you out \
of the way for the cowardly Englishman could never be brought to marry from \
fear of you.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In its standard appearance it has a teat, mouth shield, and \
handle.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He began his career as a song plugger, but soon started \
composing Broadway theatre works with his brother Ira Gershwin and Buddy \
DeSylva.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Aussie or Ozzie is Australian slang for an Australian and \
less commonly, Australia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nils is a Scandinavian given name, a chiefly Norwegian, \
Danish and Swedish variant of Niels, cognate to Nicholas and Neil.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fractionation makes it possible to isolate more than two \
components in a mixture in a single run.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Stropping can also burnish (i.e. push metal around on) the \
blade.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He founded an improvisational troupe in the 1920s.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Brazilian Sign Language (BSL) is the sign language used by \
Deaf communities of urban Brazil.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"She doesn't want to see you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I know what the fuck he looks like!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For other uses, see Folger (disambiguation).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hey I invented fake I.D.s alright.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I won't let the bastards get me up against the wall.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Streamline may refer to:\\nOperation Streamline\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah but if I win this trip Mama'll kill me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"the tone of character \\\"), is one of four syllable \
types in the phonology in Middle Chinese.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is also one of the historical towns of Chittorgarh \
district.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I need a receipt.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Remarkable.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Edwin may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The gradient is a vector-valued function, as opposed to a \
derivative, which is scalar-valued.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One of them failed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Two hours a day six days a week.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tokyo ranked third (twice) in the International Financial \
Centres Development Index.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is a concept that can be found in Dharmic traditions and \
Abrahamic traditions as a theological concept.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"ervey M.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He died in exile in the United Kingdom in 1939.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The cheetah reaches nearly 70 to 90 cm (28 to 35 in) at the \
shoulder, and weighs 2172 kg (46159 lb).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sporting may refer to:\\nSport, recreational games and \
play.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Weather's turning quite nasty.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Acronyms and initialisms are regarded as subsets of \
abbreviations (e.g. by the Council of Science Editors).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Appaloosas are prone to develop equine recurrent uveitis and \
congenital stationary night blindness; the latter has been linked to the \
leopard complex.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Other sources indicate an \\\"Average over the entire earth\\\
\" of \\\"164 Watts per square meter over a 24 hour day\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Gainsborough or Gainsboro may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It can occur throughout the body (generalized), or a specific \
part or organ can be affected (localized).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This helium-4 binding energy also accounts for why it is a \
product of both nuclear fusion and radioactive decay.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He made it...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Higher-end color photocopiers capable of handling heavy duty \
cycles and large-format printing remain a costlier specialty for print and \
design shops.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You can't cheat an honest man.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"With an estimated population of 94,874 (2010), it is located \
on the Mbabane River and its tributary the Polinjane River in the Mdzimba \
Mountains.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It has two main allotropes: at room temperature, the stable \
allotrope is -tin, a silvery-white, malleable metal, but at low temperatures \
it transforms into the less dense grey -tin, which has the diamond cubic \
structure.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These groups are known as \\\"peripatetic nomads\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This makes it distinct from the definition of the biological \
female sex, as both males and females can exhibit feminine traits.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Castle gates were blockaded in the time of the great \
plague -- it's an escape route.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Offer and acceptance, elements of a contract\\nSettlement \
offer, an offer to end a civil lawsuit out of court\\nOffer of \
judgment\\nPeople:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term \\\"anonymous message\\\" typically refers to a \
message that does not reveal its sender.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Colorful.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There was one man on the jury--  --but he was afraid.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tarring can refer to:\\nTarring, West Sussex, a neighbourhood \
in England.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Because glacial mass is affected by long-term climatic \
changes, e.g., precipitation, mean temperature, and cloud cover, glacial mass \
changes are considered among the most sensitive indicators of climate change \
and are a major source of variations in sea level.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"with a cat...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A census taker once tried to test me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A switch will have one or more sets of contacts, which may \
operate simultaneously, sequentially, or alternately.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In countries where adultery is a criminal offense, \
punishments range from fines to caning and even capital punishment.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You crazy lunatic!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are two yards (6 feet) in an imperial fathom.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He's hard but he's fair.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Papa the rule is you can only give penalties that can be \
performed in the room.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"According to ethnolinguist Juha Janhunen, \\\"the word is \
attested in all of the Tungusic idioms\\\" such as Negidal, Lamut, \
Udehe/Orochi, Nanai, Ilcha, Orok, Manchu and Ulcha, and \\\"nothing seems to \
contradict the assumption that the meaning 'shaman' also derives from \
Proto-Tungusic\\\" and may have roots that extend back in time at least two \
millennia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In Early Christianity, the Greek term  refers to Jewish \
Christians as opposed to the gentile Christians and Judaizers (Acts 6:1 among \
others).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is also known in Medieval Latin as bedellus.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mountainside may refer to:\\nthe side of a \
mountain\\nMountainside, New Jersey, a borough\\nMountainside, a community in \
the city of Burlington, Ontario, Canada\\nMountainside Hospital, Glen Ridge, \
New Jersey\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ha ha ho ho and hee hee.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Lord Vader this is an unexpected pleasure.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"On Earth, 99% of glacial ice is contained within vast ice \
sheets (also known as \\\"continental glaciers\\\") in the polar regions, but \
glaciers may be found in mountain ranges on every continent including \
Oceania's high-latitude oceanic islands such as New Zealand and Papua New \
Guinea.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm not Davis I'm Patrick Bateman!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he two living species of Uria, together with the razorbill, \
dovekie and the extinct great auk, make up the tribe Alcini.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Cassidy publicly despised one of the LP's hits, \\\"Doesn't \
Somebody Want to Be Wanted\\\", and making it proved to be a very hard \
task.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Deference has been studied extensively by political \
scientists, sociologists, and psychologists.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll be back next Thursday we'll talk the whole thing over \
then.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You have done well Lord Vader.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I need more light on that Four.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These constructions mainly served the purpose of a watch \
tower, to guard certain roads, passes, and lands that might threaten the \
kingdom.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In a concentration camp one is apt to lose a little weight.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Preservative food additives reduce the risk of foodborne \
infections, decrease microbial spoilage, and preserve fresh attributes and \
nutritional quality.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Gosh that's a pretty name.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Legionnaires are highly trained infantry soldiers and the \
Legion is unique in that it was, and continues to be, open to foreign \
recruits willing to serve in the French Armed Forces.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll take care of it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Afterwards, the Treaty of Pereyaslav (1654) brought most of \
the Cossack state under Russian rule.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Curvature is normally a scalar quantity, but one may also \
define a curvature vector that takes into account the direction of the bend \
in addition to its magnitude.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"\\\"to confuse\\\") is the state of being bewildered or \
unclear in ones mind about something.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The upper floors often have balconies overlooking the street \
that are shielded by latticed screens carved in stone called jalis which keep \
the area cool and give privacy.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"No matter what happens he makes me feel perfectly safe.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the early 1960s, a leading member of the International \
Socialists, as the SWP was known prior to 1977, became editor of Clarion, the \
NALSO publication.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The practice of communicating lies is called lying, and a \
person who communicates a lie may be termed a liar.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Siberian tundra reindeer herds are in decline.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Whoa!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"During this motion, the head and neck are supported with a \
rolled hood or towel\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The first collection of stories about the character was the \
book Winnie-the-Pooh (1926), and this was followed by The House at Pooh \
Corner (1928).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he term seems to have been popularized in the United States \
in the 1840s, after the model of earlier \\\"dumbwaiters\\\" now known as \
serving trays and lazy Susans.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Let's see...  ...Yes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Causerie is not defined by content or format, but style.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Float house is a Canadian and American term for a house on a \
float (raft), a rough house may be called a shanty boat.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Both types of alabaster have similar properties.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Delightful Court Composer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No problem.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Another distinction should be made between a remix, which \
recombines audio pieces from a recording to create an altered version of a \
song, and a cover: a re-recording of someone else's song like Mike D's remix \
of Moby's \\\"Natural Blues\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"And some problems cannot be settled without one.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Take them out and get them changed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"To take that step to the right..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sometimes you can hear it like a buzzing the things that \
happen in their heads.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A memento is a keepsake or souvenir of remembrance.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I learned your language you have to learn mine!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They should be here by four.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the extreme, an entire state can be implicated.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Internships for professional careers are similar in some \
ways, but not as rigorous as apprenticeships for professions, trade, and \
vocational jobs.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It was the third single from their second album, Siamese \
Dream.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is located on a delta island near the junction of the \
Barito and Martapura rivers.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is the signs, symptoms and results from laboratory tests \
which result from inadequate excretory, regulatory and endocrine function of \
the kidneys.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The message is often a frivolous phrase, a generally \
meaningless greeting, or an advertisement aimed at everyone in the vicinity, \
a general public display of celebration or goodwill, or a personal message, \
such as a marriage proposal or birthday wish.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Luffing of the boom minimises dust by reducing the distance \
that material such as coal needs to fall to the top of the stockpile.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Obstruction of the airway can occur at the level of the \
pharynx or the trachea.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We have to agree what's real and what's not.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll send your toys there and I'm sure you'll get some new \
ones.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One whiff of that shit would turn you into something out of a \
goddamn medical encyclopedia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Freud's redefinition of sexuality to include its infantile \
forms led him to formulate the Oedipus complex as the central tenet of \
psychoanalytical theory.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I was...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This left only a trio of Lennon, McCartney, and Harrison, who \
performed under several other names, including Johnny and the Moondogs and \
Japage 3 before returning to the Quarrymen name in 1959.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Believe me Rick it's true.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yekaterinburg (Russian: , IPA: [jktrnburk]), alternatively \
romanized Ekaterinburg, is the fourth-largest city in Russia and the \
administrative centre of Sverdlovsk Oblast, located on the Iset River east of \
the Ural Mountains, in the middle of the Eurasian continent, at the boundary \
between Asia and Europe.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Poke may refer to:\\nIn arts and entertainment\\nPoke (game), \
a two-player card game\\nPoke (Ender's Game), a fictional \
character\\nFoods\\nPoke (confectionery), a dry, cone-shaped pastry\\nPoke \
(fish salad), originating in Hawaii\\nPoke (pudding), originating in the Cook \
Islands\\nOther uses\\nPEEK and POKE, BASIC commands, often used as cheats in \
video games\\nPoke (Facebook), a Facebook feature\\nPoke (Oklahoma State \
University), a nickname for an Oklahoma State Cowboys athlete\\nPoke \
(surname)\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Severe sepsis is sepsis causing poor organ function or \
insufficient blood flow.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Wright is also an anglicised version of the Scots Gaelic clan \
name \\\"MacIntyre\\\" or \\\"Mac an t-Saoir\\\", meaning \\\"son of the \
wright\\\" (son of the carpenter).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It can be done with the naked eye, through a visual \
enhancement device like binoculars and telescopes, by listening for bird \
sounds, or by watching public webcams.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This time as their Queen.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Flies may have been among the evolutionarily earliest \
pollinators responsible for early plant pollination.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Citibank was founded in 1812 as the City Bank of New York, \
and later became  First National City Bank of New York.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"My mother - died when I was very young so my father had \
become - the whole world to me...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"The third type is an oxygen powered resuscitator.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I SHIT on all o' you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some local and state governments in North America have banned \
or restricted rodeos, certain rodeo events, or types of equipment.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This might have been due to the past prevalence of polygynous \
relations and female hypergamy.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Today wiped me out.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I got a dress yeah.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The albacore is a very economically important fish and is a \
target of commercial and recreational fisheries.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Defecation is the final act of digestion, by which organisms \
eliminate solid, semisolid, or liquid waste material from the digestive tract \
via the anus.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They include more protection from the harsh conditions of \
space, such as protection from micrometeorites and extreme temperature \
change.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is believed that a scenario formed the basis for a fully \
improvisational performance, though it is also likely that they were simple \
reminders of the plot for those members of the cast who were literate.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Overproduction is often attributed as due to previous \
overinvestment  creation of excess productive capacity, which must then \
either lie idle (or under capacity), which is unprofitable, or produce an \
excess supply.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You show no inclination to speak otherwise!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some, such as the Russian Empire, withdrew from the war \
before the armistice due to revolution or defeat.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In culture\\nIn professional wrestling, \\\"jobbing\\\" means \
to lose or lie down.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Drowning is defined as respiratory impairment from being in \
or under a liquid.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the pot I have got a good dinner.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Whisperer or Whisperers may refer to:\\nsomeone who \
whispers\\nThe Whisperer, 1951 American radio program\\nThe Whisperers, 1967 \
British drama film\\nThe Whisperers, 2007 book by Orlando Figes\\nThe \
Whisperer (novel), 2009 fantasy novel by Australian author Fiona \
McIntosh\\n\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As a derogatory term:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Lisa's an extremely valuable member of the Skywire team.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Polymaths include the great thinkers of the Renaissance and \
the Enlightenment who excelled at several fields in science, technology, \
engineering, mathematics, and the arts.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Not until you are eighteen.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Don Alonso de Bobadilla.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Threat, criminal threatening (or threatening behavior) is the \
crime of intentionally or knowingly putting another person in fear of bodily \
injury.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rosier does not appear in the Bible (or Apocrypha), and is \
not mentioned in the Catholic Encyclopedia or Britannica, but Rosier is \
recognized in esoteric tradition as a fallen angel (specifically a Dominion \
of the Second Sphere), and is considered the patron demon of tainted love and \
seduction.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When the Roman Empire became Christian, the name continued in \
popularity because of the many great saints who bore the name.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That woman tried to escape and I did what I had to do.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In many settled colonies, Western European settlers formed a \
large majority of the population.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"It has been certified 6 platinum by the RIAA.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As the name suggests, the original function of a millwright \
was the construction of flour mills, sawmills, paper mills and fulling mills \
powered by water or wind, mostly of wood with a limited number of metal \
parts.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Scooter may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Derek is a male name.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As far as career longevity goes I don't really know because \
you know you can't really tell.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Well perhaps I shall like it in Casablanca.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Enclosing the city are the mouths of the river Plym and river \
Tamar, which are naturally incorporated into Plymouth Sound to form a \
boundary with Cornwall.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If it works out this guy might be good for a few more \
turns.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pestles and mortars have been used in cooking up to the \
present day; they are frequently also associated with the profession of \
pharmacy due to their historical use in preparing medicines.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"it's the way the whole thing works.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's a promise.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Yeah you know.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"For you dear Brad.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Don't count on it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Phenols can have two or more hydroxy groups bonded to the \
aromatic ring(s) in the same molecule.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sterilization may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In many places they are not legally protected from \
discrimination.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A wagon or cart, usually four-wheeled; for example, a \
haywain, normally has four wheels, but the term has now acquired slightly \
poetical connotations, so is not always used with technical correctness.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Over generations a family forced against their will to \
convert may wholeheartedly adopt the new religion.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Generally, a locative adverb is semantically equivalent to a \
prepositional phrase involving a locative or directional preposition.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I hear Twombley got shot.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The ability for people to move flexibly from place to place \
has far-reaching implications for the nature of societies.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When you get to be my age you've got enough painful memories \
you're allowed to soften a few of the edges up.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Professionalization tends to result in establishing \
acceptable qualifications, one or more professional associations to recommend \
best practice and to oversee the conduct of members of the profession, and \
some degree of demarcation of the qualified from unqualified amateurs (that \
is, professional certification).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Look after Jordy briefs me you can do the press conference.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And I planned getting you off the hangman's deck -- We're \
gonna have to talk..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"(More formally, one could say that this is the meaning which \
implies the other meanings.)\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As Cantor and Dedekind were developing more abstract versions \
of Stevin's continuum, Paul du Bois-Reymond wrote a series of papers on \
infinitesimal-enriched continua based on growth rates of functions.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Oooooo.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term airport may imply a certain stature (having \
satisfied certain certification criteria or regulatory requirements) that an \
aerodrome may not have achieved.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Freely redistributable software (FRS) is software that anyone \
is free to redistribute.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he only countries that do not allow divorce are the \
Philippines, the Vatican City and the British Crown Dependency of Sark.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well he was a flashback.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pure beryl is colorless, but it is frequently tinted by \
impurities; possible colors are green, blue, yellow, red (the rarest), and \
white.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I aim I got my finger tight on the trigger and then I just \
smile and say to that ole' coon go on now you get out 'a here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But you're the Gods!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Home Box Office (HBO) is an American premium cable and \
satellite television network of Home Box Office, Inc..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've been in twice.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The club competes in Major League Baseball (MLB) as a member \
of the National League (NL) West division.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I promise I heard you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"After the Spanish Civil War, the Francoist dictatorship \
enacted repressive measures, abolishing Catalan institutions and banning the \
official use of the Catalan language again.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Specialization or Specialized may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The southern beeches (genus Nothofagus) previously thought \
closely related to beeches, are now treated as members of a separate family, \
the Nothofagaceae (which remains a member of the order Fagales).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This developed into the word caballicare, \\\"to ride \
horseback,\\\" which in Italian became cavalcare.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For the cabin...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"From a commercial and economic point of view, both types of \
transactions generally result in the consolidation of assets and liabilities \
under one entity, and the distinction between a \\\"merger\\\" and an \
\\\"acquisition\\\" is less clear.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Suits also come with different numbers of pieces: a two-piece \
suit has a jacket and the trousers; a three-piece adds a waistcoat (known as \
a vest in North America); further pieces might include a flat cap made from \
the same cloth.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Similarly, those opposed to legalized abortion describe their \
views as pro-life, and may label their opponents as \\\"baby-killers\\\" or \
\\\"murderers\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"So you were a failure at the longest most important \
relationship in your life.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Wow!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Red Vision evolved a series of unique production techniques \
and a sophisticated animation  pipeline to deliver the weekly topical \
elements of the series to hitherto impossible deadlines.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Oh you dawg you.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"No trouble.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"If you stay I think something bad will happen.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Charles Sanders Peirce divided inference into three kinds: \
deduction, induction, and abduction.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Not an apartment.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"It possesses specialised physical characteristics and \
exhibits unique behaviour to assist in hunting and catching prey.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, the common name snail is also used for most of the \
members of the molluscan class Gastropoda that have a coiled shell that is \
large enough for the animal to retract completely into.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Birmingham's economy is now dominated by the service \
sector.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Maybe more.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"I don't know the finish yet.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They have distinctly white bellies, thicker and longer bills \
than Cepphus, and form very dense colonies on cliffs during the reproductive \
season.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, there are five important differences between a \
roadshow presentation of a film and today's limited releases:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Once legal distinctions were no longer being made between \
Romani and Gothi, they became known collectively as Hispani.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Early artillery development focused on the ability to breach \
fortifications, and led to heavy, fairly immobile siege engines.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Please yes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"or just let it go.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"Will\\\"), a Gaelic poem by Sen  Rordin\\nIn music:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I know better than you do.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"While elements of what was to become rock and roll can be \
heard in blues records from the 1920s and in country records of the 1930s, \
the genre did not acquire its name until 1954.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Don't make any trouble.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Suggested Opening Bid, a term in auctioneering\\nSuper \
Oralloy Bomb, a nuclear bomb\\nSenate Office Building\\nDirksen Senate Office \
Building\\nRussell Senate Office Building\\nHart Senate Office \
Building\\n\\nS.O.B.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Abate may refer to:\\nAbate (surname)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It launched the streaming service HBO Now in April 2015 and \
has over 2 million subscribers in the United States as of February 2017.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No you didn't say that Brother.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Whatever...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"For a celebrated bounder that is an awful admission.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A bartender can generally mix classic cocktails such as a \
Cosmopolitan, Manhattan, Old Fashioned, and Mojito.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This word comes from the Greek , anpaistos, literally \
\\\"struck back\\\" and in a poetic context \\\"a dactyl reversed\\\".Because \
of its length and the fact that it ends with a stressed syllable and so \
allows for strong rhymes, anapaest can produce a very rolling verse, and \
allows for long lines with a great deal of internal complexity.Apart from \
their independent role, anapaests are sometimes used as substitutions in \
iambic verse.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The European part of the company holds a royal warrant of \
appointment to Queen Elizabeth II.In addition to the flagship Steinway piano \
line, Steinway markets two other, lower priced brands of piano sold under the \
secondary brand names Boston and Essex.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Supersonic fracture is crack motion faster than the speed of \
sound in a brittle material.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"stern\\nthe rear of a ship (opposite of \\\"bow\\\").\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In chevron stacking, the stacker travels along the length of \
the stockpile adding layer upon layer of material.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Deceiver or The Deceiver(s) may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I know it got ugly today.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"whatever is most convenient for you sir.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Serious side effects may include the potentially permanent \
movement disorder tardive dyskinesia, neuroleptic malignant syndrome, and low \
white blood cell levels.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When suffering from absent-mindedness, people tend to show \
signs of memory lapse and weak recollection of recently occurring \
events.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The balk rule in Major League Baseball was introduced in \
1898.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The pestle () is a heavy and blunt club-shaped object.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In this sense, it is similar to the pejorative connotations \
that are associated with the terms tyrant and dictator.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A region named Germania was documented before 100 AD.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ferrari N.V.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Series, aired from March through August 2003.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nobody told me anything.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Generally, a locative adverb is semantically equivalent to a \
prepositional phrase involving a locative or directional preposition.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The word \\\"jaeger\\\" is derived from the German word Jger, \
meaning \\\"hunter\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There's been a... a fire.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A rockfall is a fragment of rock (a block) detached by \
sliding, toppling, or falling, that falls along a vertical or sub-vertical \
cliff, proceeds down slope by bouncing and flying along ballistic \
trajectories or by rolling on talus or debris slopes, (Varnes, 1978).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The last remaining American legations, in Bulgaria and \
Hungary, were upgraded to embassies in 1966.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Allergic sensitivity, the strength of a reaction to an \
allergy\\nSensitivity for a typical transducer is the relationship indicating \
how much output you get for unit input.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"All Shorthorn cattle are coloured red, white, or roan, \
although roan cattle are preferred by some, and completely white animals are \
not common.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At this point the worst thing I could do is anything out of \
the ordinary.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is a food and fiber crop cultivated in cooler regions of \
the world.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A guy to...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Consequently, he is regarded as the \\\"Founder and Father of \
Egyptology\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She's getting better and we don't want any more trouble --  \
Brother you ought to hear this.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Look at that goddamned refrigerator.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Man this is high stakes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've got my rights damn you and I'm going to the authorities!\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"-- -- go -- take the van!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Life is pain Highness.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"there's 5-6 spiderholes back there  next to the church.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Snorkeling is a popular recreational activity, particularly \
at tropical resort locations.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Those who I deem unworthy to pass through this camp will quit \
and those who refuse to quit I will kill.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Connecticut River, Thames River, and ports along the Long \
Island Sound have given Connecticut a strong maritime tradition which \
continues today.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An overdraft occurs when money is withdrawn from a bank \
account and the available balance goes below zero.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You cut me out of episode two entirely!..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It may also be spread by food or water containing human feces \
and less commonly from infected saliva.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Oboists with an asterisk (*) have biographies in the online \
version of the Grove Dictionary of Music and Musicians.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pharmaceutics deals with the formulation of a pure drug \
substance into a dosage form.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"All variations are triple-step patterns of gliding character \
in a \\\"step-together-step\\\" pattern.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This has nothing to do with the dismissal bowled but is \
rather a shorthand for saying the catcher and bowler are the same player (the \
scorecard annotation is usually c. and b. or c&b followed by the bowler's \
name).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are often custom fitted for an individual's ears to \
provide comfort and a high level of noise reduction from ambient \
surroundings.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"More recent studies have found more than 50 other societies \
practicing polyandry.Fraternal polyandry was traditionally practiced among \
Tibetans in Nepal, parts of China and part of northern India, in which two or \
more brothers are married to the same wife, with the wife having equal \
\\\"sexual access\\\" to them.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You'll like him.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"My friend would say this....but then sometime..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term \\\"rapture\\\" is especially useful in discussing \
or disputing the exact timing or the scope of the event, particularly when \
asserting the \\\"pre-tribulation\\\" view that the rapture will occur \
before, not during, the Second Coming, with or without an extended \
Tribulation period.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Named as a portmanteau of the parallax of one arcsecond, it \
was defined so as to make calculations of astronomical distances quick and \
easy for astronomers from only their raw observational data.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Both sexes are similar in size and plumage, and plumage does \
not vary throughout the year.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It is ethically and medically the only proper decision in \
this case and I suspect your husband agrees with me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Activated oncogenes can cause those cells designated for \
apoptosis to survive and proliferate instead.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dadthere was no bomb.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The language spoken in England was also affected by this \
clash of cultures with the emergence of Anglo-Norse dialects.The Danelaw \
roughly comprised 14 shires:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One day.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When the luck goes against me why my dear my diamonds go to \
the pawnbrokers and I wear paste.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"I'm not up for running into anybody.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No one calls you that.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Max, I don't want to take any Siegfried Oath.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And I have to use it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You hated him--and I know why.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At lunch.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Later, he was transferred to a Nazi concentration camp.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The cello is used as a solo instrument, as well as in chamber \
music ensembles (e.g., string quartet), string orchestras, as a member of the \
string section of symphony orchestras, and some types of rock bands. \\nMusic \
for the cello is generally written in the bass clef, but both tenor clef and \
treble clef are used for higher-range parts, both in orchestral/chamber music \
parts and in solo cello works.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"However, hydrogen chloride, acetic acid, and most other \
Brnsted-Lowry acids cannot form a covalent bond with an electron pair and are \
therefore not Lewis acids.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"After the death in October 1936 of the Club's athletic \
director, John Heisman, the award was named in his honor and broadened to \
include players west of the Mississippi.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This mathematical formulation arises from the fact that, in \
physics, the scalar potential is irrotational, and thus has a vanishing \
Laplacian  the very definition of a harmonic function.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term automation, inspired by the earlier word automatic \
(coming from automaton), was not widely used before 1947, when Ford \
established an automation department.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The counterfeit means to imitate something.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This means that a wide aperture results in an image that is \
sharp for things at the correct distance.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hal switch to manual hibernation control.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Therefore be patient take no note of him 'Tis he.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When I was a boy I see movie at school called It's a \
Wonderful Life directed by Frank Capra.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Today, there are approximately 67 million ethnic Finns and \
their descendants worldwide, with majority of them living in their native \
Finland and the surrounding countries, namely Sweden, Russia and Norway.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Use it and no one will dare oppose you again.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Heterosexual relationships seem to lead only to \
marriage.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Someone they talk about in whispers.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The lied (, plural lieder ; German pronunciation: [lit], \
plural [lid], German for \\\"song\\\") is a setting of a German poem to \
classical music.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Examples of herds in this sense include shepherds (who tend \
to sheep), goatherds (who tend to goats), cowherds (who tend cattle), and \
others.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This guy Rory Breaker can afford to do the deal at the price \
we are selling.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Let's see what these two love birds say once they're sitting \
in separate cages.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The saturated sediment may appear quite solid until a sudden \
change in pressure or shock initiates liquefaction.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Uremia is the condition of having \\\"urea in the \
blood\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Songs may be remixed for a variety of reasons:\\n\\nto adapt \
or revise a song for radio or nightclub play\\nto create a stereo or surround \
sound version of a song where none was previously available\\nto improve the \
fidelity of an older song for which the original master has been lost or \
degraded\\nto alter a song to suit a specific music genre or radio \
format\\nto use some of the same materials, allowing the song to reach a \
different audience\\nto alter a song for artistic purposes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I sell them.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The radius of the circle with perimeter (circumference) C \
is\\n\\n  \\n    \\n      \\n        r\\n        =\\n        \\n          \\n \
           C\\n            \\n              2\\n              \\n            \
\\n          \\n        \\n        .\\n      \\n    \\n    {\\\\displaystyle \
r={\\\\frac {C}{2\\\\pi }}.}\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This conversation is making me a little sick.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Brother said it was worth it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Chocoholism is quite common.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The territory of Savoy was annexed to France in 1792 under \
the French First Republic, before being returned to the Kingdom of Sardinia \
in 1815.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Due to the spread of wireless devices in recent years \
headphones are increasingly used by people in public places such as \
sidewalks, grocery stores, and public transit.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I can give you my card, if your clients want to call \
me..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hootenanny is an Appalachian colloquialism that was used in \
early twentieth century America as a placeholder name to refer to things \
whose names were forgotten or unknown.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Going out right after the man's father-in-law shot himself.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Trust yourself.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It is often viewed as a contract.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The fetal stage of human development tends to be taken as \
beginning at the gestational age of eleven weeks, i.e. nine weeks after \
fertilization.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"urrealist works feature the element of surprise, unexpected \
juxtapositions and non sequitur; however, many Surrealist artists and writers \
regard their work as an expression of the philosophical movement first and \
foremost, with the works being an artifact.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The County of Valois, governed by the Count (later Duke) of \
Valois\\nCrpy-en-Valois, a town in the County\\n\\nHouse of Valois, French \
royal house descended from the Counts\\nValois, Pointe-Claire, a district in \
Pointe-Claire, Quebec\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Archbishop would like a word.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The creation of ASPD and DPD was driven by the fact that many \
of the classic traits of psychopathy were impossible to measure \
objectively.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And it's open from dusk till dawn.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The story revolves around a police detective investigating a \
photo of a female victim who is gagged and restrained to a tree, which is \
found inside a car involved in a fatal car crash.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Extractors is a video game developed by Millennium \
Interactive Ltd. and published by Psygnosis for the PC.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A man of honor dies but never apologizes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In finance, a loan is the lending of money by one or more \
individuals, organizations, and/or other entities to other individuals, \
organizations etc.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In studying adolescent development, adolescence can be \
defined biologically, as the physical transition marked by the onset of \
puberty and the termination of physical growth; cognitively, as changes in \
the ability to think abstractly and multi-dimensionally; or socially, as a \
period of preparation for adult roles.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sportswear company Nike, Inc., headquartered in Beaverton, is \
the state's largest public corporation with an annual revenue of $30.6 \
billion.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is the case for the EarthMoon system, where the \
barycenter is located on average 4,671 km (2,902 mi) from the Earth's center, \
well within the planet's radius of 6,378 km (3,963 mi).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Go wherever you want.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For example, consider the proposition \\\"all students are \
lazy\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nuke may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"What the hell is this Marvosa!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"nwards\\\", a song by the Afro Celt Sound System from the \
2001 album Volume 3: Further in Time\\nOnwards (album), 2006, by the \
Norwegian band Triosphere\\n\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Felicity may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For all these reasons, wet haze tends to be primarily a \
warm-season phenomenon.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is mainly a resident there also, but some gyrfalcons \
disperse more widely after the breeding season, or in winter.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These keyboards include:\\nelectric pianos such as the Fender \
Rhodes and Wurlitzer electric piano\\nelectronic pianos such as the Roland \
Digital Piano\\nHammond and other electric organs such as the Farfisa and Vox \
Continental\\nanalog synthesizers such as Moog, ARP, and units produced by a \
variety of other manufacturers such as Alesis.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The German hoch, seen in full in Hoch lebe der Kaiser, &c., \
the French vive, Italian and Spanish viva, evviva, are cries rather of \
acclamation than encouragement.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The word flagellum in Latin means whip.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Unless you figure on getting rich lifting wallets while old \
guys feel you up.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In a 1843 letter to Arnold Ruge, Karl Marx wrote:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sorry we got men's business to do.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The former denotation will be used for the rest of the \
article.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It can also be construed as a rarefeminine form of \
Linus.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A logical connective is similar to but not equivalent to a \
conditional operator.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm feelin' good bro!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You look so sad.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Wow are you in deep shit.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Generally, the term \\\"lie\\\" carries a negative \
connotation, and depending on the context a person who communicates a lie may \
be subject to social, legal, religious, or criminal sanctions.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's very comforting.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For example, positive readings in the first 8 serial twofold \
dilutions translate into a titer of 1:256 (i.e., 28).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Taste this.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"panic button.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It allows for the transfer of information (behaviours, \
customs, etc.) between individuals and down generations without the need for \
genetic inheritance.\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now if you'll excuse me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Which reminds me I need some new kicks.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The period when a culture is written about by others, but has \
not developed its own writing is often known as the protohistory of the \
culture.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And where he is.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Waxy (band), an American stoner rock band\\nWaxy (horse), a \
thoroughbred racehorse\\nWAXY (AM), a radio station (790 AM) licensed to \
serve South Miami, Florida, United States\\nWSFS (FM), a radio station (104.3 \
FM) licensed to serve Miramar, Florida, which held the call sign WAXY-FM from \
2012 to 2015\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Where are your children Of course.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Religious beliefs also play a role in personal decisions \
about sexual intercourse or other sexual activity, such as decisions about \
virginity, or legal and public policy matters.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A marquess (UK: ; French: marquis, [mki]) is a nobleman of \
hereditary rank in various European peerages and in those of some of their \
former colonies.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I need the action.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In medical terminology, an effusion refers to accumulation of \
fluid in an anatomic space, usually without loculation.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They often take advantage of the people around them.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The study of adolescent development often involves \
interdisciplinary collaborations.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"The Visigoths emerged from earlier Gothic groups (possibly \
the Thervingi) who had invaded the Roman Empire beginning in 376 and had \
defeated the Romans at the Battle of Adrianople in 378.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Aces Suits.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"What is there?\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Whispering behind your back...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He centralised the bureaucracy of the Republic and was \
eventually proclaimed \\\"dictator in perpetuity\\\", giving him additional \
authority.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The word aperture is also used in other contexts to indicate \
a system which blocks off light outside a certain region.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dunn.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In biology, a population is all the organisms of the same \
group or species, which live in a particular geographical area, and have the \
capability of interbreeding.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Relating to the uterus, prolapse condition results in an \
inferior extension of the organ into the vagina, caused by weakened pelvic \
muscles.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They're harder to do than they look.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Combined methods are believed to result in lower pregnancy \
rates than either method alone.Spermicides are unscented, clear, unflavored, \
non-staining, and lubricative.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Abbott and Costello's \\\"Who's on first?\\\" routine is a \
well known example of equivocation.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A subgroup of deodorants, antiperspirants, affect odor as \
well as prevent sweating by affecting sweat glands.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You're talking like Boris Karloff!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We never would've found him without you and nobody's ever \
going to forget that.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Moorland is generally related to high-ground heaths \
withespecially in Great Britaina cooler and more damp climate.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Such imperatives imply a second-person subject (you), but \
some other languages also have first- and third-person imperatives, with the \
meaning of \\\"let's (do something)\\\" or \\\"let him/her/them (do \
something)\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the latter case it is \\\"false imprisonment\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although the term perversion can refer to a variety of forms \
of deviation, it is most often used to describe sexual behaviors that are \
considered particularly abnormal, repulsive or obsessive.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Jonang is a smaller school, and the Rim movement is an \
eclectic movement involving the Sakya, Kagyu and Nyingma schools.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well you went to Sarah Lawrence for one thing.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ah ah.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A glitch, which is slight and often temporary, differs from a \
more serious software bug which is a genuine functionality-breaking \
problem.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now the emblem is right in the middle of the knot.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Vivian may I point out five more nights at three hundred a \
night is only 1500.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In 1616, the Neutral Nation was estimated to have 40 villages \
and 4,000 warriors.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the Commedia dell'arte it was an outline of entrances, \
exits, and action describing the plot of a play, and was literally pinned to \
the back of the scenery.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I want to know what happened here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At U.K. and Australian newspapers, the term is \
sub-editor.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I cannot let anyone pass.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One of Urban's aims was to guarantee pilgrims access to the \
Eastern Mediterranean holy sites that were under Muslim control but scholars \
disagree as to whether this was the primary motive for Urban or those who \
heeded his call.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Here have a piece of gum.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Today, the Appaloosa is one of the most popular breeds in the \
United States; it was named the official state horse of Idaho in 1975.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Sudden books are among the earliest and best-loved of the \
type.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Its use as an occupational title continued until the mid-19th \
century.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"After the 1913 Ottoman coup d'tat, which effectively put the \
country under the control of the Three Pashas, the Ottoman Empire decided to \
join the Central Powers during World War I. During the war, the Ottoman \
government committed genocides against its Armenian, Assyrian and Pontic \
Greek subjects.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's five thousand dollars.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Then c'mere.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An insectivore is a carnivorous plant or animal that eats \
insects.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah I don't know.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Let's talk about Mary.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A decision had to be made.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's going to be a tree I think.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I was thinking of selling all the cards.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As can be seen from these examples, the anaphoric locative \
adverbs generally have a close relationship with the demonstratives (in \
English, this and that).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's not true Doctor.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Conversely, positive skew indicates that the tail on the \
right side is longer or fatter than the left side.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I miss things.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Look for a strong woman not too occupied with her \
beauty.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"GO!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the same way as the logarithm reverses exponentiation, the \
complex logarithm is the inverse function of the exponential function applied \
to complex numbers.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm sick of this shit man I'm sick of this shit!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This distinguishes it from inoculation, which uses unweakened \
live pathogens, although in common usage either can refer to an immunization.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm just weak Sister; I'm so weak.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Take a vacation.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Mineral spirits, also historically known as \\\"naptha\\\", \
are not the same chemical.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm collecting Eduard's things.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It originally meant the Christian message itself, but in the \
2nd century it came to be used for the books in which the message was set \
out.The four gospels of the New Testament  Matthew, Mark, Luke and John  are \
the main source of information on the life of Jesus.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Transgressing social codes, Gaultier frequently introduces \
the skirt into his men's wear collections as a means of injecting novelty \
into male attire, most famously the sarong seen on David Beckham.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They contain significantly greater quantities of the hormones \
prolactin, adrenocorticotropic hormone, and Leu-enkephalin, and the elements \
potassium and manganese.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's Webber.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm right this time.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Um Dr. Evil Prince Charles did have an affair.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Evan stop!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This isn't the time -- Seven guys.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I got enough problems just hangin' on.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But my name is Adam.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We'll do this again!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He saw what it was.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dilator or dilatator is a medical term with a number of uses, \
including:\\n\\nA surgical instrument or medical implement used to induce \
dilation, that is, to expand an opening or passage such as the cervix (see \
cervical dilator), urethra, esophagus, or vaginal introitus.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There will be no more fighting here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term \\\"creamery\\\" is sometimes used in retail trade \
as a place to buy milk products such as yogurt and ice cream.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Symptoms of high blood sugar include frequent urination, \
increased thirst, and increased hunger.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is a six-shooter.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Enlargement of the European Union is the political process \
for integrating countries into the European Union.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Interproximal reduction (IPR) (also called interproximal \
enamel reduction, slenderizing, air rotor stripping (ARS) or reproximation) \
is the practice of mechanically removing enamel from between the teeth to \
achieve orthodontic ends, such as to correct crowding, or reshape the contact \
area between neighboring teeth.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A duct may refer to:\\nDuct (anatomy), various ducts in \
anatomy and physiology\\nTear duct, which carry tears to the eyes\\n\\nDuct \
(HVAC), for transfer of air between spaces in a structure\\nDuct tape, a kind \
of adhesive tape\\nDucted fan, motor for aircraft\\nElectrical bus duct, a \
metal enclosure for busbars\\nDuct (industrial exhaust), industrial exhaust \
duct system designed for low pressure-pneumatic convey of gas, fumes, dusts, \
shavings, and other pollutants from works space to atmosphere after cleaning \
and removal of contaminants\\nAtmospheric duct, a horizontal layer in the \
lower atmosphere in which the vertical refractive index gradients are such \
that radio signals (a) are guided or ducted, (b) tend to follow the curvature \
of the Earth, and (c) experience less attenuation in the ducts than they \
would if the ducts were not present\\nTropospheric ducting, a type of radio \
propagation in the troposphere that allows signals to travel unusually long \
distances\\nEarthionosphere waveguide, a type of atmospheric duct\\n\\nDuct \
bank, a set of electrical conduits or telecommunications conduits, entering a \
building underground\\nDuct Publishing, an imprint of the German group VDM \
Publishing devoted to the reproduction of Wikipedia content\\nDispatchable \
Unit Control Table (DUCT) in z/Architecture\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"geography), for photography in general, for signalling by \
heliograph (a device less commonly called a heliotrope or helio-telegraph), \
and for photography of the sun.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It is obtained chiefly from the mineral cassiterite, which \
contains stannic oxide, SnO2.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"They are weaker, but they are much lighter, easier to form, \
and insulate far better than dense bricks.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Contact fungicides are not taken up into the plant tissue and \
protect only the plant where the spray is deposited.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The offense is intended to prohibit and therefore deter \
reckless or wanton conduct that wrongfully creates a substantial risk of \
death or serious injury to others.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One state reaction to protests is the use of riot \
police.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sir we stay with the President.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In other words all I really know about the outside universe \
relayed to me through my electrical connections.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Damned if I know.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"For some people, motorcycling may be the only affordable form \
of individual motorized transportation, and small-displacement motorcycles \
are the most common motor vehicle in the most populous countries, including \
India, China and Indonesia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Take your hands off me!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Someone should just go kill those motherfuckers.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Therefore, \\n  \\n    \\n      \\n        E\\n      \\n    \
\\n    {\\\\displaystyle E}\\n   is a subset of \\n  \\n    \\n      \\n      \
  \\n          \\n            P\\n          \\n        \\n        (\\n        \
X\\n        )\\n        \\n        {\\n        \\n        }\\n      \\n    \
\\n    {\\\\displaystyle {\\\\mathcal {P}}(X)\\\\setminus \\\\{\\\\emptyset \
\\\\}}\\n  , where \\n  \\n    \\n      \\n        \\n          \\n           \
 P\\n          \\n        \\n        (\\n        X\\n        )\\n      \\n    \
\\n    {\\\\displaystyle {\\\\mathcal {P}}(X)}\\n   is the power set of \\n  \
\\n    \\n      \\n        X\\n      \\n    \\n    {\\\\displaystyle X}\\n  .\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the Internet age, telegraphic means developed greatly in \
sophistication and ease of use, with natural language interfaces that hide \
the underlying code, allowing such technologies as electronic mail and \
instant messaging.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Lobby may refer to:\\nLobby (room), an entranceway or foyer \
in a building\\nLobbying, the action or the group used to influence a \
viewpoint to politicians\\n\\nLobbying in the United States, specific to the \
United States\\n\\nLobby (food), a thick stew made in Leigh, Greater \
Manchester and North Staffordshire, not unlike Lancashire Hotpot\\nLobby \
(band), a Slovak Eurodance band\\nThe Lobby, (UK) parliamentary journalists \
receiving privileged political access in exchange for sourcing \
anonymity\\nLobby Hero, a play by Kenneth Lonergan\\nHotel Lobby, an oil \
painting on canvas by American realist painter Edward Hopper\\nThe Lobby \
(improv), an improvisational comedy group based in Southern California\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We're running out of time sir.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A coulis ( koo-LEE; French) is a form of thick sauce made \
from pured and strained vegetables or fruits.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I was just a kid..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For terrestrial animals, grazing is normally distinguished \
from browsing in that grazing is eating grass or forbs, and browsing is \
eating woody twigs and leaves from trees and shrubs.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Together with the genus Hydrocera, Impatiens make up the \
family Balsaminaceae.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Enlargement of the African Union\\nEnlargement of the Arab \
League\\nEnlargement of the United Nations\\nEnlargement of \
NATO\\nEnlargement of Switzerland\\nEnlargement of the European Space \
Agency\\n\\nin other contexts:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The mechanism by which life began on Earth is unknown, though \
many hypotheses have been formulated and are often based on the MillerUrey \
experiment.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Danger may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I myself witnessed some form of mass neurosis in East \
Proctor.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some colloids are translucent because of the Tyndall effect, \
which is the scattering of light by particles in the colloid.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The games feature a mix of the action, real-time strategy and \
platform game genres.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In 1940, with a population of just over 110,000 people, \
Nevada was by far the least-populated state, with less than half the \
population of the next least-populated state.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is the administrative centre of the Zaporizhia Oblast \
(region).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Horticulture is the science and art of growing plants \
(fruits, vegetables, flowers, and any other cultivar).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You know Bob Anthony did kill someone.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The pelvic region of the trunk includes the bony pelvis, the \
pelvic cavity (the space enclosed by the bony pelvis), the pelvic floor, \
below the pelvic cavity, and the perineum, below the pelvic floor.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A hedge or hedgerow is a line of closely spaced shrubs and \
sometimes trees, planted and trained to form a barrier or to mark the \
boundary of an area, such as between neighbouring properties.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The magazine went defunct in January 2013.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The man that killed him -- also prob'ly Jane McKenna also \
Arlyn Page.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"since she was conceived in that cabin up in Big Bear.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Potter explained that underdogs are appealing to Americans \
not because they simply beat the odds, but overcome an injustice that \
explains those odds - such as the game being unfairly rigged due to privilege \
and power.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Graf Spee..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"In popular culture, the fantasy genre is predominantly of the \
medievalist form.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A pastoral lifestyle (see pastoralism) is that of shepherds \
herding livestock around open areas of land according to seasons and the \
changing availability of water and pasture.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In modern times, it is mainly a competitive sport and \
recreational activity.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Circus folk.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fear ... ...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For example, the key of B major, with 5 sharps, is \
enharmonically equivalent to the key of C major with 7 flats, and 5 (sharps) \
+ 7 (flats) = 12.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The town isn't much.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"pot curare (originally packed in terra cotta pots; main \
alkaloid components are protocurarine, protocurine, and protocuridine).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is a spring month of 30 days.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is the highest peak near the equator.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The median age is approximately 30 years and life expectancy \
at birth is 76 years.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I can always use a hard-charger on my team.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Threesome can also refer to a love triangle, a three-way \
romantic relationship.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Virology is the study of viruses  submicroscopic, parasitic \
particles of genetic material contained in a protein coat  and virus-like \
agents.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Located in the northwest of the country, the province has the \
capital of San Miguel de Tucumn, often shortened to Tucumn.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For instance it is a facet of neuroticism in the NEO PI, and \
form part of personal construct psychology, developed by George Kelly.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Anyway.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Antevorta, a goddess in Roman mythology\\nGamma Virginis, a \
star in the Virgo constellation\\nSchinia, a genus of insects known as Flower \
Moths\\nA One-off Subgroup of AKB48 which had one single, Produced by Former \
Casiopea Keyboardist Minoru Mukaiya.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"To hang on to what we got -- and like it!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hawker or Hawkers may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A user of sycophancy is referred to as a sycophant or, more \
commonly, a \\\"yes-man\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Their open structure allows tides and currents to flow \
relatively unhindered, whereas the more solid foundations of a quay or the \
closely spaced piles of a wharf can act as a breakwater, and are consequently \
more liable to silting.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Final voiceless stops and, therefore, the checked \\\"tones\\\
\", have disappeared from most Mandarin dialects (spoken in northern and \
southwestern China), but remain preserved in southeastern branches of Chinese \
such as Yue, Min, and Hakka.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No I don't got it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"To procrastinate can hinder productivity.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Look you're a player...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Long engagements were once common in formal arranged \
marriages, and it was not uncommon for parents betrothing children to arrange \
marriages many years before the engaged couple were old enough.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The word \\\"Connecticut\\\" is derived from various \
anglicized spellings of an Algonquian word for \\\"long tidal \
river\\\".Connecticut's first settlers were Dutchmen who established a small, \
short-lived settlement called Fort Hoop in Hartford at the confluence of the \
Park and Connecticut Rivers.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"so far.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In water at room temperature supersonic speed can be \
considered as any speed greater than 1,440 m/s (4,724 ft/s).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You will never ever go back to the workhouse..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Most plants, most algae, and cyanobacteria perform \
photosynthesis; such organisms are called photoautotrophs.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Longhorns gonna kick some serious butt this Saturday you \
just watch.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Historically, goldsmiths also have made silverware, platters, \
goblets, decorative and serviceable utensils, ceremonial or religious items, \
and rarely using Kintsugi, but the rising prices of precious metals have \
curtailed the making of such items to a large degree.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I was growing fond of Mrs. Peel.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Cause if being savvy meant being like him --  Guess that's \
why I'm kind of clueless even now.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term egghead reached its peak currency during the 1950s, \
when vice-presidential candidate Richard Nixon used it against Democratic \
Presidential nominee Adlai Stevenson.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Cover my ass.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I was in the middle of an experiment.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Debate is a process that involves formal discussion on a \
particular topic.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Raw lentils, for example, contain lectins, anti-nutritional \
proteins which can be reduced by sprouting or cooking.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I think we should go.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He's in the hospital.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"After the German-Soviet invasion of Poland in 1939, Lviv \
became part of the Soviet Union, and in 194446 there was a population \
exchange between Poland and Soviet Ukraine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Since the release of the first novel, The Maze of Bones, on \
September 9, 2008, the books have gained popularity, positive reception, and \
commercial success.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he nation has been described by Benedict Anderson as an \
\\\"imagined community\\\" and by Paul James as an \\\"abstract \
community\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Informally, it is the similarity between observations as a \
function of the time lag between them.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The two main tells, or mound-ruins, within the walls are \
Kouyunjik (Kuyuncuk), the Northern Palace, and Tell Nab Ynus.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although captive-breeding programs have had only limited \
success and the platypus is vulnerable to the effects of pollution, it is not \
under any immediate threat.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"But all men like me Lois.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It went wrong.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"No Cole I...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"MIKE T.J.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Asperity Mountain, a mountain in British Columbia, \
Canada\\nMV Asperity, a British coaster in service 1945-67\\nAsperity \
(materials science), the unevenness of a surface, in physics and in \
seismology\\nAsperity (Geotechnical engineering)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dessert () is a confectionery course that concludes a main \
meal.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Scotty help me pick Richie up and lay him down.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, many lemur species are threatened with extinction \
due to habitat loss and hunting.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Something that seems to cost a great deal is \
\\\"expensive\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"ll three branches of Brazil's federal government are centered \
in the city: executive, legislative, and judicial.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Wind up someone's luggage that way.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"ifted\\\", a song by Suicide Silence that appears on their \
2009 album No Time to Bleed\\n\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's a game son.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It is therefore helpful to an organism with needs, \
objectives, and desires as it makes plans or otherwise attempts to accomplish \
those goals.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The material that is being washed, or has been laundered, is \
also generally referred to as laundry.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The lines or networks operated by tramcars are called \
tramways.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Three subspecies are usually recognized; one of the former \
subspecies, cristatus, has recently been given full species status and is \
referred to as the eastern osprey.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Google Docs, Sheets, and Slides\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is typically applied to repeating signals, such as \
sinusoidal waves.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The standard atmosphere (symbol: atm) is a unit of pressure \
defined as 101325 Pa (1.01325 bar).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It may also refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ptolemy, 350 years later, said it was as bright as Antares.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A camping mat is an example of a closed-cell foam: gas \
pockets are sealed from each other so the mat cannot soak up water.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In general, they have lower population densities than inner \
city neighborhoods within a metropolitan area, and most residents commute to \
central cities or other business districts; however, there are many \
exceptions, including industrial suburbs, planned communities, and satellite \
cities.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Thank you Rose.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Paleontologist John Scannella observed:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An early transference in meaning was to hospitality or \
entertainment, and hence to food and drink, good cheer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Elaine!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They generally have dull plumage, with cryptic brown, grey, \
or streaked patterns, although some display brighter colours during the \
breeding season.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are also substantial Protestant and Lutheran minorities \
(especially amongst the West Slavs) such as the historical Bohemian (Czech)\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When the king returns he will bury them in those new clothes.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Under the banner of a creamery one might find a store also \
stocking pies and cakes or even a coffeehouse with confectionery.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Forgive me!!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The property targeted varies depending on the riot and the \
inclinations of those involved.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Wrong answer fuckbag.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Vicente may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A \\\"military citizenship\\\" arose in which all citizens \
were involved with the military in some manner during the war.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The first step in the management of a person with anxiety \
symptoms is to evaluate the possible presence of an underlying medical cause, \
whose recognition is essential in order to decide its correct treatment.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They work as gardeners, growers, therapists, designers, and \
technical advisors in the food and non-food sectors of horticulture.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"To let people begin again.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Such actions are used as leverage, to force the victim to act \
in a way contrary to their own interests.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sure Witt!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But I ain't doing no more buck dancing.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Cossack service was considered the most rigorous one.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We've asked ourselves that - over and over - a thousand \
times.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Frankfurt's DE-CIX is the world's largest internet exchange \
point.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In modern use, a ploughed field is typically left to dry out, \
and is then harrowed before planting.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just take a bite you'll like it fine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The name also suggests a first impression, or something that \
precedes actual flirting.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Couple hours from Idaho.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are three main types of diabetes mellitus:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Freezers.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are 37 bridges within Paris and dozens more spanning \
the river outside the city.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"A dye is a colored substance that has an affinity to the \
substrate to which it is being applied.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The poems are in Homeric Greek, also known as Epic Greek, a \
literary language which shows a mixture of features of the Ionic and Aeolic \
dialects from different centuries; the predominant influence is Eastern \
Ionic.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Other industries include chemicals, metal goods and fodder.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is similar to the Ancient Greek letter alpha, from which \
it derives.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Your eyesight will return in time.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Please come in.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"here is a popular myth that deodorant use is linked to breast \
cancer, but so far no such casual link has been substantiated in \
research.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There is a broad grey area between the two divisions.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Form is the shape, visual appearance, or configuration of an \
object.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The thin..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Examples of punishment by death for apostates can be seen \
under the Sharia law found in certain Islamic countries.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Zoroastrian) sources relating to Mithra.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A terrier is a dog of any one of many breeds or landraces of \
the terrier type, which are typically small, wiry and fearless.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This temperature behaviour is exploited for extrusion (as in \
Styrofoam) and also for molding and vacuum forming, since it can be cast into \
molds with fine detail.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"While sedges may be found growing in almost all environments, \
many are associated with wetlands, or with poor soils.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The area has been ruled by numerous empires and dynasties, \
including the Persian Achaemenid Empire, Alexander III of Macedon, the Indian \
Mauryan Empire, the Arab Umayyad Caliphate, the Gupta Empire, the Delhi \
Sultanate, the Mongol Empire, the Mughal Empire, the Afghan Durrani Empire, \
the Sikh Empire (partially), and, most recently, the British Empire.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"How could I know.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"They can put him where they will; he won't be bothered I \
won't be bothered and everyone's conscience can remain free and untroubled.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A journal.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In Armenian, Italian, Modern Greek, Serbian, Bulgarian, \
Russian, Romanian, and a few other modern languages, there is a pejorative \
connotation associated with the word corresponding to the word Jew; because \
of that, in each of these languages, the primary word used is that which \
corresponds to \\\"Hebrew\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A college may be a degree-awarding tertiary educational \
institution, a part of a collegiate or federal university, or an institution \
offering vocational education.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Annette, just use your hand.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This was nothing like Warsaw.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In such a relation good conscience requires the fiduciary to \
act at all times for the sole benefit and interest of the one who \
trusts.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In book V of the Politics, the Ancient Greek philosopher \
Aristotle (384322 BC) described two types of political revolution:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As for that policeman I didn't bite him I don't think I bit \
him.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Syringes are frequently used in clinical medicine to \
administer injections, infuse intravenous therapy into the bloodstream, apply \
compounds such as glue or lubricant, and draw/measure liquids.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There is nowhere else to keep it and it's the last place they \
are going to look.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Don't take any guff from these swine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The transmission is through speech or song and may include \
folktales, ballads, chants, prose or verses.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is too rash too unadvised too sudden; Too like the \
lightning which doth cease to be Ere one can say 'It lightens.' Sweet good \
night!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Broad distinctions are useful to avoid ambiguity, and \
disambiguation will be of varying importance depending on the nuance of the \
equivalent word in other languages.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This has led to widespread problems, so much as to prompt the \
World Health Organization to classify antimicrobial resistance as a \
\\\"serious threat [that] is no longer a prediction for the future, it is \
happening right now in every region of the world and has the potential to \
affect anyone, of any age, in any country\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"All members of the large and ancient marine clade \
Patellogastropoda are limpets, and within that clade the family Patellidae in \
particular are often called the \\\"true limpets\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the 1860s, some round shots were equipped with winglets to \
benefit from the rifling of cannons.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I said I'd move if a cripple came.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You're not getting any navy contracts.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the United States, a sophomore ( or ) is a student in the \
second year of study at high school or college.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, there are subtle differences in these terms in \
specialized usage.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Okay go to work..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"The album, which debuted at No. 59 on the Billboard 200, was \
certified gold with over 500,000 sales in the US.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Why - er -- my husband passed away..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Grant as you do everything else with treachery.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Today most mews stables have been converted into dwellings.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Inorganic compounds such as metals also undergo halogenation.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Glosses were originally notes made in the margin or between \
the lines of a text in a classical language; the meaning of a word or passage \
is explained by the gloss.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A spear is a pole weapon consisting of a shaft, usually of \
wood, with a pointed head.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's terrifying.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"is...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Plasticity may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Maybe when he gets tired of toying with Senator Martin, he'll \
talk to you again.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mubarak stepped down after 18 days of demonstrations during \
the Egyptian Revolution of 2011.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Subtext can also be used to imply controversial subjects \
without specifically alienating people from the fiction, often through use of \
metaphor.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Harvesting corn.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I begged him.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It comprised three departments: Corrze, Creuse, and \
Haute-Vienne.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Utilization of venom across a large number of species \
demonstrates an example of convergent evolution and a homoplastic trait.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Biologists are especially interested in Hydra because of \
their regenerative ability  they do not appear to die of old age, or indeed \
to age at all.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Traditionally, in the case of a formal engagement, it has \
been perceived that it is the role of a male to actively \\\"court\\\" or \
\\\"woo\\\" a female, thus encouraging her to understand him and her \
receptiveness to a proposal of marriage.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Weller may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hello Father Donigan!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It was named after the Lusitani or Lusitanian people (an \
Indo-European people).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In more serious situations where there is risk to self or \
others involuntary hospitalization may be necessary, although hospital stays \
are now shorter and less frequent than they once were.About 0.30.7% of people \
are affected by schizophrenia during their lifetimes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are also many styles of endpapers that are engineered \
to meet textbook standards and library binding standards as well as endsheets \
for conservation and book repair.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"It is noted for its tea industry, its views of the \
Kangchenjunga, the world's third-highest mountain, and the Darjeeling \
Himalayan Railway, a UNESCO World Heritage Site.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In its most basic form, it simply means a social visit.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Miler may refer to:\\nGiven name:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That was your dinner!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sue I've lived my life unafraid of taking big steps.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mealybugs are insects in the family Pseudococcidae, unarmored \
scale insects found in moist, warm climates.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You...you shouldn't have come.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As a thermoplastic polymer, polystyrene is in a solid \
(glassy) state at room temperature but flows if heated above about 100 C, its \
glass transition temperature.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"London.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nowadays, they are generally only used on rail maintenance or \
hazardous materials trains, or on heritage and tourist railroads.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We are.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Individual mineral grains from a rock sample may also be \
analyzed by X-ray diffraction when optical means are insufficient.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"On national television.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is analogous to the relationship between the rational \
numbers and the integers.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She isn't anybody's friend and I don't like you living with \
her.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Examples includes an acute exacerbation of chronic \
obstructive pulmonary disease and acute exacerbation of congestive heart \
failure.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hi Lenny.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In this context, a \\\"subversive\\\" is sometimes called a \
\\\"traitor\\\" with respect to (and usually by) the government in \
power.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Heifetz, American leadership teacher\\nYuri Heifetz, Russian \
poet and singer-songwriter\\nGrigory Kheifets, Soviet KGB agent\\nIosif \
Kheifits, Soviet film director\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It is priced between $6 USD for lower end models, and $20 USD \
for higher end models, such as special editions.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Great ass.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah its really different here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Weather Underground, American political movement commonly \
called \\\"the Weathermen\\\", 19691977\\nThe Weathermen (band), a \
semi-satirical Belgian electronic and pop group\\nThe Weathermen (hip hop \
group), an American collective\\nCombat Weathermen, U.S. Air Force tactical \
observer/forecasters with ground combat capabilities\\nJonathan King, an \
English singer-songwriter who used the pseudonym \\\"Weathermen\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In its oldest forms, cakes were modifications of breads, but \
cakes now cover a wide range of preparations that can be simple or elaborate, \
and that share features with other desserts such as pastries, meringues, \
custards, and pies.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sexual partners from the last 2 months should also be \
treated.Gonorrhea affects about 0.8% of women and 0.6% of men.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Further, the violin has come to be played in many non-Western \
music cultures, including Indian music and Iranian music.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The first fascist movements emerged in Italy during World War \
I before it spread to other European countries.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A scouring pad or scourer is a small pad of metal or plastic \
mesh used for scouring a surface.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Types of structure include a hierarchy (a cascade of \
one-to-many relationships), a network featuring many-to-many links, or a \
lattice featuring connections between components that are neighbors in space.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The historical relations between these sects and the beliefs \
about reincarnation that were characteristic of Neoplatonism, Orphism, \
Hermeticism, Manicheanism, and Gnosticism of the Roman era as well as the \
Indian religions have been the subject of recent scholarly research.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Administratively, Lviv serves as the administrative center of \
Lviv Oblast and has the status of city of oblast significance.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In an effort to reduce local loop costs, it was decided to \
push this conversion closer to the customer premises by deploying small \
conversion devices in customer neighborhoods.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Newts metamorphose through three distinct developmental life \
stages: aquatic larva, terrestrial juvenile (eft), and adult.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Past speakers have read through laws from different states, \
recited speeches, and even read from cookbooks and phone books.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In your car That'll be fun He's making plans for \
Brighton.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There's no island on these co- ordinates - not even a lousy \
fog-bank.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The vice-president and treasurer is Gordon LaRiviere.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tell them it's a code dragonfly.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"SLAVES ARE MADE IN SUCH WAYS!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They blamed my family for everything.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A million-five!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The biblical text in Jubilees  implicitly etymologizes the \
name as derived from the root YRD \\\"descend\\\", because in his days \
\\\"the angels of the Lord descended to earth\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The goal of species reintroduction is to establish a healthy, \
genetically diverse, self-sustaining population to an area where it has been \
extirpated, or to augment an existing population.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Participants then have the opportunity to evaluate their \
behavior, reflect on how the past incident is getting played out in the \
present and more deeply understand particular situations in their lives.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You sure talk like a girl who's been married.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The \\\"-ade\\\" suffix may also be applied to other similar \
drinks made with different fruits, such as limeade, orangeade, or \
cherryade.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The following is an episode list for the MTV animated \
television series Beavis and Butt-Head.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the United Kingdom, car salvage yards are known as car \
breakers, while motorcycle salvage yards are known as bike breakers.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But I have some friends waiting.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Then I met you.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It's not exactly brain surgery.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I gave you 48 hours to come up with something and the clock's \
runnin' ...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sector four is secured we put out the last three German \
one-fifty-fives found them about two miles in from Ponte du Hoc.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although their range covers a small percentage of Africa, \
gorillas cover a wide range of elevations.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I will not accept this!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If he's RH positive I'll have to terminate.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just pool.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The status of slave (rll, ow ) contrasts with that of the \
freeman (karl, ceorl) and the nobleman (jarl, eorl).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The official language is Turkish, which is the most widely \
spoken Turkic language in the world.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It had to be someone who knows numbers.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just tryin' to be professional but no..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You must face and destroy Vader!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But a man like Lionel Dolby..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Immediately-invoked function expression, Javascript design \
pattern.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Among theories of sense of community proposed by \
psychologists, McMillan & Chavis's (1986) is by far the most influential, and \
is the starting point for most of the recent research in the field.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Will consume magnesium.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I brought my friends in to help me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Gino may refer to:\\nGino (given name), a list of people and \
one fictional character\\nGino (surname)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The first documented use of the term chicken pox was in 1658.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A number of adverse health effects may results from bed bug \
bites, including skin rashes, psychological effects, and allergic symptoms.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the early 19th century, Georges Cuvier united Ctenophora \
and Cnidaria in the Radiata (Zoophytes).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Apostate is a term used by members of a religion or \
denomination to refer to someone who has left that religion or \
denomination.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We're not in the showroom Dear.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Moldavians, or Moldovans, are the largest population group of \
the Republic of Moldova.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And the Argies.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Trask wants to talk with you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When located in bars, dark rooms are also known as backrooms \
or blackrooms.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Self-employment is the state of working for oneself rather \
than an employer.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pogson, and Lieutenant John Herschel, and was subsequently \
confirmed by French astronomer Jules Janssen.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Reduction is the gain of electrons or a decrease in oxidation \
state by a molecule, atom, or ion.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A small business may still have the power to raise prices in \
a small industry (or market).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"He tells me you're very beautiful.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We can stop.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Round up all suspected Vee Cees and shake it up!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In mammals, the bony pelvis has a gap in the middle, \
significantly larger in females than in males.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, when it was founded, the French Foreign Legion was \
not unique; other foreign formations existed at the time in France.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's not No. you didn't!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She seemed to recognize me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mercia is still used as a geographic designation, and the \
name is used by wide range of organisations, including military units, \
public, commercial and voluntary bodies.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"According to Gerhard Doerfer, the word originates from the \
old Turkish \\\"kap ton\\\", meaning \\\"covering garment\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"By Grabthar's Hammer Dr. Lazarus I- Well good that's \
very...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You don't have to make a pose of it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The German equivalent Brustwehr has the same meaning.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"AOL also used a GUI-based client, and while such systems \
existed for CIS, it only supported a subset of the system's functionality and \
was purchased separately.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"-- I'll beat you both apart.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, traces of biofilms have been preserved and fossil \
tadpoles have been found dating back to the Miocene.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Since \\\"-lina\\\" is a diminutive suffix, it has no meaning \
of its own in Swedish.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Conestoga Mall (Waterloo, Ontario), a shopping centre in \
Waterloo, Ontario\\nConestoga Parkway, a freeway in Waterloo Region, Ontario, \
Canada\\nConestoga River, a tributary of the Susquehanna River in the state \
of Pennsylvania\\nConestogo River, a river near Waterloo, \
Ontario\\nVehicles\\n\\nConestoga wagon, a covered horse-drawn wagon\\nUSS \
Conestoga, any of the three United States Navy ships named after the wagon\\n\
\\nConestoga (rocket), the world's first privately funded commercial rocket, \
produced from Minuteman I stages\\nConestoga (ship), a wrecked steamship in \
the Thousand Islands which is a popular Scuba diving site\\nC-93 Conestoga, a \
cargo aircraft\\nAL-60C-5 Conestoga, a variant of the Aermacchi AL.60 utility \
aircraft\\nSchools\\n\\nConestoga High School, a public high school in \
Devon-Berwyn, Pennsylvania\\nConestoga College, based in Kitchener, Ontario \
in Canada\\nConestoga Middle School, a public 6-8 school in the Beaverton \
School District\\nIn fiction\\n\\nIn Star Trek, the USS Conestoga is a \
starship used in the failed first attempt at deep space colonization\\nIn the \
sequel Aliens (1986), the ship class of the spaceship USS Sulaco\\nIn the \
video game Outpost 2, the name of a starship presented in the \
game\\nOther\\nConestoga (convention), an annual literary science fiction \
convention held in Tulsa, Oklahoma\\nConestoga Church of the Brethren, a \
congregation related to Conrad Beissel at the Ephrata Cloister\\nConestoga \
Cigar, also known as a \\\"stogie\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just go across the street and watch.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"some money..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"nsung\\\", by Pink Floyd from The Endless River\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sousa, the genus making up the humpback dolphins\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The door Jack.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"To give it a meaning, it usually must be compared to another \
infinitesimal object in the same context (as in a derivative).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Omnivorous animals, such as bears, use their fangs when \
hunting fish or other prey, but they are not needed for consuming fruit.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"About fuckin' time if you ask me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've got a skin condition.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Which leads us to..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The title comes from a catchphrase used in Cosby's television \
series, I Spy.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ancient and modern \\\"Caucasoid\\\" populations were thus \
held to have ranged in complexion from white to dark brown.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As a result, there have been attempts in 2014 to ban the \
Socialist Worker Student Society at the University of Edinburgh, University \
of Sussex and Goldsmiths, University of London.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Street beggars may be found in public places such as \
transport routes, urban parks, and near busy markets.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Type-1:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You bastard!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Indeed, although an accomplished poet in Norman French, \
Gerald was instrumental in the move by the Fitzmaurices and Fitzgerald's of \
Desmond toward greater use of the Irish language.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Before he entered politics, Mubarak was a career officer in \
the Egyptian Air Force.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Still you serve him loyally -- though people hurl rotten eggs \
at his royal emblem.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I thought thank God someone normal who doesn't know how \
interact at these things either.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"For many years Kodachrome was widely used for professional \
color photography, especially for images intended for publication in print \
media.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Min Bialystock.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"settlers once referred to these spotted horses as the \
\\\"Palouse horse\\\", possibly after the Palouse River, which ran through \
the heart of Nez Perce country.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It comprises the three basic emotions of disgust, sadness and \
surprisethe perception of injustice.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Do not accept anything he attempts to hold out to you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In open-cell foam, gas pockets connect to each other.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Enough!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It can be defined as an excess of amino acid and protein \
metabolism end products, such as urea and creatinine, in the blood that would \
be normally excreted in the urine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They have a worldwide distribution except for Australia and \
the polar regions.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Me an' my wife are goin' home 'cause we miss our children an' \
can't go no more time without seein' them.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Michelin Guide has awarded Tokyo by far the most Michelin \
stars of any city in the world.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I hope it's nothing serious.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Synoptic is derived from the Greek words  (syn, \
\\\"together\\\") and  (opsis, \\\"view\\\"), and describes observations that \
give a broad view of a subject at a particular time.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"All you have to do is...beg.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Adult newts have lizard-like bodies and return to the water \
every year to breed, otherwise living in humid, cover-rich land \
habitats.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Don't give me that shit!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When you're married you can do a lot of things \
deliberately.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's wonderful.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"ARK-ih-PEL--goh), sometimes called an island group or island \
chain, is a chain, cluster or collection of islands, or sometimes a sea \
containing a small number of scattered islands.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Middle age is the period of age beyond young adulthood but \
before the onset of old age.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Say this paper represents space-time and you want to get from \
point A here...  ...to point B here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It has a secondary listing on Euronext.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"All we have to do is straighten out Jesse. ...Or get rid of \
the money.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Metacognitive therapy seeks to rid anxiety through reducing \
worry, which is seen as a consequence of metacognitive beliefs.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just leave her alone.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tune in tomorrow for another adventure.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yes it's...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Painting is a mode of creative expression, and can be done in \
numerous forms.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You're kneeling on my hand.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In some jurisdictions, specific types of criminal cases may \
also be commenced by the filing of a complaint, also sometimes called a \
criminal complaint or felony complaint.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The popularity of this military headdress in its hussar form \
reached a height in the years immediately before World War I (19141918).\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The new name first appears when the Romans and their allies \
were losing control of the Rhine region.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Subcultures differ from countercultures.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Call  may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Brady (18151869), New York City lawyer and politician\\nJim \
Brady (baseball) (born 1936), American economist, educator, and baseball \
player and coach\\nJim Brady (boxer), Scottish boxer of the 1930s and \
1940s\\nJoan Brady, writer, the first woman  and the only American  to win \
the Whitbread Book of the Year Award for the Theory of War, lives in Oxford, \
England\\nJoan Brady, American writer of Christian novels\\nJohn Green Brady \
(18471918), American politician, Governor of the District of Alaska \
(18971906)\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's like a public service.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They hardly even noticed you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mommy is never gonna let you go.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I wouldn't have uh killed you Father.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Exchanging rumors..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Heathers is a 1988 American black comedy film written by \
Daniel Waters and directed by Michael Lehmann.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The EPA and state agencies use the Hazard Ranking System \
(HRS) to calculate a site score (ranging from 0 to 100) based on the actual \
or potential release of hazardous substances from a site.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"March man in Tennessee sniff the pines... sniff that \
crossmounted pussy walkin' down by the river.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This list contains people who contributed to the field of \
lexicography, the theory and practice of compiling dictionaries.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Only the valedictorian is ranked higher.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We could run out of space real fast.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The other considers the Homeric poems to be the result of a \
process of working and re-working by many contributors, and that \
\\\"Homer\\\" is best seen as a label for an entire tradition.It is generally \
accepted that the poems were composed at some point around the late 8th or \
early 7th century BC.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I pity us Dad.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"These episodes can result in physical injuries, including \
occasionally broken bones.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Its origins are usually traced to 1738, with various \
theological streams contributing to its foundation, including English \
Methodism, the Moravian Church (in particular its bishop Nicolaus Zinzendorf \
and his community at Herrnhut), and German Lutheran Pietism.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sorry occupational humor.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A post office box.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You'll come up with something.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Folks can dance when they want.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You can believe that if you want to.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well I was right.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Men, on average, tend to be attracted to women who have a \
youthful appearance and exhibit features such as a symmetrical face, full \
breasts, full lips, and a low waist-hip ratio.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah well he just turned up in New Jersey at the military \
command post.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Be here all afternoon.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"His work, which fuses elements of realism and the fantastic, \
typically features isolated protagonists faced by bizarre or surrealistic \
predicaments and incomprehensible social-bureaucratic powers, and has been \
interpreted as exploring themes of alienation, existential anxiety, guilt, \
and absurdity.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It originally meant the color of the kermes dye produced from \
a scale insect, Kermes vermilio, but the name is now sometimes also used as a \
generic term for slightly bluish-red colors that are between black and \
rose.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Slightly earlier Offa seems to have favoured Tamworth.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In some situations, schedules can be uncertain, such as where \
the conduct of daily life relies on environmental factors outside human \
control.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We'll never succeed -- we may as well die here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He looks Vietnamese.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You're.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A cob is roughly spherical to oval, about 1525 mm (0.590.98 \
in) long and 1015 mm (0.390.59 in) in diameter, with an outer fibrous husk \
surrounding a smooth shell.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"It's Nick!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Diseases of heart muscle are of major importance.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Didn't think you would.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He's cautious precise never impulsive..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The earliest sunset and latest sunrise dates outside the \
polar regions differ from the date of the winter solstice, however, and these \
depend on latitude, due to the variation in the solar day throughout the year \
caused by the Earth's elliptical orbit (see earliest and latest sunrise and \
sunset).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That computer is running this ship and we're heading right \
for the sun.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"His demands could never be granted.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Thanks Valentine ...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I wasn't reading Huckleberry Finn I was reading one of those \
Little Dirty Comic Books.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is the group's first single without Kevin Richardson, who \
had left the group in 2006.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"In the meantime everybody stays on salary.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I didn't realize you had such an incredible ability to feel \
sorry for yourself Dignan.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They normally travel on a rail between stockpiles in the \
stockyard.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"uck\\\", a song by Shriekback from Jam Science\\nSuck, a \
drummer for the 1990s Japanese punk band Teengenerate\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Leaving his command in Gaul meant losing his immunity from \
being charged as a criminal for waging unsanctioned wars.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A virtuoso rendition.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You're detestable.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Neanderthals (UK: , also US: ; also Neanderthal Man, \
taxonomically Homo neanderthalensis or Homo sapiens neanderthalensis) are an \
extinct species or subspecies of archaic humans in the genus Homo, who lived \
in Eurasia during at least 430,000 to 38,000 years ago.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The property of being easily annoyed is called \
irritability.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Blue velvet.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As a legal term, \\\"infancy\\\" continues from birth until \
age 18.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You got balls I'll give you that much.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The modern discipline of ethology is generally considered to \
have begun during the 1930s with the work of Dutch biologist Nikolaas \
Tinbergen and by Austrian biologists Konrad Lorenz and Karl von Frisch, joint \
awardees of the 1973 Nobel Prize in Physiology or Medicine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No.  I'm sorry.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"This has to be a big mistake.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Something's wrong with the damn intercom.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No I want my cut!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"There is no handle!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The numerous theories that attempt to explain the origin, \
neurobiology, experience, and function of emotions have only fostered more \
intense research on this topic.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It readily forms hard, stable carbides in alloys, and for \
this reason most of world production of the element (about 80%) is used in \
steel alloys, including high-strength alloys and superalloys.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It generally covers the story of how the book came into \
being, or of how the idea for the book was developed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Though sometimes used stylistically by some Muslims, a vast \
majority consider the term a misnomer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Girl's gotta make a living.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"To your family.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"In mathematics, the intersection of two or more objects is \
another, usually \\\"smaller\\\" object.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One of the three Teletype manufacturing buildings in Skokie \
remains in use as a parking garage for a shopping center.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"and you don't even know how long ago it was.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"By-laws may be established by entities such as a business \
corporation, a neighborhood association, or depending on the jurisdiction, a \
municipality.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In colloquial use, \\\"anonymous\\\" is used to describe \
situations where the acting person's name is unknown.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's hard duty son.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Appetite is another sensation experienced with eating; it is \
the desire to eat food.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Whitewash may also refer to:\\nRacial whitening, or \
\\\"whitewash\\\" (branqueamento), an ideology that was widely accepted in \
Brazil between 1889 and 1914\\nWhitewashing in film, the practice of casting \
white actors in historically or canonically non-white character \
roles\\nWhitewash (sport), a sports game or series in which the losing person \
or team fails to score\\nWhitewash (censorship), a term for \
censorship\\nWhitewash (TV special), a 1994 HBO Family Channel\\nWhitewash \
(film), a 2013 Canadian film\\nWhitewash Jones, a racist caricature from the \
1940s comic book Young Allies\\nWhitewash procedure, a legal procedure in \
shareholder law\\n\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hence the phrase, \\\"a nation of strangers\\\" used by such \
writers as Vance Packard.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I mean these offices and everything.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You burn time in the vault.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Their cruelty surely will wreck me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tell them that everything is going to be just fine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Jim was old enough..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The object was to catch thick places, or slubs, which \
occurred when the spinning process suffered an aberration, and to prevent \
them being woven into the fabric to present unsightly faults.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In 2015, Tokyo was ranked as the 11th most expensive city for \
expatriates, according to the Mercer consulting firm, and also the world's \
11th most expensive city, according to the Economist Intelligence Unit's \
cost-of-living survey.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The resurrection of the dead is a standard eschatological \
belief in the Abrahamic religions.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hinged tools, such as pliers or tongs, are not generally \
considered wrenches in English, but exceptions are the plumber wrench (pipe \
wrench in British English) and Mole wrench (sometimes Mole grips in British \
English).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The physical movement of image parts through simple mechanics \
in for instance the moving images in magic lantern shows can also be \
considered animation.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Back in the Sixties I had a weather changing machine that was \
in essence a sophisticated heat beam which we called a laser.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Colonel Munro I have known you as a gallant antagonist.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't get you.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"But -- but -- Come now Athos if Porthos is determined to end \
his life then he will certainly manage to find the opportunity.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Your brother's right.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I like what you've done with the place.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pittas are mostly solitary and lay up to six eggs in a large \
spherical nest in a tree or shrub, or sometimes on the ground.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The process may last seconds or days.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Using the inverse hyperbolic function artanh, the rapidity w \
corresponding to velocity v is w = artanh(v / c) where c is the velocity of \
light.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tide tables can be used to find the predicted times and \
amplitude (or \\\"tidal range\\\") of tides at any given locale.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No sir, not I; 'tis a palsy I have still.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A simple example is the tossing of a fair (unbiased) \
coin.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some cultures regard the autumnal equinox as \\\"mid-autumn\\\
\", while others with a longer temperature lag treat it as the start of \
autumn.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Thanks for the speakers.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the case of upwards flowing water, seepage forces oppose \
the force of gravity and suspend the soil particles.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It was during this time that industry was rapidly adopting \
feedback controllers, which were introduced in the 1930s.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Atop the troposphere is the tropopause, which is the border \
between the troposphere and stratosphere.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'd stake my reputation.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You think we're gonna let Zimmermann haul it onto <U>our</U> \
streets on the Fourth-of-fucking-July!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I think we should leave now.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Smarten (19762003) was an American Thoroughbred racehorse and \
successful sire.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This development continues today; modern self-propelled \
artillery vehicles are highly mobile weapons of great versatility providing \
the largest share of an army's total firepower.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Her major symbols include owls, olive trees, snakes, and the \
Gorgoneion.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Zinc deficiency affects about two billion people in the \
developing world and is associated with many diseases.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rodger is a surname, and is a variant of Roger as a first \
name and may refer to:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The small, unwanted droplets of molten metal emitted during \
welding.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It had to be a trap.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The name Flores is derived from the  Portuguese for \
\\\"flowers\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The lymph, lymph nodes, and lymph vessels form the lymphatic \
system, which returns filtered blood plasma from the interstitial fluid \
(between cells) as lymph.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Back it down Johnny! ...and figure out how to reverse them.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He wouldn't have gone anywhere or done anything without \
telling us.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"No...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is countered by anticounterfeiting measures in the \
printing of banknotes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A wilderness is a place where wildness occurs.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That ' s what I thought Absolutely not.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I heard it.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"You are torn by grief not only for Raoul but for d'Artagnan \
whom you love and now treat as an enemy.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This thing you got..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is generally considered a field of biology, but intersects \
frequently with many other life sciences and is strongly linked with the \
study of information systems.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Historically, it was called an automotive, automobile, \
locomotive or fish torpedo; colloquially called a fish.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mine's still John.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Raytheon later licensed its patents for a home-use microwave \
oven that was first introduced by Tappan in 1955, but these units were still \
too large and expensive for general home use.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now give me your cash.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An exception to this are animals with complete regeneration, \
which regrow tissue without scar formation.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The earliest non-paper products involving printing  include \
cylinder seals and objects such as the Cyrus Cylinder and the Cylinders of \
Nabonidus.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He'll live.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"David now I know this may be hard for you but I have to warn \
you.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't wanna see KISS that ba...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The word litre is derived from an older French unit, the \
litron, whose name came from Greek  where it was a unit of weight, not volume \
  via Latin, and which equalled approximately 0.831 litres.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The commercial use of tanning beds was banned entirely in \
Brazil in 2009 and Australia in 2015.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Funny you're the only one I say do what you wanna do.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well we're thinking about..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The subcompact segment equates roughly to A-segment and \
B-segment in Europe, or city car and supermini in British terminology.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"More specifically, the grotesque forms on Gothic buildings, \
when not used as drain-spouts, should not be called gargoyles, but rather \
referred to simply as grotesques, or chimeras.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Judith Guest (born March 29, 1936) is an American novelist \
and screenwriter.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just pack up your cameras and go.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Call 911 right now.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Porpoises were, and still are, hunted by some countries by \
means of drive hunting.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"See section 'fiduciary duty and pension governance'.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dominican may refer to:\\n\\nSomeone or something from or \
related to the Dominican Republic, on the island of Hispaniola in the Greater \
Antilles, in the Caribbean\\nPeople of the Dominican Republic\\nDemographics \
of the Dominican Republic\\nCulture of the Dominican Republic\\nSomeone or \
something from or related to the Commonwealth of Dominica, an island nation \
in the Lesser Antilles, in the Caribbean\\nPeople of Dominica\\nDemographics \
of Dominica\\nCulture of Dominica\\nDominican Order, a Catholic religious \
order\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Spectrograms are sometimes called sonographs, voiceprints, or \
voicegrams.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Neither my wife nor I will attempt to leave Krypton.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Sees the wound.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Studies have found that people are able to determine sexual \
orientation from such cues and a shoulder-swagger was perceived as a \
heterosexual orientation.Among London cockneys, swaggering was stylised as \
the coster walk which became the dance craze of the Lambeth walk.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The UV light may be from either the sun or from other \
sources, such as tanning devices.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"This represents 8.3% of the adult population, with equal \
rates in both women and men.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In contrast to a coast, a shore can border any body of water, \
while the coast must border an ocean; in that sense a coast is a type of \
shore; however, coast often refers to an area far wider than the shore, often \
stretching miles into the interior.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Also in this year, Wrocaw hosted the Theatre Olympics, World \
Bridge Games and the European Film Awards.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Uh father I know she's been through a lot...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Simple choices might include what to eat for dinner or what \
to wear on a Saturday morning  choices that have relatively low-impact on the \
chooser's life overall.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You revealed our existence so you could have all of our \
power.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"My truck.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This allows the wire or rope to move freely minimizing \
friction and wear on the cable.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The first tin alloy used on a large scale was bronze, made of \
tin and copper, from as early as 3000 BC.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"From 1819 to 1858, Odessa was a free port.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Snag may refer to:\\nSnag (textiles), a fiber pulled from in \
normal pattern in a fabric\\nSnag (ecology), a standing dead tree or a tree, \
or a branch of a tree, fixed in the bottom of navigable water, that may be a \
hazard to navigation.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Storybook most often refers to children's literature.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pus from anaerobic infections can more often have a foul \
odor.In almost all cases when there is a collection of pus in the body, the \
clinician will try to create an opening to drain it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Flattering but no.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've known a lot of everybody.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The scriptures do not use the word evangelism, but evangelist \
is used in (the translations of) Acts 21:8, Ephesians 4:11, and 2 Timothy \
4:5.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"John he is a soldier.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Bad sign..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I said I'm fine.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The main role of chloroplasts is to conduct photosynthesis, \
where the photosynthetic pigment chlorophyll captures the energy from \
sunlight and converts it and stores it in the energy-storage molecules ATP \
and NADPH while freeing oxygen from water.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We see you perfectly.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He's a timid old man and quite careful not to tread on \
anyone's toes -- In fact I'm the only one he trusts and he wouldn't even look \
at a document if it didn't first come through me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fuck it they sold us out - so what!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"Redeemed\\\" is a song by contemporary Christian band Big \
Daddy Weave from their 2012 album Love Come to Life.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Helsingr (Danish: [hlse]), classically known in English as \
Elsinore, is a city in eastern Denmark.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm glad to hear it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Though most commonly used for a single work of art such as a \
painting or sculpture, or a set of them, the word can also be used of the \
whole ensemble behind an altar, otherwise known as a reredos, including what \
is often an elaborate frame for the central image or images.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But you want to and I want you to and we both know it and all \
right.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It consists of more than 700 islands, cays, and islets in the \
Atlantic Ocean, and is located north of Cuba and Hispaniola (Haiti and the \
Dominican Republic), northwest of the Turks and Caicos Islands, southeast of \
the United States state of Florida, and east of the Florida Keys.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Minutiae include:\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Might as well take the rest of the day off.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I know it has been terrible.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The party's over.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"They might see it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Streets follow a grid pattern, with most flanked on both \
sides by narrow irrigation channels, watering innumerable trees to provide \
shade in the hot summers.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll give you a chance for what you love most Clarice \
Starling.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Drawing from this powerful association, the thunderbolt is \
often found in military symbolism and semiotic representations of \
electricity.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are over 300 distinct breeds of goat.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he various Indian philosophies and denominations have taken \
differing positions on the Vedas.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Oh shit superlifer!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Together with the four species of echidna, it is one of the \
five extant species of monotremes, the only mammals that lay eggs instead of \
giving birth to live young.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"A ghost mask.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"For example, if a person is drowning and begging for help and \
another person is able to help with no cost or risk, but merely watches with \
disinterest or perhaps mischievous amusement, that person is being \
cruelrather than violent.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This novel \\\"Wellington\\\" boot became a staple of hunting \
and outdoor wear for the British aristocracy in the early 19th century.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'd want to set out events as they happened.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He also noted the sense of warmth or heat (associated with \
the vasodilation of the face and skin) occurring in intense shame.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Egging is a criminal offence in most areas.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That was in style a couple years back man.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Scientists have described these as a \\\"waste of time and \
money\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Psychos don't explode when sunlight hits 'em I don't care how \
crazy they are.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Prof Charles Hermite (French pronunciation: [al mit]) FRS \
FRSE MIAS (24 December 1822  14 January 1901) was a French mathematician who \
did research concerning number theory, quadratic forms, invariant theory, \
orthogonal polynomials, elliptic functions, and algebra.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Pass your phone.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"And don't think just cause we play the same position we have \
to compete with each other.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"if I heard your voice..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Approximately 70% of Superfund cleanup activities \
historically have been paid for by parties responsible (PRPs) for the cleanup \
of contamination.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It all went sideways.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is also used with dresses or shirts, to create a backless \
dress or top.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Maybe he's dead too.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These digestive hormones, including gastrin, secretin, \
cholecystokinin, and ghrelin, are mediated through either intracrine or \
autocrine mechanisms, indicating that the cells releasing these hormones are \
conserved structures throughout evolution.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Congregationalist tradition has a presence in the United \
States, the United Kingdom, Ireland, Canada, South Africa, Australia, New \
Zealand, and various island nations in the Pacific region.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One could equally well say, \\\"That I believe God exists \
implies that I exist.\\\" or \\\"That I believe I do not exist implies that \
my belief is false.\\\"and these would have the same essential meaning as the \
cogito.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"His funeral - imagine it!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A morphogen is a substance whose non-uniform distribution \
governs the pattern of tissue development in the process of morphogenesis or \
pattern formation, one of the core processes of developmental biology, \
establishing positions of the various specialized cell types within a tissue.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I never said they were boring.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Traditionally, a passbook is used for accounts with a low \
transaction volume, such as a savings account.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Photostat machine, or Photostat, was an early projection \
photocopier created in the decade of the 1900s by the Commercial Camera \
Company, which became the Photostat Corporation.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, there are cases where siblings grow up in separate \
homes, in different environments.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Be quiet you fat fool.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Theodore Millon theorized that in self-presentation, \
individuals seek to balance boasting against discrediting themselves with \
excessive self-promotion or being caught blatantly misrepresenting \
themselves.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't want them breathing down my neck while we're in \
London.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This is still common in some countries.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Angelic status is not attributed to cherubim in the Old \
Testament (at least not explicitly); only in later sources such as De \
Coelesti Hierarchia are they identified as a hierarchical rank of \
angels.Different sources give conflicting information as to the physical \
appearance of cherubim.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A basic training for imagination is listening to storytelling \
(narrative), in which the exactness of the chosen words is the fundamental \
factor to \\\"evoke worlds\\\".Imagination is a cognitive process used in \
mental functioning and sometimes used in conjunction with psychological \
imagery.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well you hate that job anyway.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nobody special enough Curly.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For example, researchers in neuroscience or bio-behavioral \
health might focus on pubertal changes in brain structure and its effects on \
cognition or social relations.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Popular, modern conceptions of the Vikingsthe term frequently \
applied casually to their modern descendants and the inhabitants of modern \
Scandinaviaoften strongly differ from the complex picture that emerges from \
archaeology and historical sources.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just haven't been this close to Toontown for awhile.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A souvenir  (from French, for a remembrance or memory), \
memento, keepsake, or token of remembrance is an object a person acquires for \
the memories the owner associates with it.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Examples include H2O, CO2 (pictured) and HCN.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Glosses were originally notes made in the margin or between \
the lines of a text in a classical language; the meaning of a word or passage \
is explained by the gloss.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They don't expect anyone to try getting in!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Scuppers can also be placed in a parapet, for the same \
purpose.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The unique adaptations of kiwi, such as their large eggs, \
short and stout legs, or using their nostrils at the end of their long beak \
to detect prey before they ever see it, have helped the bird to become \
internationally well-known.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"A travel mug is insulated and has a cover with a small \
sipping opening to prevent spills.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Seems fast.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Austin was the most loyal and caring friend I ever had.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I think he got himself a hot lead as to where your sister was \
going...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are sometimes called \\\"red-tasseled Manchus\\\", a \
reference to the ornamentation on traditional Manchu hats.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Stem tubers form from thickened rhizomes (underground stems) \
or stolons (horizontal connections between organisms).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hicks meet me at the south lock by the up-link tower..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"IBM Rational Quantify, a profiling software, part of IBM \
Rational Purify\\nQuantify may refer to the measurement of quantity.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He used to love this song.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Descriptions of the disease date as far back as the Old \
Testament.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's a ketch Kelly and I had chartered.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This adipose fin represents the fourth unpaired fin on the \
fish (the four unpaired fins are the caudal fin, dorsal fin, anal fin, and \
adipose fin), lending to the name tetra, which is Greek for four.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Cloth may be used synonymously with fabric but is often a  \
piece of fabric that has been processed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fagus japonica, Fagus engleriana, and the species F. \
okamotoi, proposed by the botanist Chung-Fu Shen in 1992, comprise this \
subgenus.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Campaign or The Campaign may refer to:\\nAdvertising campaign\
\\nCivil society campaign\\nMilitary campaign\\nPolitical campaign\\nIn \
agriculture, the period during which sugar beets are harvested and \
processed\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Buying food, clothing, furniture or an automobile is often \
referred to as an expense.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The word first was used of paintings found on the walls of \
basements of Roman ruins that were called at that time Le Grotte (The \
Grottoes) due to their appearance.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Superman.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he Hijrah is also often identified with the start of the \
Islamic calendar, which was set to 19 April 622 in the Julian calendar.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In a number of ancient religions, a dying-and-rising god is a \
deity which dies and resurrects.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"\\\"Critical geopolitics\\\" deconstructs classical \
geopolitical theories, by showing their political/ideological functions for \
great powers during and after the age of imperialism.According to Christopher \
Gogwilt and other researchers the term is currently being used to describe a \
broad spectrum of ideas, in a general sense used as \\\"a synonym for \
internal political relations\\\", but more specifically \\\"to imply the \
global structure of such relations\\\", which builds on \
\\\"early-twentieth-century term for a pseudoscience of political geography\\\
\" and other pseudoscientific theories of historical and geographic \
determinism.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I bet he would.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I'm going to write another aria for you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You know the funny thing is: it's not a great movie.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In modern textile industry, after detecting the faults, the \
clearer cuts the faulty pieces from the yarn, and after that the piecing \
device joins the cut ends.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've got you.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It is different from shoe polish, which is used to impart \
shine and colour to leather.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In there sir.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"White-eared catbird (Ailuroedus buccoides)\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Before the middle of the 19th century, shop fronts did not \
have large display windows, but often included features such as awnings and \
bay windows to attract the attention of passersby.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fredrica Bimmel from Belvedere Ohio.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An incantation, enchantment, or magic spell is a set of \
words, spoken or unspoken, which are considered by its user to invoke some \
magical effect.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although many share similar diets, different species of lemur \
share the same forests by differentiating niches.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An alternative explanation is that the British hussar cap of \
the early 19th century was named after the hatter who supplied the officer's \
versionW.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Otherwise it was amusing.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I saw him strikeout.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Riel may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Portia de Rossi, or Portia DeGeneres (born 1973), wife of \
Ellen DeGeneres and American actress.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Greek numbers 600 60 and 6 - or 666.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Crusades were a series of religious wars sanctioned by \
the Latin Church in the medieval period.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A space suit is a garment worn to keep a human alive in the \
harsh environment of outer space, vacuum and temperature extremes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The precise boundary between education and indoctrination \
often lies in the eye of the beholder.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A paramilitary is a semi-militarized force whose \
organizational structure, tactics, training, subculture, and (often) function \
are similar to those of a professional military, but which is not included as \
part of a state's formal armed forces.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It originally meant the Christian message itself, but in the \
2nd century it came to be used for the books in which the message was set \
out.The four gospels of the New Testament  Matthew, Mark, Luke and John  are \
the main source of information on the life of Jesus.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It has also been used to mean a practitioner of animal \
husbandry, or in perhaps more modern language, a rancher.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Also, satirical explanations of words and events are called \
glosses.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In some countries and languages the term \\\"security\\\" is \
commonly used in day-to-day parlance to mean any form of financial \
instrument, even though the underlying legal and regulatory regime may not \
have such a broad definition.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Aerodromes include small general aviation airfields, large \
commercial airports, and military airbases.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Definitions vary in different contexts: set theory formalizes \
the idea that a smaller object lies in a larger object with inclusion, and \
the intersection of sets is formed of elements that belong to all \
intersecting sets.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The film stars Blanche Sweet, Theodore Roberts, Ernest Joy, \
Tom Forman, Walter Long and Mrs. Lewis McCord.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Lascivious behavior is sexual behavior or conduct that is \
considered crude and offensive, or contrary to local moral or other standards \
of appropriate behavior.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't pick up people in drug stores every day.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"So, to the extent perceived disgust and sadness remain, the \
level of disappointment also remains.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"<u>Riddick</u>.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"In small quantities it captures chlorine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Alternatively, tile can sometimes refer to similar units made \
from lightweight materials such as perlite, wood, and mineral wool, typically \
used for wall and ceiling applications.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Space suits are often worn inside spacecraft as a safety \
precaution in case of loss of cabin pressure, and are necessary for \
extravehicular activity (EVA), work done outside spacecraft.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Educate her Pyro.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"On August 25, 2001, Aaliyah and eight others were killed in a \
plane crash in the Bahamas after filming the music video for the single \
\\\"Rock the Boat\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Please is a usually polite expression of request.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll get square with everybody.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Proselytism is the act of attempting to convert by persuasion \
another individual from a different religion or belief system.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Let's not put our energy into something ridiculous.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the US it is common for residents (typically two) to share \
a bedroom.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Margo darling.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The areas that constituted the Danelaw lie in northern and \
eastern England.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"United States Capitol in Washington, D.C.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is centered on Cathy's attempt to cover-up the murder of \
an intruder who attempted to rape her.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The first airing of the finale was watched by one million \
viewers and multiple airings of episodes throughout the week after their \
initial broadcasts averaged 2.72 million viewers16% more than the third.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They were valued as a source of meat, fat and for the ability \
to turn inedible food into meat, and often fed household food waste if kept \
on a homestead.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A logical argument for a self-evident conclusion would \
demonstrate only an ignorance of the purpose of persuasively arguing for the \
conclusion based on one or more premises that differ from it (see ignoratio \
elenchi and begging the question).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"By the end of the 20th century mechanical ignitions were \
disappearing from automotive applications in favor of inductive or capacitive \
electronic ignitions fully controlled engine control units (ECU), rather than \
directly timed to the engine's crankshaft speed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I always forget to put the sign on but we do have \
vacancy.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's not easy to be calm when - She's gone and the present is \
trivia which I can scribble down as notes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I wanted to be a good one.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term \\\"malt\\\" refers to several products of the \
process: the grains to which this process has been applied, for example \
malted barley; the sugar, heavy in maltose, derived from such grains, such as \
the baker's malt used in various cereals; or a product based on malted milk, \
similar to a malted milkshake (i.e., \\\"malts\\\").\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An eruption most commonly relates to volcanoes, see types of \
volcanic eruptions.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"While individuals may attempt to lead or control a riot, \
riots typically consist of disorganized groups that are frequently \
\\\"chaotic and exhibit herd behavior.\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Must have been my cheap-ass answering machine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"So--I hope you don't mind Edward I pinched it for my piece \
today.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The stack is then bound together along one edge by either \
sewing with thread through the folds or by a layer of flexible adhesive.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In between the two, in South Africa, a course officially is \
the collection of all courses (in the American sense, these are often called \
\\\"modules\\\") over a year or semester, though the American usage is \
common.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"After the end of his literary career, he traveled extensively \
on three continents as a merchant before his death from cancer just after his \
thirty-seventh birthday.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Amaranthus, collectively known as amaranth, is a cosmopolitan \
genus of annual or short-lived perennial plants.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Semiotics (also called semiotic studies) is the study of \
meaning-making, the study of sign process (semiosis) and meaningful \
communication.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Moron (psychology), disused term for a person with a mental \
age between 8 and 12\\nMorn (surname), people so named\\nMoron Phillip (born \
1992), Grenadian footballer\\n\\\"\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The erg is not an SI unit.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The time interval of a gestation is called the gestation \
period.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Like many other prey species, Tommies and springboks (as they \
are familiarly called) exhibit a distinctive behaviour of stotting (running \
and jumping high before fleeing) when they are threatened by predators, such \
as cheetahs.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Urban planner\\nRoute planner\\nMeeting and convention \
planner\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You can take it.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"You idiot.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Harvard University in Cambridge is the oldest institution of \
higher learning in the United States, with the largest financial endowment of \
any university, and Harvard Law School has educated a contemporaneous \
majority of Justices of the Supreme Court of the United States.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is the second and youngest epoch of the Neogene Period in \
the Cenozoic Era.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Oliver Heaviside coined the term admittance in December 1887.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A collection of medieval legal glosses, made by glossators, \
is called an apparatus.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If I'm here...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Some activities that were once considered entertaining, \
particularly public punishments, have been removed from the public \
arena.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Director may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Of these, only a small number  approximately 50  are today in \
commercial use.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"- Gerbera ruficoma Franch.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Artwork depicting prehistoric horses with leopard spotting \
exists in prehistoric cave paintings in Europe.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They merged subsequently with established Byzantine \
populations, as well as with previously settled here Slavic tribes, and were \
eventually Slavicized, thus forming the ancestors of modern Bulgarians.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Homer tells that the Amazons were sought and found somewhere \
near Lycia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Abduction may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"His statue of Zeus at Olympia was one of the Seven Wonders of \
the Ancient World.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Johnny...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For five bucks.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Nobody is freer than when he dreams.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Physiologically, the function of the brain is to exert \
centralized control over the other organs of the body.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rifts takes place in a post-apocalyptic future, deriving \
elements from cyberpunk, science fiction, fantasy, horror, western, mythology \
and many other genres.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Initially a commercial failure, Porgy and Bess later went on \
to be considered one of the most important American operas of the Twentieth \
century, and an American cultural classic.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Television.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"That should give you ample time.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In some uses, the label \\\"simplicity\\\" can imply beauty, \
purity, or clarity.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Various styles and types of vases have been developed around \
the world in different time periods, such as Chinese ceramics and Native \
American pottery.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'd like this cashed please.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"During puberty, hormones which stimulate androgen production \
result in the development of secondary sexual characteristics, thus \
exhibiting greater differences between the sexes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Lviv was the centre of the historical region of Galicia.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As Eduard did.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Ain't it the truth.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Germanic name is composed of the words for \\\"fame\\\" \
(hld) and \\\"warrior\\\" (wg) which may be translated to famous warrior or \
\\\"famous in battle\\\".\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Most of Tabriz's preserved historical sites belong to \
Ilkhanid, Safavid and Qajar.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"My father spoke of references to a Beast God ...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Specialists who focus on diseases of the heart are called \
cardiologists, although many specialties of medicine may be involved in \
treatment.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We have no choice General Calrissian.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Just for a little while.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are delimited in latitude by the Tropic of Cancer in the \
Northern Hemisphere at 232612.8 (or 23.43688) N and the Tropic of Capricorn \
in the Southern Hemisphere at 232612.8 (or 23.43688) S; these latitudes \
correspond to the axial tilt of the Earth.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"CONTINUED Goodbye Daddy.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And now you must let me be the judge of that!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is further classified by outcome into: death, ongoing \
health problems, and no ongoing health problems.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The foreskin of adults is typically retractable over the \
glans.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Purple drank, a recreational drug\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The individual species have other names in English and other \
languages.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Besides money, they may also ask for food, drink, cigarettes \
or other small items.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Knitting may be done by hand or by using a machine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It was my job.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The abacus was an instrument used by Greeks and Romans for \
arithmetic calculations, preceding the slide-rule and the electronic \
calculator, and consisted of perforated pebbles sliding on iron bars.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'd invite you up but I know you'd hate the incense.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term occultism emerged in nineteenth-century France, \
where it came to be associated with various French esoteric groups connected \
to liphas Lvi and Papus, and in 1875 was introduced into the English language \
by the esotericist Helena Blavatsky.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We don't use the term 'Negro' anymore.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"From a legal point of view, a merger is a legal consolidation \
of two entities into one entity, whereas an acquisition occurs when one \
entity takes ownership of another entity's stock, equity interests or assets.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Catalonia consists of four provinces: Barcelona, Girona, \
Lleida, and Tarragona.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Exocrine glands are glands that produce and secrete \
substances onto an epithelial surface by way of a duct.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The most well-known is Susa, an important city of the ancient \
Middle East which is referenced in the Bible.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He just didn't want to die.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She brought me my fan mail.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A parsec is defined as the distance at which one astronomical \
unit subtends an angle of one arcsecond, which corresponds to 648000/ \
astronomical units.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Marriage has added forty years to my life.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"What you said to me in the room.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This one will.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"This classifies drugs according to their solubility and \
permeability or absorption properties.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And the militia will not be released.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We're to see him directly where he will register you on the \
spot.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A stacker can usually move in at least two directions: \
horizontally along the rail and vertically by luffing (raising and lowering) \
its boom.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A slave is unable to withdraw unilaterally from such an \
arrangement and works without remuneration.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Chancery may refer to: Chancery the label \
@Chancerythelabel\\nApostolic Chancery, a former office of the Roman \
Curia\\nChancery (diplomacy), the building that houses a diplomatic mission, \
such as an embassy\\nChancery (medieval office), a medieval writing \
office\\nCentral Chancery of the Orders of Knighthood, British office that \
deals with administration of Orders of Chivalry\\nChancery (Scotland), legal \
office until 1928\\nChancery (village), in Ceredigion, Wales\\nDiocesan \
chancery, which houses a diocese's curia\\nChancery hand, a name for multiple \
styles of historic writing\\nCourt of equity, also called a chancery \
court\\nOne of the Courts of Chancery\\nCourt of Chancery, the chief court of \
equity in England and Wales until its abolition in 1873\\n\\nITC Zapf \
Chancery, a class of typefaces\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"In this context, outfitters include those that offer services \
for outdoor tourism including accommodations and guide services.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Manchus form the largest branch of the Tungusic peoples and \
are distributed throughout China, forming the fourth largest ethnic group in \
the country.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are predominantly Shi'i Muslims, and have a mixed \
cultural heritage, including Turkic, Iranian, and Caucasian elements.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll be safe with you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Of the nine species accepted as of April 2018, six are native \
to Madagascar, two are native to mainland Africa and the Arabian Peninsula, \
and one is native to Australia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Floods!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I just got a call..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The band's biggest hit singles are ballads such as \\\"Easy\\\
\", \\\"Three Times a Lady\\\", and \\\"Nightshift\\\"; and funky dance hits \
which include \\\"Brick House\\\", \\\"Fancy Dancer\\\", \\\"Lady (You Bring \
Me Up)\\\", and \\\"Too Hot ta Trot\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Excellent Athos.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Artifice Magazine was a nonprofit literary magazine based in \
Chicago, Illinois.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"THY or Thy may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In some but not all formalisations of concatenation theory, \
also called string theory, string concatenation is a primitive notion.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"heck this is the first time I ever saw the customer \
high-pressure the salesman!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"topside\\non the ship's main weather deck.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Half-brother to be precise.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm off to a little watering hole.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They're all about pain.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We came back to the house!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As a result, Argentines do not consider their nationality as \
an ethnicity but as a citizenship with various ethnicities.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Shrikes () are carnivorous passerine birds of the family \
Laniidae.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've also heard of the emperor.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Teletype Corporation, a part of American Telephone and \
Telegraph Company's Western Electric manufacturing arm since 1930, came into \
being in 1928 when the Morkrum-Kleinschmidt Company changed its name to the \
name of its trademark equipment.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A similar railroad car design, the brake van, was used on \
British and Commonwealth railways.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Grazing differs from parasitism as the two organisms live \
together in a constant state of physical externality (i.e. low \
intimacy).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The municipality is bordered to the north and east by the \
municipality of Santiago do Cacm, south and west by Odemira has coastline on \
the Atlantic Ocean.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fighting is pretty immature.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A spectrogram can be generated by an optical spectrometer, a \
bank of band-pass filters or by Fourier transform.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The likelihood that it will come back or spread depends how \
thick the melanoma is, how fast the cells are dividing, and whether or not \
the overlying skin has broken down.Melanoma is the most dangerous type of \
skin cancer.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Questions concerning the philosophy of language, such as \
whether words can represent experience, have been debated at least since \
Gorgias and Plato in ancient Greece.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When the two bodies are of similar masses, the barycenter \
will generally be located between them and both bodies will follow an orbit \
around it.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The band decided to continue playing, and since 1998 have \
performed in many countries throughout the world, releasing four albums.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Originally meaning \\\"strange\\\" or \\\"peculiar\\\", queer \
came to be used pejoratively against those with same-sex desires or \
relationships in the late 19th century.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Soapy Awards, an award presented by Soap Opera Digest \
magazine from 1977 until 1983\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Specific kinds of palsy include:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"People will talk.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"A wry trick of others is to request the reader to get off \
their resting place, inasmuch as the reader would have to be standing on the \
ground above the coffin to read the inscription.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well your cheap whore is this family's lovin' mother.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Nothing's off the record with me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Viewing may refer to:\\nRemote viewing\\nSocial \
viewing\\nViewing (funeral), the part of funerals where family and friends \
see the deceased\\nWildlife viewing\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Groundswell may refer to:\\nSwell (ocean), a type of ocean \
wave\\nGroundswell group, a political action group\\nGroundswell (album), a \
2003 album by Parts & Labor, and the title song\\nGroundswell, the previous \
name of the Canadian rock band Three Days Grace\\nGroundswell, a band created \
after the split of Ned's Atomic Dustbin by their lead singer Jonn \
Penney\\nGroundswell (book), a 2008 book by Charlene Li and Josh Bernoff, \
dealing with marketing effectiveness\\nGroundswell:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When you and I use to attend rallies in college we helped to \
create awareness.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Oh god!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I have created the ultimate weapon to defeat Austin Powers.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Thanks for having me Sally.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tension whippletrees are used in artful hung mobiles, as the \
ones the artist Alexander Calder started to build in 1932.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These changes included giving wives legal identities of their \
own, abolishing the right of husbands to physically discipline their wives, \
giving wives property rights, liberalizing divorce laws, providing wives with \
reproductive rights of their own, and requiring a wife's consent when sexual \
relations occur.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Supermarkets usually allocate large budgets to advertising, \
typically through newspapers.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"In the case of physical ionization in a medium, such as a \
gas,  \\\"ion pairs\\\" are created by ion collisions, where each generated \
pair consists of a free electron and a positive ion.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I might call to check up on her you know..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's going to be closer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are native to Asia, Europe and Western North \
America.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Kicks play a significant role in many forms of martial arts, \
such as savate, taekwondo, MMA, sikaran, karate, Pankration, Kung fu, \
Vovinam, kickboxing, Muay Thai, capoeira, silat, and kalaripayattu.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The laws of physics are invariant (i.e., identical) in all \
inertial systems (i.e., non-accelerating frames of reference); (2) The speed \
of light in a vacuum is the same for all observers, regardless of the motion \
of the light source.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They were brutal and aggressive, and their main concern in \
life was war.Herodotus and Strabo place them on the banks of the Thermodon, \
while Diodorus giving the account of Dionysius of Mitylene, who, on his part, \
drew on Thymoetas, states that before the Amazons of the Thermodon there \
were, much earlier in time, the Amazons of Libya.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's not too bad working here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is not one of Paul Ekman's six basic emotions (surprise, \
disgust, happiness, sadness, anger, and fear).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But maybe someday.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Alright.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's a cover then.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm usta seein' ya at the gym but seein' ya here in my house \
it's kinda outta joint.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'd like to talk some business.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Especially at your age.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Jugglers often refer to the objects they juggle as \
props.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"With clothing, shoplifters may put on items from the store \
and leave the store wearing the clothes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I hear you sir but I'm not leaving.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Or What Pythagoras Wrought, mathematician Underwood Dudley \
uses the term to discuss practitioners of the Elliott wave principle of stock \
market analysis.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Redbird, Redbirds, Red Bird or Red Birds may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In this case, the migrations were themselves facilitated by \
the innovation of clothing.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"The term \\\"produce\\\" is commonly used in the U.S. but is \
not typically used outside the agricultural sector in other English-speaking \
countries.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"What a beautiful way to die...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Reproduction usually occurs from November to February and is \
oviparous.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Studio potters can be referred to as ceramic artists, \
ceramists, ceramicists or as an artist who uses clay as a medium.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ohio is historically known as the \\\"Buckeye State\\\" after \
its Ohio buckeye trees, and Ohioans are also known as \\\"Buckeyes\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Essentially, the factor of safety is how much stronger the \
system is than it needs to be for an intended load.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Latin and later English translators selectively used the term \
\\\"gentiles\\\" when the context for the base term \\\"peoples\\\" or \
\\\"nations\\\" referred to non-Israelite peoples or nations in English \
translations of the Bible.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Single entered Top 10 in seven countries.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In 1991, it became part of the independent nation of Ukraine.\
\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rose had a good life.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Many animals both groom themselves and eat or drink by \
licking.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Stand by for a PRC fix...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Seasonal variations in the labour market can be attributed to \
the entrance of school leavers into the job market as they aim to contribute \
to the workforce upon the completion of their schooling.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Take this Joey.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Hey let's be fair.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"On July 28, 2014, she was awarded the National Medal of Arts \
and Humanities.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In the United Kingdom, many Congregational churches claim \
their descent from Protestant denominations formed on a theory of union \
published by the theologian and English separatist Robert Browne in \
1582.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A psychodrama is best conducted and produced by a person \
trained in the method, called a psychodrama director.In a session of \
psychodrama, one client of the group becomes the protagonist, and focuses on \
a particular, personal, emotionally problematic situation to enact on \
stage.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The term \\\"twig\\\" often refers to a terminus, while \
\\\"bough\\\" refers only to branches coming directly from the trunk.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"During the 1930s, he studied at Moscow's Communist University \
of the Toilers of the East, University College London and the London School \
of Economics.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Both types have further variations as there are widely \
divergent structures and traditions defining monarchy.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rimes rose to stardom at age 13 following the release of her \
version of the Bill Mack song \\\"Blue\\\", becoming the youngest country \
music star since Tanya Tucker in 1972.Rimes made her breakthrough into \
country music in 1996 with her debut album, Blue, which reached No. 1 on the \
Top Country Albums chart and was certified multi-platinum in sales by the \
Recording Industry Association of America (RIAA).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Contemptuous appeared in 1529.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"As a child I never had no room all to myself we were awful \
poor.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Antiemetics are sometimes necessary to suppress nausea and \
vomiting.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In other words, it is the ratio between the small change in \
electrical output to a small change in physical input signal.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Uremic syndrome can be defined as the terminal clinical \
manifestation of kidney failure (also called renal failure).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Loss of a hydrogen cation (H+) from the hydroxyl group of a \
phenol forms a corresponding negative phenolate ion or phenoxide ion, and the \
corresponding salts are called phenolates or phenoxides, although the term \
aryloxides is preferred according to the IUPAC Gold Book.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"(1882) declares that \\\"race is confused with nation and a \
sovereignty analogous to that of really existing peoples is attributed to \
ethnographic or, rather linguistic groups\\\", and \\\"The truth is that \
there is no pure race and that to make politics depend upon ethnographic \
analysis is to surrender it to a chimera\\\", echoing a sentiment of civic \
nationalism.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I got your number Mister Man. Anyway..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Areoles are an identifying feature of cacti.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Average.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Although the interior of the nucleus does not contain any \
membrane-bound subcompartments, its contents are not uniform, and a number of \
sub-nuclear bodies exist, made up of unique proteins, RNA molecules, and \
particular parts of the chromosomes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mrs. Lippman had a son maybe he could help you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"My shoemaker.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"She wants revenge!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I hate having my picture taken.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Corrections Officers are responsible for the care, custody, \
and control of individuals who have been arrested and are awaiting trial \
while on remand or who have been convicted of a crime and sentenced to serve \
time in a prison or jail.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Whenever you lose you get this attitude.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Navigation is a field of study that focuses on the process of \
monitoring and controlling the movement of a craft or vehicle from one place \
to another.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You know sometimes being different isn't a bad thing.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"People who act in a way characteristic of mental disorder; \
this is often used pejoratively.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Most TV sets sold in the 2000s were flat-panel, mainly \
LEDs.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'm sure it will be a great story.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"To a large extent, chemotherapy can be thought of as a way to \
damage or stress cells, which may then lead to cell death if apoptosis is \
initiated.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"One study shows that most people can make up to as much as 22 \
slips of the tongue per day.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ghee is a class of clarified butter that originated from the \
Indian subcontinent.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Modern Western theatre comes, in large measure, from ancient \
Greek drama, from which it borrows technical terminology, classification into \
genres, and many of its themes, stock characters, and plot elements.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Yeah yeah yeah.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Designs could vary between ports and boatyards.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Think of it man a match -- a cigar stub -- and ten thousand \
pounds to divide between us!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But...everyone orders the hash browns here.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"C'mon wop spar me let everybody see who's got the heat around \
here.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mate may refer to:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Petroleum jelly, petrolatum, white petrolatum, soft \
paraffin/paraffin wax or multi-hydrocarbon, CAS number 8009-03-8, is a \
semi-solid mixture of hydrocarbons (with carbon numbers mainly higher than \
25), originally promoted as a topical ointment for its healing \
properties.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That doesn't seem so bad to me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fatigue is considered a symptom, rather than a sign, because \
it is a subjective feeling reported by the patient, rather than an objective \
one that can be observed by others.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Enzymes with a zinc atom in the reactive center are \
widespread in biochemistry, such as alcohol dehydrogenase in humans.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Max something.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"The wholesale cost in the developing world is about 0.22 USD \
per dose.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Hand over.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's why I'm marrying him.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Littler is an English surname, derived from the place name \
Littleover, a village in Derbyshire.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It just fascinates me how all    these things work.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It was introduced in ancient times to south Asia and during \
the colonial era to the Caribbean.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"John Merrick.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Fer (also known as Fer Servadou, Pinenc, Mansois and several \
other synonyms) is a red French wine grape variety that is grown primarily in \
South West France and is most notable for its role in the Appellation \
d'Origine Contrle (AOC) wines of Gaillac, Marcillac and Barn but can also be \
found as minor component in the wines of Madiran, Cabards and Bergerac.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I wouldn't call his bronchial infections underdeveloped.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A treatise is a formal and systematic written discourse on \
some subject, generally longer and treating it in greater depth than an \
essay, and more concerned with investigating or exposing the principles of \
the subject.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You tell everyone about Sammy.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Gloria -- I've waited for years.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Chinese philosopher Zhuang Zhou once wrote in the 3rd century \
BCE (hypothetically)\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At one time, insectivorous mammals were scientifically \
classified in an order called Insectivora.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I knew it was a set-up!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The name has become increasingly popular in South America - \
particularly Argentina and Uruguay since the early 1990s.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You can't pretend I love you because I don't.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Two champagne cocktails please.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"ndescribable\\\" (song), a song written and recorded by \
Christian singer-songwriter Laura Story and later also recorded by Christian \
musician Chris Tomlin\\nIndescribable (film), a film based on the events \
surrounding the writing of the hymn, \\\"The Love of God\\\"\\nIndescribable \
(horse), an American Thoroughbred racehorse and winner of the 2009 Kentucky \
Cup Distaff Stakes\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"'ve seen you.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Well I was picking fruit with some migrant workers \
until..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"So I hear.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The island's government is closely modelled on the \
Westminster parliamentary system, and Mauritius is highly ranked for \
democracy and for economic and political freedom.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An attempt should at least be made to capture him alive.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I blacked out.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Well Muddy we can look at all these angry stars Homer's been \
readin' to us about.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It can erase all those things about you that you wish didn't \
exist.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Apart from a writing material, ancient Egyptians employed \
papyrus in the construction of other artifacts, such as reed boats, mats, \
rope, sandals, and baskets.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Modern electronic devices use temperature of condensation \
(the dew point), or changes in electrical capacitance or resistance to \
measure humidity differences.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"But we'll let Santino handle that.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Surprised he's not your guest.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"She talks a great deal and smiles a lot.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Most helium in the universe is helium-4, the vast majority of \
which was formed during the Big Bang.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"These positions may be paid or unpaid and are temporary.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll get you the notes.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Tell me about them.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Be patient Ted.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Its products include Chips Ahoy!, Belvita, Oreos, Ritz \
Crackers, Teddy Grahams, Triscuits, and Wheat Thins for the United States, \
United Kingdom, Mexico, Bolivia, Venezuela, as well as other parts of South \
America.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is played by bowing or plucking its four strings, which \
are usually tuned in perfect fifths an octave lower than the viola: from low \
to high, C2, G2, D3 and A3.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Hell yeah!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"For example, in Western cultures, a person who has been \
helped by a second person is sometimes said to owe a \\\"debt of \
gratitude\\\" to the second person.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Frank Ligourin.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Some tribes had adopted Christianity or Judaism, and a few \
individuals, the hanifs, apparently observed monotheism.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We're just not a very musical nation...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Importantly, the use of drugs (whether chemotherapy, hormonal \
therapy or targeted therapy) constitutes systemic therapy for cancer in that \
they are introduced into the blood stream and are therefore in principle able \
to address cancer at any anatomic location in the body.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I can keep going I assure you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In my time and nobody else's.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The palms were more numerous and widespread in the past than \
they are at present.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You'd blow a knee out racing on those.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Someone stole mine.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some early examples include the lizard-like Hylonomus and \
Casineria.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You will or you'll be back at BET so quick you'll never know \
what hit you.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Castrati were rarely referred to as such: in the 18th \
century, the euphemism musico (pl musici) was much more generally used, \
although it usually carried derogatory implications; another synonym was \
evirato, literally meaning \\\"emasculated\\\".\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That's FedEx that's women that's life.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"From the 1920s onward, the movement spread around the globe, \
eventually affecting the visual arts, literature, film, and music of many \
countries and languages, as well as political thought and practice, \
philosophy, and social theory.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"My father hears that Longshanks has granted prima \
noctes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When the word \\\"snail\\\" is used in this most general \
sense, it includes not just land snails but also numerous species of sea \
snails and freshwater snails.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Vultures also use urine as a way to keep themselves cool by \
urinating on themselves.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I picked her up off Hollywood Boulevard.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The name's original roots come from Wales.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Clearly it is not foolproof as there are input sequences that \
yield all-zeros, all-ones, or other undesirable periodic output \
sequences.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He is also an important prophet in Christianity, Islam, the \
Bah' Faith, and a number of other Abrahamic religions.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is often used alone, somewhat loosely, to refer to people \
of British Isles descent in the Americas, New Zealand, South Africa and \
Australia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Push.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't get it but at least Gary's got the real stuff coming \
up here in a few minutes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are most plainly evident in fully developed hypomanic \
states; in full-blown mania, however, they undergo progressively severe \
exacerbations and become more and more obscured by other signs and symptoms, \
such as delusions and fragmentation of behavior.Mania is a syndrome with \
multiple causes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"George Harrison joined the band in early 1958 at McCartney's \
recommendation, though Lennon initially resisted because he felt Harrison \
(still 14 when he was first introduced to Lennon) to be too young.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A perchlorate is the name for a chemical compound containing \
the perchlorate ion, ClO4.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll be okay.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Wether Holm (disambiguation), several of the Shetland \
Islands, Scotland\\nThomas Wedders\\nGustav Weder, Swiss \
bobsledder\\nshortening of Wedderborg\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I want to do something...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Corn starch, cornstarch, cornflour or maize starch or maize \
is the starch derived from the corn (maize) grain.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It includes the horizontal transport of ore, coal, supplies, \
and waste, also called cartage or drayage.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Winged adults lay eggs on the food plant on which their \
larvae, known as caterpillars, will feed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Paula.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Among Orthodox Jews, \\\"shtick\\\" can also refer to wedding \
shtick, in which wedding guests entertain the bride and groom through \
dancing, costumes, juggling, and silliness.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"By contrast, papal claims of spiritual authority have been \
increasingly firmly expressed over time, culminating in 1870 with the \
proclamation of the dogma of papal infallibility for rare occasions when the \
pope speaks ex cathedraliterally \\\"from the chair (of Saint Peter)\\\"to \
issue a formal definition of faith or morals.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Intellectual cruelty is certainly the worst kind of \
cruelty.\\\"\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Magua understand paleface is a dog to his women.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"If I'm ever in New York..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Low mileage...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Owing largely to the influence of Plato and Aristotle, \
philosophy came to be regarded as distinct from sophistry, the latter being \
regarded as specious and rhetorical, a practical discipline.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At three, she was sent to California to be trained by Charlie \
Whittingham.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"rom antiquity until the present day, the influence of the \
Homeric epics on Western civilization has been great, inspiring many of its \
most famous works of literature, music, art and film.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Ancient China received tribute from various states such as \
Japan, Korea, Vietnam, Cambodia, Borneo, Indonesia, Sri Lanka, Nepal, Myanmar \
and Central Asia.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Maria Mitchell.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Begging (also panhandling or mendicancy) is the practice of \
imploring others to grant a favor, often a gift of money, with little or no \
expectation of reciprocation.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Sunless may refer to :\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The typical abbreviation and mathematical variable name for \
radius is r.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Detective Greenly.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Royce.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Jake...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"However, if the distinctions between the two concepts appear \
to be superficial, intentional conflation may be desirable for the sake of \
conciseness and recall.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The earliest known life forms are microfossils of bacteria.\"\
\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When a sink becomes clogged, a person will often resort to \
use a chemical drain cleaner or a plunger, though most professional plumbers \
will remove the clog with a drain auger (often called a \\\"plumber's snake\\\
\").\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Look Jason I need some fast answers if I'm ever gonna fix \
what I've done.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The traditional French \\\"Mesdemoiselles\\\" (abbreviation \
\\\"Mlles\\\") may also be used as the plural in English language \
conversation or correspondence.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Must have been very fancy if he scratched her phone number in \
gold.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In parts of England, especially Devon and Cornwall, it refers \
to an outshot, or additional projecting part at the back of a terraced house, \
normally with its own roof.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"Bottling lines are production lines that fill a product, \
generally a beverage, into bottles on a large scale.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In 195152, he served as the first Supreme Commander of \
NATO.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The most common shapes are called open-ended spanner and ring \
spanner.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A protest (also called a remonstrance, remonstration or \
demonstration) is an expression of bearing witness on behalf of an express \
cause by words or actions with regard to particular events, policies or \
situations.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Firstly, it may present itself as a sentimental and \
benevolent gesture.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And what he did . . ..\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Robin Miriam Carlsson (born 12 June 1979), known as Robyn, is \
a Swedish singer, songwriter and record producer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The unit of measurement varies by region: a United States \
tablespoon is approximately 14.8 ml (0.50 US fl oz), a United Kingdom and \
Canadian tablespoon is exactly 15 ml (0.51 US fl oz), and an Australian \
tablespoon is 20 ml (0.68 US fl oz).\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Umm that also has already happened.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It's not that easy..we've never encountered anything like it \
before..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You are being in luck.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The languages of the Dravidian family, spoken mostly in \
Southern India, include Tamil and Telugu.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Object-oriented programming makes use of indirection \
extensively, a simple example being dynamic dispatch.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now sit the fuck down!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We'll sleep here tonight.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Fencing is a group of three related combat sports.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Not all steps take place in every scientific inquiry (nor to \
the same degree), and they are not always in the same order.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"he human gastrointestinal tract consists of the esophagus,  \
stomach, and intestines, and is divided into the upper and lower \
gastrointestinal tracts.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Not true Cadet I've got a gun -- We've found all of \
them.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"An accident is an attribute which may or may not belong to a \
subject.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Wait here...\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It also may serve to aid in suspension of disbelief.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Dears it's overwhelming.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Metaphysics seeks to answer, in a \\\"suitably abstract and \
fully general manner\\\", the questions:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Different types of yarns (fibre type, texture, and twist), \
needle sizes, and stitch types may be used to achieve knitted fabrics with \
different properties (color, texture, weight, heat retention, look, water \
resistance, and/or integrity).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"It usually follows military occupation of a territory.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Selenium is a chemical element with symbol Se and atomic \
number 34.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I want to get the big bag of little donuts.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Because of the nature of its business, as stated in the \
corporate charter, Teletype Corporation was allowed a unique mode of \
operation within Western Electric.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some adherents believe this event is predicted and described \
in Paul's First Epistle to the Thessalonians in the Bible, where he uses the \
Greek harpazo (), meaning to snatch away or seize.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"And that's why I'd like to be able to help you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"At the end of the Cold War and the dissolution of the Soviet \
Union in 1991, only the United States appeared to fulfill the criteria of \
being a world superpower.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Rost is a famous Bengali dish originating in Bangladesh.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is not to be confused with the Saussurean tradition called \
semiology, which is a subset of semiotics.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In modern common usage the term \\\"zither\\\" refers to \
three specific instruments: the concert zither (German:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They are often used to support items that might be useful \
during the night, such as a table lamp, alarm clock, reading matter, phone, \
eyeglasses, desktop intercom, a drink, or medication.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"It is the same in other Indo-European traditions, for example \
the Vedic Vajra.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"There are Cossack organizations in Russia, Kazakhstan, \
Ukraine, Belarus and the United States.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I see you're still in the neighborhood.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"They went along with the sound of a tinny piano playing in \
the parlor downstairs Mister I met a man once when I was a kid it'd always \
begin.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The baroque style used contrast, movement,  exuberant detail, \
grandeur and surprise to achieve a sense of awe.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Another notable port, Chornomorsk, is located in the same \
oblast, to the south-west of Odessa.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've been worried we might lose you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"This part of town they'll make us for heat the second we walk \
in.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I'll see you Thursday.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But not to put too fine a point on it fuck yourself \
Harry!\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The goal of evil is to wipe out life!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Little is known of the first 40 years of his life as only \
four of his personal letters survive alongside a summary of a speech he \
delivered in 1628.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"That was before Twombley was shot.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The most common form of the slave trade is now commonly \
referred to as human trafficking.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"Editing is the process of selecting and preparing written, \
visual, audible, and film media used to convey information.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Get `em ready.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"I said Good morning!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Some sensors can also affect what they measure; for instance, \
a room temperature thermometer inserted into a hot cup of liquid cools the \
liquid while the liquid heats the thermometer.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've felt it.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"A how-to is an informal, often short, description of how to \
accomplish a specific task.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   
   RowBox[{"\<\"The plant belongs to the nightshade family, Solanaceae.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Bunkers deflect the blast wave from nearby explosions to \
prevent ear and internal injuries to people sheltering in the bunker.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Logarithmic spiral or equiangular spiral, a type of \
geometric spiral.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Now now darlin'...\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"We'll start a fire --  -- and get rid of these microbes.\"\>",
     "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"He takes a girl without a penny -- a girl that has been \
flinging herself at the head of every man in these parts these ten years past \
and missing them all and a boy who ought to be attached to your uncle as to \
your father.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Mother and Father think I've joined you.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I've got to get away from here!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Totality may refer to:\\nIn astronomy, the state or period of \
an eclipse when light from the eclipsed body is totally obscured:\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"You just stay out of trouble Homer!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"All our friends..\"\>", "\[Rule]", "\<\"Not a Question\"\>"}],
    ",", 
   RowBox[{"\<\"He took care of me.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Book artists or specialists in book decoration can also \
greatly enhance a book's content by creating book-like objects with artistic \
merit of exceptional quality.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Got it. 15 sir.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"For the piece of information to be considered blackmail, the \
information obtained must contain items that the victim does not want \
revealed.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"China is the world's largest producer of cotton, but most of \
this is used domestically.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"The Lifeline is divided that way.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Well yes.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I don't know it sounds like a good daydream but actually \
doing it is too weird.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"But before I can get him back here you will have to help \
me.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In many of these plants, only the male flowers form catkins, \
and the female flowers are single (hazel, oak), a cone (alder) or other types \
(mulberry).\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In an organization with voting members, the board is \
accountable to, and might be subordinate to, the organization's full \
membership, which usually vote for the members of the board.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Look at them separate the dye packs.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A total of 3.3 million deaths (5.9% of all deaths) are \
believed to be due to alcohol.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], 
   ",", 
   RowBox[{"\<\"Blowpipe (tool), used to direct streams of gases into any of \
several working media\\nBlowpipe (Transformers), several Transformers \
characters\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I can show you a few things but after that you're on your \
own.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Besides there's half a forest between us and them they can't \
see a goddamned thing.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"When the molecules of the liquid collide, they transfer \
energy to each other based on how they collide.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"I -- How did you -- You blush!\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Unlike overcoats, topcoats are usually made from lighter \
weight cloth such as gabardine or covert, while overcoats are made from \
heavier cloth or fur.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"A collection of glosses is a glossary.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"In classical mythology, Hercules is famous for his strength \
and for his numerous far-ranging adventures.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"While hunting of wild animals is still common in Russia, most \
fur in the market is now commercially farmed.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"-- Hey I got a better chance of being hit by a bus then \
moving up.\"\>", "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
   RowBox[{"\<\"Members of the Bundestag (Mitglieder des Bundestages) are \
usually elected every four years by all adult German citizens in a mixed \
system of constituency voting and list voting.\"\>", 
    "\[Rule]", "\<\"Not a Question\"\>"}]}], "}"}]], "Output",
 CellChangeTimes->{3.740235316913772*^9, 3.740235373515254*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"661d721c-73d0-45e7-9811-17cf5653e3ae"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classesq3D", "=", 
  RowBox[{"createClasses3D", " ", "[", "classesqs2400", "]"}]}]], "Input",
 CellChangeTimes->{{3.740174965913498*^9, 3.740174978320307*^9}, {
  3.74018173328345*^9, 3.740181742074688*^9}, {3.740181806514436*^9, 
  3.740181827294532*^9}, {3.74018640418911*^9, 3.740186482620908*^9}, {
  3.740193969743019*^9, 3.740193975197187*^9}, {3.740235163444772*^9, 
  3.740235258664216*^9}, {3.7402353328484907`*^9, 3.740235382254469*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"acc5da05-a365-477f-ae92-e56a51691613"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"How come The Simpsons predicted things correctly \
(see the image).\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "2", ",", "15", ",", "4", ",", "12", ",", "15", ",", "7", ",", 
                "2", ",", "13", ",", "15", ",", "4", ",", "7", ",", "13", ",",
                 "13"}], "}"}], ",", "1"}], "}"}], 
            "\[Rule]", "\<\"Question\"\>"}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\<\"What'd the girl say.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "4", ",", "15", ",", "4", ",", "7", ",", "15", ",", "13"}], 
               "}"}], ",", "1"}], "}"}], "\[Rule]", "\<\"Question\"\>"}], ",", 
           TemplateBox[{"2396"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"What is it like to participate in the Jagriti \
Yatra.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "11", ",", "15", ",", "11", ",", "10", ",", "10", ",", "15", 
                ",", "10", ",", "4", ",", "12", ",", "12", ",", "13"}], "}"}],
               ",", "1"}], "}"}], "\[Rule]", "\<\"Question\"\>"}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\<\"What was Ramanujan's IQ.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{"11", ",", "15", ",", "12", ",", "12", ",", "13"}], 
               "}"}], ",", "1"}], "}"}], "\[Rule]", "\<\"Question\"\>"}]}], 
          "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 32, 31682286249248219936, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 32, 31682286249248219936, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 32, 31682286249248219936, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[31682286249248219936 === $SessionID, 
   Out[32], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740235647050009*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"1d434127-c03c-49b1-b3c3-73baa1654308"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classesnq3D", "=", 
  RowBox[{"createClasses3D", " ", "[", "classesnotqs2400", "]"}]}]], "Input",
 CellChangeTimes->{{3.7402353841787033`*^9, 3.740235384696294*^9}},
 CellLabel->"In[33]:=",ExpressionUUID->"ea6b8975-9f0e-406a-aba9-9e0b42017dca"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          TemplateBox[{"1"},
           "OutputSizeLimit`Skeleton"], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 33, 31682286249248219936, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 33, 31682286249248219936, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 33, 31682286249248219936, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[31682286249248219936 === $SessionID, 
   Out[33], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740237827679585*^9},
 CellLabel->"Out[33]=",ExpressionUUID->"239106b5-5e45-48ae-883e-e74296ce8cde"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"train3DJoined", "=", 
  RowBox[{"Join", "[", 
   RowBox[{"classesq3D", ",", "classesnq3D"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"train3D", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"train3DJoined", ",", "4000"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"validationset", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"train3DJoined", ",", "train3D"}], "]"}], ",", "300"}], "]"}]}],
   ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testset", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"train3DJoined", ",", "validationset", ",", "train3D"}], "]"}], 
     ",", "400"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{3.7402378396926813`*^9},
 CellLabel->"In[34]:=",ExpressionUUID->"f396e2c8-171e-47cb-9d07-66cd33c817a6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"How come The Simpsons predicted things correctly \
(see the image).\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "2", ",", "15", ",", "4", ",", "12", ",", "15", ",", "7", ",", 
                "2", ",", "13", ",", "15", ",", "4", ",", "7", ",", "13", ",",
                 "13"}], "}"}], ",", "1"}], "}"}], 
            "\[Rule]", "\<\"Question\"\>"}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\<\"What'd the girl say.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "4", ",", "15", ",", "4", ",", "7", ",", "15", ",", "13"}], 
               "}"}], ",", "1"}], "}"}], "\[Rule]", "\<\"Question\"\>"}], ",", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"You know what we do to welchers Cluett don't you.\"\
\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "11", ",", "15", ",", "11", ",", "11", ",", "15", ",", "10", 
                ",", "7", ",", "12", ",", "15", ",", "2", ",", "11", ",", 
                "13"}], "}"}], ",", "3"}], "}"}], 
            "\[Rule]", "\<\"Question\"\>"}], ",", 
           TemplateBox[{"4795"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"-- Hey I got a better chance of being hit by a bus \
then moving up.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "13", ",", "5", ",", "11", ",", "15", ",", "4", ",", "1", ",", 
                "7", ",", "10", ",", "15", ",", "15", ",", "10", ",", "4", 
                ",", "7", ",", "2", ",", "15", ",", "9", ",", "13"}], "}"}], 
              ",", "0"}], "}"}], "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"Members of the Bundestag (Mitglieder des \
Bundestages) are usually elected every four years by all adult German \
citizens in a mixed system of constituency voting and list voting.\"\>", ",", 
              
              RowBox[{"{", 
               RowBox[{
               "7", ",", "10", ",", "4", ",", "12", ",", "13", ",", "12", ",",
                 "6", ",", "12", ",", "13", ",", "15", ",", "2", ",", "15", 
                ",", "4", ",", "8", ",", "7", ",", "10", ",", "4", ",", "1", 
                ",", "1", ",", "7", ",", "10", ",", "4", ",", "1", ",", "7", 
                ",", "10", ",", "7", ",", "7", ",", "3", ",", "7", ",", "7", 
                ",", "13"}], "}"}], ",", "0"}], "}"}], 
            "\[Rule]", "\<\"Not a Question\"\>"}]}], "}"}],
         Short[#, 10]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 34, 31682286249248219936, 10/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 34, 31682286249248219936, 10 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 34, 31682286249248219936, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[31682286249248219936 === $SessionID, 
   Out[34], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.7402378422012453`*^9},
 CellLabel->"Out[34]=",ExpressionUUID->"b0060f1e-0151-407d-909b-19caef69237b"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"If that was your knife Muddy I wanna thank you for \
givin' it to her-- no girl should be goin' *hitch-hikin'* if she don't got a \
good knife with her.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "10", ",", "4", ",", "15", ",", "11", ",", "7", ",", "12", ",",
                 "11", ",", "15", ",", "10", ",", "15", ",", "11", ",", "10", 
                ",", "7", ",", "13", ",", "11", ",", "10", ",", "11", ",", 
                "13", ",", "4", ",", "7", ",", "15", ",", "15", ",", "7", ",",
                 "13", ",", "14", ",", "15", ",", "13", ",", "14", ",", "10", 
                ",", "11", ",", "15", ",", "2", ",", "15", ",", "4", ",", "1",
                 ",", "7", ",", "10", ",", "11", ",", "13"}], "}"}], ",", 
              "0"}], "}"}], "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\<\"What's Earl doing here.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "11", ",", "15", ",", "12", ",", "15", ",", "2", ",", "13"}], 
               "}"}], ",", "1"}], "}"}], "\[Rule]", "\<\"Question\"\>"}], ",", 
           TemplateBox[{"3996"},
            "OutputSizeLimit`Skeleton"], ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\<\"I mean these offices and everything.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "11", ",", "15", ",", "4", ",", "7", ",", "3", ",", "7", ",", 
                "13"}], "}"}], ",", "0"}], "}"}], 
            "\[Rule]", "\<\"Not a Question\"\>"}], ",", 
           RowBox[{
            RowBox[{"{", 
             
             RowBox[{"\<\"Simple choices might include what to eat for dinner \
or what to wear on a Saturday morning  choices that have relatively \
low-impact on the chooser's life overall.\"\>", ",", 
              RowBox[{"{", 
               RowBox[{
               "1", ",", "7", ",", "15", ",", "15", ",", "11", ",", "10", ",",
                 "15", ",", "10", ",", "7", ",", "3", ",", "11", ",", "10", 
                ",", "15", ",", "10", ",", "4", ",", "12", ",", "7", ",", "7",
                 ",", "4", ",", "15", ",", "2", ",", "1", ",", "10", ",", "4",
                 ",", "7", ",", "7", ",", "2", ",", "13"}], "}"}], ",", "5"}],
              "}"}], "\[Rule]", "\<\"Not a Question\"\>"}]}], "}"}],
         Short[#, 10]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 35, 31682286249248219936, 10/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 35, 31682286249248219936, 10 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 35, 31682286249248219936, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[31682286249248219936 === $SessionID, 
   Out[35], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.74023784230086*^9},
 CellLabel->"Out[35]=",ExpressionUUID->"93e29bf7-90c6-4acd-84ba-6928f759815d"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extracting all lines from scripts", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"cab4ee65-639b-4750-a1e4-975f2577e569"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  RowBox[{"NotebookDirectory", "[", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.740083890074869*^9, 3.74008389667279*^9}, 
   3.740157035555481*^9},
 CellLabel->"In[58]:=",ExpressionUUID->"d71059b3-665b-4950-867f-9bf72a6d367d"],

Cell[BoxData["\<\"/Users/jofre/Documents/GitHub/Summer2018Zhamilya/Project \
2018\"\>"], "Output",
 CellChangeTimes->{3.7401570360338697`*^9, 3.740157095267673*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"d07504cd-4cf9-458b-bdb7-008023386f33"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"StringSplit", "[", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{"\"\<movie_lines.tsv\>\"", ",", "\"\<Text\>\""}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\\t\>\"", ",", "\"\<\\n\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{3.740084055896326*^9, 3.740157117273651*^9},
 CellLabel->"In[60]:=",ExpressionUUID->"8413af67-812f-44eb-acb6-871039fc40cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lines", "=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Partition", "[", 
       RowBox[{"data", ",", "5"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", 
        RowBox[{"-", "1"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\\\"\>\"", "\[Rule]", "\"\<\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"18054f2b-965c-49cb-8804-2a7fbfca729b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"linesJoined", "=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{"Riffle", "[", 
     RowBox[{"lines", ",", "\"\< \>\""}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.740083962319407*^9, {3.740084014544158*^9, 3.740084017213212*^9}, 
   3.740157130797942*^9},
 CellLabel->"In[62]:=",ExpressionUUID->"6106833c-4a76-4063-a956-dec4209f4060"],

Cell[BoxData[
 RowBox[{"Riffle", "[", 
  RowBox[{"lines", ",", "\"\< \>\""}], "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"eb2ff9fe-4247-4574-abae-11656fdb5bbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lines", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.740084019805112*^9, 3.740084041028945*^9}, {
  3.7400840985562553`*^9, 3.740084099470685*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"14e880f6-e239-45e4-9145-3be8f2c8060e"],

Cell[BoxData["304894"], "Output",
 CellChangeTimes->{{3.740084025857532*^9, 3.74008404152601*^9}, {
  3.74008409311901*^9, 3.740084099902487*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"2dd5deed-1af9-4aab-bf7e-c1bae71d6c03"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"sentences", "=", 
   RowBox[{"TextCases", "[", 
    RowBox[{"linesJoined", ",", "\"\<Sentence\>\""}], "]"}]}], ";"}]], "Input",\

 CellLabel->"In[63]:=",ExpressionUUID->"3fd53a69-1c65-49c9-91ca-518a28b4a4dd"]
}, Closed]],

Cell[CellGroupData[{

Cell["Extracting and modifying questions from lines", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"b49d2da7-adc3-45f2-b7b6-c68f0e7ec730"],

Cell["Replacing \[OpenCurlyDoubleQuote]?\[CloseCurlyDoubleQuote] for \
\[OpenCurlyDoubleQuote].\[CloseCurlyDoubleQuote] and making letters of lower \
case", "Text",ExpressionUUID->"92a8c79e-daf1-4081-b17e-f49b05eabc91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questionsWithQuestionMark", " ", "=", " ", 
  RowBox[{"Select", "[", 
   RowBox[{"sentences", ",", 
    RowBox[{
     RowBox[{"StringContainsQ", "[", 
      RowBox[{"#", ",", "\"\<?\>\""}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740157951329094*^9, 3.740157962320059*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"dedd85af-eeb0-43cf-80b7-74bc2f15bb0a"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"She okay?\"\>", 
           ",", "\<\"You know how sometimes you just become this \
persona?\"\>", ",", "\<\"And you don't know how to quit?\"\>", 
           ",", "\<\"Like my fear of wearing pastels?\"\>", 
           ",", "\<\"What good stuff?\"\>", ",", "\<\"What crap?\"\>", ",", 
           TemplateBox[{"19642"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"Well what's the point of waiting?\"\>", 
           ",", "\<\"It's sixth century B.C.  Do you like the period?\"\>", 
           ",", "\<\"Dance?\"\>", ",", "\<\"Okay?\"\>", 
           ",", "\<\"What are you going to do?\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 73, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 73, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 73, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[73], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740157962825688*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"1cd8f8d6-5d36-4fe5-9e2b-af900e0ba35d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questions", "=", 
  RowBox[{"ToUpperCase", "[", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"sentences", ",", 
       RowBox[{
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"#", ",", "\"\<?\>\""}], "]"}], "&"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<?\>\"", "\[Rule]", "\"\<.\>\""}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740157246024006*^9, 3.740157249015265*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"c5e8a140-ec24-4682-b35a-20a6f28713cc"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"SHE OKAY.\"\>", 
           ",", "\<\"YOU KNOW HOW SOMETIMES YOU JUST BECOME THIS \
PERSONA.\"\>", ",", "\<\"AND YOU DON'T KNOW HOW TO QUIT.\"\>", 
           ",", "\<\"LIKE MY FEAR OF WEARING PASTELS.\"\>", 
           ",", "\<\"WHAT GOOD STUFF.\"\>", ",", "\<\"WHAT CRAP.\"\>", ",", 
           TemplateBox[{"19642"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"WELL WHAT'S THE POINT OF WAITING.\"\>", 
           ",", "\<\"IT'S SIXTH CENTURY B.C.  DO YOU LIKE THE PERIOD.\"\>", 
           ",", "\<\"DANCE.\"\>", ",", "\<\"OKAY.\"\>", 
           ",", "\<\"WHAT ARE YOU GOING TO DO.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 64, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 64, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 64, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[64], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084173714202*^9, 3.7401572922733927`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"fbe5d00d-94d5-4e4c-b98b-102d3458e57d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Extracting and modifying normal sentences from lines", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"7b6c53ad-8577-466a-bfed-e5f158adc6fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"normalLines", "=", 
  RowBox[{"ToUpperCase", "[", 
   RowBox[{
    RowBox[{"Complement", "[", 
     RowBox[{"sentences", ",", "questionsWithQuestionMark"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"80", ";;", "64213"}], "]"}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740157296738432*^9, 3.74015729927142*^9}, {
  3.7401579854680557`*^9, 3.7401579860627728`*^9}},
 CellLabel->"In[74]:=",ExpressionUUID->"a7b6d6cc-7ef0-467e-9dde-60e19e6c7fe6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"AAA!\"\>", ",", "\<\"AAAAAAAAAA!\"\>", 
           ",", "\<\"AAAGH!\"\>", ",", "\<\"AAAHGHHH!\"\>", 
           ",", "\<\"AAAWW SHIT!...\"\>", ",", "\<\"AAH!\"\>", 
           ",", "\<\"A B...\"\>", ",", "\<\"A B-24 LIBERATOR.\"\>", ",", 
           TemplateBox[{"64118"},
            "OutputSizeLimit`Skeleton"], ",", "\<\"ZEKE.\"\>", 
           ",", "\<\"ZERELDA DID.\"\>", 
           ",", "\<\"ZERELDA IT'S NO COINCIDENCE.\"\>", 
           ",", "\<\"ZERO...\"\>", ",", "\<\"ZERO DISTORTION SIR.\"\>", 
           ",", "\<\"ZOD.\"\>", 
           ",", "\<\"ZOE COME SAY HELLO TO YOUR FATHER..\"\>", 
           ",", "\<\"ZOR-EL BUT WHAT CAN YOU A MERE GIRL- SUPERMAN WILL \
RETURN IT.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 74, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 74, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 74, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[74], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.74008417904668*^9, 3.7401573060679903`*^9, 
  3.7401579874821243`*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"9a4341fb-1f3f-4ad4-81f1-7ccd6cf748df"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"normalLines1", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"normalLines", ",", "19653"}], "]"}]}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"262ad8a5-14f2-4740-b5c7-783cf07c0df5"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"I DON'T THINK I'LL BE HAVING SEX EVER AGAIN.\"\>", 
           ",", "\<\"BREE -- MY GOD I THOUGHT IT WAS OVER.\"\>", 
           ",", "\<\"I GOTTA HAVE A JOB WHERE I COME TO WORK AT ELEVEN -- GO \
TO LUNCH AT TWELVE -- AND QUIT AT ONE.\"\>", ",", 
           TemplateBox[{"19648"},
            "OutputSizeLimit`Skeleton"], ",", "\<\"THE FIT ISN'T RIGHT.\"\>", 
           ",", "\<\"THE BET'S OFF.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 76, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 76, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 76, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[76], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084182989924*^9, 3.740157584268127*^9, 
  3.740157999212657*^9, 3.740158039702961*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"c540d6ec-14c7-46f2-9753-7539db0ebb43"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Random Sample", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"df29d1d5-fc99-48cd-ba8c-31b7c9564335"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"trainquestions1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"questions", ",", "13757"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7400792720916224`*^9, 3.740079273377097*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"f5a5e964-4f0a-4b95-af97-34c669344325"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"DID YA GET THE LICENSE NUMBER.\"\>", 
           ",", "\<\"YOU GONNA PULL.\"\>", 
           ",", "\<\"WE'VE KNOWN DEBBIE WHAT SINCE THE EIGHTH GRADE.\"\>", 
           ",", "\<\"JOYCE GIVE THE ASSISTANT CHIEF INSPECTOR A DRINK WOULD \
YOU.\"\>", ",", 
           TemplateBox[{"13749"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"MISS WOLLSTEN SHARES THE ROOM WITH YOU.\"\>", 
           ",", "\<\"WHAT DO YOU WANT TO KNOW EVAN.\"\>", 
           ",", "\<\"WILL THESE BOARDS HOLD.\"\>", 
           ",", "\<\"LIKE MY FEAR OF WEARING PASTELS.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 77, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 77, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 77, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[77], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084189185034*^9, 3.7401573461542387`*^9, 
  3.740157599633017*^9, 3.7401580425672903`*^9},
 CellLabel->"Out[77]=",ExpressionUUID->"9254a232-b237-409f-82e1-f249b2e9a6da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"trainnonquestions1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"normalLines1", ",", "13757"}], "]"}]}]}]], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"d2d17123-2450-4c92-8bfd-9e4f335ae4d6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"JUST.\"\>", ",", "\<\"I HAVEN'T GOT NO CLASS.\"\>", 
           ",", "\<\"AND I'LL BE OUTTA A JOB.\"\>", 
           ",", "\<\"YOU'RE AN INSPIRATION LLOYD; YOU SHOULD GO ON THE SEVEN \
HUNDRED CLUB OR SOMETHING.\"\>", ",", 
           TemplateBox[{"13749"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"I'M SORRY IF I SEEM OVER-ANXIOUS TO YOU.\"\>", 
           ",", "\<\"YOU'RE UNDER AGE.\"\>", 
           ",", "\<\"YOU NEWSHOUNDS'VE BEEN AFTER ME AND MY FOLKS EVER SINCE \
I WON THAT DUMB CONTEST.\"\>", ",", "\<\"THREE...\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 78, 30944156347447667626, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 78, 30944156347447667626, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 78, 30944156347447667626, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30944156347447667626 === $SessionID, 
   Out[78], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084191268667*^9, 3.7401573515036383`*^9, 
  3.740157602227317*^9, 3.740158048061103*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"9d0c226a-1f98-46de-8e8b-e53c969185f2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"validationq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"questions", ",", "trainquestions1"}], "]"}], ",", "2000"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7400792151545753`*^9, 3.740079215829104*^9}, {
   3.740079284827704*^9, 3.740079285582086*^9}, 3.7401580578637943`*^9},
 CellLabel->"In[82]:=",ExpressionUUID->"e9a06111-4bd6-4f73-a69f-7b65f263d0ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"validationnonq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"normalLines1", ",", "trainnonquestions1"}], "]"}], ",", 
     "2000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740079217560535*^9, 3.740079218146028*^9}, 
   3.740158059941605*^9},
 CellLabel->"In[80]:=",ExpressionUUID->"e81c76ef-496b-451f-8f6b-f779b847fb8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"testq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"questions", ",", "trainquestions1", ",", "validationq1"}], 
      "]"}], ",", "2600"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740079220841104*^9, 3.7400792214794273`*^9}, {
  3.7400792915082273`*^9, 3.740079292142103*^9}, {3.740158064044731*^9, 
  3.740158065084379*^9}},
 CellLabel->"In[83]:=",ExpressionUUID->"f56e3b0e-2dc7-4fd9-ae0b-89a1a7a7f4f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"testnonq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{
      "normalLines1", ",", "trainnonquestions1", ",", "validationnonq1"}], 
      "]"}], ",", "2600"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740079223822283*^9, 3.740079224376918*^9}, 
   3.740158106943109*^9},
 CellLabel->"In[84]:=",ExpressionUUID->"cf5afbb1-9047-4c6c-8417-4e467840f6f3"]
}, Closed]],

Cell[CellGroupData[{

Cell["Classify", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"c3e68d7b-1c05-456d-a16e-0a3835c9a007"],

Cell[BoxData[
 RowBox[{"categories", " ", "=", " ", 
  RowBox[{"Union", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"TextStructure", "[", 
               RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{
               "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
               "]"}], "]"}], ")"}], "/.", 
            RowBox[{
             RowBox[{"Missing", "[", "]"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}], 
          ")"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", ",", 
      RowBox[{"questions", "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740085609136063*^9, 3.74008565224747*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"ed243bc7-b166-488c-96c2-e32ab1bcf9e8"],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"partsOfSpeechNumbers", " ", "[", " ", "x_", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Transpose", "[", "\n", 
      RowBox[{"{", " ", 
       RowBox[{"x", ",", "\n", 
        RowBox[{
         RowBox[{"Map", "[", "\n", 
          RowBox[{
           RowBox[{
            RowBox[{"(", "\n", " ", 
             RowBox[{
              RowBox[{"(", "\n", "  ", 
               RowBox[{"(", "\n", "   ", 
                RowBox[{
                 RowBox[{"(", "\n", "     ", 
                  RowBox[{
                   RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], "\n", "    ", ")"}], "/.", 
                 RowBox[{
                  RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                "\n", "   ", ")"}], "\n", "  ", ")"}], "\n", "  ", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "2"}], "]"}], "]"}], "\n", ")"}], " ", 
            "\n", "&"}], " ", ",", " ", "x"}], " ", "]"}], "\n", "/.", " ", 
         "rules"}]}], "}"}], "]"}]}], " ", ";"}], "\n"}], "Code"], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"createClasses", " ", "[", " ", "x_", "]"}], " ", ":=", " ", 
    RowBox[{"Transpose", "[", "\n", 
     RowBox[{"{", " ", 
      RowBox[{"x", ",", "\n", 
       RowBox[{
        RowBox[{"Map", "[", "\n", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "\n", " ", 
            RowBox[{
             RowBox[{"(", "\n", "  ", 
              RowBox[{"(", "\n", "   ", 
               RowBox[{
                RowBox[{"(", "\n", "     ", 
                 RowBox[{
                  RowBox[{"TextStructure", "[", 
                   RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{
                   "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
                   "]"}], "]"}], "\n", "    ", ")"}], "/.", 
                RowBox[{
                 RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
               "\n", "   ", ")"}], "\n", "  ", ")"}], "\n", "  ", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "\n", ")"}], " ", "\n",
            "&"}], " ", ",", " ", "x"}], " ", "]"}], "\n", "/.", " ", 
        "rules"}], ",", "\n", "\n", 
       RowBox[{
        RowBox[{"whQuestionsChecker", " ", "[", " ", "x", " ", "]"}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"True", "\[Rule]", "1"}], ",", 
          RowBox[{"False", " ", "\[Rule]", "0"}]}], "}"}]}]}], "}"}], "]"}]}],
    " ", ";"}], "Code"]}], "Code",
 CellChangeTimes->{{3.740085880916667*^9, 3.7400861347557087`*^9}, {
  3.740086331080839*^9, 3.740086334656097*^9}, {3.740086948951529*^9, 
  3.740086952140627*^9}, {3.740087333034587*^9, 3.740087340185684*^9}, {
  3.7401593177545567`*^9, 3.7401593741683702`*^9}, {3.740237490700727*^9, 
  3.740237491115245*^9}},ExpressionUUID->"f24b21c2-f4e4-4ce9-adab-\
28ec9139ee26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"questions", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "10"}], "]"}], "]"}], ",", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"TextStructure", "[", 
                RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
                "]"}], "]"}], ")"}], "/.", 
             RowBox[{
              RowBox[{"Missing", "[", "]"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}],
            ")"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", ",", 
       RowBox[{"questions", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "10"}], "]"}], "]"}]}], "]"}], "/.", "rules"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7400842525186567`*^9, 3.740084280645115*^9}, {
  3.740084314312044*^9, 3.740084317173037*^9}, {3.7400857395478888`*^9, 
  3.740085759673088*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"e5881c42-c5f6-4ba6-a1de-87adfe55fb2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"SHE OKAY.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "12", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"YOU KNOW HOW SOMETIMES YOU JUST BECOME THIS PERSONA.\"\>", 
     ",", 
     RowBox[{"{", 
      RowBox[{
      "11", ",", "15", ",", "7", ",", "2", ",", "11", ",", "2", ",", "15", 
       ",", "7", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AND YOU DON'T KNOW HOW TO QUIT.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "11", ",", "15", ",", "2", ",", "12", ",", "12", ",", "10", 
       ",", "12", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"LIKE MY FEAR OF WEARING PASTELS.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "10", ",", "12", ",", "7", ",", "10", ",", "15", ",", "7", ",", "13"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"WHAT GOOD STUFF.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"WHAT CRAP.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DO YOU LISTEN TO THIS CRAP.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "12", ",", "11", ",", "15", ",", "10", ",", "12", ",", "12", ",", 
       "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"YOU ALWAYS BEEN THIS SELFISH.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "2", ",", "15", ",", "7", ",", "1", ",", "13"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"YOU NEVER WANTED TO GO OUT WITH 'ME DID YOU.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "11", ",", "2", ",", "15", ",", "10", ",", "12", ",", "12", ",", "10", 
       ",", "13", ",", "12", ",", "12", ",", "11", ",", "13"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"I WAS.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "15", ",", "13"}], "}"}]}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{
  3.740084286458425*^9, 3.7400843179520197`*^9, {3.7400857441644163`*^9, 
   3.740085760682178*^9}, 3.740158159019251*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"bf186162-f187-4f7b-a97d-bf9ad8f4bfd7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "1000"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"questions", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "1000"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"normalLines1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}]}], " ", "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"54f1815f-e286-4c78-b929-24096a8edd1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"questions", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"normalLines1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}]}], " ", "|>"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
  3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
  3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"dd5bebd2-95f7-460e-81d7-b41b2e84a9a0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NominalSequence\""}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NominalSequence\""}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 14240096, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10529582893065609946752054009641029904123381341629919333888, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904123381341629919333888,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740085352583025*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"6b90ff0b-125c-4cbf-9b27-462161bafb5a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"testq1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testnonq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"testnonq1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], " ", "|>"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084572853097*^9, 3.740084657768157*^9}, {
  3.740084695059907*^9, 3.7400846987130327`*^9}, {3.7400848003789387`*^9, 
  3.740084802640071*^9}, {3.740085174101098*^9, 3.74008519280921*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"92773ba6-c513-48fc-b7e8-6215dd347448"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["200", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["200", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.6500000000000000222`3.9561720165653536", 
                    "\[PlusMinus]", "0.0338114785302568513`2."}], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierMeasurementsObject, 14378040, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierMeasurementsObject, 
            10529582893065609946752054009641029904141828085704066753744, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904141828085704066753744,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740084662824913*^9, 3.7400847033442373`*^9, 
  3.74008538891745*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"f4d27a2a-681d-4304-90a6-cddc7955eef6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.740084702672556*^9, 3.740084741556716*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"e12b0564-1f3c-4105-a841-3f359f8fa3f0"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9163480218129639, 0.8023450701347736, 0.4932672899550227}, {
   1., 0.42, 0.}}, {{0.9016438148630552, 0.5177044980841545, 
   0.004896879264460649}, {0.8796675025019278, 0.6437767836873812, 
   0.1740093775089338}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["57", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "57", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6785714285714286`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.57`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6195652173913043`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{57, " examples of ", "Not Question", " correctly classified"}], 
         
         Row[{"Precision = ", 0.6785714285714286}], 
         Row[{"Recall = ", 0.57}], 
         Row[{"FScore = ", 0.6195652173913043}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["27", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "27", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.32142857142857145`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.27`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          27, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.32142857142857145`}], 
         Row[{"Row fraction = ", 0.27}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["43", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "43", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3706896551724138`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.43`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          43, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.3706896551724138}], 
         Row[{"Row fraction = ", 0.43}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["73", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "73", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6293103448275862`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.73`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6759259259259258`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{73, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.6293103448275862}], 
         Row[{"Recall = ", 0.73}], 
         Row[{"FScore = ", 0.6759259259259258}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.57`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.57}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.73`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.73}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "84", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6785714285714286`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{84, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.6785714285714286}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "116", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6293103448275862`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{116, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.6293103448275862}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["100", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["84", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["116", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7400847419678593`*^9, 3.740085395517992*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"b7314f76-072f-4d8c-b6f1-700665964a8f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["With Vector Numbers", "Subsection",
 CellChangeTimes->{{3.740085570283942*^9, 
  3.740085575475913*^9}},ExpressionUUID->"4f87d1e5-e9c2-400c-b56b-\
14ca6ccffed4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", " ", "=", " ", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", " ", "\[Rule]", 
      RowBox[{"First", "[", "#2", " ", "]"}]}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adjective\>\"", ",", "\"\<Adverb\>\"", ",", "\"\<Conjunction\>\"", 
      ",", "\"\<Determiner\>\"", ",", "\"\<Interjection\>\"", ",", 
      "\"\<Missing\>\"", ",", "\"\<Noun\>\"", ",", "\"\<Numeral\>\"", ",", 
      "\"\<Particle\>\"", ",", "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", 
      ",", "\"\<ProperNoun\>\"", ",", "\"\<Punctuation\>\"", ",", 
      "\"\<Symbol\>\"", ",", "\"\<Verb\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.740085705554276*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"ab593a78-068a-4748-ad79-479c6bfcab2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Adjective\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Adverb\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"Conjunction\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"Determiner\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"Interjection\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"Missing\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"Noun\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"Numeral\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"Particle\"\>", "\[Rule]", "9"}], ",", 
   RowBox[{"\<\"Preposition\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"Pronoun\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"ProperNoun\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"Punctuation\"\>", "\[Rule]", "13"}], ",", 
   RowBox[{"\<\"Symbol\"\>", "\[Rule]", "14"}], ",", 
   RowBox[{"\<\"Verb\"\>", "\[Rule]", "15"}]}], "}"}]], "Output",
 CellChangeTimes->{3.740085709225148*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"da6a0587-bc3d-4810-b62f-a1e1ad284771"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"questions", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"normalLines1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                   ")"}], ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
              ",", 
              RowBox[{"validationq1", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}], "/.", 
            "rules"}]}], "}"}], "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                   ")"}], ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
              ",", 
              RowBox[{"validationnonq1", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}], "/.", 
            "rules"}]}], "}"}], "]"}]}]}], " ", "|>"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, 3.74015750254681*^9},
 CellLabel->"In[46]:=",ExpressionUUID->"7c99db0d-c727-4d26-826f-ec0910fc5904"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1000, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
              "], "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
             9.465786466929034, "StandardDeviation" -> 4.511821128433264, 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", ":", ";", 
                    "\"", "'", "(", ")", "$", "%", "&", "@", "*", "-", "+", 
                    "=", "[", "]", "{", "}", "\\", "|", "\\", "<", ">", "/", 
                    "~", "`", "#", "^"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUnONjtShe8AMafZAAtAct8soSRGLIEBEiMGsDM2yHlOOuL9qSqqbvh7
M512ONoT4X/5j//+9//8v7//66//+bu//vrr3/7rf/73b/+s//Gvt9V66rz3
zlPHXbOUN1DXGWu3WVdbrfVabw70tU8f7cxzxjwzB8Ztc+j/9mij3dl/A+us
XmYvRX+/9A8xUE/vd5x9jyYx6t45UEZfpe5zbr+39vhFuWeJMsfdS7/oI6Zb
jh7V6tj7lNP0g/PHQNFHMNJXq6vmwNIHltY13db7Lr9H6a/G1ufV0vUxN1++
m758TP13PbPulb9oPL/xrHluPS1fXvup+3b9+4y2yo4lKaXrA8rSJ6za9olZ
He3EaZqzxrQ09e4cWFtjRSt2u6a3+o6BUbTwRf8959pVU4gBNq2XzSqOMrVb
MdBGnVouvWhqd1e+49xdZpl3bL18ztpLDLBWp3Z2uO6q/8TAKmVv9muxGefG
O2COPke5Wzs1tCa/AX2IFn5oZepuZ+U7xDW1tLt701DTnr0BHn+GFmoPkfW2
eDn/855ZxLtzLL3lxsDQamgHNxs1xKs9Bqq46ex15p5VXFJirZa+vY5T5u5i
Em3kygFNS3OpYpetCbabA9pVcdSY4hE98MSsxN9d+zTmGlXL1kv+Qg+ZdTb9
n14g9v4NFK1V0VIO7Zh4tMXAvGVoJfpdlwOx8xf9lMKbzuy7ajdrDmgq9Vy+
Q8tVxvoNNFh6rMk2aslioG3xgNj8NHGQViRfXsvW09vUNtY1/5gVm61Xa2Mk
BEqZIwb046Xjqe/QYSi3999A1RqKu25bc/ZkhrnhTB3mAeuWVuIX2k9OoFa8
w/XawxjoeoO4QQu5Kv8zZjXb0KHRrusUnDLKiv0Qsx598Gj6wSn1zpIDElE6
hbtKqExtef5Cf6VVmRcReEev+YvCqdR6HO2sREfyrhZPKzeGBMfRV7QafDV2
FdM1SSbRYKAcGLuwkvqgzt/niRo6l10yY1Z99tSux9ZKpOqPR2dpJCBWyF0N
iBuQYlMf0bX7sR/iJi13sXg/rWk1Y0D7cMWGlTO1YNQcgN936TojkhI9uUQL
NeBGydipRf/Jq64dLUvcXuF2sW+8QwJvF8mRdiSEmj48HyU5NvmP1gmJkWsl
idikVvrUTPUOidscGPpHHbap/4i1cj86B2DoLIupmza55Dv0Eu2S2FFHR5w4
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

                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJzFGn1o1VX0bW8fbe4939x8usbCTBglFUQW8aCFOYeSyIRl5SS1JxkmQW2y
wlCHlSvCzGXLxMfqGWKCSyFSCd/STbZHNgqD0fpY1lZKwaLCFbX+eef34Pw4
nHPuvW/9dbj397v3fNzzfe+NG55atTEvEAicLAoEwrXdO8YGalL7ur5PNd07
NwVjDOH70Le9824oqPYgfH9g7I/Rq/Eq3zwFuf9OvNCxeHJ4JksHhyeciLbf
lIimPjl3OP/Lh+ew/wMfHN1S/GPrrtscf6lCjZeig6PPll7p+Uj/o/QK86Gl
T0oPuW9GLyh6OHtwBaMrPtpZW1fO/tdxePn9E1OV7LniMccHJR+8jtpXq49t
r1VeWpYX9c1Ptf/12Fe/z/LhWXrf6a4vloTJdVJ9wPLDY60/0PKt9Y+m9ujK
fgD+k/fg7FOtEXYd6MPSReOL6y9m9XnTK6PJljsqSXnhc6D8PpZjU2Nw/att
s0m75uzCVp5tnx56Pp0/yxtDfAFI2Z0xXuSvpH4VQ6Dvs+6TZx7/JiTWW8D3
7MWaa4eGi631lMofOLvh9qf8OLU/PjdKr6X+ltRL5P+eLp/3VnJohtp/YLo9
/4j0Uep3bf2E1p9QcmX3R/rvmn4Yc3K0jQPavCK4tWbhmZ5SnxynKx5gfdPK
V00n4b+l+KV+/9EXiyuSPWFj+lyfsynU6t9I+plfR/eXpBYuya8/9mQ5Kaf1
ex9q3h6KiOMJjHH81vp5GOM8Qqt/pnpiWl/h+TmlC/L6TmT9CM5zGjp/u7Zl
T+m02S+GEKe0dTHkc5zeU/UDZxeAB8PNVeMfd8ey8RLopuIazLuyww9XPnHX
yoO0vWDI2YGtHQNfXekD57c2BXOuL+WxHR3NR+X5CsDYskWtO2PZ/seq8XcT
PS3++KrNz6Fe5OTJ2bltHcjpt+m547wb72N6Hhz92nho2leDdaZ4KbvX7ofp
6tuyILm2pUCel1pCSn6AB9cTnLwpfzc8WT94YUXItz9nJ6Z8H6m6ecbB3ghr
p9Q5eGOUbwEdUr2T1uGX3hu8sqnx77O25ymNj1J/ZeuXAJ9p/Qf7Y3mnC++8
5+tgodoflG249erItlBq17b+d0KdlT5+W9cd3dX3M5934nN8/4PBs3Wfl6jt
FdNr26fDMF73b/qNEj9dGM9U7enrBxv5Ppv23PC5Y7zUd0qPYB3Ecan+SeOs
9Lxd7cP1a7T7UXUEJ1dKLyn9oSCum6T4PJjxt5RctPkMxTfOC7Xn3lK2PVb0
nL9+l+oH9tMU3ZQ/x3jmv3lud/xKwDpvuBBPJP88IPd/UnlBPcrlp9gfYjuR
1vMAcd0krcfAX0jvs7h8xtSOpets76fwPCVvDmJ5g51I10vfAYA+UfTZ6q/a
b2UglVeY7iv1Z2oo7CMOrb57/pphv58Euil75fTMFR9gp6D/ua6b4L5Dm/9j
u+bu3aXy8exeeT/BykOqH5Z9S+hTua5rKbrw/HcN+5svd/3g1V17C/ujE6sv
++owjs+XHzm1u6AhW4/Y9v2k8qDqB+n/HD6uz6F9N+ThyegX5GF4Xsu3a70x
xuv4npCUn5BeWz/bG6suqLjdXxe6el8wtDbRHr0l2/ew7T9wfX6o//F3rb1i
Ojk7ocbc+URGZvZPRvj8SZp3cvGx+ra5xb0/hcXyoOwBz0PcpPjm6Mf9Wufv
W5h9AL+pPeH7JNf+AeM58vrE+c63y4z9HP4O/RbX+RVV73D0e+uJ/JSyR9fy
p97X2srDFX14P7Bvbp20j++afnx/a/ruhOPT24/QH4ofiB/4P3iv4OqcbNfb
2il7/5npF2vpdtWHxX2x6X6PRMmb48/VewAcr6Fvh/0c1Fdcn1eKN1fv5m3l
AH0X032ouPB/8wdw+cbGfQM/Fqn5kN6PePxm/OEvewbWHC8KenLl7oFd3Vvh
vh7XVwX64V2ZFI9W73P9ni5XeSFlr5C3UOf1H3AqPUk=
                    "], 
                    "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
               Span[1, 1715], 
               Span[1716, 1716]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                  "], "Type" -> 
                 "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             821998144885263164]]}, "Invertibility" -> "Impossible", 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4779017560470115588]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             2739954230257633601, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7071693056549462440]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "Not Question" -> 0.49999999999999994`, "Question" -> 
        0.49999999999999994`]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Speed", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> 
         RawArray["Integer16",{20, 20, 29, 77, 96, 113, 118, 211, 246, 256, 
           256, 263, 313, 373, 373, 447, 496, 536, 556, 556, 569, 569, 569, 
           589, 619, 632, 632, 632, 632, 675, 675, 675, 675, 675, 733, 738, 
           738, 738, 738, 751, 776, 776, 776, 813, 818, 818, 840, 881, 885, 
           928, 938, 938, 938, 938, 938, 938, 973, 1019, 1111, 1153, 1169, 
           1169, 1169, 1169, 1169, 1169, 1169, 1171, 1171, 1171, 1171, 1171, 
           1171, 1171, 1171, 1171, 1171, 1171, 1178, 1178, 1178, 1243, 1281, 
           1295, 1317, 1317, 1388, 1398, 1463, 1475, 1484, 1484, 1498, 1578, 
           1581, 1638, 1638, 1652, 1652, 1674, 1716, 1716, 1716, 1716, 1716, 
           1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
           1716, 1716, 1716, 1716, 1716, 1716}], 
         "NumericalThresholds" -> CompressedData["
1:eJwdkFtIEwAYhdfQtSgTI8NSgzmaLRXGMnFTtqZ7qKwlTseESKcoodOhXYbT
6IJhtsJmcxv2IDirSZqDHhpr/xEmTDCTYGCBZoXOVmbTdVGELtsevsM55+Hn
53BqdGX1TAaDcZEdkTKNXtbaqmlTsqKhTqM9KtRui1hDhLjmDGhdFlKqE8eF
yfNoTEnDy5UMzLlvwawI0oW0vXjyrhLbxUokc6yo2K0Cy5uA1VA/LfzZosyk
BHza8sNuyEeDPUgfvTbkcgXIr3pN9Z9tCIgZ403lvYjyMEeA96E9+F2txsyY
CMVZm2Rc+0a5VQ76XtOP0QM5MLge0eKwlkY8a5547wZ1+CQoV6SjXDVLu4Jq
YvPMEPKYKAp8id1eH5mkIV8W4kNNEFWrkL4uxPme/dhsZ2GiVk7HSty4tjCA
n3YrDYivYqrwBjoauPgXZkKJQTrXeZPeGvlU8ZfjKXp1G6XO6zhx6DKe1+rw
TFYXY1FwBtPhU5H+F02Hp+jSrI2OHHQg9bAMga5OOr60Qj3yZRp7+oIqd+hg
0ktxutQa+1FecBYzSQ8gmp9AX4cdVW+GoYAFjn1JYKSYwN6ZF9nGAp4rG/da
SmC+kjcuVz3GV54Npo1u6O7r0X0nER+a/NTm7KfGvl4a9XVR5nIxTS41e+62
bxbwnT8KtwZ5kihzAbnEcNIjca/6JTUtcVIjN1XK52dL/wNL/RDu
          "], 
         "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVkVOUFQAARG/ebNu23Xay283eajM3959t27Zt27Ztd3t9zMy5Z/5mMrbt
GdIhMtAnKGAhYQOCIyLCBoXGDED1Hn3DO4ZHFCzW6X8/OKD/WZ/4bDcmf03N
ShPxx9/OsRCVGEQsSrHR0lz3mnFpRD8O+8yn9iYBt8zLSU+YkUwsMj87TUMw
KelLf36ZgeKk54yZGWkqRtiWKuRgk+HssSlXvGwHFvvFMhwwLQWpyDHrcc6z
tiIeJcjFDjvz0ZL89IdhlOeJj41GMi543osmZK4dWW0XdpuYSYbwyIf2YZjV
+e4Kl7vUJeYhCm9tzVXbsMoYvLM9LyzMTW/YnAb04rijHWX2wBLZ0IUusBs1
+ewnt7rFiU7wg+99bh2mOdUgulKWN5bjgUc94n6bcMfbjnWMLYjNV0NJx10b
0pgI8rHLZlSlHdtsyTe788pabHC9WUhBbrJSlzjkpCjDLcJmB/DSSKwxOfPs
QTVmGpVidKIAy+zJfe85w+nWDjw321lWJimHPOhpT1mBSw51iFOc7D73moSB
rHOt4x1ndOZbg9f+A4C//o8=
          "], "LeafValues" -> 
         RawArray["UnsignedInteger8",{{101, 1}, {3, 1}, {2, 2}, {1, 8}, {1, 
           5}, {1, 4}, {3, 1}, {1, 58}, {1, 11}, {1, 12}, {1, 3}, {3, 1}, {1, 
           2}, {3, 1}, {1, 3}, {2, 1}, {1, 3}, {3, 1}, {5, 23}, {1, 4}, {1, 
           4}, {1, 3}, {4, 2}, {1, 3}, {3, 1}, {1, 9}, {1, 3}, {4, 1}, {3, 
           1}, {17, 30}, {8, 10}, {1, 4}, {7, 2}, {4, 2}, {3, 1}, {1, 3}, {2, 
           2}, {12, 1}, {7, 4}, {1, 3}, {2, 1}, {2, 2}, {2, 2}, {1, 7}, {1, 
           5}, {1, 6}, {2, 2}, {18, 1}, {1, 4}, {3, 1}, {2, 2}, {4, 1}, {1, 
           2}, {3, 1}, {1, 14}, {2, 2}, {2, 2}, {3, 2}, {4, 1}, {75, 1}, {1, 
           3}, {2, 1}, {6, 1}, {2, 2}, {2, 2}, {7, 1}, {3, 1}, {7, 1}, {2, 
           2}, {3, 1}, {1, 4}, {1, 3}, {2, 2}, {3, 1}, {1, 2}, {3, 3}, {3, 
           1}, {1, 3}, {2, 2}, {1, 172}, {2, 13}, {2, 2}, {3, 1}, {1, 3}, {1, 
           3}, {1, 3}, {1, 4}, {2, 1}, {12, 1}, {3, 1}, {1, 3}, {1, 10}, {1, 
           3}, {1, 3}, {3, 1}, {1, 2}, {3, 8}, {1, 3}, {2, 2}, {5, 1}, {1, 
           4}, {2, 3}, {6, 1}, {1, 2}, {2, 7}, {2, 1}, {1, 3}, {5, 1}, {2, 
           2}, {9, 3}, {9, 3}, {1, 6}, {6, 1}, {2, 2}, {80, 1}, {3, 1}, {1, 
           3}, {2, 2}, {2, 2}, {2, 2}, {28, 1}, {2, 2}, {6, 1}}], "RootIndex" -> 
         67, "NominalDimension" -> 0]], "Processor" -> 
      MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
              "], "Type" -> 
             "NumericalVector"]], "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "DecisionTree", "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
         PlusMinus[0.5000000000000003, 0.07070378035792256], "EvaluationTime" -> 
         9.430000000000001*^-6, "TestSize" -> 100, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.007552, "TrainingMemory" -> 335168, 
         "ModelMemory" -> 61032, "ExperimentCount" -> 1, "ModelUtility" -> 
         7.558128955599508, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.5000000000000003, 0.04999512254661126]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 1000], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 115637842022351]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3537612653541005`, 0.4268209940989989], "Accuracy" -> 
              PlusMinus[0.4504950495049506, 0.07029074724332993], 
              "EvaluationTime" -> 0.00017394, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.049436, 
              "TrainingMemory" -> 1798504, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.0277203671043191`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3537612653541005`, 0.30180801928018547`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4504950495049506, 0.04970306403042821]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.9460780805399367`, 0.4700942872939521], "Accuracy" -> 
              PlusMinus[0.5495049504950499, 0.07042869408830647], 
              "EvaluationTime" -> 0.00007187, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044369, 
              "TrainingMemory" -> 2623752, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.5857390060963248`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.9460780805399367`, 0.3324068583426106]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007187, "MeanCrossEntropy" -> 
             PlusMinus[1.9460780805399367`, 0.4700942872939521], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2623752, 
             "TrainingTime" -> 0.493126], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
              "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
              "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8989142600866946, 0.13704963816025623`], "Accuracy" -> 
              PlusMinus[0.5792079207920797, 0.06993081195248246], 
              "EvaluationTime" -> 0.0000132, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.025237, 
              "TrainingMemory" -> 1173760, "ModelMemory" -> 61288, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.41050219998442, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8989142600866946, 0.09690872850227981]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792079207920797, 0.049448551345481616`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8839677178889411, 0.1363000854895791], "Accuracy" -> 
              PlusMinus[0.5891089108910896, 0.06970838956395264], 
              "EvaluationTime" -> 9.05*^-6, "TestSize" -> 100, "TrainingSize" -> 
              200, "TrainingTime" -> 0.105235, "TrainingMemory" -> 5610600, 
              "ModelMemory" -> 61672, "ExperimentCount" -> 1, "ModelUtility" -> 
              5.9552267103014485`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8839677178889411, 0.09637871472598751]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5891089108910896, 0.04929127496626447]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8790576051810061, 0.1391686208427838], "Accuracy" -> 
              PlusMinus[0.6980198019801988, 0.04615937631985702], 
              "EvaluationTime" -> 9.67*^-6, "TestSize" -> 100, "TrainingSize" -> 
              800, "TrainingTime" -> 0.366333, "TrainingMemory" -> 22203896, 
              "ModelMemory" -> 62184, "ExperimentCount" -> 1, "ModelUtility" -> 
              5.9046782235633435`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8790576051810061, 0.1391686208427838]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6980198019801988, 0.04615937631985702]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.67*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.8790576051810061, 0.1391686208427838], "ModelMemory" -> 
             62184, "TrainingMemory" -> 22203896, "TrainingTime" -> 
             0.46546825000000003`], "Index" -> 2], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1957511596862074`, 0.1977836145849986], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00027889, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.095126, 
              "TrainingMemory" -> 1509424, "ModelMemory" -> 907992, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.7442260702596155`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1957511596862074`, 0.13985413508063904`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7828022084623473, 0.11953129778999334`], "Accuracy" -> 
              PlusMinus[0.6188118811881194, 0.06886790804030904], 
              "EvaluationTime" -> 0.00031985, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.123381, 
              "TrainingMemory" -> 3615960, "ModelMemory" -> 930576, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.558301033503622, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7828022084623473, 0.08452139123133287]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6188118811881194, 0.04869696478143408]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8893877217879478, 0.14717185742548708`], "Accuracy" -> 
              PlusMinus[0.6089108910891095, 0.06917727028697561], 
              "EvaluationTime" -> 0.00027361000000000003`, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.35569, 
              "TrainingMemory" -> 14782992, "ModelMemory" -> 1002280, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.3349029480800123`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8893877217879478, 0.10406621838538166`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00027361000000000003`, "MeanCrossEntropy" -> 
             PlusMinus[0.8893877217879478, 0.14717185742548708`], 
             "ModelMemory" -> 1002280, "TrainingMemory" -> 14782992, 
             "TrainingTime" -> 1.8735760000000001`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0877927578820954`, 0.11578452595789275`], 
              "Accuracy" -> 
              PlusMinus[0.4405940594059407, 0.07012485283032993], 
              "EvaluationTime" -> 0.00001992, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.005608, 
              "TrainingMemory" -> 441360, "ModelMemory" -> 194904, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.098094668170411, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0877927578820954`, 0.0818720234612958]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4405940594059407, 0.049585758966034954`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.697264809214688, 0.016444209057147805`], "Accuracy" -> 
              PlusMinus[0.49009900990099037`, 0.07067631991204443], 
              "EvaluationTime" -> 0.00001918, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.006398, 
              "TrainingMemory" -> 1719984, "ModelMemory" -> 607016, 
              "ExperimentCount" -> 1, "ModelUtility" -> 6.558222836541349, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.697264809214688, 0.011627811735558456`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49009900990099037`, 0.049975705079116424`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6752594838450804, 0.017892797895458255`], 
              "Accuracy" -> 
              PlusMinus[0.5594059405940598, 0.07029074724332998], 
              "EvaluationTime" -> 0.00003977, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.021239, 
              "TrainingMemory" -> 8369328, "ModelMemory" -> 2805008, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.907995567002972, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6752594838450804, 0.012652118726278918`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5594059405940598, 0.04970306403042825]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6664964540845267, 0.024419892990284724`], 
              "Accuracy" -> PlusMinus[0.53960396039604, 0.04987850435483753], 
              "EvaluationTime" -> 0.00009492, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.1285, 
              "TrainingMemory" -> 40493304, "ModelMemory" -> 11047408, 
              "ExperimentCount" -> 1, "ModelUtility" -> 3.3088928276812233`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6664964540845267, 0.024419892990284724`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009492, "MeanCrossEntropy" -> 
             PlusMinus[0.6664964540845267, 0.024419892990284724`], 
             "ModelMemory" -> 11047408, "TrainingMemory" -> 40493304, 
             "TrainingTime" -> 0.16623300000000002`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7006895037945174, 0.01809996825054025], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00005207, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009567, 
              "TrainingMemory" -> 275728, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.02624508864541, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7006895037945174, 0.01279861028921822]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471805599441, 0.007931464032162798], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00005703, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.012973, 
              "TrainingMemory" -> 892576, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.968608843187345, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471805599441, 0.005608392001879511]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6853665275369779, 0.008626479616410363], "Accuracy" -> 
              PlusMinus[0.5990099009900995, 0.06945731300787833], 
              "EvaluationTime" -> 0.0000532, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.018989, 
              "TrainingMemory" -> 4195256, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.121708545780134, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6853665275369779, 0.006099842234531295]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6640144502285039, 0.012013546486100838`], 
              "Accuracy" -> 
              PlusMinus[0.6188118811881194, 0.04869696478143408], 
              "EvaluationTime" -> 0.000056449999999999997`, "TestSize" -> 100,
               "TrainingSize" -> 800, "TrainingTime" -> 0.089167, 
              "TrainingMemory" -> 16575312, "ModelMemory" -> 94856, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.194467022712934, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6640144502285039, 0.012013546486100838`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6188118811881194, 0.04869696478143408]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000056449999999999997`, "MeanCrossEntropy" -> 
             PlusMinus[0.6640144502285039, 0.012013546486100838`], 
             "ModelMemory" -> 94856, "TrainingMemory" -> 16575312, 
             "TrainingTime" -> 0.12102575], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6930015408367505, 0.008033609595306624], "Accuracy" -> 
              PlusMinus[0.5099009900990102, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007264, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.020734, 
              "TrainingMemory" -> 2047584, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.643378809353513, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6930015408367505, 0.005680619822246629]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6774722561923496, 0.007949511510513176], "Accuracy" -> 
              PlusMinus[0.5792079207920797, 0.049448551345481616`], 
              "EvaluationTime" -> 0.00007502, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.142276, 
              "TrainingMemory" -> 33037040, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.706532734515695, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6774722561923496, 0.007949511510513176]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792079207920797, 0.049448551345481616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007502, "MeanCrossEntropy" -> 
             PlusMinus[0.6774722561923496, 0.007949511510513176], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 33037040, 
             "TrainingTime" -> 0.198579], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931473692179523, 0.007931467415980243], "Accuracy" -> 
              PlusMinus[0.5099009900990102, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007371, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012086, 
              "TrainingMemory" -> 819128, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.6233731878017, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931473692179523, 0.005608394394599773]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931470003552032, 0.007931461097753533], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007227, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.01372, 
              "TrainingMemory" -> 1719016, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.649251627473916, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931470003552032, 0.005608389926938821]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931429420431708, 0.007931391729037679], "Accuracy" -> 
              PlusMinus[0.5990099009900995, 0.06945731300787833], 
              "EvaluationTime" -> 0.00006929000000000001, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.024599, 
              "TrainingMemory" -> 8312392, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.704885827765168, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931429420431708, 0.005608340875849439]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931250973081593, 0.005608132011087476], "Accuracy" -> 
              PlusMinus[0.5891089108910896, 0.04929127496626447], 
              "EvaluationTime" -> 0.00007280000000000001, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.076196, 
              "TrainingMemory" -> 33036976, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.642906850599569, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931250973081593, 0.005608132011087476]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5891089108910896, 0.04929127496626447]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007280000000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.6931250973081593, 0.005608132011087476], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 33036976, 
             "TrainingTime" -> 0.107331], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.386515473602657, 0.2997892319886574], "Accuracy" -> 
              PlusMinus[0.5495049504950499, 0.07042869408830647], 
              "EvaluationTime" -> 0.00007381, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044131, 
              "TrainingMemory" -> 2623816, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.219730236973486, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.386515473602657, 0.2119829988658867]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007381, "MeanCrossEntropy" -> 
             PlusMinus[1.386515473602657, 0.2997892319886574], "ModelMemory" -> 
             67960, "TrainingMemory" -> 2623816, "TrainingTime" -> 
             0.48544099999999996`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.089296570443798, 0.14314641718813728`], "Accuracy" -> 
              PlusMinus[0.47029702970297055`, 0.0705388573294967], 
              "EvaluationTime" -> 0.00007462, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.042066, 
              "TrainingMemory" -> 1798608, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.8632244547037793`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.089296570443798, 0.10121980229629043`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.47029702970297055`, 0.04987850435483752]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.923233311946536, 0.13899405586179253`], "Accuracy" -> 
              PlusMinus[0.53960396039604, 0.07053885732949673], 
              "EvaluationTime" -> 0.00006934, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044614, 
              "TrainingMemory" -> 2624112, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 3.43622132558719, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.923233311946536, 0.09828363944449528]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006934, "MeanCrossEntropy" -> 
             PlusMinus[0.923233311946536, 0.13899405586179253`], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2624112, 
             "TrainingTime" -> 0.48820600000000003`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6921895658482664, 0.009975115719036007], "Accuracy" -> 
              PlusMinus[0.5594059405940598, 0.07029074724332998], 
              "EvaluationTime" -> 0.00007347, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.030915, 
              "TrainingMemory" -> 2566128, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.631302998719581, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6921895658482664, 0.007053471968050884]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5594059405940598, 0.04970306403042825]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007347, "MeanCrossEntropy" -> 
             PlusMinus[0.6921895658482664, 0.009975115719036007], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2566128, 
             "TrainingTime" -> 0.340065], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.665745175663856, 0.028409115411534402`], "Accuracy" -> 
              PlusMinus[0.6089108910891095, 0.06917727028697561], 
              "EvaluationTime" -> 0.0006139100000000001, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.398711, 
              "TrainingMemory" -> 1816256, "ModelMemory" -> 214576, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.5686112991718506`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.665745175663856, 0.02008827815500723]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006139100000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.665745175663856, 0.028409115411534402`], 
             "ModelMemory" -> 214576, "TrainingMemory" -> 1816256, 
             "TrainingTime" -> 4.385821], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 115633547055055]], "MaxTrainingSize" -> 1000, 
      "LastReportingTime" -> 3.740068046705079`16.325454492975325*^9, 
      "PreprocessorEvaluationTime" -> 4.68115234375`2.*^-6, 
      "PreprocessorMemory" -> 195984, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.5120000000000001, 
          "ElapsedTimes" -> 0.49161, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.64, "ElapsedTimes" -> 
          1.467996, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 200, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          0.866427, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 800, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.95418, "ExperimentCounts" -> 5]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[115642136989647]], "ID" -> 
         115646431956943]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "would you rather be ravished by a pirate or a british rear \
admiral."}, "ID" -> 2944923201742380288], "f2" -> 
         Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{15, 11, 2, 15, 15, 10, 4, 7, 3, 4, 1, 1, 7, 13}}, 
           "ID" -> 1880470000636944807]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 5.895246, "MaxTrainingMemory" -> 58779792, 
      "DataMemory" -> 356264, "FunctionMemory" -> 431496, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 8, 19, 47, 27.511215`8.192084752706696}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740086047537242*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"6c670d68-be30-4e1a-9524-065c42da0c60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"testq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testnonq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"testnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}]}], " ", "|>"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740086199001491*^9, 3.7400862121608133`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"d078db54-3fb5-4f7d-a830-7291119b8496"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7199999999999999734`4.118883216782667", "\[PlusMinus]", 
                    "0.0318286871647759928`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 1000, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    7263179337424669307]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    114010418416267986]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                9.465786466929034, "StandardDeviation" -> 4.511821128433264, 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", ":", ";", 
                    "\"", "'", "(", ")", "$", "%", "&", "@", "*", "-", "+", 
                    "=", "[", "]", "{", "}", "\\", "|", "\\", "<", ">", "/", 
                    "~", "`", "#", "^"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUnONjtShe8AMafZAAtAct8soSRGLIEBEiMGsDM2yHlOOuL9qSqqbvh7
M512ONoT4X/5j//+9//8v7//66//+bu//vrr3/7rf/73b/+s//Gvt9V66rz3
zlPHXbOUN1DXGWu3WVdbrfVabw70tU8f7cxzxjwzB8Ztc+j/9mij3dl/A+us
XmYvRX+/9A8xUE/vd5x9jyYx6t45UEZfpe5zbr+39vhFuWeJMsfdS7/oI6Zb
jh7V6tj7lNP0g/PHQNFHMNJXq6vmwNIHltY13db7Lr9H6a/G1ufV0vUxN1++
m758TP13PbPulb9oPL/xrHluPS1fXvup+3b9+4y2yo4lKaXrA8rSJ6za9olZ
He3EaZqzxrQ09e4cWFtjRSt2u6a3+o6BUbTwRf8959pVU4gBNq2XzSqOMrVb
MdBGnVouvWhqd1e+49xdZpl3bL18ztpLDLBWp3Z2uO6q/8TAKmVv9muxGefG
O2COPke5Wzs1tCa/AX2IFn5oZepuZ+U7xDW1tLt701DTnr0BHn+GFmoPkfW2
eDn/855ZxLtzLL3lxsDQamgHNxs1xKs9Bqq46ex15p5VXFJirZa+vY5T5u5i
Em3kygFNS3OpYpetCbabA9pVcdSY4hE98MSsxN9d+zTmGlXL1kv+Qg+ZdTb9
n14g9v4NFK1V0VIO7Zh4tMXAvGVoJfpdlwOx8xf9lMKbzuy7ajdrDmgq9Vy+
Q8tVxvoNNFh6rMk2aslioG3xgNj8NHGQViRfXsvW09vUNtY1/5gVm61Xa2Mk
BEqZIwb046Xjqe/QYSi3999A1RqKu25bc/ZkhrnhTB3mAeuWVuIX2k9OoFa8
w/XawxjoeoO4QQu5Kv8zZjXb0KHRrusUnDLKiv0Qsx598Gj6wSn1zpIDElE6
hbtKqExtef5Cf6VVmRcReEev+YvCqdR6HO2sREfyrhZPKzeGBMfRV7QafDV2
FdM1SSbRYKAcGLuwkvqgzt/niRo6l10yY1Z99tSux9ZKpOqPR2dpJCBWyF0N
iBuQYlMf0bX7sR/iJi13sXg/rWk1Y0D7cMWGlTO1YNQcgN936TojkhI9uUQL
NeBGydipRf/Jq64dLUvcXuF2sW+8QwJvF8mRdiSEmj48HyU5NvmP1gmJkWsl
idikVvrUTPUOidscGPpHHbap/4i1cj86B2DoLIupmza55Dv0Eu2S2FFHR5w4
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

                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJzFGn1o1VX0bW8fbe4939x8usbCTBglFUQW8aCFOYeSyIRl5SS1JxkmQW2y
wlCHlSvCzGXLxMfqGWKCSyFSCd/STbZHNgqD0fpY1lZKwaLCFbX+eef34Pw4
nHPuvW/9dbj397v3fNzzfe+NG55atTEvEAicLAoEwrXdO8YGalL7ur5PNd07
NwVjDOH70Le9824oqPYgfH9g7I/Rq/Eq3zwFuf9OvNCxeHJ4JksHhyeciLbf
lIimPjl3OP/Lh+ew/wMfHN1S/GPrrtscf6lCjZeig6PPll7p+Uj/o/QK86Gl
T0oPuW9GLyh6OHtwBaMrPtpZW1fO/tdxePn9E1OV7LniMccHJR+8jtpXq49t
r1VeWpYX9c1Ptf/12Fe/z/LhWXrf6a4vloTJdVJ9wPLDY60/0PKt9Y+m9ujK
fgD+k/fg7FOtEXYd6MPSReOL6y9m9XnTK6PJljsqSXnhc6D8PpZjU2Nw/att
s0m75uzCVp5tnx56Pp0/yxtDfAFI2Z0xXuSvpH4VQ6Dvs+6TZx7/JiTWW8D3
7MWaa4eGi631lMofOLvh9qf8OLU/PjdKr6X+ltRL5P+eLp/3VnJohtp/YLo9
/4j0Uep3bf2E1p9QcmX3R/rvmn4Yc3K0jQPavCK4tWbhmZ5SnxynKx5gfdPK
V00n4b+l+KV+/9EXiyuSPWFj+lyfsynU6t9I+plfR/eXpBYuya8/9mQ5Kaf1
ex9q3h6KiOMJjHH81vp5GOM8Qqt/pnpiWl/h+TmlC/L6TmT9CM5zGjp/u7Zl
T+m02S+GEKe0dTHkc5zeU/UDZxeAB8PNVeMfd8ey8RLopuIazLuyww9XPnHX
yoO0vWDI2YGtHQNfXekD57c2BXOuL+WxHR3NR+X5CsDYskWtO2PZ/seq8XcT
PS3++KrNz6Fe5OTJ2bltHcjpt+m547wb72N6Hhz92nho2leDdaZ4KbvX7ofp
6tuyILm2pUCel1pCSn6AB9cTnLwpfzc8WT94YUXItz9nJ6Z8H6m6ecbB3ghr
p9Q5eGOUbwEdUr2T1uGX3hu8sqnx77O25ymNj1J/ZeuXAJ9p/Qf7Y3mnC++8
5+tgodoflG249erItlBq17b+d0KdlT5+W9cd3dX3M5934nN8/4PBs3Wfl6jt
FdNr26fDMF73b/qNEj9dGM9U7enrBxv5Ppv23PC5Y7zUd0qPYB3Ecan+SeOs
9Lxd7cP1a7T7UXUEJ1dKLyn9oSCum6T4PJjxt5RctPkMxTfOC7Xn3lK2PVb0
nL9+l+oH9tMU3ZQ/x3jmv3lud/xKwDpvuBBPJP88IPd/UnlBPcrlp9gfYjuR
1vMAcd0krcfAX0jvs7h8xtSOpets76fwPCVvDmJ5g51I10vfAYA+UfTZ6q/a
b2UglVeY7iv1Z2oo7CMOrb57/pphv58Euil75fTMFR9gp6D/ua6b4L5Dm/9j
u+bu3aXy8exeeT/BykOqH5Z9S+hTua5rKbrw/HcN+5svd/3g1V17C/ujE6sv
++owjs+XHzm1u6AhW4/Y9v2k8qDqB+n/HD6uz6F9N+ThyegX5GF4Xsu3a70x
xuv4npCUn5BeWz/bG6suqLjdXxe6el8wtDbRHr0l2/ew7T9wfX6o//F3rb1i
Ojk7ocbc+URGZvZPRvj8SZp3cvGx+ra5xb0/hcXyoOwBz0PcpPjm6Mf9Wufv
W5h9AL+pPeH7JNf+AeM58vrE+c63y4z9HP4O/RbX+RVV73D0e+uJ/JSyR9fy
p97X2srDFX14P7Bvbp20j++afnx/a/ruhOPT24/QH4ofiB/4P3iv4OqcbNfb
2il7/5npF2vpdtWHxX2x6X6PRMmb48/VewAcr6Fvh/0c1Fdcn1eKN1fv5m3l
AH0X032ouPB/8wdw+cbGfQM/Fqn5kN6PePxm/OEvewbWHC8KenLl7oFd3Vvh
vh7XVwX64V2ZFI9W73P9ni5XeSFlr5C3UOf1H3AqPUk=
                    "], 
                    "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Spans" -> {
                  Span[1, 1715], 
                  Span[1716, 1716]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                    "], 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 821998144885263164]]}, "Invertibility" -> 
            "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4779017560470115588]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                2739954230257633601, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7071693056549462440]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "Not Question" -> 0.49999999999999994`, "Question" -> 
           0.49999999999999994`]], "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Speed", "BatchProcessing" -> Automatic, "Model" -> 
       Association["Tree" -> MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> 
            RawArray["Integer16",{20, 20, 29, 77, 96, 113, 118, 211, 246, 256,
               256, 263, 313, 373, 373, 447, 496, 536, 556, 556, 569, 569, 
              569, 589, 619, 632, 632, 632, 632, 675, 675, 675, 675, 675, 733,
               738, 738, 738, 738, 751, 776, 776, 776, 813, 818, 818, 840, 
              881, 885, 928, 938, 938, 938, 938, 938, 938, 973, 1019, 1111, 
              1153, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1171, 1171, 
              1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1178, 
              1178, 1178, 1243, 1281, 1295, 1317, 1317, 1388, 1398, 1463, 
              1475, 1484, 1484, 1498, 1578, 1581, 1638, 1638, 1652, 1652, 
              1674, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
              1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
              1716, 1716, 1716}], "NumericalThresholds" -> CompressedData["
1:eJwdkFtIEwAYhdfQtSgTI8NSgzmaLRXGMnFTtqZ7qKwlTseESKcoodOhXYbT
6IJhtsJmcxv2IDirSZqDHhpr/xEmTDCTYGCBZoXOVmbTdVGELtsevsM55+Hn
53BqdGX1TAaDcZEdkTKNXtbaqmlTsqKhTqM9KtRui1hDhLjmDGhdFlKqE8eF
yfNoTEnDy5UMzLlvwawI0oW0vXjyrhLbxUokc6yo2K0Cy5uA1VA/LfzZosyk
BHza8sNuyEeDPUgfvTbkcgXIr3pN9Z9tCIgZ403lvYjyMEeA96E9+F2txsyY
CMVZm2Rc+0a5VQ76XtOP0QM5MLge0eKwlkY8a5547wZ1+CQoV6SjXDVLu4Jq
YvPMEPKYKAp8id1eH5mkIV8W4kNNEFWrkL4uxPme/dhsZ2GiVk7HSty4tjCA
n3YrDYivYqrwBjoauPgXZkKJQTrXeZPeGvlU8ZfjKXp1G6XO6zhx6DKe1+rw
TFYXY1FwBtPhU5H+F02Hp+jSrI2OHHQg9bAMga5OOr60Qj3yZRp7+oIqd+hg
0ktxutQa+1FecBYzSQ8gmp9AX4cdVW+GoYAFjn1JYKSYwN6ZF9nGAp4rG/da
SmC+kjcuVz3GV54Npo1u6O7r0X0nER+a/NTm7KfGvl4a9XVR5nIxTS41e+62
bxbwnT8KtwZ5kihzAbnEcNIjca/6JTUtcVIjN1XK52dL/wNL/RDu
             "], 
            "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVkVOUFQAARG/ebNu23Xay283eajM3959t27Zt27Ztd3t9zMy5Z/5mMrbt
GdIhMtAnKGAhYQOCIyLCBoXGDED1Hn3DO4ZHFCzW6X8/OKD/WZ/4bDcmf03N
ShPxx9/OsRCVGEQsSrHR0lz3mnFpRD8O+8yn9iYBt8zLSU+YkUwsMj87TUMw
KelLf36ZgeKk54yZGWkqRtiWKuRgk+HssSlXvGwHFvvFMhwwLQWpyDHrcc6z
tiIeJcjFDjvz0ZL89IdhlOeJj41GMi543osmZK4dWW0XdpuYSYbwyIf2YZjV
+e4Kl7vUJeYhCm9tzVXbsMoYvLM9LyzMTW/YnAb04rijHWX2wBLZ0IUusBs1
+ewnt7rFiU7wg+99bh2mOdUgulKWN5bjgUc94n6bcMfbjnWMLYjNV0NJx10b
0pgI8rHLZlSlHdtsyTe788pabHC9WUhBbrJSlzjkpCjDLcJmB/DSSKwxOfPs
QTVmGpVidKIAy+zJfe85w+nWDjw321lWJimHPOhpT1mBSw51iFOc7D73moSB
rHOt4x1ndOZbg9f+A4C//o8=
             "], "LeafValues" -> 
            RawArray["UnsignedInteger8",{{101, 1}, {3, 1}, {2, 2}, {1, 8}, {1,
               5}, {1, 4}, {3, 1}, {1, 58}, {1, 11}, {1, 12}, {1, 3}, {3, 
              1}, {1, 2}, {3, 1}, {1, 3}, {2, 1}, {1, 3}, {3, 1}, {5, 23}, {1,
               4}, {1, 4}, {1, 3}, {4, 2}, {1, 3}, {3, 1}, {1, 9}, {1, 3}, {4,
               1}, {3, 1}, {17, 30}, {8, 10}, {1, 4}, {7, 2}, {4, 2}, {3, 
              1}, {1, 3}, {2, 2}, {12, 1}, {7, 4}, {1, 3}, {2, 1}, {2, 2}, {2,
               2}, {1, 7}, {1, 5}, {1, 6}, {2, 2}, {18, 1}, {1, 4}, {3, 1}, {
              2, 2}, {4, 1}, {1, 2}, {3, 1}, {1, 14}, {2, 2}, {2, 2}, {3, 
              2}, {4, 1}, {75, 1}, {1, 3}, {2, 1}, {6, 1}, {2, 2}, {2, 2}, {7,
               1}, {3, 1}, {7, 1}, {2, 2}, {3, 1}, {1, 4}, {1, 3}, {2, 2}, {3,
               1}, {1, 2}, {3, 3}, {3, 1}, {1, 3}, {2, 2}, {1, 172}, {2, 
              13}, {2, 2}, {3, 1}, {1, 3}, {1, 3}, {1, 3}, {1, 4}, {2, 1}, {
              12, 1}, {3, 1}, {1, 3}, {1, 10}, {1, 3}, {1, 3}, {3, 1}, {1, 
              2}, {3, 8}, {1, 3}, {2, 2}, {5, 1}, {1, 4}, {2, 3}, {6, 1}, {1, 
              2}, {2, 7}, {2, 1}, {1, 3}, {5, 1}, {2, 2}, {9, 3}, {9, 3}, {1, 
              6}, {6, 1}, {2, 2}, {80, 1}, {3, 1}, {1, 3}, {2, 2}, {2, 2}, {2,
               2}, {28, 1}, {2, 2}, {6, 1}}], "RootIndex" -> 67, 
            "NominalDimension" -> 0]], "Processor" -> 
         MachineLearning`MLProcessor["Values", 
           Association[
           "Info" -> Association[
             "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                 "], "Type" -> 
                "NumericalVector"]], "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "Method" -> "DecisionTree", "Options" -> 
         Association[
          "DistributionSmoothing" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
            PlusMinus[0.5000000000000003, 0.07070378035792256], 
            "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100, 
            "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
            "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
            "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.5000000000000003, 0.04999512254661126]}, 
            "Configuration" -> {
             "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
              1}, "FinalTrainingSize" -> 1000], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 115637842022351]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.3537612653541005`, 0.4268209940989989], 
                 "Accuracy" -> 
                 PlusMinus[0.4504950495049506, 0.07029074724332993], 
                 "EvaluationTime" -> 0.00017394, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.049436, 
                 "TrainingMemory" -> 1798504, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.0277203671043191`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.3537612653541005`, 0.30180801928018547`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4504950495049506, 0.04970306403042821]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.9460780805399367`, 0.4700942872939521], 
                 "Accuracy" -> 
                 PlusMinus[0.5495049504950499, 0.07042869408830647], 
                 "EvaluationTime" -> 0.00007187, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044369, 
                 "TrainingMemory" -> 2623752, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.5857390060963248`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.9460780805399367`, 0.3324068583426106]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007187, "MeanCrossEntropy" -> 
                PlusMinus[1.9460780805399367`, 0.4700942872939521], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2623752, 
                "TrainingTime" -> 0.493126], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7070931592563307, 0.02504363914845967], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100,
                  "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
                 "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8989142600866946, 0.13704963816025623`], 
                 "Accuracy" -> 
                 PlusMinus[0.5792079207920797, 0.06993081195248246], 
                 "EvaluationTime" -> 0.0000132, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.025237, 
                 "TrainingMemory" -> 1173760, "ModelMemory" -> 61288, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.41050219998442, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8989142600866946, 0.09690872850227981]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5792079207920797, 0.049448551345481616`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8839677178889411, 0.1363000854895791], 
                 "Accuracy" -> 
                 PlusMinus[0.5891089108910896, 0.06970838956395264], 
                 "EvaluationTime" -> 9.05*^-6, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.105235, 
                 "TrainingMemory" -> 5610600, "ModelMemory" -> 61672, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 5.9552267103014485`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8839677178889411, 0.09637871472598751]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5891089108910896, 0.04929127496626447]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8790576051810061, 0.1391686208427838], 
                 "Accuracy" -> 
                 PlusMinus[0.6980198019801988, 0.04615937631985702], 
                 "EvaluationTime" -> 9.67*^-6, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.366333, 
                 "TrainingMemory" -> 22203896, "ModelMemory" -> 62184, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 5.9046782235633435`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8790576051810061, 0.1391686208427838]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6980198019801988, 0.04615937631985702]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.67*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.8790576051810061, 0.1391686208427838], 
                "ModelMemory" -> 62184, "TrainingMemory" -> 22203896, 
                "TrainingTime" -> 0.46546825000000003`], "Index" -> 2], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.1957511596862074`, 0.1977836145849986], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00027889, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.095126, 
                 "TrainingMemory" -> 1509424, "ModelMemory" -> 907992, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.7442260702596155`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.1957511596862074`, 0.13985413508063904`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7828022084623473, 0.11953129778999334`], 
                 "Accuracy" -> 
                 PlusMinus[0.6188118811881194, 0.06886790804030904], 
                 "EvaluationTime" -> 0.00031985, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.123381, 
                 "TrainingMemory" -> 3615960, "ModelMemory" -> 930576, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 2.558301033503622, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7828022084623473, 0.08452139123133287]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6188118811881194, 0.04869696478143408]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8893877217879478, 0.14717185742548708`], 
                 "Accuracy" -> 
                 PlusMinus[0.6089108910891095, 0.06917727028697561], 
                 "EvaluationTime" -> 0.00027361000000000003`, "TestSize" -> 
                 100, "TrainingSize" -> 200, "TrainingTime" -> 0.35569, 
                 "TrainingMemory" -> 14782992, "ModelMemory" -> 1002280, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.3349029480800123`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8893877217879478, 0.10406621838538166`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00027361000000000003`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.8893877217879478, 0.14717185742548708`], 
                "ModelMemory" -> 1002280, "TrainingMemory" -> 14782992, 
                "TrainingTime" -> 1.8735760000000001`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0877927578820954`, 0.11578452595789275`], 
                 "Accuracy" -> 
                 PlusMinus[0.4405940594059407, 0.07012485283032993], 
                 "EvaluationTime" -> 0.00001992, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.005608, 
                 "TrainingMemory" -> 441360, "ModelMemory" -> 194904, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.098094668170411, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0877927578820954`, 0.0818720234612958]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4405940594059407, 0.049585758966034954`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.697264809214688, 0.016444209057147805`], 
                 "Accuracy" -> 
                 PlusMinus[0.49009900990099037`, 0.07067631991204443], 
                 "EvaluationTime" -> 0.00001918, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.006398, 
                 "TrainingMemory" -> 1719984, "ModelMemory" -> 607016, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 6.558222836541349, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.697264809214688, 0.011627811735558456`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.49009900990099037`, 0.049975705079116424`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6752594838450804, 0.017892797895458255`], 
                 "Accuracy" -> 
                 PlusMinus[0.5594059405940598, 0.07029074724332998], 
                 "EvaluationTime" -> 0.00003977, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.021239, 
                 "TrainingMemory" -> 8369328, "ModelMemory" -> 2805008, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.907995567002972, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6752594838450804, 0.012652118726278918`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5594059405940598, 0.04970306403042825]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6664964540845267, 0.024419892990284724`], 
                 "Accuracy" -> 
                 PlusMinus[0.53960396039604, 0.04987850435483753], 
                 "EvaluationTime" -> 0.00009492, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.1285, 
                 "TrainingMemory" -> 40493304, "ModelMemory" -> 11047408, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 3.3088928276812233`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6664964540845267, 0.024419892990284724`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00009492, "MeanCrossEntropy" -> 
                PlusMinus[0.6664964540845267, 0.024419892990284724`], 
                "ModelMemory" -> 11047408, "TrainingMemory" -> 40493304, 
                "TrainingTime" -> 0.16623300000000002`], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7006895037945174, 0.01809996825054025], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00005207, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.009567, 
                 "TrainingMemory" -> 275728, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.02624508864541, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7006895037945174, 0.01279861028921822]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931471805599441, 0.007931464032162798], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00005703, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.012973, 
                 "TrainingMemory" -> 892576, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.968608843187345, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931471805599441, 0.005608392001879511]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6853665275369779, 0.008626479616410363], 
                 "Accuracy" -> 
                 PlusMinus[0.5990099009900995, 0.06945731300787833], 
                 "EvaluationTime" -> 0.0000532, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.018989, 
                 "TrainingMemory" -> 4195256, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.121708545780134, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6853665275369779, 0.006099842234531295]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6640144502285039, 0.012013546486100838`], 
                 "Accuracy" -> 
                 PlusMinus[0.6188118811881194, 0.04869696478143408], 
                 "EvaluationTime" -> 0.000056449999999999997`, "TestSize" -> 
                 100, "TrainingSize" -> 800, "TrainingTime" -> 0.089167, 
                 "TrainingMemory" -> 16575312, "ModelMemory" -> 94856, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.194467022712934, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6640144502285039, 0.012013546486100838`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6188118811881194, 0.04869696478143408]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000056449999999999997`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6640144502285039, 0.012013546486100838`], 
                "ModelMemory" -> 94856, "TrainingMemory" -> 16575312, 
                "TrainingTime" -> 0.12102575], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6930015408367505, 0.008033609595306624], 
                 "Accuracy" -> 
                 PlusMinus[0.5099009900990102, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007264, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.020734, 
                 "TrainingMemory" -> 2047584, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.643378809353513, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6930015408367505, 0.005680619822246629]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6774722561923496, 0.007949511510513176], 
                 "Accuracy" -> 
                 PlusMinus[0.5792079207920797, 0.049448551345481616`], 
                 "EvaluationTime" -> 0.00007502, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.142276, 
                 "TrainingMemory" -> 33037040, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.706532734515695, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6774722561923496, 0.007949511510513176]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5792079207920797, 0.049448551345481616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007502, "MeanCrossEntropy" -> 
                PlusMinus[0.6774722561923496, 0.007949511510513176], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 33037040, 
                "TrainingTime" -> 0.198579], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931473692179523, 0.007931467415980243], 
                 "Accuracy" -> 
                 PlusMinus[0.5099009900990102, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007371, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.012086, 
                 "TrainingMemory" -> 819128, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.6233731878017, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931473692179523, 0.005608394394599773]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931470003552032, 0.007931461097753533], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007227, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.01372, 
                 "TrainingMemory" -> 1719016, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.649251627473916, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931470003552032, 0.005608389926938821]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931429420431708, 0.007931391729037679], 
                 "Accuracy" -> 
                 PlusMinus[0.5990099009900995, 0.06945731300787833], 
                 "EvaluationTime" -> 0.00006929000000000001, "TestSize" -> 
                 100, "TrainingSize" -> 200, "TrainingTime" -> 0.024599, 
                 "TrainingMemory" -> 8312392, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.704885827765168, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931429420431708, 0.005608340875849439]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931250973081593, 0.005608132011087476], 
                 "Accuracy" -> 
                 PlusMinus[0.5891089108910896, 0.04929127496626447], 
                 "EvaluationTime" -> 0.00007280000000000001, "TestSize" -> 
                 100, "TrainingSize" -> 800, "TrainingTime" -> 0.076196, 
                 "TrainingMemory" -> 33036976, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.642906850599569, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931250973081593, 0.005608132011087476]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5891089108910896, 0.04929127496626447]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007280000000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.6931250973081593, 0.005608132011087476], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 33036976, 
                "TrainingTime" -> 0.107331], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.386515473602657, 0.2997892319886574], "Accuracy" -> 
                 PlusMinus[0.5495049504950499, 0.07042869408830647], 
                 "EvaluationTime" -> 0.00007381, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044131, 
                 "TrainingMemory" -> 2623816, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 2.219730236973486, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.386515473602657, 0.2119829988658867]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007381, "MeanCrossEntropy" -> 
                PlusMinus[1.386515473602657, 0.2997892319886574], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2623816, 
                "TrainingTime" -> 0.48544099999999996`], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.089296570443798, 0.14314641718813728`], 
                 "Accuracy" -> 
                 PlusMinus[0.47029702970297055`, 0.0705388573294967], 
                 "EvaluationTime" -> 0.00007462, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.042066, 
                 "TrainingMemory" -> 1798608, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.8632244547037793`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.089296570443798, 0.10121980229629043`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.47029702970297055`, 0.04987850435483752]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.923233311946536, 0.13899405586179253`], 
                 "Accuracy" -> 
                 PlusMinus[0.53960396039604, 0.07053885732949673], 
                 "EvaluationTime" -> 0.00006934, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044614, 
                 "TrainingMemory" -> 2624112, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 3.43622132558719, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.923233311946536, 0.09828363944449528]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006934, "MeanCrossEntropy" -> 
                PlusMinus[0.923233311946536, 0.13899405586179253`], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2624112, 
                "TrainingTime" -> 0.48820600000000003`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6921895658482664, 0.009975115719036007], 
                 "Accuracy" -> 
                 PlusMinus[0.5594059405940598, 0.07029074724332998], 
                 "EvaluationTime" -> 0.00007347, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.030915, 
                 "TrainingMemory" -> 2566128, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.631302998719581, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6921895658482664, 0.007053471968050884]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5594059405940598, 0.04970306403042825]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007347, "MeanCrossEntropy" -> 
                PlusMinus[0.6921895658482664, 0.009975115719036007], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2566128, 
                "TrainingTime" -> 0.340065], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.2], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.665745175663856, 0.028409115411534402`], 
                 "Accuracy" -> 
                 PlusMinus[0.6089108910891095, 0.06917727028697561], 
                 "EvaluationTime" -> 0.0006139100000000001, "TestSize" -> 100,
                  "TrainingSize" -> 40, "TrainingTime" -> 0.398711, 
                 "TrainingMemory" -> 1816256, "ModelMemory" -> 214576, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.5686112991718506`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.665745175663856, 0.02008827815500723]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0006139100000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.665745175663856, 0.028409115411534402`], 
                "ModelMemory" -> 214576, "TrainingMemory" -> 1816256, 
                "TrainingTime" -> 4.385821], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 115633547055055]], "MaxTrainingSize" -> 1000, 
         "LastReportingTime" -> 3.740068046705079`16.325454492975325*^9, 
         "PreprocessorEvaluationTime" -> 4.68115234375`2.*^-6, 
         "PreprocessorMemory" -> 195984, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.5120000000000001, 
             "ElapsedTimes" -> 0.49161, "ExperimentCounts" -> 7], 
            Association[
            "TrainingSizes" -> 40, "TimeBudgets" -> 0.64, "ElapsedTimes" -> 
             1.467996, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 200, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             0.866427, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 800, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             0.95418, "ExperimentCounts" -> 5]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[115642136989647]], "ID" -> 
            115646431956943]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {
               "would you rather be ravished by a pirate or a british rear \
admiral."}, "ID" -> 2944923201742380288], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{15, 11, 2, 15, 15, 10, 4, 7, 3, 4, 1, 1, 7, 13}}, 
              "ID" -> 1880470000636944807]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 5.895246, "MaxTrainingMemory" -> 
         58779792, "DataMemory" -> 356264, "FunctionMemory" -> 431496, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 8, 19, 47, 27.511215`8.192084752706696}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"you dumb bitch.", {11, 1, 7, 13}}, {
        "and you could stand to get a little smarter ain't that right you \
dumb blonde fuck.", {3, 11, 15, 15, 10, 15, 4, 1, 2, 15, 2, 10, 7, 11, 1, 1, 
         7, 13}}, {"an italian right.", {4, 1, 7, 13}}, {
        "major what do you think could have done this.", {1, 11, 15, 11, 15, 
         15, 15, 15, 4, 13}}, {"you saw this.", {11, 15, 4, 13}}, {
        "how can you be here and say this.", {2, 15, 11, 15, 2, 3, 15, 4, 
         13}}, {"natalie who.", {7, 11, 13}}, {
        "where will my toys be.", {2, 15, 11, 7, 15, 13}}, {
        "the car or debbie.", {4, 7, 3, 7, 13}}, {
        "that ' s who you want me to bend my rules for.", {10, 13, 7, 11, 11, 
         15, 11, 10, 15, 11, 7, 10, 13}}, {
        "i've never gotten a letter like this have you.", {6, 15, 2, 15, 4, 7,
          10, 4, 15, 11, 13}}, {
        "you don't think so.", {11, 15, 2, 15, 2, 13}}, {
        "i believe we share an art instructor you know chastity.", {6, 15, 11,
          15, 4, 7, 7, 11, 15, 7, 13}}, {"call that fresh.", {7, 4, 1, 13}}, {
        "oh shut up huh.", {5, 15, 9, 2, 13}}, {"the poet.", {4, 7, 13}}, {
        "why doesn't she just hang up and call the police.", {2, 15, 2, 11, 2,
          15, 9, 3, 15, 4, 7, 13}}, {
        "if you need to come to where i live ok.", {10, 11, 15, 10, 15, 10, 2,
          6, 1, 7, 13}}, {"who will you kill.", {11, 15, 11, 15, 13}}, {
        "who is dead.", {11, 15, 1, 13}}, {
        "you remember him from high school.", {11, 15, 11, 10, 1, 7, 13}}, {
        "you hungry or thirsty or both.", {11, 1, 3, 1, 3, 4, 13}}, {
        "how often do you see mr. kramer and his son.", {2, 2, 15, 11, 15, 12,
          12, 3, 11, 7, 13}}, {
        "who's mr. jocularity.", {11, 15, 12, 7, 13}}, {
        "so now where were we here.", {2, 2, 2, 15, 11, 2, 13}}, {
        "charge set.", {7, 7, 13}}, {
        "you serve martinis doncha.", {11, 15, 7, 7, 13}}, {
        "goin' dove huntin'.", {7, 13, 15, 7, 13, 13}}, {
        "and mademoiselle.", {3, 7, 13}}, {
        "is it that bad.", {15, 11, 10, 1, 13}}, {
        "they're trying to unnerve us. why did they do that.", {11, 15, 15, 
         10, 15, 11, 13, 2, 15, 11, 15, 4, 13}}, {
        "what number did you tear out.", {4, 7, 15, 11, 15, 9, 13}}, {
        "just a little joke miss farmer. ...did you really say that.", {2, 4, 
         1, 7, 15, 7, 13, 13, 15, 11, 2, 15, 10, 13}}, {
        "hi viv.  carlos you know my roommate viv. you spent it on drugs \
didn't you.", {5, 7, 13, 7, 11, 15, 11, 7, 7, 13, 11, 15, 11, 10, 7, 15, 2, 
         11, 13}}, {
        "what have you got to do.", {4, 15, 11, 15, 10, 15, 13}}, {
        "do you know her.", {15, 11, 15, 11, 13}}, {
        "what the hell is a treadstone.", {11, 4, 7, 15, 4, 7, 13}}, {
        "papa.", {7, 13}}, {"as a plumber.", {10, 4, 7, 13}}, {
        "what ten thousand pounds.", {4, 8, 8, 7, 13}}, {
        "up get it.", {2, 15, 11, 13}}, {
        "are you declaring an emergency.", {15, 11, 15, 4, 7, 13}}, {
        "shall i remain here in our hotel room hiding or shall i carry on the \
best i can.", {15, 6, 15, 2, 10, 11, 7, 7, 7, 3, 15, 6, 15, 10, 4, 1, 6, 15, 
         13}}, {"whatsamatter.", {7, 13}}, {
        "what was i gonna say.", {11, 15, 6, 15, 10, 15, 13}}, {
        "and those were the guys who went on the exercise with you.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}}, {
        "i want the money asshole what do you think.", {6, 15, 4, 7, 7, 11, 
         15, 11, 15, 13}}, {
        "i mean what kind of people do well at this stuff.", {6, 15, 11, 7, 
         10, 7, 15, 2, 10, 4, 7, 13}}, {
        "how are they treating you.", {2, 15, 11, 15, 11, 13}}, {
        "wanna stay with me tonight.", {7, 10, 15, 10, 11, 2, 13}}, {
        "at what exactly.", {10, 4, 2, 13}}, {
        "do you think it's done.", {15, 11, 15, 11, 15, 15, 13}}, {
        "what is so goddamn valuable in your life that you're worried about \
losing.", {11, 15, 2, 1, 1, 10, 11, 7, 10, 11, 15, 15, 10, 15, 13}}, {
        "pittsburgh.", {7, 13}}, {
        "[was it] &quot;meirschultz&quot;.", {13, 15, 11, 13, 13, 7, 13, 
         13}}, {"i know you're expecting some kind of -- extravagant behavior \
but believe me -- do you believe me.", {6, 15, 11, 15, 15, 4, 7, 10, 13, 1, 7,
          3, 15, 11, 13, 15, 11, 15, 11, 13}}, {
        "what's a lunch cost these days.", {11, 15, 4, 7, 7, 4, 7, 13}}, {
        "where is inner space.", {2, 15, 1, 7, 13}}, {
        "why won't you check out lv-426. ...because just one of those things \
managed to kill my entire crew within twelve hours of hatching...", {2, 15, 2,
          11, 15, 9, 7, 13, 13, 2, 2, 8, 10, 4, 7, 15, 10, 15, 11, 1, 7, 10, 
         8, 7, 10, 15, 13}}, {
        "look butthead i'll treat you so nice you'll never want to let me go \
okay.", {7, 7, 6, 15, 15, 11, 2, 1, 11, 15, 2, 15, 10, 15, 11, 15, 1, 13}}, {
        "that obvious huh.", {10, 1, 7, 13}}, {"permission.", {7, 13}}, {
        "okay miss starling.", {1, 15, 7, 13}}, {
        "what's dr. gillman say.", {11, 15, 7}}, {
        "why did they turn back.", {2, 15, 11, 15, 9, 13}}, {
        "what's she doing.", {11, 15, 11, 15, 13}}, {
        "how you doing sam.", {2, 11, 15, 7, 13}}, {
        "why do you eat that stuff.", {2, 15, 11, 15, 4, 7, 13}}, {
        "what exactly did he call out.", {4, 2, 15, 11, 15, 9, 13}}, {
        "say---you think that's the same guy who was in the accident with \
lucy.", {15, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}}, {
        "and you sven aren't you afraid of crossing the rainbow bridge to \
asgaard.", {3, 11, 15, 15, 2, 11, 1, 10, 15, 4, 7, 7, 10, 15, 13}}, {
        "not great.", {2, 1, 13}}, {
        "running out of time are we.", {15, 10, 10, 7, 15, 11, 13}}, {
        "you're not using the same guy who tried to fix it.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}}, {
        "to you ... .", {10, 11, 13, 13}}, {
        "did you know you shouldn't light three cigarettes with a match.", {
         15, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}}, {
        "my my my how did things turn so hostile so quickly.", {11, 11, 11, 2,
          15, 7, 15, 2, 1, 2, 2, 13}}, {
        "no but my dog he's a got millions of them -- have you got a \
license.", {4, 3, 11, 7, 11, 15, 4, 15, 7, 10, 11, 13, 15, 11, 15, 4, 7, 
         13}}, {"this this happened.", {4, 4, 15, 13}}, {
        "how did you manage it.", {2, 15, 11, 15, 11, 13}}, {
        "whose justice.", {11, 7, 13}}, {
        "did they tell you to sleep with me.", {15, 11, 15, 11, 10, 15, 10, 
         11, 13}}, {"max, what is it.", {7, 13, 11, 15, 11, 13}}, {
        "will you come see her with me.", {15, 11, 15, 15, 11, 10, 11, 13}}, {
        "how you feeling all right.", {2, 11, 15, 4, 7, 13}}, {
        "is it inevitable that the game plays you.", {15, 11, 1, 10, 4, 7, 15,
          11, 13}}, {"you found anyone in yours.", {11, 15, 7, 10, 11, 13}}, {
        "don't you want to see what daddy does for a living.", {15, 2, 11, 15,
          10, 15, 11, 7, 15, 10, 4, 7, 13}}, {
        "well could you lend me some money till you have one.", {2, 15, 11, 
         15, 11, 4, 7, 10, 11, 15, 8, 13}}, {
        "i'm just here shooting this band what about you.", {6, 15, 2, 2, 15, 
         4, 7, 4, 10, 11, 13}}, {
        "it's your bank as well as mine isn't it.", {11, 15, 11, 7, 2, 2, 10, 
         7, 15, 2, 11, 13}}, {"vasquez how you doing.", {7, 2, 11, 15, 13}}, {
        "you don't like me.", {11, 15, 2, 15, 11, 13}}, {
        "philip swann.", {7, 7, 13}}, {
        "the police always do don't they.", {4, 7, 2, 15, 15, 2, 11, 13}}, {
        "people are gonna be thinking the younger james gang.", {7, 15, 15, 
         10, 15, 15, 4, 1, 7, 7, 13}}, {
        "so why isn't it all bloody.", {2, 2, 15, 2, 11, 4, 1, 13}}, {
        "is that all there is.", {15, 10, 4, 11, 15, 13}}, {
        "then we'll go dancin' okay.", {2, 11, 15, 15, 7, 13, 1, 13}}, {
        "you're not from l.a. huh.", {11, 15, 2, 10, 12, 2, 13}}, {
        "the skipper.", {4, 7, 13}}, {
        "little details little inconsistencies designed to bounce us back \
from one of you to the other asking questions killing time until the \
transport arrives and whisks you away to where senator daddy can protect \
you.", {1, 7, 1, 7, 15, 10, 15, 11, 2, 10, 8, 10, 11, 10, 4, 1, 15, 7, 15, 7, 
         10, 4, 7, 15, 3, 15, 11, 2, 10, 2, 7, 7, 15, 15, 11, 13}}, {
        "and back.", {3, 2, 13}}, {
        "and he loves you back doesn't he?", {3, 11, 15, 11, 2, 15, 2, 11, 
         13}}, {"he weighted her down.", {11, 15, 11, 2, 13}}, {
        "move your ass! shit.", {15, 11, 7, 13}}, {
        "do you have any sort of guns or ammunition here?", {15, 11, 15, 4, 7,
          10, 7, 3, 7, 2, 13}}, {
        "how did you get all of this stuff into the country?", {2, 15, 11, 15,
          4, 10, 4, 7, 10, 4, 7, 13}}, {
        "it wasn't that bad.", {11, 15, 2, 10, 1, 13}}, {
        "i have to.", {6, 15, 10, 13}}, {
        "say it backwards.", {15, 11, 2, 13}}, {
        "try a strawberry.", {15, 4, 7, 13}}, {"since when?", {10, 2, 13}}, {
        "i have my own warrant.", {6, 15, 11, 1, 7, 13}}, {
        "truth is...", {7, 15, 13}}, {
        "he puts human life at risk and-- <u>no</u> <u>i</u> <u>did</u> \
<u>not</u>.", {11, 15, 1, 7, 10, 7, 3, 13, 15, 4, 7, 7, 6, 6, 7, 15, 1, 7, 2, 
         15, 13}}, {
        "listen to it for christsake.", {15, 10, 11, 10, 7, 13}}, {
        "uh look..", {5, 15, 13, 13}}, {"free admission.", {1, 7, 13}}, {
        "back in the sixties i had a weather changing machine that was in \
essence a sophisticated heat beam which we called a laser.", {2, 10, 4, 7, 6, 
         15, 4, 7, 15, 7, 4, 15, 10, 7, 4, 1, 7, 7, 4, 11, 15, 4, 7, 13}}, {
        "so anyway these two federal marshals meet the plane and they take \
our address and they ask us never to fly with 'friendly skies' again.", {2, 2,
          4, 8, 1, 7, 15, 4, 7, 3, 11, 15, 11, 7, 3, 11, 15, 11, 2, 10, 15, 
         10, 13, 1, 7, 2, 13}}, {"that thing's dead.", {10, 7, 1, 13}}, {
        "i am not a doll.", {6, 15, 2, 4, 7, 13}}, {
        "i just went upstairs to see this man lacerda.", {6, 2, 15, 2, 10, 15,
          4, 7, 7, 13}}, {
        "i want you to help me help my husband.", {6, 15, 11, 10, 15, 11, 15, 
         11, 7, 13}}, {"- give it to me!", {13, 15, 11, 10, 11, 13}}, {
        "renault or yourself?", {7, 3, 11, 13}}, {
        "i've seen a few.", {6, 15, 15, 4, 1, 13}}, {
        "i've been through this.", {6, 15, 15, 10, 4, 13}}, {
        "out with it.", {10, 10, 11, 13}}, {
        "oh matt you must be mistaken.", {5, 15, 11, 15, 15, 15, 13}}, {
        "might.", {15, 13}}, {"lost in the storm?", {15, 10, 4, 7, 13}}, {
        "too bad ...", {2, 1, 13}}, {
        "fenrir the wolf covers the sun -- men fight and kill each other the \
whole time.", {15, 4, 7, 15, 4, 7, 13, 7, 7, 3, 15, 4, 1, 4, 1, 7, 13}}, {
        "that will make it even more official.", {4, 15, 15, 11, 2, 2, 1, 
         13}}, {"she just farted.", {11, 2, 15, 13}}, {
        "shrimp and fries.", {7, 3, 7, 13}}, {
        "i've got three satchel charges six gammon grenades a dozen- \
and-a-half pineapples and all my regular gear.", {6, 15, 15, 8, 7, 7, 8, 7, 
         15, 4, 7, 13, 7, 7, 3, 4, 11, 1, 7, 13}}, {
        "if he was so good why's he so dead?", {10, 11, 15, 2, 1, 2, 11, 2, 1,
          13}}, {"best to keep your sight fixed on our duty.", {2, 10, 15, 11,
          7, 15, 10, 11, 7, 13}}, {"mr. cole...", {12, 7, 13}}, {
        "david let's go now.", {7, 15, 15, 2, 13}}, {
        "all right you raise the kids -- i'll raise the roof.", {4, 7, 11, 15,
          4, 7, 13, 6, 15, 15, 4, 7, 13}}, {
        "'guess i was worried we didn't have anything to talk about since \
work was off-limits.", {13, 15, 6, 15, 15, 11, 15, 2, 15, 7, 10, 15, 10, 10, 
         7, 15, 1, 13}}, {
        "i know we banned this play but frankly i can't remember why.", {6, 
         15, 11, 15, 4, 7, 3, 2, 6, 15, 2, 15, 2, 13}}, {
        "i still can't accept the world as it is!", {6, 2, 15, 2, 15, 4, 7, 
         10, 11, 15, 13}}, {
        "he's at the ministry.", {11, 15, 10, 4, 7, 13}}, {
        "don't turn out the hall light.", {15, 2, 15, 9, 4, 7, 7, 13}}, {
        "ira?", {7, 13}}, {
        "can you drive this car?", {15, 11, 15, 4, 7, 13}}, {
        "i told you what to do.", {6, 15, 11, 11, 10, 15, 13}}, {
        "i can't do it again.", {6, 15, 2, 15, 11, 2, 13}}, {
        "and you must be steed.", {3, 11, 15, 15, 15, 13}}, {
        "it may interest you to know that at this very moment he is on his \
way here.", {11, 15, 15, 11, 10, 15, 4, 10, 4, 1, 7, 11, 15, 10, 11, 7, 2, 
         13}}, {"so i met a new friend.", {2, 6, 15, 4, 1, 7, 13}}, {
        "i'll tell you what kiddo--why don't i fix us some french toast?", {6,
          15, 15, 11, 4, 7, 13, 2, 15, 2, 6, 15, 11, 4, 1, 7, 13}}, {
        "and still we know in secret that nothing is more important to us.", {
         3, 2, 11, 15, 10, 7, 4, 7, 15, 2, 1, 10, 11, 13}}, {
        "i don't even bother with guests registering any more..", {6, 15, 2, 
         2, 15, 10, 7, 15, 4, 1, 13, 13}}, {
        "i suspected that he -- well.", {6, 15, 10, 11, 13, 2, 13}}, {
        "it's a question.", {11, 15, 4, 7, 13}}, {
        "a man like that would want to lay low if he was planning some kind \
of damn sabotage mission!", {4, 7, 10, 4, 15, 15, 10, 15, 1, 10, 11, 15, 15, 
         4, 7, 10, 7, 7, 7, 13}}, {
        "here are the pistols.", {2, 15, 4, 7, 13}}, {
        "good afternoon mr. harris.", {1, 7, 12, 12, 13}}, {
        "the food lines took forever.", {4, 7, 7, 15, 2, 13}}, {
        "don't you like girls mr. cunningham?", {15, 2, 11, 10, 7, 12, 12, 
         13}}, {"i love you harry.", {6, 7, 11, 15, 13}}, {
        "please have a seat lieutenant..", {15, 15, 4, 7, 7, 13, 13}}, {
        "anybody usin' these drawers here?", {7, 7, 13, 4, 7, 2, 13}}, {
        "churchill vit his cigars and his brandy and his rotten paintings.", {
         1, 7, 11, 7, 3, 11, 7, 3, 11, 1, 7, 13}}, {
        "sometimes you think they've betrayed you.", {2, 11, 15, 11, 15, 15, 
         11, 13}}, {
        "i should have got rid of you long ago!", {6, 15, 15, 15, 1, 10, 11, 
         2, 2, 13}}, {"i chant.", {6, 7, 13}}, {
        "i'm crazy about you sid.", {6, 15, 1, 10, 11, 15, 13}}, {
        "thank you for correcting my ignorance.", {15, 11, 10, 15, 11, 7, 
         13}}, {"goddamn you to hell!", {1, 11, 10, 7, 13}}, {
        "i survived.", {6, 15, 13}}, {
        "it's not too late to keep going up to vancouver?", {11, 15, 2, 2, 1, 
         10, 15, 15, 2, 10, 7, 13}}, {
        "jesus christ i used to have to listen to my old man use that every \
morning.", {7, 7, 6, 15, 10, 15, 10, 15, 10, 11, 1, 7, 15, 10, 4, 7, 13}}, {
        "he <u>has</u> been going after everything.", {11, 15, 15, 2, 15, 15, 
         10, 7, 13}}, {
        "i have a plan which i think will work.", {6, 15, 4, 7, 4, 6, 15, 15, 
         15, 13}}, {
        "i can't get it until monday.", {6, 15, 2, 15, 11, 10, 12, 13}}, {
        "only way you're ever gonna find out is reincarnation...", {2, 7, 11, 
         15, 2, 15, 10, 15, 9, 15, 7, 13}}, {
        "i asked her if you were happy to see us.", {6, 15, 11, 10, 11, 15, 1,
          10, 15, 11, 13}}, {"it blew up.", {11, 15, 9, 13}}, {
        "so what's your excuse?", {2, 11, 15, 11, 7, 13}}, {
        "poofs.", {7, 13}}, {
        "i want to go back to the clock people.", {6, 15, 10, 15, 2, 10, 4, 7,
          7, 13}}, {
        "that's a fairly crummy way to start a morning.", {4, 15, 4, 2, 1, 7, 
         10, 15, 4, 7, 13}}, {"i think that's it.", {6, 15, 4, 15, 11, 13}}, {
        "forty- five minutes on your knees with the dry heaves..", {8, 13, 8, 
         7, 10, 11, 7, 10, 4, 1, 7, 13, 13}}, {
        "i was ready for the next step you weren't ergo i walked.", {6, 15, 1,
          10, 4, 1, 7, 11, 15, 2, 15, 6, 15, 13}}, {
        "interred parkside repository little chute wisconsin.", {1, 7, 1, 1, 
         7, 7, 13}}, {"i'd love some.", {6, 15, 15, 4, 13}}, {
        "and drive an old jalopy?", {3, 15, 4, 1, 7, 13}}, {
        "how much for the week?", {2, 2, 10, 4, 7, 13}}, {
        "i didn't take you to raise.", {6, 15, 2, 15, 11, 10, 15, 13}}, {
        "mom i just finished the third movement of that concerto i was \
working on.", {7, 6, 2, 15, 4, 1, 7, 10, 4, 7, 6, 15, 15, 10, 13}}, {
        "i'll just get used to it.", {6, 15, 2, 15, 15, 10, 11, 13}}, {
        "she didn't seem the type to lam out--even if she got the chance.", {
         11, 15, 2, 15, 4, 7, 10, 15, 9, 13, 2, 10, 11, 15, 4, 7, 13}}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question"}, 
    "LogProbabilities" -> CompressedData["
1:eJyVVm1Ik1EUXttM0j9O1KhEpxGWS6GyD6kwg8QfWk4oJCRSMBChrJCcYGIo
Is5FFFES0tefHA6mlubUe53BCo3E+mG4yC+GlkMt0TlifZDX4LnB4f0xLnf3
nuec85znnPvGFV7KLVKrVKrXv39/1rqKV+W+BxF866ZRb2ffNYb7O2MpusLi
ETaf6g8cT15eWz3rK2Vf2fy+J2pCw+M85pbzGS/Y18BcduXKIxYbeDt4aCGE
I36oprXiy+1FlnWPzW3//nH9f3EP8fEc8a539w62VnYwo3mPQVur5abJ3WP5
JxaYe3hnx32HmxnMQcX+0vo1vzqu1if6Q60/WNndaV3OGZfk78lLi6k2RsU/
9Tgm9EYnmT/FR+Tp5w57iZoXpIfEzfi6GcYn4ZX0H83RN7DwGe605uqkfDC+
vLN7bVfif7KnI+kP9zsGJLzYzOzUqJYgPm+xn6x5Zlecj2mXa7XoVBjPN0yp
UqpvrdVtlg0sjvp3vJtc51HwivdRD1R9ER/PpXyKMz1tNitLatduPGAJ5lhv
9IfxYLyo//imJtfKzSG2r9G7ks5XpfgE76IOGA/iY/0ErvCD9hQ/MbPusvYw
H1u2NUfXRw5L/KM+8Fxp/al+Rb2i/pXqUfS16POsg1WdU8kaPpRxxJR2oUvK
H+1xPlD5Ke0P3ON8k+5DfbHfKXyBK/ygPeof70vzDexxvlLzCs8vb9k2WppU
w3pddZ99VeESHs5fvI977Mer1sNpbY9VvGI64YZlc7/Uz9hPiIf2qA/kD/Gp
96axxLjkfrPEnOeinQ0FH6T3xxhR7bfljbPy8fGFY7le8j7qheJL0hPsqXlM
8Yd6wnix3tK8Bb5EHURd0B/Fv5Qv8R7g/FLKH8W/9H1B9DfGg3pAfOxf5AP5
wv5BPKFDoUusD9aTmmeUP+p9puaHND8Je+SHioean+S8hvjw++D//fTvPaf0
iv2C+f2128A93xIvBif0yfVTqGfEk+pHvD+/AMp56rg=
     "], 
    "CountMatrix" -> {{69, 31, 0}, {25, 75, 0}}, 
    "IndicesMatrix" -> {{{104, 105, 107, 108, 111, 113, 115, 116, 117, 118, 
       121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 
       139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 157, 
       159, 160, 162, 165, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 
       179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 193, 194, 195, 196, 
       198, 199, 200}, {101, 102, 103, 106, 109, 110, 112, 114, 119, 120, 123,
        131, 132, 138, 146, 152, 154, 155, 156, 158, 161, 163, 164, 166, 171, 
       175, 183, 187, 189, 192, 197}, {}}, {{3, 8, 9, 14, 15, 17, 28, 39, 41, 
       47, 48, 50, 53, 55, 56, 60, 81, 90, 91, 94, 95, 96, 97, 99, 100}, {1, 
       2, 4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
       27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49,
        51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 
       72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 92,
        93, 98}, {}}}, "ExtendedClasses" -> {"Not Question", "Question"}, 
    "Weights" -> SparseArray[Automatic, {200}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00032245500000000003`, "SingleEvaluationTime" -> 
    0.0041395`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740086225009004*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"e5cc3856-4b2d-4dc7-a1be-ea3687cbe143"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"76f749cb-8628-4673-a9de-a9c265a377e4"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.918764360245441, 0.8114757915891664, 0.5170170835843346}, {
   1., 0.42, 0.}}, {{0.9308204233591533, 0.48872120755758486`, 
   0.0034442575614848777`}, {0.8936386975647902, 0.7048745705442823, 
   0.29416204775797117`}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["69", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "69", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7340425531914894`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.69`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.711340206185567`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{69, " examples of ", "Not Question", " correctly classified"}], 
         
         Row[{"Precision = ", 0.7340425531914894}], 
         Row[{"Recall = ", 0.69}], 
         Row[{"FScore = ", 0.711340206185567}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["25", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "25", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.26595744680851063`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.25`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          25, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.26595744680851063`}], 
         Row[{"Row fraction = ", 0.25}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["31", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "31", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.29245283018867924`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.31`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          31, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.29245283018867924`}], 
         Row[{"Row fraction = ", 0.31}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["75", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "75", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7075471698113207`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.75`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7281553398058254`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{75, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.7075471698113207}], 
         Row[{"Recall = ", 0.75}], 
         Row[{"FScore = ", 0.7281553398058254}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.69`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.69}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.75`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.75}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "94", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7340425531914894`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{94, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.7340425531914894}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "106", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7075471698113207`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{106, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.7075471698113207}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["100", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["94", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["106", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7400862456922197`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"4abb7f32-3900-4a1a-8331-9545f2c51f6d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classify with 1000 sentences per class", "Subsection",
 CellChangeTimes->{{3.7400862648808203`*^9, 
  3.7400862891752462`*^9}},ExpressionUUID->"442669c2-296c-487d-933d-\
58838e62affc"],

Cell[BoxData[
 RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
  RowBox[{"questions", "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", "100"}], "]"}], "]"}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.7400871541627293`*^9, 3.7400871651133204`*^9}, 
   3.7400873601446047`*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"05a4d2b2-86a2-487b-b829-35fa2b7bc77f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "2000"}], "]"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "2000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}]}],
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"4a77f52a-47fc-426a-8bb2-14b305238994"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["4000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1061968, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10529582893065609946752054009641029904160274829777827873888, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904160274829777827873888,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7400869273112173`*^9, 3.7400874209055862`*^9, 
  3.740088128068754*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"1bdcb11f-61c2-446e-9d92-9fffae167afb"]
}, Open  ]],

Cell[BoxData["cl1000"], "Input",
 CellChangeTimes->{{3.74008745999564*^9, 
  3.740087465485717*^9}},ExpressionUUID->"4f5700aa-442d-48ee-a951-\
c2cd0b983e3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl1000", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"partsOfSpeechNumbers", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740087499437152*^9, 3.7400875576166143`*^9}, {
  3.740087609923555*^9, 3.7400876131367607`*^9}, {3.740088147785582*^9, 
  3.7400881664146214`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"8934d3ef-dd87-4142-8bed-ceca9391344b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.759000000000000008`5.026979811276751", "\[PlusMinus]", 
                    "0.0135315225345157188`2."}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[
             ClassifierMeasurementsObject, 1575752, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierMeasurementsObject, 
            10529582893065609946752054009641029904178721573851498598656, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904178721573851498598656,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7400875603210583`*^9, 3.74008817049942*^9, 
  3.740088233211849*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"8f05786e-4d35-4ea5-a1c6-ddb2c4c49d78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7400875661705217`*^9, 3.740087581144607*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"57535679-2960-420a-8ceb-6b07723069ad"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8993928272988664, 0.7300381009693961, 0.3436477252106045}, {
   0.9331888196910629, 0.48636850371337426`, 0.003326341734721111}}, {{1., 
   0.42, 0.}, {0.9228038878539331, 0.82674012745567, 0.5567209370562367}}}, {{
   0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["393", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "393", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.74573055028463`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.786`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.765335929892892`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{393, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.74573055028463}], 
         Row[{"Recall = ", 0.786}], 
         Row[{"FScore = ", 0.765335929892892}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["134", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "134", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.25426944971537`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.268`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          134, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.25426944971537}], 
         Row[{"Row fraction = ", 0.268}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["107", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "107", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.226215644820296`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.214`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          107, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.226215644820296}], 
         Row[{"Row fraction = ", 0.214}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["366", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "366", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.773784355179704`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.732`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7523124357656732`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{366, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.773784355179704}], 
         Row[{"Recall = ", 0.732}], 
         Row[{"FScore = ", 0.7523124357656732}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.786`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.786}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.732`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.732}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "527", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.74573055028463`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{527, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.74573055028463}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "473", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.773784355179704`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{473, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.773784355179704}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["500", TraditionalForm]}, {0.5, 
       FormBox["500", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["527", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["473", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.740087581820541*^9, 3.740088240232705*^9},
 CellLabel->"Out[70]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztPQusJFWVxbz3Zobxw7Ds4hoTEYVhBwZmDUZdhAiOjoAYgfmBGRfRoZ2R
UOAsVgZCuyotSNqMadFtWBtlS6VB7dmlM/Q49Mp0ZhvX1q2EAlOYGqxMClPY
szZJkdrYGzs5e86599anX79+P0CZfZ1Uddete8+99/zvuefd99Hrb915w03X
37rr09e/7cO7r79l565P/8PbNt68G4smTtC0E9bh9bdv0+g3aJq68edcusmH
Eb//ib8m8BZB1SiAFYF2b/rVJN5CfmVHAIN+f4VsMehHEPUH/LQshjKAKOrz
05QqG/THlk3Iez+KYCDGPLLe5Ih66bZiKMlY0mWb0jN6HU+2ls9BLicvowI+
9hI5JuQrtgCOddpmHsFhDew8V6hBF8H1gzYYuZwongKj6kgE5Ql34LdN2WS5
aIJvnVqBu6l7Eb2PIeaKYPUIpA8VQ0KcwMHUsOv0XN5IrZLBMlTVYxeqPBEd
dN2AvJ4Dw8QJRC6U9BhkuempIi1TJru5Ko2eswV6jByYdo/fdyo6ztNl9BgS
PX2vhoDKPD+q3ywXoekdgxqOoNwRpXY1j6NJ4afnEuqgFRBZ+tAs5KDU/g1U
saxiYV8D8b4tmoPXrPAw3ZoBuXKHy0K7Cjm9ihBBIOevEdIMYKnLoy0cpgEO
81DIVKfh9awqFKtiKqGDIHMVODqiDLu5Oo2cN4vJ6Hmw+2KQA0KEXoNjhBxT
tA5aJe61WChAvlCEUrEI1UP/Afl4JDTXqkSmRM4xGwzdpB4l2U8ShECEmk4I
g6AFOs6yUESY+QIUSwjXPAT7kFBVNwaKLJCGgQISDcP9ixTDDsBuVPC9juNE
uAi/6kTcb6dW5v5oHtW2N6osI1Vnx6OtWJL8JjIlkj9yq8wqXhhB70iN+d4N
Bd+XqUc3yzaWaQyxjZOiL7JaqQANZLUqYcYOxazxfcMNhdSWUAhqLrjVhG16
ljmdbUaBfUF0GQZQLVXACQXbNJBtKthVZFdw+CWcygBCrw31pgMvjSgbDLHN
Cu6hUUCEGLqQ4rzJKqfv1aVIng6F5nNg10uxpBeqFms6Ujn5nJByA8mdZ52D
yEbWIqXcteuSLDnQi3V4/khdwkBE97PvlRoj5JtSBRo0JqF1pEY9dRrM7iDR
cV7LTOCh6nQjAa9aNGS/OtRJd0wvkyxzv2ROqdtTum6KTAzEH2Fj5KjIAqB9
Ic4RwiNMwnKW+gRUJDjDiRKrNGxtJhHwgDkgb7BoCEgnDkFKpixHQ+9GGqJl
I8rkXB+W82LeKVuCcnk2pzEoAl03mMd4EEJwLcQyqyBtRVwvBBMx2cG2n8qC
H/Q8sN0eo8izbEDDkjWjYlLayrisB7bl0WhT4LGtLdpK8NxoFh9iMb+/qkiI
lO4GgbB8oQ+W7dPQtsmR9ZwmFNDANdxI+6Bo+RX+WgU9tw1muYRKLBdzmtUX
CpafS02CulniiVCIdj0WsqoTDkN0SHHkClBvIWSCWmqDYomeU+cekHqb5ND7
gQVFgqaTjusxIZH7MkCnGKiORpQ+skbKbYrYCKKel7Z4FbOE0ywLAay0oEe+
zKCL5BcaltwvLPpAduik83TWnQO2g7lCXYg7fgKrypobh36V7JgsukQE+Svs
GJCekx/t4qE5oEbPKQdA2CNyWPheqDtxsyvVHPo98H0fAiQsX36ARHaghF0W
UU0SwXFemTmsTDuW/BkgO7SbDWg0WuD44SaFtCgAq+OktNYEBLbFepieNgio
d6nqfeJ3wduq+gAdkkatQYpYG0ZJVjxR7fR6JENaZrCT5JBAQXIdNlkmi0NH
qeAUvlegKaypIvmJUFibUCnmY8dsRvxPCEcojxTtp9Rl0OKe8ugP5HJ5Hrfi
IdFdno2A36mxuWN+KpSRuS1wkR5hX/FQIZ5tXxk82cvyZJooCoOBx55MPK/l
siMSAWm5zCb4vf7GEXLFwxeWkm2aUQX2Mtkap4BOIiWkAKNc2d3+pVlgg54l
jeKQYWOs2lxmJZwOETJR22JtelmWq0PfBuvXvwHXcRAjXdaIsWSi2XNsB5Cn
tKtT3BC4Hpcl9ZC7OoK7NmSJ5pg5JTQxQxGL95Ch+rHzTW9QdRTFZJrBQHGS
clPImKM7kmG/FUKrmLHk4XAD6DSqUDASTz+xX6B9TGJPuO956Pghz6fruRBE
En2RBxWdJNQfYvZEh/WgaRbVQqZYqUHbcsAPeEYxU5AkoWc8kIzOmiuxyj4x
s8TLJel+liOfo342ipK+BtTaTIEtavB+Q6huZOGO9Jf0cgt4Kj2hXgoNb8Tg
WVDMFpHpGkl9p1GOJbXWZBmJMZdDvzmQS8jMENEgeRa07YCfPi6JgZKhjD+O
w4dOu414cVlDSabgd7OYxO30dZCG8KZUgVC0EDy+jS7tHL6PKDsPXrxDky/w
Fz+dkypTnPBXxx/sa+m+fanNUpulNkttltostVlq8+fWZh1/rZKR/WSh1+/a
UKt1IPZV8X0YRnEEAx1mfGSHWa3eRDwm4lVZUjbAVbFYAKbjNCr887r5DFl5
qgPZ+SADNIRwaAeDl4lhSMtyWcZRUfHQg5ZZZL9SbR3kCyIKYZTqvAQK2pX4
Xa5QYu+3xrG1AYUFk3e41Kx22PWErlXjVbh4twoXXh0OVdCqUKwaCvD0r0TI
nFGLvr2ZlxsDJ3IU0qP6fZeXd6K7zHM8uxlQNpVGGVB0pWUWUmMtQNtXRO1B
o6TH74xyE9RSd9C1qEPx7gQw28EJVHyCwOJa/ppiirdKMm7T9qDrNiS0tdwT
72gMfI7GGIiJCFdvnarYfKni4im0xdq+2qHgUh+smqCAFYo2uikYMPLFmrrm
RXIVimuvXl/+JkwOoFUUK1MXy/u46CjT0rfQgL5cr1UdObfkeSQq10qHODiw
GY48upmfzqX7WZIjA0OD4HZNPom7b2ixk7xsRD3R9k0Z0vSsCj/XHVzi4nK1
VRFRLg/Z2m+K4EGn2+fJU3S3zNswYicoV0QWRbFyG2Jjww5By9DmTApkC9zK
8EUfwZQqTfD9DnMyLshog41xkWYzhStenuFqkRdxJMEUr+lYuCr9H/Bdl4MG
UdeDdr0s6RmJnQXJ2WKXAX9L1jXj6MWJ0OtQGxN686TNGXyfAu/+d4F2+jvh
iCiHw19ah7Bpj3UFaOvXweFHt6k2eG2GO9efBvv3b0MyYMmZTIs3wItIn9tO
461Zvm7bKmjo5TQ4R5Zp+N7aI8r/+T2a7GQirkuQBLzXZ2hL+4MFXAHHkfPI
Zho2/Rc52GjUXIUL2pWhIEwk594M1JI14IUzxSAzpJ2Q3GGSkpL6b5UAQ3sG
I1Cal89urcDaAUGw9LlNehXrqmK1naXcCCqWrVANXDCYDnZP9RjFPWaIyDQU
pDsJjnzrnTgTSbr9G2EtYvnB6lZ8uxV+eI0Ga3d8CH5x/0bY/40PwsFvvB9u
OP1UuPOujfDsgW3amoR8J0N7I5LnPRocQzIcu1mQ69CtGnwSv/fuEOR57P1I
yg0a2JsEKT0i2W5B3scNTXsH1aKN39xypdHk4E37BbVrEXOt3ygwd/83Tzwf
7xySUEqiDlPKlUIUxZR6qwim0NbXzMwv6tAeViS2P0JPRFhawUs8rFyxCpbX
xXc9CESUh/dgqK9+hoSCiVB3qFkEzDwVlj1ijIolu5e7duYssnfk/hQB8fL2
b0UM0buVcPCzq0G77hK4k0Rnw3r41q3vhEu11bB9x3vhF/u3rcmI3+2CdixG
KIoXYpvHbhG0eUyKnHstPiMNDxGt35eo1l1Ux5hZ/PqILp0snRdyxLBTzbOa
tEK1F5Xi4hpjqidjWJ042Cs0rVF1phGVCZgm6lqhLUn8oiGipp4HQZO7KKJb
FQSO2O7TSYxFVzra36AXoCHQmb/csAdWvcjWru0G8JKTyKVtGjyjhuWBZ4mt
QYP2yiNHRuny0LRdaNeKknEGY6iKKuWBmKqSmieC98B74QJWhKg9922FZ1l0
1zPlv77+LbD/gNSowrqdBA++R4jh5ZcjafYIkmpnafDNywVZ775eg/blos7n
kKS3nSvE0sXWaxjGZJaMfpMLsLjS8mHaTiIyc6vIstSbQSR10x6mXiS3oZox
Rs5mH4XERKeN3L4HZcOApqfUWfa55zSgIMPqRtEEV0lv0IGS3EzWjQLU7S5N
II7x085PD21wsdyUTnUI7araXNahpJztAfaXL0K9WRVtdQPKdZuc3VEEfDvf
V0Pw6Ea4YcNa+PpnT0uZxk1w+FuXku5EXfsRuAnxfs/9m7gt69rr3gt3XHAa
/Ouj285Kq9YA1Wn7JiGC9rWCRr4U0Ta+O3QdXmglPaTxIVSvn7xSA2cniiTS
17qZxVrSMyuW5F6wE40eT9jt0lZHTC0ibMoq8s6WXhthFbuco1Du9LKEPZGh
NIsCmbW2DQH24NlNKOpy5z0C7S+57nIciMmixK45rXTqFv1ePQ7Bj18F375a
ugXr3yUN2KVswH64bxsbsHtO1+Dz37hKtD3wEbiBpedUODiEYGW7CMHHdgqY
ZJs+R0KSE+WHUO9pWM8hApyKriTpydulndujEJx1KVXGh1GpQ6vVgibt0rUc
nmbQLjNqGraPGkNsD3G2Bu0u0c6kgbwcBHIvtkDLEIXhZNEUcspJLhWSz5dq
ICUjxi7lGTTrncSBEC7hKOy+g++rmFUfvGY165dnHxfY/AFhe/0auHMHsrSG
+mbftmVSXR0hBxCJsv/RjFN3cuwJ7NooPIHLNwpsWptE+d0bxfc3dwoVRXUu
fB+qorOEqgpmYl38uI0yGEYe8nm8UNKNYkNKcp/WgwIjK6HccOJdB1reVQsy
w0QvQMuTqkuuu+UCud/nNeq5MyrolXi/EvbvvQz8lFt7eO/74dtfuhh+sW/r
hFq1IN5+hq7TM0o3K71KMv0jRMK/7WD5VJbUQW57EIsP3aSs6yTj5TF0cB/a
jlx5u6bWPa+xwMZSm6U21EZ4aFMQBS54lN0ZulAzTfScAm3TAuAJI7wC4Vhs
mSpoaqrkKPJ+P2+YxzvTC4FLaUlGhfZ0aS1eYd3dKRfJMV0kXBP0UgdCdHSN
Ygui0EZjXAJ/sBi4E+xxFoWPk+zTJnmVcR7H/Gmm8sgieYXQ9X3ad17IcBUb
UJZKu1EDE1mg3rQ4aWBRbBCJhXGuUIZarYouoHLqF88GRK7kE4Gp0xJmkXAp
CSBfh1CZKHRvi7Q0WiTbcrZEPifTEUKoyJBff4F4WKbgDvoQoLtSqiKtIor7
hnDshWMcZF4I3cSAgaIrFV1ERAXHitTMhXJsjN6nH4J/vK8BjuOIy30avnNH
YdHopRWtwemmBl8i3XPh0ptkGC6OrVisllGAEH9yGmuX0oCK5D4uRqvECUwv
o1bJbAsIrYKw6S4SX1We6MI11pKVeS1ZGZGOSyzLqWZCZJ9C8JZlYQvL+iU8
eehn8Nv/XdjQpaYRMQCd9lcMA8t0vQgyUrqgUS/Wb4IbNbqwDd63w++f2fun
bTNXwzxXePM1zPOFO1fDPG+4czTM88bDHA3zXOEqAyqkhvL48D4BT1lP4S8v
k5i5ALBzlZb5ctdsenneWJ2jXl4Id81FL88f7tz08vzgzk8vz49mc/L+58sG
XacNjSZnHYPXqtMGwaLYQIT0dY5q5ms2uC2KjnEcetFskK/5AF2Ka5vsmtTz
+UUrA7FnVwAnEGSrdVqoJBfLtkSqATiNKrT8CIKW2NcuN9yFoHaJVK8ZUv05
uxVLbZbavJpt3irbpJPb4j9rGiSLS5FA92eRbzfr1F6GfLtT4vHHf06U/A0T
dMEkr5yyX6gsnQu3PMmFw48tt7F1007+Buy4yOAbQYRXI4NvZrq8Edy6yNDL
5WvjM+vo7/fpN/bajQYTMX8fP0mBijpn8H0C/pDT4A+7RNkyWQaf0eClz2jq
aVq9s+i+TorX75+6B4527uGnc/n+qiQFnqKEPyG3ZJJW8pfjRO5pyXpTSbJe
nBHjSi1wfCUZKlq/ne+4xEMafvktSX7gly/n9/DspSoPcBIuOR9pT+1EXZUe
qKoSoDPpfpYU7N/u2wLamqvg6DN7qQSe27ddNpoC7Ypr4DlZ/sSeM+DsPbtR
Yqjdq5FbOJpDQsFYhRq06cwUvZZOBIw5JM4EjJKcKaWmX4u5ioIDToanL6IE
BA3+iKT84ycFF1iSK36eEyS+D3/nLtVmqqutScj/ejj6yFX4QpH/i3ALVrrr
kbvx991w77s12LL3dib/U/f+HWif2LWGHl6J9MRhYjvIFiIvUOcEOL+uMtzi
9MGY2HH+oDwigcAqYh8H6Y5ZLXAywC5BU5BSfgmS7DBpd6TxPedosB1pft8F
WI7XDHXTPPAGOLovxQOdm+FCbQP8Wor9rysb4Owbb+bfv39yF6eJPPFfe7W/
GaEGXpkcR8EZp0jqFMD2RZyr2BCnE/FfvAsKz5iDSK4sx4QKVTK8MXqPh7zJ
rENwIvxovRD1j10syL+dDMVHNXjxU8geqBouuShxFFJ1hVOgWOJ39SxLXLbm
itgSPPeDK+BCxRLPfA2+v0WDC7/weckSr2C+pOCE1bFSVi6C4p00J8yUy+g1
5N+kr4gZKO7v+EjDHFYXpBae/nuhAo4iH2jIAy9JVXBUqoZnN2hw3gXa6Lo3
SnVxJtP3dcgPu2HnFRvg3j3nJ54D8sjZyIIHO4JHDqO3oN14MzKadDKfyCEB
3wz7n9wbm57MkuIVycMUDDOZYhgDOj1Qi0jBLyyF2nJZRkuFGlWNHYaXPY1z
mEDKTlP5Hz8uBPLFzwgCHfiUKP85muLzLtJG151GoGe+At/9hHQT371F2vbb
4Tp8/v4TgkA/xPc7K18k0jCBDu5+M9r3HPwOn9aMWAW8QnmcyaJPOkgtP1Zu
HnkPYiEeJweEbhvqHV/RFV7mHNAsaVbHbtMtiPYc6cmLBOoPSL1ZukB8H96h
jarLKlVgczV7VN/fgVjWElV6+Avr8Pl8uOvGdWxZDz65F/7zHrS4714Hl33g
fFS7GosNitWaUVIDr3IKqMLPO/g+yfriALqaP93KboYyK89ercGPcMFxNKdM
zbSqKWtzEt6/DAf/ZQ8xX2xVfvnILvjuvbvgl09+jcuOPr4HDj6yG57g6/N4
7YHnnlLM+poLzi21WWqz1GapzVKbpTb/39qcI92EaWXnpeAIP2AvvvjTwU6f
sMVv53FqZXJUnnSl+n1aHvQp+BA7YqA2zpdzva7viBPB2h2wvYCc6w9mocUH
3s1wGmN8ll3PpqOcZQ11L0AnEPtjmfP8lqudGQG6WAPX98H3PFwiuS627Ebx
iJODGwfiaN6cXoK21xXnaA8GuJK16Khq7s2JsofRTfEheC1T7Kzo2JGPS6et
am68/s5Tq5RvL9bf5U5Xjflu/prk8z5VFKDa9rbIFhzSyTdS25LiTFg6S8+m
w+kqtgT0VTUmsZ0lx1QFL0zS/LoUsRchvQRaKvxQqLkZVK7ioyjpEEnbVpeD
WHSgUdbjFX3L76t8CXVQnYkTVJNuy6q0MTd08OIo+scBqpg6K3jGlilPsyuZ
0ESOsqw21MqFZI1US47jvDiLEjrvsF6rQb1ehwadrIelm2OS0KmjVTpIPLUD
aIBJp3VylNSgvHV1Gt7dckROvRjPX9cVLsqc7iVAr+RR0+r/heefh+effwG6
+Lvb7fH2cRT2JS7uUgMZeBzUMztB6ihrnw8mzNe9ZMB9W+0opWQhLw5Wh3ig
MdjI4ep2ag/bSx1EuFlOiLaVw/TVdXnvWK862vBIZXSj0vaTHezQY/kpNn15
OmC2myH0+c1yjD7DGIW+iRh9iDbshu4THFGkunWvrw3xPRG5iQSu4dXqiAMs
t8QjTnA2KXFmpvjs4mGc4WQKZY6EJOddJkpDgeUteoEvWszzPXWMqwKb6M4e
pzIqJlOpfDLiJsFOQYSobzUazK6tTuY0RSWWFI92URQdGZ+o4YRVirXrWkKV
VWw1UL9VjuUsOeqxMnzUYzx/7NKxsgfN9pwWtEUMUKqTlTEjmJYvlJEKK5Iq
aaizNH1Vm7fRdCAx9fgUT3GurmST4dpyA7vqBKkzP0U+QyE+p/N5yU9eMzlE
PF/ryPhWgXdoM9w7o2Xapl4jZn/10zo8VP0xzrcLzr8/BD+xe0NHnM5mkBIV
EEG9kJzZ2vC78dY98vCQsp2jEYqBS4TaoUhAFmdtUzor7yEP69pZ7NE0qNh5
l/d2yhyS9jNkUlDnYJ8SXHQ5N5oCVUHQZhwUKxXmIBzAEOA5mKotkvh0qHG9
Lk6Op9PkafTFKkfGhg3ObPYp1j2zaIAM2PnbpyvnqBGGjmCdq62KT9Sem5bI
CMisZitRz+OVxLBOmcVsxYcCD+ig4BAG4gTqKeIk4t7palXZknGW62oJNXJE
1ofd5Si7wvWIk6e/JsebNl4JPtXYgE/HPvpMGx7+3vfg4Ycfhh//5OdwlE7M
jk8oT7TpeDum2HicSzHNAo+3Z/HBzbP4FBkfdHZ7FoOdxaeQpFeWeZQ9Syzz
eF9iaISzGTLlzYzzL4bZfbwR2yonMcq92DAEabyBS/s1xD3E2JMzs3cMdbwh
TNxCdWp2whIj2FsJzTiDmSjsHv83AKPSgqAnWKNHV4bNBcQZDWdMaEYO6id8
+vDQDMcbyc1ShtWOdaXl4DB6E3NA3XgDmSZIR/yDhHGomwZ1tIHcKvFBwkSY
UmqpN0I5zGoUv5Ol2jhL95004NktmKw+V9/0gXT1OVuW4THNYjIynczJFFSy
Leag5jMt5qzSh+gwTlUPz3kWFTyNbONV6wND1WdRn0PjHqcWZdVxy6nvDpNz
vCKrDI91vIbKVJ9V+0zDW6Jevpd+NSe9MTzSWRRCJY2qGSVdjpCbyCiadsL/
AfxX21Y=\
\>"],ExpressionUUID->"08a5ca49-d4a9-4876-bad7-b433fea73cd8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 
  3.7400883194708557`*^9}},ExpressionUUID->"91183821-3108-44aa-a87f-\
8a7c1fe0310e"],

Cell[BoxData[
 RowBox[{"cl5000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}]}],
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9},ExpressionUUID->"20ce2fee-f182-4a76-8ef1-\
f2420b0008d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["200 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 3.7400883194708557`*^9}, {
  3.740158177371798*^9, 
  3.740158178411964*^9}},ExpressionUUID->"0c2cda38-6288-407b-b6e4-\
407de0a266a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl200", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "1000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "1000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]}]}], " ", 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 
   3.74015855015483*^9}},ExpressionUUID->"0699803f-03ac-4b06-b522-\
2b05fb15ab8a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["400", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 400, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxUEJgEAUBcAnJpE9meJ3ULwvgmcTGsQWRhBsIcxcZtrP5RiS1Jhsc7v7
tZZt27Zt27Zt27b/eT5PvZryQqA=
              "], "Type" -> "NumericalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
             10.224338282763073`, "StandardDeviation" -> 3.9951166871210613`, 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
wUX8uBmXoPEYOdoxSRe9TyH3kppNT2jI5RrQvHIRz7TKmFFFHp98W18wUcCe
z+SN9m1G34ZVD7tFc11R67B3rtowA0G+8zRWl0SBHbqMfs+LcBUdnVIiOyPb
naf0J5KpVfPir/y8/NLbHlZwvCh2nw+lMxOl15YUP5fnGNM9VuLdQ3Nu/ZNP
k3C2/Rv3rtTbsH5mlwAiS9zXz7aXpcrVCBxK3M+4clt1LPLomea6uCfc2vEs
EY6SYurHoq5ti3ZMbiOZlJv+LuHy2QoigPscu+m6TRzyAvvh7ueDnkTqIPqA
MrPV7M8Q4Xj/MY2ddhXVW/bG0NS7Pfu5clNCYE+zuDwNKa7ca08e66BeXnq6
cievBT3WnDDPnXJv4Lg9Joxm79/ntTYxVM/PKu577a625dDreE7txgtuonAb
99DweOXidrNF2xsoe+og1MQrD0e9vYkW7gTXeeXDm3bBus6JZPqVey5MTE8B
SAJ55QRfwoOZPKOn3Pcj4ZLMuJ3g1sUrW/js3Q4gtvHo2m03XrI3Uw4blax5
5bJwXqqT9+LT9Zu2ca0IFswGm6N89dDFQWumuqqYcLlyP20NXlcFT7h27oVT
rzmYQ8e+sIJ3XT0q2lhT5I+jFyDlAocpQkldeUrK5QgSrqgAm5W6cu9Eavkz
aibr2qFJP01KuNoWba8f6TaEmOkzTPI67MVP+5713raD2QCRvN2kf/eanKWg
affBc+U2SHlr0osOMvjyyc3umHztbwXklbuA19MCLXZ4Xj3YregVrcjwepTu
PD1p25gaa5Ybtfve6APFydu1E317d99NeFkam7YfVY3lys01GERwJlcku175
m09mhtEFDkDd509vVtUdGSpP0Y1rejRFNHHPkiZ/vHqe5p/kG3ayRt/1lXvb
yPa9teOyZu4jjmZ5b9HMk+WhXNeK/OZjhuux6+aTm4eaVlofKUpWQqIDe0rL
vZdmrvja245grZy49DJO+i+D5xrXiviDnP5m9D2dcTOJwKhEnv6uVyoh29WZ
Fmvh+ZwZaTrnRYzmyl+5twyawVwV/bwGceVegXyiq35Ey9Gd/4kGOa+EuWUm
7a7cPlS9r0Vn69F3v0yMMu0Znh/cuLxaNIq2Bq/a2mJ88dO0P98V498rNE9+
3srzsDHN5rlVLj7bLCKYFkmgzQQX9wAk02ReIzZ7aH/1lUvagv17d2eeey68
ohhcnEi0hTttn5yJuP2Wrue+cSjoAw7aCKVau2bwyvUEb8gc/2HjXznufnnj
yMuTof595Y+5iGZXFcdrpF/zwpStpGqnByO783QatgPYW2sy8vmRQzqbqGsK
sbd8r/nyuJNfvEFhg1nIuxTMhm4vG9p61lJums9stqGStdNP7p0478MVG2Iv
bxRCdvcRsl95bz7/vTpgjs1mx7RD2zfcbVPDHvly/cvAECV1w+Yx7yamnrvX
N6d3Fax1gTf3+Sram/BmtjySOX+vrnebwDzW5txnyuMiGJqwF8L88JXrmZsI
X6L5+OKe9zTsnDWssh38XL82LIkTGTDzKGafm6+LO2O2PHkivdaXdm525G2/
NWFnW8CVD0tKAKo9eHC7y/+9nAKx7d6Eqz7y+zx+1is0YqI/pZD7G0fElAHr
kFDW+/ll4TMo34gKbdo/xu9Y9YK8zf3Xrw3vQg978W2S6TYrXXk1YF3eSBVc
z42z7KP2pxviNrDtjZffDvMtXnCv1m2XxZMrtyfEtJ6tkSbS73pt/sVTrMsr
T9rDMbzm0Jjn9vbk5QMYsp+phgzbUzPf+Zh8s13X9k7Cg7pvxS/qS7apnLh0
w5vy896uFsj1YCp9XLl20IPumXkeOz8vEOqPbAW12+Td32klC38TSbxIgJ4r
N34wFWx32vjypdGAbZe9sUpcUChXvu0Y85aPlVE87pVXO1geqeSxNtlyvaZK
TQBAl+wdq1dvXnvxpv7wIp1n+fp3zHME87cjQj3lPG3+sDlqRW+1SrlyLxF5
h5932+Nz7WRacdteZTHC8/7L/Xy3X9TrjUy4hqu5cn9qgBVV+7UM8NaVixBV
9mugUsb1R/4SxmObT31b+/rK5xxvpWxrq5yW59vfYXkDRvB2+7TMl87gNrwQ
ja2g43f+JpfMxYu3cdRaynmGbfDWKKqx9JUvf7ljBmzZH53zHHEx0Xssywxr
4rlt+9MEmEmjYJB3nj4+ukcNRjgE1194H+D9OYPlma8Z303ji22VSOjY9Vx8
myvSL+yuLbUEEzcvMW20NzH/eNrjBzdeubtaovwld9AurrzHxedmMu+xZ/rO
B2Ycv/1B4EQc7SSu3P5aQE+gGf4exvv5+AUMy9ePTS3xux0pN9iecefHSO/m
RSV7BhVR5dfQSz5Hby2B1kC91fvaiS2RyzvX9uT72wf3HK24TOLR0tnZSJuf
33Hdr2ubQHTZ+XnElqg8i9s48r7X+3R8rJlNNlq58bhk+/a2jLime/Fzyc+f
aBKRtXtN+8qtjBx/Z8Lz1K23v/JwGJH9KGY2r9+UlFqsj1+3mWEvVy53s7oa
2Qz7YK78lPi5C+mYzc9jpnyYeZO12LZY9/d5Uwk1roXWuJf2yrsH154O2zej
SnDlxhEVXm1HfbW+eOXS5CVl945YSzuMa/emuqwdWUpKe/Dqj/Gh15HK+xMn
IdcLGbHW+FmJOVM/oJc5V4lkjQzv1YOOxNzYkFjHDyy8ciO1ZXeaZVV/LuQ+
384DS0ueoPhpjGsPU7fmZPqM/oub54kfjbDXOHojqxp55eYVMTWLLbYsnIvP
/sqE2SI5vTm0cv2+csKdaJmyP3CknZiStwboj6PoDcuVb5OTsLwV1x4tDF05
IXUkDQTEaVYp5UYLhIr6CgB55HM4Ws3S19J5YgT5HNZlUMiWY6Z2f73yY0ek
FXLvXlhmufMHQrw5EvFL9Dq+z9/+hsnbJW4+0js0Vy6ttbau7ZpSK1fuROzw
86rlOZkHsDdnvZfmbJTtWZeJS2PTy7+7RuHg4uT2ltTyh1TsqPL3cvL53h2x
g8ngxl+QuvO0o1xH4VVYb5vNlEvXe4178yd+rOnKV48YPZpBjZJe+5Ej2zC0
bfhTzze+3ma6xCtvzmyz6/n58fbG1ag8mNK4ckMsQTSuhtpG/crjdiAYGjVI
8/R3PqaNvTDjT74cr4qPlBtf2Dc1OAUn64a2+XtVf/ojIc1Ohdee5cJesbRf
dMmIV0n5bu/PvHjju2acK5e2BIWd6zTsp7xy3XXx6qd3JmqeI38FqRiTWya1
XJb70r3aYG1wS/NNVl056tlWKaxSc2JSP9FeFwFED0hJO7EV4XgRPLDNsuWV
i/I24fgO+/rz817Ct2fQXxwT9K8+7XzwV1qQ236zU/+Cs/lGQV7FpZ2YJd1R
KyqWF7732rv3dkLFb15lZ5xcrFvJ90JL8YrYnU/8HotVQu9o2mhx7XzZti3b
6MK6v+pz5ZbuvScITZzhr165iVv9rMmS6EItKcdB2nEZPYX+0saVs/yY5jBi
Nqp+5VFSter5WMjwN9auvAV6xm8YvY1SV2552ksxJpQkGSXl8pu4/G2Z/9w6
gpd9lxzc20YehuuXT4Tj1hgNSnQvM+VWjfwhiWNr27i47dGMtqsTNKVnPHVs
v2k+BKPWIO/8T9CMKZp5NcCs2pU3KSJG1f3hJx67U25ziA0kx4ut5fpB2cB8
b4PEpf+R7/U3g7y21v3RBGzok8fvlRgDeO/NkP9/CxcBIQ==
                    "], 
                    "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy1WE1IVFEUfqHjT/NnOZmMUhNtkrFNLoYIW0yB6Yj0J02LlEITpmiiha6s
oU0EkTmLoowsUCQUSotEIt4ULQxsKFwUMUiFkIUFFUFUVps5sziPwzn3znN1
uPfdd+853/3Ozz0bjsT3dq4wDGN7gWG4+uqPPXrvT4FMN7Q5f1RXpi4ZZ0Zr
D6xJUd9hXDOfeBW64rWsa2pJzjzprbDMY2kGw5/HTvnYddT559wfNk9Xrhb/
r3sOJ6X2Lvc+aXPWteVbGYsrZR8+H3hw9HtvXySyavn0zuqjijteP3gj4fNW
WfkIUmpH8oL3+r9hD21f8b3jvybLeb5k12H7YD9Vu0EvWF/xd3fmhL9Un89Z
/aj74/Tj5s9f7Vk30OVk9VqMdb/YGfLk+Evdiyo/dP0ZSxwPdePOnmh9e5HT
zeqja6/0v63jL9uj+60454tfQ+fwu1szpRZ8lj5dbplwW88DXKV47psajHT0
8+t6ft41A/5y8jucC3ZReUwss35ExV0qn2I9MM7UPPgLjPG5wANpfsX3g/2Q
un9qfzjf7ZxqW5lxaOeHmtjt13/uuMT4Az8suKF4zfKcWS/1B3zvYnsUJYev
XfUJyNP9X5rGGx3i9RRPKL5zduB75u4JZC7uCfmgGxcLD68vCj5bMqW46+ZX
jMvi2+azD+eKyfvuijvDzTF3bjw/PdS67aY8D6jy/2Rmsuz+aEluDHFe1V4q
Xkp5lq+k4jfFM4w/zAe+LhycjVr9H+pSqj7UtYvLO1zegzxK+SnFs2vxZPXc
xQI6rgvzLdidb/1G2Y/1l/qr7vvWYgcTh6i6iKqTOV6CzL2D0PkUHhz/VeME
V5+p4i3lB16H62Cu7wG4c/Warn4cPtL8COOnQ899h1oXzLWO2onEm48m9V9d
wLGx+wGdz1XzrLR/JI2jOA6QfEDvbSneduUN6lzgGfee3hQaqWv0/CbvCSTu
A9ilL35XUBL6LFSew/viford8ZzzO7vrXwtOivUk9AHwPPYbCl/VvMitw/ZQ
fTDd/al9uDyA9bK8U5lzuX4g5f+6fKH+4/prynxH+R/XU6r5VVVK6wGKv3nr
MbZrYCRcQtY3WE/QY0dHMF31uNCiP1Wnce8M/B339+yyV9fPcb/sP5XBAvo=

                    "], "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
               Span[1, 830], 
               Span[831, 831]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxUEJgEAUBcAnJpE9meJ3ULwvgmcTGsQWRhBsIcxcZtrP5RiS1Jhsc7v7
tZZt27Zt27Zt27b/eT5PvZryQqA=
                  "], "Type" -> 
                 "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             821998144885263164]]}, "Invertibility" -> "Impossible", 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5207550043543716326]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             1345797643843077134, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 455036741687015791]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Not Question" -> 0.5, "Question" -> 0.5]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1: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
            "], "Biases" -> 
           RawArray["Real32",{1.1510730981826782`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 831, 
           "$InputDimensions" -> {831}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{831}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAUAMAnNrCBQmeHL9ErjCBRq4yiMYE9rKGwgZ5GYwnJXXPlMPVj
FhFNHp8zdduxzntr27Zt27Zt27btn75Ud108V3oBpFN7Hw==
            "], "Type" -> 
           "NumericalVector"], "Key" -> "(f1f2)", "Invertibility" -> 
         "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.1, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.46125203976734586`, 0.06993364408436324], "Accuracy" -> 
         PlusMinus[0.7439024390243898, 0.07026244880418056], "EvaluationTime" -> 
         0.000020225000000000004`, "TestSize" -> 40, "TrainingSize" -> 320, 
         "TrainingTime" -> 0.103319, "TrainingMemory" -> 6439384, 
         "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
         0.9088646402358052, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.46125203976734586`, 0.06993364408436324]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.7439024390243898, 0.07026244880418056]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.1, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 400], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 246376646584787]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7940724003138717, 0.09899515414940763], "Accuracy" -> 
              PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
              "EvaluationTime" -> 0.000017375, "TestSize" -> 40, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.171597, 
              "TrainingMemory" -> 982808, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5307075505272353, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7940724003138717, 0.07000014480365371]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6904522211108391, 0.08700072965628172], "Accuracy" -> 
              PlusMinus[0.5487804878048778, 0.11147767401569468`], 
              "EvaluationTime" -> 0.00001425, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.055993, 
              "TrainingMemory" -> 1594320, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6101946325630984, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6904522211108391, 0.06151880590813437]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5487804878048778, 0.07882661924740109]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.46125203976734586`, 0.06993364408436324], 
              "Accuracy" -> 
              PlusMinus[0.7439024390243898, 0.07026244880418056], 
              "EvaluationTime" -> 0.000020225000000000004`, "TestSize" -> 40, 
              "TrainingSize" -> 320, "TrainingTime" -> 0.103319, 
              "TrainingMemory" -> 6439384, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.9088646402358052, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.46125203976734586`, 0.06993364408436324]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7439024390243898, 0.07026244880418056]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020225000000000004`, "MeanCrossEntropy" -> 
             PlusMinus[0.46125203976734586`, 0.06993364408436324], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 6439384, 
             "TrainingTime" -> 0.30074575000000003`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0060926891999429`, 0.26324690111878457`], 
              "Accuracy" -> 
              PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
              "EvaluationTime" -> 0.000862225, "TestSize" -> 40, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.051573, 
              "TrainingMemory" -> 776824, "ModelMemory" -> 446560, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4079238934044555, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0060926891999429`, 0.1861436689074371]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7613692350712092, 0.10965839755217771`], "Accuracy" -> 
              PlusMinus[0.47560975609756073`, 0.11147767401569465`], 
              "EvaluationTime" -> 0.0008696000000000001, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.077635, 
              "TrainingMemory" -> 2469216, "ModelMemory" -> 472840, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5513635095184698, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7613692350712092, 0.07754019652319516]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.47560975609756073`, 0.07882661924740107]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8403536161504802, 0.13692277901276426`], "Accuracy" -> 
              PlusMinus[0.5243902439024387, 0.07901047167031712], 
              "EvaluationTime" -> 0.000807725, "TestSize" -> 40, 
              "TrainingSize" -> 320, "TrainingTime" -> 0.34887, 
              "TrainingMemory" -> 11519608, "ModelMemory" -> 517560, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4977066644362605, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8403536161504802, 0.13692277901276426`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5243902439024387, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000807725, "MeanCrossEntropy" -> 
             PlusMinus[0.8403536161504802, 0.13692277901276426`], 
             "ModelMemory" -> 517560, "TrainingMemory" -> 11519608, 
             "TrainingTime" -> 0.4876605], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8256155695930784, 0.11902902880688314`], "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.000023025000000000004`, "TestSize" -> 40, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.039475, 
              "TrainingMemory" -> 785472, "ModelMemory" -> 32488, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5084969623418008, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8256155695930784, 0.08416623342739597]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9703704613747226, 0.19732274701258334`], "Accuracy" -> 
              PlusMinus[0.5243902439024387, 0.11173768060565768`], 
              "EvaluationTime" -> 0.000012475, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.022388, 
              "TrainingMemory" -> 877024, "ModelMemory" -> 32616, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4277215348949649, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9703704613747226, 0.13952825249495523`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9909652934368359, 0.20944832834106417`], "Accuracy" -> 
              PlusMinus[0.5975609756097557, 0.07790084880165644], 
              "EvaluationTime" -> 0.000013, "TestSize" -> 40, "TrainingSize" -> 
              320, "TrainingTime" -> 0.105321, "TrainingMemory" -> 4434632, 
              "ModelMemory" -> 33256, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.41818854855041854`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9909652934368359, 0.20944832834106417`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5975609756097557, 0.07790084880165644]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000013, "MeanCrossEntropy" -> 
             PlusMinus[0.9909652934368359, 0.20944832834106417`], 
             "ModelMemory" -> 33256, "TrainingMemory" -> 4434632, 
             "TrainingTime" -> 0.17112625], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7386676566894768, 0.04784064504987426], "Accuracy" -> 
              PlusMinus[0.4268292682926827, 0.11016843689567836`], 
              "EvaluationTime" -> 0.0000223, "TestSize" -> 40, "TrainingSize" -> 
              10, "TrainingTime" -> 0.019662, "TrainingMemory" -> 235408, 
              "ModelMemory" -> 97480, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.5772534029251344, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7386676566894768, 0.03382844453110472]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4268292682926827, 0.0779008488016564]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7407100946726605, 0.07997018760751938], "Accuracy" -> 
              PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
              "EvaluationTime" -> 0.000020875000000000003`, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.007128, 
              "TrainingMemory" -> 1329704, "ModelMemory" -> 430344, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5707490717828211, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7407100946726605, 0.05654746195003736]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6681032704106118, 0.0294199383844374], "Accuracy" -> 
              PlusMinus[0.5243902439024387, 0.07901047167031712], 
              "EvaluationTime" -> 0.000062675, "TestSize" -> 40, 
              "TrainingSize" -> 320, "TrainingTime" -> 0.035566, 
              "TrainingMemory" -> 7665360, "ModelMemory" -> 2161200, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5792584160139773, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6681032704106118, 0.0294199383844374]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5243902439024387, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000062675, "MeanCrossEntropy" -> 
             PlusMinus[0.6681032704106118, 0.0294199383844374], "ModelMemory" -> 
             2161200, "TrainingMemory" -> 7665360, "TrainingTime" -> 
             0.0641195], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.694473131392771, 0.02039894551805492], "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.00013010000000000002`, "TestSize" -> 40, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.253133, 
              "TrainingMemory" -> 256800, "ModelMemory" -> 110144, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6183072473153006, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.694473131392771, 0.014424232704871564`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6935568789246785, 0.020738915816258183`], 
              "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.00012825, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.012568, 
              "TrainingMemory" -> 733616, "ModelMemory" -> 110144, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6190589767347731, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6935568789246785, 0.014664628008133104`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6506337392527097, 0.0195563888016345], "Accuracy" -> 
              PlusMinus[0.6951219512195118, 0.07368941680466205], 
              "EvaluationTime" -> 0.000155475, "TestSize" -> 40, 
              "TrainingSize" -> 320, "TrainingTime" -> 0.03357, 
              "TrainingMemory" -> 3363016, "ModelMemory" -> 115120, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6598779469434116, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6506337392527097, 0.0195563888016345]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000155475, "MeanCrossEntropy" -> 
             PlusMinus[0.6506337392527097, 0.0195563888016345], "ModelMemory" -> 
             115120, "TrainingMemory" -> 3363016, "TrainingTime" -> 
             0.2950955], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.5026755935388036`, 0.4959349003659038], "Accuracy" -> 
              PlusMinus[0.5487804878048778, 0.11147767401569468`], 
              "EvaluationTime" -> 0.0000158, "TestSize" -> 40, "TrainingSize" -> 
              60, "TrainingTime" -> 0.112964, "TrainingMemory" -> 1893112, 
              "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.26964093016590307`, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.5026755935388036`, 0.3506789310758054]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000158, "MeanCrossEntropy" -> 
             PlusMinus[1.5026755935388036`, 0.4959349003659038], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1893112, 
             "TrainingTime" -> 0.56482], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931130805711371, 0.019844788985558175`], 
              "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.000014625000000000001`, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.022171, 
              "TrainingMemory" -> 1325728, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6196224993334613, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931130805711371, 0.014032384862904292`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014625000000000001`, "MeanCrossEntropy" -> 
             PlusMinus[0.6931130805711371, 0.019844788985558175`], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1325728, 
             "TrainingTime" -> 0.110855], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9199806122085052, 0.22882491886537903`], "Accuracy" -> 
              PlusMinus[0.5487804878048778, 0.11147767401569468`], 
              "EvaluationTime" -> 0.000020475, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.053785, 
              "TrainingMemory" -> 1586184, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4472479233916783, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9199806122085052, 0.16180365183417106`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000020475, "MeanCrossEntropy" -> 
             PlusMinus[0.9199806122085052, 0.22882491886537903`], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1586184, 
             "TrainingTime" -> 0.26892499999999997`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931452550684138, 0.01946862868908853], "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.0000176, "TestSize" -> 40, "TrainingSize" -> 
              60, "TrainingTime" -> 0.068216, "TrainingMemory" -> 1254248, 
              "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.619660772873309, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931452550684138, 0.013766399366457465`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000176, "MeanCrossEntropy" -> 
             PlusMinus[0.6931452550684138, 0.01946862868908853], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1254248, 
             "TrainingTime" -> 0.34108], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.281753066847408, 0.39870051488340547`], "Accuracy" -> 
              PlusMinus[0.5487804878048778, 0.11147767401569468`], 
              "EvaluationTime" -> 0.000013500000000000001`, "TestSize" -> 40, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.063112, 
              "TrainingMemory" -> 1586056, "ModelMemory" -> 37240, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3172455983719137, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.281753066847408, 0.281923837736624]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000013500000000000001`, "MeanCrossEntropy" -> 
             PlusMinus[1.281753066847408, 0.39870051488340547`], 
             "ModelMemory" -> 37240, "TrainingMemory" -> 1586056, 
             "TrainingTime" -> 0.31556], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 250], "LearningRate" -> 
             Association["Value" -> 0.04], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.693147180559945, 0.01946864660671237], "Accuracy" -> 
              PlusMinus[0.4999999999999998, 0.11173768060565768`], 
              "EvaluationTime" -> 0.0000261, "TestSize" -> 40, "TrainingSize" -> 
              60, "TrainingTime" -> 0.10975, "TrainingMemory" -> 1302056, 
              "ModelMemory" -> 74512, "ExperimentCount" -> 1, "ModelUtility" -> 
              0.6196536752648422, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.693147180559945, 0.013766412036130785`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0000261, "MeanCrossEntropy" -> 
             PlusMinus[0.693147180559945, 0.01946864660671237], "ModelMemory" -> 
             74512, "TrainingMemory" -> 1302056, "TrainingTime" -> 0.54875], 
           "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 246372351617491]], "MaxTrainingSize" -> 400, 
      "LastReportingTime" -> 3.740140242037951`16.325462876173617*^9, 
      "PreprocessorEvaluationTime" -> 4.1845703125`2.*^-6, 
      "PreprocessorMemory" -> 126352, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
          "ElapsedTimes" -> 0.7300740000000001, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          1.216644, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 320, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.952237, "ExperimentCounts" -> 5]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 3], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[246380941552083]], "ID" -> 
         246385236519379]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"WHO CARES."}, "ID" -> 
           8752152938630133285], "f2" -> 
         Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{11, 15, 13}}, "ID" -> 8143266914511161728]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 4.724141, "MaxTrainingMemory" -> 26530384, 
      "DataMemory" -> 141264, "FunctionMemory" -> 316776, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 9, 15, 50, 42.700624`8.383009199281497}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.74015824273628*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"e6a6149c-29f2-4424-94c0-f516ca1c9f4f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl200", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "50"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"partsOfSpeechNumbers", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "50"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740158251434836*^9, 3.740158267226678*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"c88b7817-10bf-4c38-8017-f8f1193ed1f7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["100", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["100", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7199999999999999734`3.769790729487717", "\[PlusMinus]", 
                    "0.045126085985421463`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 400, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxUEJgEAUBcAnJpE9meJ3ULwvgmcTGsQWRhBsIcxcZtrP5RiS1Jhsc7v7
tZZt27Zt27Zt27b/eT5PvZryQqA=
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    7263179337424669307]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    114010418416267986]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                10.224338282763073`, "StandardDeviation" -> 
                3.9951166871210613`, "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
wUX8uBmXoPEYOdoxSRe9TyH3kppNT2jI5RrQvHIRz7TKmFFFHp98W18wUcCe
z+SN9m1G34ZVD7tFc11R67B3rtowA0G+8zRWl0SBHbqMfs+LcBUdnVIiOyPb
naf0J5KpVfPir/y8/NLbHlZwvCh2nw+lMxOl15YUP5fnGNM9VuLdQ3Nu/ZNP
k3C2/Rv3rtTbsH5mlwAiS9zXz7aXpcrVCBxK3M+4clt1LPLomea6uCfc2vEs
EY6SYurHoq5ti3ZMbiOZlJv+LuHy2QoigPscu+m6TRzyAvvh7ueDnkTqIPqA
MrPV7M8Q4Xj/MY2ddhXVW/bG0NS7Pfu5clNCYE+zuDwNKa7ca08e66BeXnq6
cievBT3WnDDPnXJv4Lg9Joxm79/ntTYxVM/PKu577a625dDreE7txgtuonAb
99DweOXidrNF2xsoe+og1MQrD0e9vYkW7gTXeeXDm3bBus6JZPqVey5MTE8B
SAJ55QRfwoOZPKOn3Pcj4ZLMuJ3g1sUrW/js3Q4gtvHo2m03XrI3Uw4blax5
5bJwXqqT9+LT9Zu2ca0IFswGm6N89dDFQWumuqqYcLlyP20NXlcFT7h27oVT
rzmYQ8e+sIJ3XT0q2lhT5I+jFyDlAocpQkldeUrK5QgSrqgAm5W6cu9Eavkz
aibr2qFJP01KuNoWba8f6TaEmOkzTPI67MVP+5713raD2QCRvN2kf/eanKWg
affBc+U2SHlr0osOMvjyyc3umHztbwXklbuA19MCLXZ4Xj3YregVrcjwepTu
PD1p25gaa5Ybtfve6APFydu1E317d99NeFkam7YfVY3lys01GERwJlcku175
m09mhtEFDkDd509vVtUdGSpP0Y1rejRFNHHPkiZ/vHqe5p/kG3ayRt/1lXvb
yPa9teOyZu4jjmZ5b9HMk+WhXNeK/OZjhuux6+aTm4eaVlofKUpWQqIDe0rL
vZdmrvja245grZy49DJO+i+D5xrXiviDnP5m9D2dcTOJwKhEnv6uVyoh29WZ
Fmvh+ZwZaTrnRYzmyl+5twyawVwV/bwGceVegXyiq35Ey9Gd/4kGOa+EuWUm
7a7cPlS9r0Vn69F3v0yMMu0Znh/cuLxaNIq2Bq/a2mJ88dO0P98V498rNE9+
3srzsDHN5rlVLj7bLCKYFkmgzQQX9wAk02ReIzZ7aH/1lUvagv17d2eeey68
ohhcnEi0hTttn5yJuP2Wrue+cSjoAw7aCKVau2bwyvUEb8gc/2HjXznufnnj
yMuTof595Y+5iGZXFcdrpF/zwpStpGqnByO783QatgPYW2sy8vmRQzqbqGsK
sbd8r/nyuJNfvEFhg1nIuxTMhm4vG9p61lJums9stqGStdNP7p0478MVG2Iv
bxRCdvcRsl95bz7/vTpgjs1mx7RD2zfcbVPDHvly/cvAECV1w+Yx7yamnrvX
N6d3Fax1gTf3+Sram/BmtjySOX+vrnebwDzW5txnyuMiGJqwF8L88JXrmZsI
X6L5+OKe9zTsnDWssh38XL82LIkTGTDzKGafm6+LO2O2PHkivdaXdm525G2/
NWFnW8CVD0tKAKo9eHC7y/+9nAKx7d6Eqz7y+zx+1is0YqI/pZD7G0fElAHr
kFDW+/ll4TMo34gKbdo/xu9Y9YK8zf3Xrw3vQg978W2S6TYrXXk1YF3eSBVc
z42z7KP2pxviNrDtjZffDvMtXnCv1m2XxZMrtyfEtJ6tkSbS73pt/sVTrMsr
T9rDMbzm0Jjn9vbk5QMYsp+phgzbUzPf+Zh8s13X9k7Cg7pvxS/qS7apnLh0
w5vy896uFsj1YCp9XLl20IPumXkeOz8vEOqPbAW12+Td32klC38TSbxIgJ4r
N34wFWx32vjypdGAbZe9sUpcUChXvu0Y85aPlVE87pVXO1geqeSxNtlyvaZK
TQBAl+wdq1dvXnvxpv7wIp1n+fp3zHME87cjQj3lPG3+sDlqRW+1SrlyLxF5
h5932+Nz7WRacdteZTHC8/7L/Xy3X9TrjUy4hqu5cn9qgBVV+7UM8NaVixBV
9mugUsb1R/4SxmObT31b+/rK5xxvpWxrq5yW59vfYXkDRvB2+7TMl87gNrwQ
ja2g43f+JpfMxYu3cdRaynmGbfDWKKqx9JUvf7ljBmzZH53zHHEx0Xssywxr
4rlt+9MEmEmjYJB3nj4+ukcNRjgE1194H+D9OYPlma8Z303ji22VSOjY9Vx8
myvSL+yuLbUEEzcvMW20NzH/eNrjBzdeubtaovwld9AurrzHxedmMu+xZ/rO
B2Ycv/1B4EQc7SSu3P5aQE+gGf4exvv5+AUMy9ePTS3xux0pN9iecefHSO/m
RSV7BhVR5dfQSz5Hby2B1kC91fvaiS2RyzvX9uT72wf3HK24TOLR0tnZSJuf
33Hdr2ubQHTZ+XnElqg8i9s48r7X+3R8rJlNNlq58bhk+/a2jLime/Fzyc+f
aBKRtXtN+8qtjBx/Z8Lz1K23v/JwGJH9KGY2r9+UlFqsj1+3mWEvVy53s7oa
2Qz7YK78lPi5C+mYzc9jpnyYeZO12LZY9/d5Uwk1roXWuJf2yrsH154O2zej
SnDlxhEVXm1HfbW+eOXS5CVl945YSzuMa/emuqwdWUpKe/Dqj/Gh15HK+xMn
IdcLGbHW+FmJOVM/oJc5V4lkjQzv1YOOxNzYkFjHDyy8ciO1ZXeaZVV/LuQ+
384DS0ueoPhpjGsPU7fmZPqM/oub54kfjbDXOHojqxp55eYVMTWLLbYsnIvP
/sqE2SI5vTm0cv2+csKdaJmyP3CknZiStwboj6PoDcuVb5OTsLwV1x4tDF05
IXUkDQTEaVYp5UYLhIr6CgB55HM4Ws3S19J5YgT5HNZlUMiWY6Z2f73yY0ek
FXLvXlhmufMHQrw5EvFL9Dq+z9/+hsnbJW4+0js0Vy6ttbau7ZpSK1fuROzw
86rlOZkHsDdnvZfmbJTtWZeJS2PTy7+7RuHg4uT2ltTyh1TsqPL3cvL53h2x
g8ngxl+QuvO0o1xH4VVYb5vNlEvXe4178yd+rOnKV48YPZpBjZJe+5Ej2zC0
bfhTzze+3ma6xCtvzmyz6/n58fbG1ag8mNK4ckMsQTSuhtpG/crjdiAYGjVI
8/R3PqaNvTDjT74cr4qPlBtf2Dc1OAUn64a2+XtVf/ojIc1Ohdee5cJesbRf
dMmIV0n5bu/PvHjju2acK5e2BIWd6zTsp7xy3XXx6qd3JmqeI38FqRiTWya1
XJb70r3aYG1wS/NNVl056tlWKaxSc2JSP9FeFwFED0hJO7EV4XgRPLDNsuWV
i/I24fgO+/rz817Ct2fQXxwT9K8+7XzwV1qQ236zU/+Cs/lGQV7FpZ2YJd1R
KyqWF7732rv3dkLFb15lZ5xcrFvJ90JL8YrYnU/8HotVQu9o2mhx7XzZti3b
6MK6v+pz5ZbuvScITZzhr165iVv9rMmS6EItKcdB2nEZPYX+0saVs/yY5jBi
Nqp+5VFSter5WMjwN9auvAV6xm8YvY1SV2552ksxJpQkGSXl8pu4/G2Z/9w6
gpd9lxzc20YehuuXT4Tj1hgNSnQvM+VWjfwhiWNr27i47dGMtqsTNKVnPHVs
v2k+BKPWIO/8T9CMKZp5NcCs2pU3KSJG1f3hJx67U25ziA0kx4ut5fpB2cB8
b4PEpf+R7/U3g7y21v3RBGzok8fvlRgDeO/NkP9/CxcBIQ==
                    "], 
                    "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy1WE1IVFEUfqHjT/NnOZmMUhNtkrFNLoYIW0yB6Yj0J02LlEITpmiiha6s
oU0EkTmLoowsUCQUSotEIt4ULQxsKFwUMUiFkIUFFUFUVps5sziPwzn3znN1
uPfdd+853/3Ozz0bjsT3dq4wDGN7gWG4+uqPPXrvT4FMN7Q5f1RXpi4ZZ0Zr
D6xJUd9hXDOfeBW64rWsa2pJzjzprbDMY2kGw5/HTvnYddT559wfNk9Xrhb/
r3sOJ6X2Lvc+aXPWteVbGYsrZR8+H3hw9HtvXySyavn0zuqjijteP3gj4fNW
WfkIUmpH8oL3+r9hD21f8b3jvybLeb5k12H7YD9Vu0EvWF/xd3fmhL9Un89Z
/aj74/Tj5s9f7Vk30OVk9VqMdb/YGfLk+Evdiyo/dP0ZSxwPdePOnmh9e5HT
zeqja6/0v63jL9uj+60454tfQ+fwu1szpRZ8lj5dbplwW88DXKV47psajHT0
8+t6ft41A/5y8jucC3ZReUwss35ExV0qn2I9MM7UPPgLjPG5wANpfsX3g/2Q
un9qfzjf7ZxqW5lxaOeHmtjt13/uuMT4Az8suKF4zfKcWS/1B3zvYnsUJYev
XfUJyNP9X5rGGx3i9RRPKL5zduB75u4JZC7uCfmgGxcLD68vCj5bMqW46+ZX
jMvi2+azD+eKyfvuijvDzTF3bjw/PdS67aY8D6jy/2Rmsuz+aEluDHFe1V4q
Xkp5lq+k4jfFM4w/zAe+LhycjVr9H+pSqj7UtYvLO1zegzxK+SnFs2vxZPXc
xQI6rgvzLdidb/1G2Y/1l/qr7vvWYgcTh6i6iKqTOV6CzL2D0PkUHhz/VeME
V5+p4i3lB16H62Cu7wG4c/Warn4cPtL8COOnQ899h1oXzLWO2onEm48m9V9d
wLGx+wGdz1XzrLR/JI2jOA6QfEDvbSneduUN6lzgGfee3hQaqWv0/CbvCSTu
A9ilL35XUBL6LFSew/viford8ZzzO7vrXwtOivUk9AHwPPYbCl/VvMitw/ZQ
fTDd/al9uDyA9bK8U5lzuX4g5f+6fKH+4/prynxH+R/XU6r5VVVK6wGKv3nr
MbZrYCRcQtY3WE/QY0dHMF31uNCiP1Wnce8M/B339+yyV9fPcb/sP5XBAvo=

                    "], "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Spans" -> {
                  Span[1, 830], 
                  Span[831, 831]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxUEJgEAUBcAnJpE9meJ3ULwvgmcTGsQWRhBsIcxcZtrP5RiS1Jhsc7v7
tZZt27Zt27Zt27b/eT5PvZryQqA=
                    "], "Type" -> 
                    "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
                821998144885263164]]}, "Invertibility" -> "Impossible", 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 5207550043543716326]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                1345797643843077134, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 455036741687015791]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["Not Question" -> 0.5, "Question" -> 0.5]],
        "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association["Weights" -> CompressedData["
1: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
               "], "Biases" -> 
              RawArray["Real32",{1.1510730981826782`}]], "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              831, "$InputDimensions" -> {831}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{831}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAUAMAnNrCBQmeHL9ErjCBRq4yiMYE9rKGwgZ5GYwnJXXPlMPVj
FhFNHp8zdduxzntr27Zt27Zt27btn75Ud108V3oBpFN7Hw==
               "], "Type" -> 
              "NumericalVector"], "Key" -> "(f1f2)", "Invertibility" -> 
            "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0.1, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.46125203976734586`, 0.06993364408436324], "Accuracy" -> 
            PlusMinus[0.7439024390243898, 0.07026244880418056], 
            "EvaluationTime" -> 0.000020225000000000004`, "TestSize" -> 40, 
            "TrainingSize" -> 320, "TrainingTime" -> 0.103319, 
            "TrainingMemory" -> 6439384, "ModelMemory" -> 37240, 
            "ExperimentCount" -> 1, "ModelUtility" -> 0.9088646402358052, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.46125203976734586`, 0.06993364408436324]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.7439024390243898, 0.07026244880418056]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 0.1, "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 400], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 246376646584787]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7940724003138717, 0.09899515414940763], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.000017375, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.171597, 
                 "TrainingMemory" -> 982808, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5307075505272353,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7940724003138717, 0.07000014480365371]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6904522211108391, 0.08700072965628172], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.00001425, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.055993, 
                 "TrainingMemory" -> 1594320, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6101946325630984,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6904522211108391, 0.06151880590813437]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.46125203976734586`, 0.06993364408436324], 
                 "Accuracy" -> 
                 PlusMinus[0.7439024390243898, 0.07026244880418056], 
                 "EvaluationTime" -> 0.000020225000000000004`, "TestSize" -> 
                 40, "TrainingSize" -> 320, "TrainingTime" -> 0.103319, 
                 "TrainingMemory" -> 6439384, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.9088646402358052,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.46125203976734586`, 0.06993364408436324]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7439024390243898, 0.07026244880418056]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020225000000000004`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.46125203976734586`, 0.06993364408436324], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 6439384, 
                "TrainingTime" -> 0.30074575000000003`], "Index" -> 1], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0060926891999429`, 0.26324690111878457`], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.000862225, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.051573, 
                 "TrainingMemory" -> 776824, "ModelMemory" -> 446560, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4079238934044555,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0060926891999429`, 0.1861436689074371]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7613692350712092, 0.10965839755217771`], 
                 "Accuracy" -> 
                 PlusMinus[0.47560975609756073`, 0.11147767401569465`], 
                 "EvaluationTime" -> 0.0008696000000000001, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.077635, 
                 "TrainingMemory" -> 2469216, "ModelMemory" -> 472840, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5513635095184698,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7613692350712092, 0.07754019652319516]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.47560975609756073`, 0.07882661924740107]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8403536161504802, 0.13692277901276426`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.07901047167031712], 
                 "EvaluationTime" -> 0.000807725, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.34887, 
                 "TrainingMemory" -> 11519608, "ModelMemory" -> 517560, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4977066644362605,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8403536161504802, 0.13692277901276426`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000807725, "MeanCrossEntropy" -> 
                PlusMinus[0.8403536161504802, 0.13692277901276426`], 
                "ModelMemory" -> 517560, "TrainingMemory" -> 11519608, 
                "TrainingTime" -> 0.4876605], "Index" -> 2], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8256155695930784, 0.11902902880688314`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000023025000000000004`, "TestSize" -> 
                 40, "TrainingSize" -> 10, "TrainingTime" -> 0.039475, 
                 "TrainingMemory" -> 785472, "ModelMemory" -> 32488, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5084969623418008,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8256155695930784, 0.08416623342739597]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9703704613747226, 0.19732274701258334`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000012475, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.022388, 
                 "TrainingMemory" -> 877024, "ModelMemory" -> 32616, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4277215348949649,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9703704613747226, 0.13952825249495523`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.07790084880165644], 
                 "EvaluationTime" -> 0.000013, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.105321, 
                 "TrainingMemory" -> 4434632, "ModelMemory" -> 33256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.41818854855041854`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9909652934368359, 0.20944832834106417`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000013, "MeanCrossEntropy" -> 
                PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                "ModelMemory" -> 33256, "TrainingMemory" -> 4434632, 
                "TrainingTime" -> 0.17112625], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7386676566894768, 0.04784064504987426], 
                 "Accuracy" -> 
                 PlusMinus[0.4268292682926827, 0.11016843689567836`], 
                 "EvaluationTime" -> 0.0000223, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.019662, 
                 "TrainingMemory" -> 235408, "ModelMemory" -> 97480, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5772534029251344,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7386676566894768, 0.03382844453110472]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4268292682926827, 0.0779008488016564]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7407100946726605, 0.07997018760751938], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.000020875000000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.007128, 
                 "TrainingMemory" -> 1329704, "ModelMemory" -> 430344, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5707490717828211,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7407100946726605, 0.05654746195003736]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6681032704106118, 0.0294199383844374], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.07901047167031712], 
                 "EvaluationTime" -> 0.000062675, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.035566, 
                 "TrainingMemory" -> 7665360, "ModelMemory" -> 2161200, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5792584160139773,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6681032704106118, 0.0294199383844374]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000062675, "MeanCrossEntropy" -> 
                PlusMinus[0.6681032704106118, 0.0294199383844374], 
                "ModelMemory" -> 2161200, "TrainingMemory" -> 7665360, 
                "TrainingTime" -> 0.0641195], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.694473131392771, 0.02039894551805492], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.00013010000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 10, "TrainingTime" -> 0.253133, 
                 "TrainingMemory" -> 256800, "ModelMemory" -> 110144, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6183072473153006,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.694473131392771, 0.014424232704871564`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6935568789246785, 0.020738915816258183`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.00012825, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.012568, 
                 "TrainingMemory" -> 733616, "ModelMemory" -> 110144, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6190589767347731,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6935568789246785, 0.014664628008133104`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6506337392527097, 0.0195563888016345], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.000155475, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.03357, 
                 "TrainingMemory" -> 3363016, "ModelMemory" -> 115120, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6598779469434116,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6506337392527097, 0.0195563888016345]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000155475, "MeanCrossEntropy" -> 
                PlusMinus[0.6506337392527097, 0.0195563888016345], 
                "ModelMemory" -> 115120, "TrainingMemory" -> 3363016, 
                "TrainingTime" -> 0.2950955], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.5026755935388036`, 0.4959349003659038], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.0000158, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.112964, 
                 "TrainingMemory" -> 1893112, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.26964093016590307`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.5026755935388036`, 0.3506789310758054]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000158, "MeanCrossEntropy" -> 
                PlusMinus[1.5026755935388036`, 0.4959349003659038], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1893112, 
                "TrainingTime" -> 0.56482], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931130805711371, 0.019844788985558175`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000014625000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.022171, 
                 "TrainingMemory" -> 1325728, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196224993334613,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931130805711371, 0.014032384862904292`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000014625000000000001`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6931130805711371, 0.019844788985558175`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1325728, 
                "TrainingTime" -> 0.110855], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9199806122085052, 0.22882491886537903`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000020475, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.053785, 
                 "TrainingMemory" -> 1586184, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4472479233916783,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9199806122085052, 0.16180365183417106`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000020475, "MeanCrossEntropy" -> 
                PlusMinus[0.9199806122085052, 0.22882491886537903`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1586184, 
                "TrainingTime" -> 0.26892499999999997`], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931452550684138, 0.01946862868908853], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.0000176, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.068216, 
                 "TrainingMemory" -> 1254248, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.619660772873309, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931452550684138, 0.013766399366457465`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000176, "MeanCrossEntropy" -> 
                PlusMinus[0.6931452550684138, 0.01946862868908853], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1254248, 
                "TrainingTime" -> 0.34108], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.281753066847408, 0.39870051488340547`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000013500000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.063112, 
                 "TrainingMemory" -> 1586056, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.3172455983719137,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.281753066847408, 0.281923837736624]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000013500000000000001`, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.281753066847408, 0.39870051488340547`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1586056, 
                "TrainingTime" -> 0.31556], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 250], "LearningRate" -> 
                Association["Value" -> 0.04], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.693147180559945, 0.01946864660671237], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.0000261, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.10975, 
                 "TrainingMemory" -> 1302056, "ModelMemory" -> 74512, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196536752648422,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.693147180559945, 0.013766412036130785`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000261, "MeanCrossEntropy" -> 
                PlusMinus[0.693147180559945, 0.01946864660671237], 
                "ModelMemory" -> 74512, "TrainingMemory" -> 1302056, 
                "TrainingTime" -> 0.54875], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 246372351617491]], "MaxTrainingSize" -> 400, 
         "LastReportingTime" -> 3.740140242037951`16.325462876173617*^9, 
         "PreprocessorEvaluationTime" -> 4.1845703125`2.*^-6, 
         "PreprocessorMemory" -> 126352, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000001, 
             "ElapsedTimes" -> 0.7300740000000001, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             1.216644, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 320, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             0.952237, "ExperimentCounts" -> 5]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[246380941552083]], "ID" -> 
            246385236519379]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, "Values" -> {"WHO CARES."}, 
              "ID" -> 8752152938630133285], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{11, 15, 13}}, "ID" -> 8143266914511161728]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 4.724141, "MaxTrainingMemory" -> 
         26530384, "DataMemory" -> 141264, "FunctionMemory" -> 316776, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 9, 15, 50, 42.700624`8.383009199281497}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"YOU DUMB BITCH.", {11, 1, 7, 13}}, {
        "AND YOU COULD STAND TO GET A LITTLE SMARTER AIN'T THAT RIGHT YOU \
DUMB BLONDE FUCK.", {3, 11, 15, 15, 10, 15, 4, 12, 12, 12, 2, 4, 12, 11, 1, 
         12, 12, 13}}, {"AN ITALIAN RIGHT.", {4, 1, 7, 13}}, {
        "MAJOR WHAT DO YOU THINK COULD HAVE DONE THIS.", {1, 4, 12, 11, 12, 
         12, 12, 15, 7, 13}}, {"YOU SAW THIS.", {11, 15, 7, 13}}, {
        "HOW CAN YOU BE HERE AND SAY THIS.", {12, 12, 11, 15, 2, 3, 15, 7, 
         13}}, {"NATALIE WHO.", {12, 11, 13}}, {
        "WHERE WILL MY TOYS BE.", {15, 15, 12, 12, 15, 13}}, {
        "THE CAR OR DEBBIE.", {4, 7, 7, 12, 13}}, {
        "THAT ' S WHO YOU WANT ME TO BEND MY RULES FOR.", {4, 13, 7, 11, 11, 
         15, 7, 10, 15, 12, 7, 10, 13}}, {
        "I'VE NEVER GOTTEN A LETTER LIKE THIS HAVE YOU.", {11, 15, 2, 15, 4, 
         7, 10, 7, 15, 11, 13}}, {
        "YOU DON'T THINK SO.", {11, 15, 2, 12, 12, 13}}, {
        "I BELIEVE WE SHARE AN ART INSTRUCTOR YOU KNOW CHASTITY.", {11, 15, 1,
          7, 4, 7, 7, 11, 15, 7, 13}}, {"CALL THAT FRESH.", {1, 4, 12, 13}}, {
        "OH SHUT UP HUH.", {7, 12, 9, 12, 13}}, {"THE POET.", {4, 7, 13}}, {
        "WHY DOESN'T SHE JUST HANG UP AND CALL THE POLICE.", {2, 15, 2, 12, 2,
          15, 9, 3, 1, 4, 7, 13}}, {
        "IF YOU NEED TO COME TO WHERE I LIVE OK.", {10, 11, 15, 10, 15, 10, 
         15, 11, 15, 5, 13}}, {"WHO WILL YOU KILL.", {11, 15, 11, 15, 13}}, {
        "WHO IS DEAD.", {11, 15, 12, 13}}, {
        "YOU REMEMBER HIM FROM HIGH SCHOOL.", {11, 15, 12, 12, 12, 12, 13}}, {
        "YOU HUNGRY OR THIRSTY OR BOTH.", {11, 1, 7, 12, 7, 4, 13}}, {
        "HOW OFTEN DO YOU SEE MR. KRAMER AND HIS SON.", {12, 12, 12, 11, 15, 
         12, 12, 3, 11, 7, 13}}, {
        "WHO'S MR. JOCULARITY.", {11, 15, 12, 12, 13}}, {
        "SO NOW WHERE WERE WE HERE.", {12, 12, 12, 15, 12, 2, 13}}, {
        "CHARGE SET.", {1, 7, 13}}, {
        "YOU SERVE MARTINIS DONCHA.", {11, 15, 7, 12, 13}}, {
        "GOIN' DOVE HUNTIN'.", {12, 7, 7, 13, 13}}, {
        "AND MADEMOISELLE.", {3, 12, 13}}, {
        "IS IT THAT BAD.", {15, 11, 4, 12, 13}}, {
        "THEY'RE TRYING TO UNNERVE US. WHY DID THEY DO THAT.", {12, 12, 12, 
         10, 12, 12, 13}}, {
        "WHAT NUMBER DID YOU TEAR OUT.", {4, 7, 15, 11, 15, 12, 13}}, {
        "JUST A LITTLE JOKE MISS FARMER. ...DID YOU REALLY SAY THAT.", {2, 4, 
         7, 7, 7, 7, 13, 13}}, {
        "HI VIV.  CARLOS YOU KNOW MY ROOMMATE VIV. YOU SPENT IT ON DRUGS \
DIDN'T YOU.", {12, 12, 13}}, {
        "WHAT HAVE YOU GOT TO DO.", {4, 12, 11, 15, 10, 12, 13}}, {
        "DO YOU KNOW HER.", {15, 11, 15, 7, 13}}, {
        "WHAT THE HELL IS A TREADSTONE.", {4, 4, 7, 15, 4, 7, 13}}, {
        "PAPA.", {7, 13}}, {"AS A PLUMBER.", {10, 4, 7, 13}}, {
        "WHAT TEN THOUSAND POUNDS.", {4, 8, 12, 12, 13}}, {
        "UP GET IT.", {7, 15, 11, 13}}, {
        "ARE YOU DECLARING AN EMERGENCY.", {15, 11, 15, 4, 7, 13}}, {
        "SHALL I REMAIN HERE IN OUR HOTEL ROOM HIDING OR SHALL I CARRY ON THE \
BEST I CAN.", {12, 11, 15, 2, 10, 12, 12, 12, 15, 7, 7, 11, 15, 10, 4, 7, 11, 
         15, 13}}, {"WHATSAMATTER.", {7, 13}}, {
        "WHAT WAS I GONNA SAY.", {4, 15, 11, 12, 12, 12, 13}}, {
        "AND THOSE WERE THE GUYS WHO WENT ON THE EXERCISE WITH YOU.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}}, {
        "I WANT THE MONEY ASSHOLE WHAT DO YOU THINK.", {11, 15, 4, 7, 12, 4, 
         12, 11, 15, 13}}, {
        "I MEAN WHAT KIND OF PEOPLE DO WELL AT THIS STUFF.", {11, 15, 4, 12, 
         10, 12, 12, 12, 10, 12, 7, 13}}, {
        "HOW ARE THEY TREATING YOU.", {12, 15, 7, 15, 11, 13}}, {
        "WANNA STAY WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}}, {
        "YOU ARE FUCKIN' DEAD YOU GO IN THERE TODAY.", {11, 15, 7, 13, 1, 11, 
         15, 10, 12, 12, 13}}, {"OUT THE BACK.", {12, 4, 2, 13}}, {
        "AND I AIM TO CURE YA OF YOUR WICKEDNESS.", {3, 11, 7, 10, 15, 12, 10,
          1, 7, 13}}, {
        "AND I USED TO KNOW YOU PERSONAL WAY BACK WHEN.", {3, 11, 15, 10, 12, 
         11, 1, 7, 2, 2, 13}}, {
        "IF YOU DON'T WANT MY FILM - I'LL CALL ANOTHER SHOW.", {10, 11, 15, 2,
          1, 7, 7, 13, 11, 15, 1, 12, 12, 13}}, {
        "SHADOW GETS CRAZY-- IT'S NOT OUR JOB TO GET INVOLVED IN YOUR \
PERSONAL LIFE BUT WHEN IT INTERFERES WITH THE TRAINING HERE-- FROM BACK IN \
HOUSTON.", {12, 15, 12, 13, 11, 15, 12, 12, 12, 10, 15, 1, 10, 1, 1, 7, 12, 2,
          11, 15, 10, 4, 7, 2, 13, 10, 2, 10, 12, 13}}, {
        "GREAT RUNNING INTO YOU, BUDDY.", {1, 15, 10, 11, 13, 12, 13}}, {
        "I HAVEN'T FELT THIS GOOD IN A LONG TIME.", {11, 15, 2, 15, 7, 1, 10, 
         4, 7, 7, 13}}, {"NERVES OF STEEL.", {7, 10, 12, 13}}, {
        "I SHOULDN'T BE OVER HERE AT THIS HOUR.", {11, 15, 2, 15, 10, 2, 10, 
         12, 12, 13}}, {
        "-- THE TRAIN FOR MARSEILLES LEAVES AT FIVE O'CLOCK.", {13, 4, 7, 10, 
         12, 15, 10, 8, 7, 13}}, {
        "-- YOU SAID SO YOURSELF THE FIRM IS LARGE AND POWERFUL.", {13, 11, 
         15, 12, 12, 4, 12, 15, 12, 3, 12, 13}}, {
        "THIS IS NOT MY USUAL FRIDAY NIGHT!", {12, 15, 12, 12, 12, 12, 12, 
         13}}, {"I SENT IT TO MYSELF IN PARIS.", {11, 15, 11, 10, 12, 10, 12, 
         13}}, {"YOU SAID IT CLARK.", {11, 15, 11, 7, 13}}, {
        "I DON'T KNOW WHAT YOU'RE TALKING ABOUT MAN.", {11, 15, 2, 12, 4, 11, 
         15, 15, 10, 7, 13}}, {
        "OUR RENDEZVOUS POINTS AND RADIO FREQS.", {12, 12, 12, 3, 12, 12, 
         13}}, {"YOU STILL GOT A SHITLOAD OF PLOWING TO DO.", {11, 2, 15, 4, 
         12, 10, 12, 10, 12, 13}}, {
        "HE TOLD ME THAT I WAS STUPID BECAUSE MY BOYFRIEND DIDN'T REALLY LOVE \
ME.", {11, 15, 12, 4, 11, 15, 1, 12, 12, 12, 12, 2, 12, 12, 12, 13}}, {
        "BUT I...", {12, 12, 13, 13}}, {
        "THIS SORT OF THING AIN'T MY BAG BABY.", {12, 12, 10, 12, 12, 2, 12, 
         12, 7, 13}}, {
        "WE'RE MAKING A STATEMENT.", {12, 12, 12, 12, 12, 13}}, {
        "I KNOW THIS.", {11, 15, 7, 13}}, {
        "I THINK I SHOULD GO BACK.", {11, 15, 11, 15, 15, 2, 13}}, {
        "NO QUESTION ABOUT IT.", {4, 12, 12, 12, 13}}, {
        "HEY YOU HAVEN'T CHANGED YOUR CLOTHES!", {7, 11, 15, 2, 15, 1, 7, 
         13}}, {"THE RESISTANCE THE ANGER IN YOUR VOICE.", {4, 7, 4, 7, 10, 1,
          7, 13}}, {"NO I'M OKAY FOR NOW.", {7, 11, 15, 1, 10, 2, 13}}, {
        "NO ALL THE GOOD ONES ARE MARRIED.", {4, 7, 4, 1, 7, 15, 15, 13}}, {
        "THE GOVERNMENT DOESN'T HAVE TO TELL PEOPLE TO DO IT.", {4, 12, 12, 2,
          12, 10, 12, 12, 10, 12, 12, 13}}, {
        "THAT'S COOL.", {4, 15, 12, 13}}, {
        "SARAH LAWRENCE IS ON THE OTHER SIDE OF THE COUNTRY.", {12, 12, 15, 
         10, 4, 1, 12, 10, 4, 7, 13}}, {
        "PLEASE ROSE BE A GOOD SPORT.", {15, 12, 15, 4, 1, 7, 13}}, {
        "YOUR FACE WAS DARK AND YOUR HAIR WAS BACKLIT -- I COULD SEE A HALO \
OF FRIZZ -- YOU ASKED ME IF THINGS WERE OKAY BETWEEN NAOMI AND ME.", {1, 7, 
         15, 1, 3, 1, 7, 15, 12, 13, 11, 15, 15, 4, 7, 10, 12, 13, 11, 15, 12,
          10, 12, 15, 1, 12, 12, 3, 12, 13}}, {
        "HER NOT BELIEVING ABOUT YOUR CONDITION..", {12, 12, 12, 12, 1, 7, 13,
          13}}, {"WE SEE YOU NEXT HARVEST.", {12, 15, 11, 1, 7, 13}}, {
        "THEY MAY LOOK GOOD BUT THEY WEIGH TWELVE POUNDS EACH THAT'S \
THIRTY-SIX POUNDS RIGHT THERE.", {12, 12, 12, 12, 12, 12, 15, 8, 12, 12, 4, 
         15, 8, 12, 12, 12, 13}}, {
        "THIS IS ANTHONY ADAMS MR. HENRY.", {12, 15, 12, 12, 12, 12, 13}}, {
        "NO. DADDY SAYS ROSE IS CALM AS LETTUCE.", {7, 13, 12, 12, 15, 15, 7, 
         1, 7, 13}}, {
        "I'M SORRY IT'S JUST THAT..", {11, 15, 12, 12, 2, 4, 13, 13}}, {
        "BUT THEN  --  --  THAT SILLY WAR..", {12, 12, 13, 13, 4, 12, 7, 13, 
         13}}, {"SHE CALLED ME AN OLD LADY HERE TOO!", {12, 15, 1, 4, 1, 7, 2,
          2, 13}}, {
        "FIVE NIGHTS AGO HE FOUND THIS PARATROOPER CAUGHT IN A TREE WITH A \
BROKEN LEG.", {8, 7, 2, 11, 12, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}}, {
        "ALONE.", {2, 13}}, {
        "I AVOIDED CAPTURE USING THE MAK'TAR STEALTH HAZE.", {11, 15, 12, 12, 
         4, 12, 13, 7, 7, 7, 13}}, {"IT IS IT IS!", {11, 15, 11, 15, 13}}, {
        "LEAVE THAT ALONE!", {15, 4, 2, 13}}, {
        "I DON'T WANT TO TALK ABOUT HIM.", {11, 15, 2, 1, 10, 12, 12, 12, 
         13}}, {"GOOD AFTERNOON MR. HARRIS.", {1, 7, 12, 12, 13}}, {
        "JOHN I'D LIKE YOU TO MEET ONE OF THE BRIGHTEST LIGHTS OF THE BRITISH \
STAGE MRS. KENDAL.", {12, 11, 15, 10, 11, 10, 15, 8, 10, 4, 12, 12, 10, 4, 1, 
         7, 12, 12, 13}}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question"}], 
    "Predictions" -> {
     "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question"}, "LogProbabilities" -> CompressedData["
1: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
eREqhI1/h45WYDvs24z2VJ2dxP8ANc+Abw==
     "], 
    "CountMatrix" -> {{37, 13, 0}, {15, 35, 0}}, 
    "IndicesMatrix" -> {{{51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 64, 66, 68, 
       69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 87, 90, 92, 93, 94,
        95, 96, 97, 98, 99, 100}, {54, 62, 63, 65, 67, 73, 81, 84, 85, 86, 88,
        89, 91}, {}}, {{3, 14, 16, 17, 25, 26, 28, 29, 30, 31, 38, 39, 41, 43,
        44}, {1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 21, 22, 
       23, 24, 27, 32, 33, 34, 35, 36, 37, 40, 42, 45, 46, 47, 48, 49, 
       50}, {}}}, "ExtendedClasses" -> {"Not Question", "Question"}, 
    "Weights" -> SparseArray[Automatic, {100}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00026589, "SingleEvaluationTime" -> 
    0.0041628333333333326`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740158275742425*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"96549ca8-5001-4e69-b5ba-12f1ae4e3c56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"6cfdd4a1-d410-4d1f-8ed6-4fbf050556f7"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8942690773836068, 0.7076313004901209, 0.2995833319187835}, {
   0.9362596038321437, 0.48331806593143567`, 0.0031734559841691116`}}, {{1., 
   0.42, 0.}, {0.9175725176402327, 0.806972124925851, 0.505302658348255}}}, {{
   0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["37", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "37", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7115384615384616`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.74`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7254901960784313`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{37, " examples of ", "Not Question", " correctly classified"}], 
         
         Row[{"Precision = ", 0.7115384615384616}], 
         Row[{"Recall = ", 0.74}], 
         Row[{"FScore = ", 0.7254901960784313}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["15", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "15", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.28846153846153844`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.3`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          15, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.28846153846153844`}], 
         Row[{"Row fraction = ", 0.3}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["13", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "13", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.2708333333333333`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.26`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          13, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.2708333333333333}], 
         Row[{"Row fraction = ", 0.26}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["35", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "35", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7291666666666666`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.7`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7142857142857142`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{35, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.7291666666666666}], 
         Row[{"Recall = ", 0.7}], 
         Row[{"FScore = ", 0.7142857142857142}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "50", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.74`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{50, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.74}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "50", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.7`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{50, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.7}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "52", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7115384615384616`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{52, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.7115384615384616}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "48", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7291666666666666`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{48, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.7291666666666666}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["50", TraditionalForm]}, {0.5, 
       FormBox["50", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["52", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["48", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7401582818924913`*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"a914b72a-70f2-4af1-9e0f-187b994358e8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 3.7400883194708557`*^9}, {
  3.740158177371798*^9, 3.740158178411964*^9}, {3.7401585653142853`*^9, 
  3.740158565906266*^9}},ExpressionUUID->"aa2ca46c-0868-46f9-9183-\
0ab00f37703b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "1000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "1000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "100"}], "]"}], "]"}], "]"}]}]}], " ", 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 3.740158569265873*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"3e953368-3ba7-48e4-9f56-3cd26b2f2974"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["2000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 2000, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnRAY2WOoBBQ1NFxbssGIESyCBBA9sd8tN6770Ick5Jlfb
6n3MxbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b/Pp+nvPG0u48=
              "], 
             "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                 "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
             10.158144370086415`, "StandardDeviation" -> 4.020779979572767, 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUmuRbuOXF/DHfdcTcADMKC6GEIC2cohuGHALTfSA/JQHSu2yHPzI/9/
jzp3F9oSxSIY/O//8//82//6f//xn3/+/T/8888///q///3//st/0z/8j9tq
PXXee+ep465ZSgyUfYv+fa2xz+qn199Av7vPMfe8bbSx30C9+/a6d+t9ljHb
LTlQRz1F175jnKOfxMDZtek/vY01Rlt1xMA6Y+0262qrtV7rzYG+9umjnXnO
mGfmwLhtDv3f1hO1O/tvYOnxy+xFz3SW/iUGut6sjr3XXnWVemcOtF3mOKPr
j6fmpv8Gyur3Hj1SGavdFgNNt6h6gL70enX/7lFP73ecfSWf48+b13bXOHpk
vRGPdX8DZZXVNPlMlu4eA6Xf0+fU9K9aey8xUG7R6+n3deua+rccOKcXzaBe
8fTV6qo5sDS7pXXNlT7Wzm9e9Gb78OJX4/q8/TdQWQdaJKVrim+8oNbC0Xfr
mtetvxk9B/rZo2hS5unnahG130ArZ5Ta69HN145pL21rNlqdulfrepUcKPoE
Rxdq59yrj5iXKl1zoUWq21Y9eLygfnW5iR52afq1Ln8DmgdNBo9VRtcii4Gz
z+76f/36Dn3/HNALnr3uurudrVkeOVB1h321FE6/c5UWA2vr/kW30W7QRPf9
G+i9shDrHrvUcWJAr1TqrNoBR99k17y5/lrLQVNSuNSs+RejaL0X/e+ca9ce
k3huv1qJRQ+q77jY3DmwtQu0pKreRdvk91Rdq1e/rbOwtLWCfwP19rIrK6JM
7bcYaENP1PmOU/tz/WZXM6EFsfRs+2gC5ls++mzaUGXeoWfQEq69xIAupi+u
m1wvurZz4Oyp3Tn09uXqT9pvQGuma8kf/adprnNgTW1lfS+9hJ5h99+AVEDt
KIi6Nc15j7UWakxf+2o16OlzoDCDVctn9KFZzgFNgv6iSNHtNaS+ckAPqtfT
7m9Tq7GefFxpo1qanqr1o62dn1ZTuvRVpRWKtg0zHQNdD9S7RGPPLg2bj9uu
/kWPPzTlUwt25kDXPtRCqPpfbZvzG5BO0su3Nqa2XM/FoAG9V9X+XKvp/2tO
op5cL6aba39K+5a41NZKG1rBp21NcGuh4dgwVW/feYnmdRcDB72vFacJ0C92
KEsN6CpFr6LFMKdUxs0BXaINRsqZ68y8lK56z9Q6OFMvP27+hVSMlO+Q9pYC
6DunhIe8U/MuXaUtt+Mo0k6WYjk+jJb2z87VvrVijtRCLwsFsHKV7OmDS0uT
RaWPlvfQfOi40b2kUobOpPiCUhT1sDt1TC5WXM6V1kDRGkAxSY+XlZeSfp11
Nk2IVgNf7Q1oQekM0tNqReh5W6hXDWheeWvp8q0ZbjcH+mYXjyk9rYc98R46
NhfKXRtZ61f7J6ZEqlvrRifd0iGtBV/yUlPaTo8rlaJ/6L+tJv3Rdf05Z+c8
vvnmS59DOkG6pulDar3ngF68cCfpBO1qbcIc0DNqtnhBraCSClnPKt2iz6dl
r3tpvnKgSNdLZXELra/U1FrFV59ap2cbOj5O7iirNu0/PZQ05a75BTV72mIy
MzrH8GypZLTupdcuJsPWd7o9L1WGjSXZLd49qWTmRkdK7w30sT5yDgyfm/pG
nVNB6yQHdIjrNbAvOIRzriYzV7SytKOllrQgcsA6lXNWO1FHYhxFmsA2pL+m
FknnGW8O6LFYztINBwun5MB8i/PqM2tZ5T30mWQUSDNKq+hYCquPAeluTZTW
NrbDikvpA+nryHqTzab3ljaPgW3zrmPgTRbpb0Azd9BuPiS0HmNgsqH1zihA
rMHxG5BQ/2XtphNu5YCWuaZJNo6Uo3bVyQE+N/aVrBtMy7y5bBcd5zJupUJ1
qbQZZGzJSJO60K7Sc9ycRH2JwlLR1HdeLzWDTlGUQNHhJP1dfgvO6lAmsFbd
QGGlshwdO1q31s+lkkfOrv5Jr8upiYGjB8gBm3TaiZpyf7K8lN5WC54jdTYs
33xcWZAy279lqpEdi1p7c1wphqJDZWnvjvIbkCnL5pASX6iBHMC6q5Wrd3RR
zm5B/2xsvCVroOe06wkHakOfT2rg/CwynRmyaqVk8ARkv6aG0wm4rUO0GtHT
O7657JUmO1+noY517eYS065X0LzKspQe5QFzJWqyZZTpXbC4tdPzVNOA1qFM
qY45r8W6ckD7prBpKneZNR9Xu0xLHY2s+ecQywF9kM+EkfvDeZ8DaNA75Zjo
ALs9J1F/oP1ZOas0l/x3DixmAitblpaWVc+BiX3RpXh1Ndktv78YOuNlZ+B2
8dVnDnBu68EwYZmdnETpBA1szlS5bLfHX0ip4vLIu8MCk+kdN28Hh+JI68jQ
1+fMtSvrFyWg195Ti0yfJwc0izqmtHJknWiK40Pp/QYKS3vUk5iaGt2KT6BH
0tPqnDw5oN2H6aGXXxys+ReTjT9xsjTNevaYdt35aAkuWQHFX3LkwGJSZUBX
zuObhpeOTflbPtV0r/nzDaTrZEhx4so2ktbOJdqsEHQtrRcWTO5zXLHVJJXe
6D7cckDrqWL46RUxiWNKtGN9IugeUgSr9PZ3QObFxAOTO5rvIedFbs6w33fw
/GK1V6xUXUt7h+cov7/Qs2jrSS1Vq5Wc9mpvV5MqzSsldPLY1oC2vxwPDaH7
Rz4ualfWmBSv1gjrPga8phom4W62hHMA59S+69Rp3HLa9UqaB61b/AkchByQ
66Q7b+yca08yB9iS+LZ6TZ1saUbpo8pg157hoNd+aDklcpaY7LHYItLVvwFM
UT4KQ1UOUA7g5Wp7syKQ5/fAt9G50jg6DvMbA1oMUtBL31ent9RVTqK2k55F
R6TOVu3EcPWl0vU3eM5Y0DI2UlMX7DrZYtq7G6c33xyrREpcp6kOCd0mj9Ti
E1tTeHBQtDByQDMks10bqFQMrQikeBU0NA+KgOBIPG7hwNalpAk6rmIaLNpE
xTZXw9/Q6ZwDUhKcf9jQ0j4/o0gHrI4yWdv68NIYadxpiW07sHJPtRQ00SMH
cNrlf2tbM2exfOxWscOW1kTRyoodJZtnEAcoxF0uhtzOAWmiiXbVrbTn//yF
NoJcabxtfbX01aTYZT7h3aIH+E75uCy4Ll9ed9IMn989sIJlkunViKWslffQ
1u/4ojIftdpydtG3Mnz0TbRnOTtHvrlmTkKOPUxivUkODEIlLGo9HdGMGNAH
ndhcOpy1raUKY6BwojWpcOysX/RDb9cuZtzFkEMN5YBeUCpGH1UTxlPlgHaw
3n4ctJkOyIiqbaJwWHc6nYhWjfDobe1qJeuZ9Tm0YnKu9PeyxbB1He5oOy/F
mao9pvO7FFRHvLlWnG5c+eLyaPafm2sqJsaSFghWS9iJGihYqMU6Xu5amAab
wIsWlDbAIWiR0aiNl1awh7SypBxrzq7mRFudE/CiG36PK8VNAHLireKFhF1i
BSo1I2XPsaAbxiTuiWesvfEtlt8S1SaQUYQfrKnRzsrVvqVcOLbxNjWdLb+g
5nwRC5I3eGwW9t+A9IxtNf3vyUiRHkp+q2xx7V5dk1M0Buq33FiQBFlK/w3o
qbQHUOYYvXkpKUUUxsFAvejYHNDub9O/n5PYTwzIkR74N5qai81ScoCjdxIX
3oQo8y/0s44jpiOlYwbHwYKlNwgPEgfF3w5jQgME4TQTrFCdOhGBfFLZXk1r
WHp8/f5CDobj1Fo+B/UXA9ot2jMNR5gXaTFXWhuyzHUYWDNigsTAxKLUi2iT
yJppO2/OjiJCh8ONwZED0m3yqbWf2Agj4yXSnQd/naNeu0SnRT6uJoFgsKxg
VPjOudL0yZHXkuoyzQreQQ4QNZSvShxCDm+uXSxT9i26aaGPew5oxS20mLSP
rJw4OfX71jH3C0F/q5wcqNh8ug5K4xe52wQ8MWOwKORzp0uG19qx4zraHR8u
/6IT7SuoxMVRmPtcBzghSyn4huFw+p8BzDT5WbqbpnnGF9Q301LraIdCNDIC
QrqGFhZeNtvPPm4OSC8VfG2HrzL6IaNHs0QgXucnCjx1ySAcglWmz+VpOTmA
1y6Fgg7UI+ebE4tF72h6pRplbORA10xIQAD24JS2HKg4zlpoeiC90u8vdAjq
8TuWldyBk8pSm4M0xEAxdYzwmBI9rKZeuocoOUGrvBQhGs03q0027gm7hDgp
AZ6rOT6cVGHibGLt1bEzLQsZCr+/wDYmvqIlqg1fUosSxpR6uD6mtdZTWRKs
0I2brAKZTJqBeCqZqIXlRopC9sn9/YUskYLxpf8Qz8njTjtFbpQUrNYKrz7y
Uv4lOZnVCPTOfCrcgkIcSQt/40u+gWb3vxHjGSigiPtoTU1WYiXBxQmVk9hw
WXWuabsR80sv1QN6e6lj6QK5Prk/9NFYUzJXZJ1IaaWSwXTSyb2I2eIIlby5
DJiJDqvSHNonqchYyoWvh82NYsr3qP7X5lQASzwHdBhoH02yOPpKGXrZNnHJ
gbDVCMr8BmRjdOxdAo4aqjmgNcqGYX3pkM4viMfZF0kevrLuHVPCuYKXKO3q
qF4qmdp9wLLdOzZZOzmg445HK/LQcXbyL7SeCZfqgRrrK3ViZW9jN+A7X/Rz
Dshy1nJrL7iWBguhRVIHugmWU0sjFS9CfzUI0EvNnNzOhYwPj6PNrsWSEXoN
yDSQMtJfyhIgdxMDG+95ou0X0aKcXWlhIkoLJ6ERrMp7TILzh6NK+gmT9DeA
yYp2Kzg0fwZIuGkhynrWqpctkwNknPi4i4RV+Q0Qd0CFXju3IyLCmwQY6l7b
Q//1Z6vp++C1SlvoOtrMqX1kfPCVjjwGnLka72EbTDaUvLVJHrSEWlo+qkmp
FU4ETPUYYMnxmWQpec/XGJgE7yrJxEaqJ8wPDWh3brzKNZ3gKTFATllushbF
0dCp+RddSwHfS2aXvm7/PRVaRLcmRVCJwuSlapWdtD0nWtt15FPhVckac7a1
Eyp4A9ouzpFjTcgEydldpJ1IY0xmUao2TBzCBJjylQNJPkCegxogzSqXrRNW
KBnSY0BW4MW/kv88clHrzbC/CaBU9HuJU43cCeeQtJOcuIrt8huQWiz4pPoH
7OIcwO+X/JKjwMyLAalIGSCErgj+tFhXTlXK8BmkA/TUeXIuh0mkESZZEf3x
yDfHb718wo6DIKMhBsivzP1lyrDTVw5IwaB0cV2c7skBbUzcDCwgnJf4HlJF
w+FPvowmLiJeiwS51hmRAfTVCDNq4eTIdOX6WidolhjgREN1D877mWftInFF
gIUVT4Q9Tk7ZXOQ25A1heY6fV7RwZQmFy0LAK0l9RbyFMHIDHDDJQOQ9HM0e
2I+DaMfvPaosCRzqTiSCUGAOLOIeF1NjEAHKmxPlmoAJZERerInfwHIipxl/
cW9OScWfleXfsUFAgvwGSCQSnT/SBDW3gVyASxZCG2pimN2ckuIMp3yyAuQh
1RJRcc241pp2IGHxnHaZruh1MByTsFoYd5o1u0Sb9OHAW47H1cIlzEGivhOt
yl27iDVpmQ4bjISjYqA4VyWBdrSul99DirbiIGi4afu3k0+lB23EFHSqFJL1
8YKaW1lIspIIEznlmgPDCnoS1GSS4+ay12XwdmwpvU7PvIHcSTL96H02Q8t4
+8JPIt4vdwovJ7E4C+ufwDaugzbOyCWKtS5LrH15UJKkvwHObUIfsoWlMmIS
WYByy3UU6zvxJPlUZM71fXWHg2f4uwfmL9sbXQkCJu9RsMNtJDcs3pbvoYkg
l9MxOy8+xxvAAOxcQ+cImfowOTWwKku+oZcxd+Mew8mUS9gLA6nEsa21AFhD
7pD1uFR7zwEpwmHNQfQ+A0I458A/mHjiATvOWgZkkPARNS+kUmLaQWLIsZRq
3Rdr9+bjdjuvujre0smUqbaKjlIpB58TjTRCDMhAc0aE7KVDl29AJujEbARt
oC1x529A54ymmLO8k/7YOdAJllZsSrzh1Ik4jn7B4bz47+adNBc5G/KwhLby
HpwSoD/YIP0kpEADgEv4g4NDXnKr9VV9CHcclAH8KwbkpOkFJ/G+Rfaw5AAI
h7MxRdHIqZb4pDppZC5KdZSfH6WBQZwPSxyNdvJI1QAbvNgCuWAdYkC7lohi
IcQhfR42NSiAS4SRCLMWbgtvgiO8k8gg8SSzs0Z4B6dP1uzBm7ZFnhoOhYCV
w2GoW5TUDOCZdK2KUfslJGNA1s8hiEvkEmN45sAE9CVFPPGuei5qvZct94YR
zHeMRd2w6zb4M/IGd+ZZ61wXyZ+FZtdJnzcnDCwbaR4jJkYq5Oaj/0tNahOU
XFdag9K5LHS9izbk7x6kGlmbjpZJm8Vf6DzGv7nEfIgUhaPIGiGXI4WszXxw
LH4D+AQFGCDmVSA5COKC8CC1rLn8Y6pJIch1lsOuN9X3mrl2iaVhci1yKX/s
9uV8C/g4mfXO7eeAD94Kgm0ALRj5uJ2TgqgBvoceLZ+q85lICxW+38/8IEQ2
iC4DCCAclgNEMpo+e3HQaabK0InKM0rx6dyWOggHaxVC1HgYYBTYXCUHGqa8
3lI6c4E4yAFpBR6p4c6vRCcwUPwnII3knOS0F8KDExwmm+4krg8/rzpbTIqc
9ZOXklIknD6qs7Or5VMN+//EUbEZ+u8eWmVaBYR+tPDw7HOgA1HTSb/9nzxY
jGfkNCdgqzdv+VToNuwIu3z7zz2wIeR3EhXefzx6WbqEbwk5SQu2n0fPwGBS
nCjCVc6nAlTW7wENh6aLD2WMLLk7G2aFeFUOyDgg3AVskwNhxIAjRIMImg48
MFAxsEkHofcXp3YGATXZMhe0rXBDhiOhMYA7iRYn/8vJk38xgI/o1Zsd1bSW
Jq6C1EFB+QAduflUHaUrn0F7ifBcTOIkuCCBXBNpgDET6qiBQzIXOBzYtMTW
kunWdOi2ervCrs0BbSlS1GSj7T3ne1RbcCBItDfP/U2ivmsHSoUHp3vl4x50
JfktfRCgx4F04o87Vp3PCQdscsDQzk2yRVt0hG6fwEeJPGsnE4QYN/8C43k7
8GGPeObNNVsD21ifcaAKWg5MDjOnOQlD1N/AYPcNbVlZR+B3YoCInvYbCAEp
vhq2D/hYTR/ZT06rnqgwskFEbMEcogJnLgZCfLoNng9Z9TL+DJCyQFNeMln5
BfWkHCmk2sBn11DhAA06CWPwnJrLEd7EJNRU8XWx3yr5mhggE4QaI9U6d0YH
5R8dkiIsBaJOu+dfeFvKod9G1mZQlgEdBDq/NLtEekJZkvclUoTTTKLxRMaE
/Bz7D/fRXziUpZ5DhhtBLCBjnFE1BzoZFwdacZNX3oONJM9IT8Ai7WGX4CCT
IeNQwOuvvymp2AWOuzS+ys5JlIPEWY/7T/7j5OMW8O6bKMR3rsbNpeo3+XwS
5OToIl8ry4NUvj+JtAr5lxjAPpOWsy0FTvn+BgoLG4uWkHwYE5M5v4RdD+Y1
ezoGxgL5PEn18U65SjS5HZAIiI5JrjFmV0enLI8PUkFcLYyJyeIHb0Z6jmKA
3GoTGIKuwVEsPTtvDujNjiGQ0v2kvG4ONDCkUolacmSYSg7IAt5oN00UCN74
tBO4veXGe57fzacTo8ZyNRkWueCmMXqDQOOwuZaX6gBtdLHKJdtPyRCJAlum
LwJyuo4/A3LEUFoYMnqGmMSJJTFZKpUgXuJ3P9QAeZQB0EMWXfsNdM59QBs6
iTKVwhpEM4FMH3buYl1NgLY+KDqp5vN7D1Kr/RBD2cf5nzcwcDl1cYBqMuJn
nOfkfH3QX3sOJ6s5ps7qwdaXGXqcO/kN4IoObIf+YcNiYJF0d0BNc6/DZOYA
iEXsOpBU+O85AMAJXMnEWtoRVp+OnTQWyMUj67l8BggLbUxyV4fMRb7g8KFN
RtXQtFztfGgZJZfnmnImWr45MDF9Dq/fyUEYA7IqHaW/rkxJg2WybDChjLQE
pBRPBeh+OETkmObvrMW5106X9nVNQoko5/yKILaxxgTrcna1mlBLx2hGrftc
7WCicGm7D/zVf5ciscoooQ7QjvE9Ol+VhBu4QS3Kk/eQO4u613eR+Xp+yrID
Y2xGy4G9TdTk5OLD0VGrtHV+f7FI7VKBQCwzIZsakG6TtUnVQUO751wVgqUE
owgK3UyyasKJvCwMk+KwXtycNaI3npQVLfZHDmxCCbbqDb/K96AihXRqw/cA
q5P3mHiCxGsMdOq5EjWgY1SbEJdMXyAVQAM/O4n9EEsgNpkDTmgVRogUrz8D
Rg9NJ55+Pg5HxwV6SYUQUO40DUBQDie4L073TtWnz7DxvQiaEv1Im4GHd7aR
OCeY1JUDgBLZ6qxerMwYKAZHUThEDc/P8JIWk4ldwGpetHh+qEq0a2D0EmkE
FZsDxcccLohevaV65TqN64ACxHfPvyDrgkMLCsOguRzgdCZZoi1wT2ImiJ+4
yEtv0EFV5iQCJNI5hydMQn79HVjOWzhBIVMoL4XR2r7gLiGmPCBl7oGgJasB
fiHdvkmc3eCzyjGIhRsD7NUGZuw4ZponZyUoW44BKDorfwdLfSdsB3wHbCoe
16b80gEBwpzpjG9eCIuBIAXR0P8cLFhvgK/wuSY7OgeowZMJAXj/OswVAwD9
lz49YQhine/TEtIibVhJwXrPnxxwLliW7qG0ZkRCAZd2FVfEOIyVvjOWqyxI
+9yNiqGSl9roV9agdBPpmhoDqMhGlEe2s3GjOdAd2Kkk3qQqQ4sS49YpaIuT
Qqi+8uaE2cgsNaJrlP+9AU0onnitOMGdsycHqCqoJJHIDmQmjmgam0Nfl8hg
y+JFavcwKzdO5wDemPfAirLjPHD6Ts1LGZjZuQ3neouYpXQeuw0N1Js3UN4D
4JorFTso+yxwIYfbyVUD6KG+5jfAWgBDpoXot8ybE0sjOUmJG2WUMbuk4ajs
Ie3L+R+rnYFVv0IEQ3IifYbbrC2IX3lBx6f7ykDh/iyI6VWUA7I/B6FDq8fc
OEQjKPSS7wGKnYRnDGijkbhDt3J6l98AedyBwa3ZGRk80wBAS7xt0JvEsGOA
zPix0sWzz1Ir6umwPyZGMlUQ/TcwsQwIrlbqCH73oPyTJB+wcEL1NQfIv+Ii
k0/WdosXXOTPbTnIQJ8gMXIAdK2WLh9w/hDYA1uL8rkOWITgaKyrtQ0wWcQh
KBi77TdQOZtwsQADhO1D2AMEInW5nZxxGHfUSs3xVZgOEKUj/4JIxnF5Zidp
lVsNS5SNTLCTMMHOx20NaJ4OPPQxVmYOkFNq+IUXyPY+vwEtfoDmdxiGlAPV
ZRZ66wbEJDGQA9yzFjNIA62qnrglDQwww6DRtUa1T28OFMrlsLkaUZVww9Es
OugW5c3Ui2QQEPA4efiLtUBwKxccViooY0qMGYlTDf8QxLkUNrUKZApyQC9L
UQiIBbzbvFR3opQyJNRoAheJOgCYJmWMzrwRwNbfy9mlCJUCM9duvQFyDBgG
lDZQfZNTQkqbxBamgB7qBp5Bb7fxI6hH2+TSaw6M7grQ7YB+S0wRA3hvwGWo
s6jhR1E2s2yIgfbBwMu/AFdPuEcLqZKjycct6Di8vgPYKv1awEKcBBV7Td99
lXwqotn47HjHbOcYQLWRnuebd2MRYkATSuLFqNd+MoWNjrjW6gsdQPlrDkiE
I0oFr6yvCBWTie1UXzcANC6SigGtJPtu+uIOtMSUoAwvibhOUu+HuRugW9kC
G6Sl7ld/A8YrkggjU5X4RNclYrbLOqjoulxwLhCeLBzA3yXBkaTzKTwDRSL1
KGMyHhczheKzwnRSa/EbwAfc7PXBN46kniwGqcFGPI26P3BjOUC6j0AOGR3i
6DFALVWntLWB/c6SSsBBePjAfr4YTMwVJeP4+mU4HjTCuwPxJilmAAizkrk7
qX/cRmpSndZMQ3gYBkSaEQTSnQm/0BGLp4RGwBHWsh454BgNFkMB1RnYKPKk
07VUQE0v5nsMAP4h0w4+iaqq/RsAbviFsMsPJ4M+J8V3wU7KMx3hbQ8wu4CA
KfsHk5anQbWxQJaZj0gmNwf0BptgYnX9X35zvRkAcHKaRDOyuobj0dVkqCfX
Fuc9ivGtm0JkUPc57RWYpWv8ZbfckumBUQxRBdFFTmMl4pcBYC0USIFP3+U3
QDEQZwdbfWUgngGiViw7duBv4wCaYimSpb/s4XhBnEbqB0mLsM9/lzrFOHUX
n7byO50BqNovaTj7LNQcAJYA6hTQJqmCGFj2PqSN8Q5AQsQAtiW++66GA4QH
iaePY836mpsqxdhRBd8YVN8AbYGFEgMGlU3KT4C9n/UbAIkGeJ/Yy8zoB9X2
xH6Io1KOmwlpCuGlOrEa8AtuoqmcqWV6ycuAux05QEn4csEBVbGntN9Ax3wE
igOOIwIpRCw4HLw+jKz5M4CyhzEC7HsyITjtTH63TeplpWd2DBA+03nDIvoA
STlA+QBhbEJVO3Ey3fUBNtK3o2grLwUEzvsVb3AlSwGbgAjuNc6R/GheqhzD
6jmpNkqw5gC+98ATr+yGfKoD+ossNSGmxoPHwLdllvU95UsrBzSnNoftUrSd
f0F4Hv+iEz4YWdtHNJGTCxgfNBBpCHdqdUm1NyKnDSRRDJBYIVZF0b9muebj
QuKAC0BeAxt+5wCHabe/T2oxIJvkqAl2g3nf3yGSA+UDX8oFI7d+8z0KwFro
KsiC/MBGlKhAMkEdtAF+uUSd822ui9DyvPPvgI5bWa1mRJHG2TkwTcLAi+qN
MrXFSdKdfAY9aYBmDDhMe0HFEQEsZ/8GynFYeHo1hJVh1IIzLIcFTwAjB/C6
oLr4SE9+N2/FoBPqI82dcWOAg46Szoa3XRL81X3W1K+IGNcsNFzfhrpoIQBG
Alz/G1gcgxStEbY79zdAELJ9BiQmUD5uaca0gV/tZIXjcddxmTxZnIquyT1I
MtM1qz7Oe5ayAw6iEI5wA7wnedBz+pM+I3JGOvO31fgWwNq7tIN0bKYgiDt0
QHGNWC0OXqwSEhWaCjPTGBYXC266WpNQn5bO+MWQyY4D+iSDDdtORj86rhOI
U6IZlJxGCImMFsUt97oOYmdYBGg9USj9nJWu4bwH+QFQrEQo0aj5VFjNrEGW
LziomgNW7zoQYB2hYC0H8KwMaQaBkUVmOl+xmKH+AML8y9EzALqaaiDsmKwr
4kRumOU2lcC/53sUZmpXw31KTbARqoUaVyBkBlvlh8I5JhINnQSuSVj6vIDU
/Sb+2dACYWUQo77QuVDNTmAtgEDGilDbhgMtrbhT+4zp1X7sHAC92b+BAUgN
d6ID6IxFjXNs7iA8I+CkIwf8B5NwDadzngYDUxgUeScDMjK93LFJePqGBod3
aOYAFVtkz1kp+p6xP1yyQZmDz6r6OyAp0MNJJirDK46cEtLOhvpjx7Ls3gD2
GKE8uD+IdYQ52D99jmNP5X9L3Cv5VgBVuOiuO8p1xaTqlxjhxMl6hA2JYshG
qgZIYNzlm4PxJt08cdYwKNZvALQqcDL+KqNqHSjPJHNNeq/1rJyE3omyIQq5
7sfsEAOgB2HmQgOfn28AiQQ72bBIsge/F5xmX3CJP8nhXO3k9Me0BYXfsnJR
Uw1LdJVCAXAOJV+wGYmD67FYrXmkdqCVfFPKwAmr5V+AWIZMA2+DREQ+FfxA
DoiSVQPFkAPUKPtAALx75+8v+vfBOTymjLl880I1h/Z0Jzyje8dTga+SrdQh
aiHymiq8wYhD8JrCVINZc8ApELyGbhDxzYEOg41MGdyGnxPXne4iugRKGQBa
3nxp9aCjpcRAYeS0Y22BlocyCys8z1rwoOAPv5gzWZ4YAIEDPQmAK9InsUpY
GO18pAMLXGC+IHWs9ixd7p1lgh2USoffwxjUnlFOTBcy4tyrDshQ8i84JiZT
C00A3/MNADyDeIw6wY/cJQas93QuTyKO+3dyVh/ulb1BHikrFIhJuELmEi0l
d5l/QdCZsDpQPOOkYwDHigw5mwQnduSADBXwrYZf6pa/gVldfEH8U85EHts4
ipeIIuqVpZr3mPjxVOvjOKG6cgAv8LqMsEJ1EytROwA+JND+DdDMb8DQ8/El
gMyL8BsArj5NGULlaj4VrDfLW5Ry3hXRqA7DlG5uSxgXN3W7y2HGB9nARR95
KdYhtUm2n3fidynJktVA2aa2fAWYlwNoP/Nu8Y0THU0g6h1axhvWiKR2RxPB
B+lonoRB4wW/cnlqCxophywrYJtX116CnWF5x82LkbBAM8EP3KzbxmyGY4as
2qA2LaeEwLmXDslfbN/fAPmdYbiVVGBNB4u0KAjeDnfEpPY2BkAYHtCX1SVz
v5s34CsAqmEjWT/rlaAqsTnYEw/EankPx9RdZkspZvu9YKGemVQjtsRM4EnH
3gPnfHxFytxyAEcV8CeloRx434DLRIhhU7KC+jg5AHaOlxtmS+m/v6DIEFII
9qFVWQ6gc2BtgI3pxwnYsGjJQJgQgQhUjQHyZ9Q/UWODlt8xUAAYfdj76/BA
DpANx1nCGSeJ9gYO/gLufwNbs/NDmTAKLAWBNvjLAtDUDIYjckCG+bYTURzQ
6GQAYDQgbJrQOrgnO4wCmAGEkVoODOLaxAhZXkSqYqCbz6CjIvT9s+QYgDes
AqAyUctl5l9USPOodDRP5f29B0EgHTqjH0eGwygCL0WOX7uKxGlNrIEGKE38
iswoX6j5F8dVdaaUoDI4vCLqgrC4eP1l0rCYkk3+umFBUYEGBj4HCMLDdKWj
pf5KSdr2N+8mmzN7Uz4VB4B5PSif7plqhI2vEuSfVKCbhisHKEU8OGwEVXuY
542lvshhYXeRB4kBV2dpO9X7KZM4iji1iZMRXp9mQ8y/gNsS0EQDhwDn22+g
upKV/Avgn3jzRaTSDBGkvoiwxQDrGOyXvgswpLDIGqBtsvCc9+RTctqXl+ew
Z4LHmZMIEHm7uJf8E/CWGCCk58gK3CIzwcME2CsQV/PQYTLEJBKVw3cEyeWn
O78BqvBg4KQWKwEC1AuhEgDRUeuYvkGbpiEksUXydGQRDb+FOMRUN1QWhBtO
Qay0gb8JKOWdc8XOI1gKYQep0FD6wHBAbDkNRwlYmM4aAD5+4U9E/+32G8Aq
kTvbv0BHWBlMNlxVBJWOyS5jrkhvSEdDiUGGfuf+QLPpSNlEqpmX8xsgRAzi
1XVIbeTNOX2u3Q8wb/33uF+EnBALwLCE/BteQkhyDQ9lchJLrZuRg4wlqa+d
A+RG+nYxIkWtOSDVCU4VOie5dkk1R3FXcQH2QsmurGkgujKc+6XWaf8Q8ej5
7Y+7lpkPa/4F5+4XttQBXn/beXgVTKOa7VSFvrJXtJkAijd/WE7TNQINYheS
GMvZpcYE/0AH/QFynUu0m3yXxFCHpeb3goQNmEayAyjzPA1wme2YHxPIJJVv
c/EJ8aUNuP0kBRVlE4sIA4YyIN/UcOYcGyQ5iG8BuooBcDVajnwRXXL8XrCS
I0K1U/lHTCEGyrZVxulNDuTkX5Tu2CQpggXL6soBEAgN4lHiMivCO6RX2VC4
G2M6dxoDoN0JeWOrtl/5aYPdAv7PxlIhlZ1/QRKeTTVIa7Ukh6CGgrDrV7ZF
nUbNAUKowBUwX3HaYoDfwZCIP7XITv0GwCxcCHBxunf+Bb4/haM6UQ3Fig8l
ixHSNHD6bdqCjwFpQqLkMCdQ1hgICCIDEwCXM3XGLr0B8A+XPTgoapU6KTkA
ZMkUMY1IVsQAmg3648oIChf6bwB3GRw0tbyuqc2BSUAUZO82p1/eHJpZQtjD
EKWfIqOEhVcHDghJYljhqBxyK8yrLDYyujFAXBJEKBFWYlg5gEW/oBBZLjnK
464C3IGD4QKN2OnXNngmcVpJ2+lc7SPfg8o+qrMG0UeU8xsAi0ssDgpMsk65
a6koIMdp1j/QcvEebMnt1yQO8eNchhfqOARGJAIDJS9lajSQJ9C7/gq6G+qi
w46J5cfezXtA4mPySuImJfM4pAe7+XohcKGAa+UAp9+GV5EKkWQwqwSotddg
5KDcfbe8FG4GjACVYNlJRCNWWF0uHOA8PwkEAsfUoR5joWORRWqr2mofjuZB
GJTEWFQZfVVQZNFd2hED7BeiwuhdYFr5F1rMaBND9WFyzMcFhUOshioEaMvz
L7x4J+lys37EErVJZ0aCsT4UYc8BMuWNCvxOUj5WYjXXCa9HxLHOZNP1QHch
i3PZeZ6D++5G54IIaS2rByreLqR4DVwPXvfNgWLCDGfoyQ/33wB66RJh2iYw
iQFYoUjMsDNJxLUcgMrR550h1zOfysTUHLPQm0kN/AbwNonoD+Ia43epYQML
uLH53cMcJHlCLhHDB8+ptD8DuEpkZ3W4sSFyADo8qIpMT5vhTxc+UW98CbBQ
gZJzxfnDRwXiOSnQfANY82QNgVlA41VyACo7queIMpBK/w1woGsN8txAneIe
ALi1L4dpl6mpj6fawVlrIoIfZqLahYKPmNoNjNyaA92E8yDroDi5+Rdme68u
JDmjZgQSrB+xkMNS8bzEtH8wq+OK0YrKvDmAqwABZEPzZTTKjQSOkd8bYMTO
baCBQqyNEDmFwjntEE+QVeTW1PCkylhmbIIDmxKhlXV38IAB+kXzoxrS/6jf
QUBpA1iEmYW3DBDnop4bHy+5WFmWFM8DkJzOXOSlMGwvxE1YQS1LlOoHFyWh
Nozhjdwdhw9sRCTu4cFItw/rwdkbgk8HWvm8BwEPLJPpqE0awkCozIJW4HGG
y+vmACBkXh33of00A/UfZD0gp4RVJVeJkYfFu5/jOYvlOLO2S2Wo+2PxxlxB
KAUJnMN2cO2u3wDJ3+UCO5fnxgA+nFYthirmWW5nwhrXBGL6E7Zd3tz1WlRl
bZKhiSMDjEFRA/X3VKIl/KLazTje6Zg/5fcXVN2QymhmZf5pOPAS6wOxmoI0
nGrObA5a2ABZvWX+GSDeZsMILRsxADPDk4qv9aNjjMgERjzHgenYqZGKs7ba
BRgk3cBowgWbA42Qu3mpCPDmSqTeDKQ6hDro0jDVpAmBlxHRgrxW50LevNGJ
wE0SzLCYCsB9DYqdDaJBWRVfvaCraeWLOYniBYkV4rATaYGotOZfsCupbTso
uZlunx3k6wol0qzU6uQADN8F4j1TQucx0UF406iEqkti63kps3dRHoLvPpPG
BysbtggyDRQpjXB+UOiwaQKThQw2DeFKwIJ6G45UB8tiieIZQBvF4qZwP5LF
MDpdKBigCiXiGPaVTi3cF2pcifOsRDoRxqenA2UVcD72XO0A0RwtueRMyOXH
wAB5cl2AaxrgvDnF82Dejiu1s7wOLj7CS5QoU5WazS44wtnK7iFB4i8/FNk0
auSIJAGBysVACRSlflgmJIQinABguQwIAwHDAf1rOUBtUvk4GlDw8eacYxiW
pHepzsgDkoekzgPGNxsWNQc6uFoqlAE2pVfkeltmhdA1hXk1L7VcmnCdsgDK
ngMgRLYp1EyqffKpqC7FvIChBOV7c4AdTs1mx6VqJf+C5V6re+AAn1n5uN01
PGDPj+u28i9APhEBKWRnfvErDVTiC5sdvV2qGANsl2Pt9tHAxaf9fCcoYky1
mSHW6jROM483KaQMq/MHC+OJHB2lqGlAuuOKiUKxUn++M/YZ9OguaIa2P09n
sGW7GEkxTZ0Z+wOUenco6HG35c2BP2O60yWB+rG8lF2fbgY+EOaRXqaGvpvj
Cgy6vMg8JkqzF4BT6eYEqanxakmeA67BHvz9RbF61qxOCAQSuFgJZsHI/0GO
G41a/isDjjWzeMiDE1weTw72CWIqMGf+5CGvZGIhxkbBEjr/5LzbmF+/JY6Y
/eQyPfDZYdgz2UHKaTUxnIuq5m16cuC6pI4K1j8++pMPWOIAXZnUXoo85IRo
dNyYKAS8T8i15l1qQjUjMYaU949TByQI1sKTg5GiugBfZIPKDjnkUg58QsUH
kPiTmybKAAIqUuEmtPyrfS0u6gbXtUfIqezSjFZDfWHb++Rw70Hi4Nh0pXD1
k0uNokpctkuBTPye8D0ZW3lyHf6sN//gTuHZxEq2KjwhN0kKMHe56CTBQw6K
Hrg47GQQNT05+s2knLaWtQw+OQhuasXhbYOOqbSQQ0IzncQmkDJ2yGFMAo1P
pR6FmyEH4SgdZ9oGSu+e3DkgohgEteC9f3JQ2RRHEYA3AOLJ4VSt1y21zIEf
14dXDG4kEI507fjJP6gUSc5CQD/kNB1gkkkQEoJ8cgxZuL3J6ZvBJ+QgXam4
AYlaYep/cvgmAARvyAlvzgPoFJPls+yIKqccTxrgLAVn0s4hh1yVtLzLyFe+
F0hw06nCyk3tUchBSOLfkVyANebJZUgQgYYdsJnq9Mll0rBn3E5EnlvOAxAh
qd7tqkQAk59c2oIDl5JDpxzbey+KkLFJsWq2idufnEIaAiDmsoCtIeVk+wHR
EKUC+BbyYQoR197MnAeozV18XuGKJAwTcgowyTcQB2Oenhyl94GDtits4joU
g1caD9nxGbHf9RN2xTZZRMHSCDnoSYwCSNXALTw5Ffq0xbgmU5Gp/OROmrnk
RaeqoQ+W44B2cuMf9in1hiayGW5uvKv07Q05ESXsOarO+gr9NklNA/gg2UvQ
8L0X+XgqOuCEas2NCJ4c/o9rymbQEO09J9gpOwjUJXTT1zx5Ie+Mp0pO+YQe
w/8yM+hHg0G048lBRh+SSnQekzMWcswctDrpFFq8PLmZfzTLppSCKfbJC30H
vLGohrihB0z0CDq7kBlaqc9BH1GAhnEPDjT0M3aXJ6CitEmVfvIBKHF4F9PW
o8f7Qn01ba4MaidWfN9BTeo06zB47RPrczhuTCcsTjzKYENuhI7L5DH94jzF
y/6omw6EUjO+C8X8eHWk2w8m+ttHkDKTiCafB9FVuyE3zGcvR0OBPD85EbSO
3nPPOZryfHIqRLrrguUhEQoP+VcWheKGsiq+46BwnHrw2k0bGXoG1L75diaZ
Cn3PkGtxQoU/fdyR8/3k6KRpKiySKgDVnvyQ+rErRz5ix7p1DTbWlM3clfsR
6nXafeAZQoweeps6h+rGUvRHWjkPEH9+bapc5l9STnERUfoDBY/t509OsTm0
oDgpuEwt5OgYvjD5Z8rnn3xAubSJBqA4KPV8coLxcN9Ot2CKc4o6ykP9jgkG
TCL2yUmGALCFtRMC67euyIcs91HCO8eETTlhuGMmbJ+tTw7TwjKRXPsAmE9O
YMh1coQtMJBD/ulb2po119Z9crKV03VtrkwasV8IKRsKQRKwO1v5yYl64I04
lWZExJNThXOB/uDXUt755EZiEJ4FDwuf2Sc34MkMV/hCaWc2t7A8QNHcyi/O
nfa11pwupTSENeTkX7F+SMFTX5vy7gJn0KZm3n/yLy1FdsQ1KmGPNRP9oc4J
EAK6/OTV4KUzTH9G9Ps9v5kWK174MBXF+MmJtl+wISR64r0gfqBs5GPcp9I2
5BDpw+aiZce0vecHkuSWYlT3m7Ur5E4fmXfRhuJbJ9WBH6qzHHfeMf/4DKYh
3JTvcQiEnGJyF6pNCpWkl/7LZ7fbCoALpV0Sfk+Mddg+ijSSLi3ELFd8kkvF
jRaPxZR6DiNHYAje8sM+MaRF0BbhelDz8YlB3uLkkE8y0UKKqV7GHXWG5N2S
EkLwDwSTcC7erxcnH0FZ3pfD5YkJ9R/UGVXNOgI+MXuHVOv4Oo3po37i/tm0
/JJa0hJisLDFZ7Er3J/4g5WgAR3dehcZZghzr6ligrsnph/XOV+yHePkE/uL
DSja0WewnFhMLInKkvuhH9Z7Ercso01HoxYT2lCLK4kv6qqJyRFUeWKKJiEF
HFDngiX5z/4Mw/yzjotry9dPalYG4u3ueiH180kHbBUVyI3/5F/+k6Qgx3D0
ySvRssQ/bUZVlGOYKngKSzGOBlUrF++EUnRLQYBTutA5uvEpLAVMART8lo9I
8pO6Qx1J2eIwxHfdAXXBsq4sjth8UiriqFS7/ata+aQADJwMR+nQZhMpvSIG
ysycY+29BSQKLLsJpg/WNEs5w3FgjssroR9Cuqsp8ljO1IPMb8pI7JjA0AQc
Ors+KeBoV1SAwKJM0FJzzKzhql/Iyi2l5opQt/FRVE5/0u7sNfkPMsXjm7NL
etrEQIbW9u/LExACizyc1ZCm+5Ym+R8SWWSJoUi736oiFVdeTT4Brbfnq73b
6iCsa0pDjOJuHLMApYi+WDzczddlUKy58X4N8wL9hYt0HDR0M8SwJB82OLmB
Hb/GLRqwdHWXrZ0nZjMBoCHU7jDUJ4Y+Ck6PD+TYv71TDVVixQHCxzR/Yqra
IUYibgvh4CdGtwwDuMmkl7cBKUgrBisveGSlnp+4f+YXhGGwRe0QmwiBrgy3
/6bqmGWqUjsC0Ht+16aVKQuE9COUHOs88XR5NCYwXedWe2LKAthdBjuS0PvE
1KoBb4edxBwIFhOfJdqqe3eqKt+1QfnRNZWYA1ib+sTbLXehpIHTeX9fx+0b
YMHj8CRu/L1ls2dKRYYjsS2eZEGthK4xCTGWr8W2t8ABEwRgr1kMKR4JS+pW
IKu833N3M6u2r2UZiazvIhB7AZaeJoJ3RshiWjAQJnNDLSI6T2x8Hph4ghah
B90vmjjOB0XHlLQYyAcILUh3qFf53tKdwBcMxZjVePSfmIookBVGGBPO+8S4
CeYkJDiOJfOJvQkMoNjkQ98DklaAWWkZZkqx8hPT40grAgS+u0t94v752h+z
0a3vE0PtN8HucIxAiH+eWE913JINADi0WBZPzIvmehtKBU+IafLpHmfyyCjj
eeLzIZlBARGtfs9tdlfgStW9AN7pymf9GEBBPfVQBfgzktb29SWni7fFdzp1
icaEAm1/t4RhsPtjLuMl52eITGgkKNgBE99ce2MxSW+KdWjZCDXifOLBpiIF
SP8Hoh6f2IgaDHfmDypvi2GHogGAlZu+0DeDbKLpDQjodIRV4L4l0ylOYzlW
f2IANSYhpmKpP2vG6R/2/TJpez73MaPVdLdpUkrfqjI3RYechrIV9NITm6nx
M614+fdr0lowioP9c7PCTwzWyjQ7w92c30cjDYB5Vsy1QYr0E2OEDhJiBMb4
GJ8Yo2q79I5G3PstZFrtGpUB2cECBPCJzdDF08NWQe/KJ6b+jyifviQ1DeuJ
79eWpbggtD7bZx03R4QUkzAfWKVPzNqEKAlgNH71J6ZDZSHWAxMNGcsnhqGF
8kqYMAlhPbEpeUCbUWyuVW7xNsTgtbUEm9GfmJYRhLa7l+K7Ntl+QH9fe1J2
yhNTowvUEuJBEgVPjFcISxDpNFNGWdwoGoS5kTrzHi9PKaqUILBolybPdxF0
1QcsNeyjpLg95nsi8DOuTav4QuiaCL6ZySwGqwIej76JZMbWE7vRQenuOwpy
/BOTLsDtJGNK9Ou9pRa1RNCeka5tbw1SFIVDDpyI5d1XiCFc4hCYTp28tzSj
hlt2kJS574g+ztWZGx6AU3xiM/ec4XQN5XNPI7u335xfDSsBgScmQgtlEsEQ
19Y/8TVzDhTExry/Xw+CrpApYqP28c55CBUWyUmKsQ3G+sSQ0HxkpYSY6jNb
fCJ2s2TrPwDAPvEGHgEkdJFFwNC2mNTdIWhIQQq20hNDjbAeUbkm/P36OoAJ
vAVjAXK/T0w5mxYqThwR2XcRuNcLWp3zFIijxRfy8eYWSSAJxgwxdTtluInG
JM3yxADiKc8jmsYB+cR0PvjofwHTjW+qaOJA8BGmHWLgz6uzkl/fooca6y02
EFgwmdMPEsf82WwYiN1HHI4dpt8nhj8D7Inp6MHFPDHTXM0GChhy3icmpuVf
QuK/Q+xoC1mo8x1W79oLQIvDW91te961YQqwSiJeQnDrE4PsocSFWBJ5ijdV
6GGQWeQkp3FKnxg7ERMWrmhofD/xJVxUqB8FLzJf8M3mt5uTu5klqYqQgxeF
zAEWD07pJ29W3vCZwzy5XtAGqONxVoNFDdojfm82MPfzJst2XlBa54sDKmAn
J4WgNeTTAGRT8+MiveBGNYj6fDQInDgz5E5dNFNlQGA64nnAYU1Ck6RwaEcZ
ch8EmP+b1MKN+14fHxQQX0c53u/NEEL158fpUV6wtBIMgQ8TmC+G4srfw31A
CJ6gK6S9T05kGa+oWSP/rgNvzZym4za/7XsezuVbjWL0ctgp35B3d7MBdgj2
Q+48E0zqOJblBaWrKzlMA0FuF661kHf3i4F8GtbbfVMOr0T9Kvb5+iEHSOI8
H43PAVU+uR0dKEvgUIEe75Nvt2bHI4EMvK74vU9y/NjhAtEZ94XMlpo/cuLE
lUPuqABBG+IrNFr+5M1FHAQl4SS0RRfy4+g1KSgyqe+7kOaGyro49u1u9J/c
tKmsP7z5Fsk+SCnp2Iu1A/R8zZRPT4Hj48XFIk9O5Zx7rA+crLzOmaaGAy/I
BXs8J5yPWNHMtNXdk1MkRQsWjKKVwUnWB8XXoDed6n/BZDQuVV9EOnBdInnh
SKMbB5A+4lbvOoSBwIZR4u3Jjuug0s2pRR6Nzxpyuz604yOYlvvaNKL3I8jh
aWr8nuj+XG7p0dxiJ+SgirCozcZG+d0np/KumWMZQG/N6wNn8tnFia/FFM+/
CVXqHIA+Co7hJx8gCWjTC8Uv/dTfdT4mn0KNJpY/yNcnl826iVwAZQHhGnIq
h5fLDRptZ953JF5DFQ01bwQhStyX6OY1+Zzr6WIfUY9hmA5sQ5iM8XtIdinw
IDDqUFTIyQlSqYGGagFmIM4AUQRmsTlY4zkhQibHTZiIgNF584mLSDCM1DL0
Gi9ZQxW1edE6aA9qat57fXy8dBel01ePJH79ss1WqKD61wsak7DDc6WVCtt4
vCRLNYwVBBNFS0a6hNz9IK/Lg9x47MnXx+20bMFjdoa8HrMy0wkIcFA8P8xV
mGD4wm7N++QkPBsNQBZVFzv23SLERGKsuaHBDv1PjAiADmgJh416ys3ORHfY
627VIadCgOYn4AV7eeAE5MQfP6bh4VKETw49Ey9nA92kmZ98uEETbVQuPKk1
5YdkAeSK7gQR69P0FfgVC65HKkFCDkUCMWTgpHXldcAA0pWPw7aNPEeWgShE
80lXgGx+8lscQSV6AsJlrpA3d8zF8HPnwTcPJN8pGSQhRCQw9AMBHaIkpHBI
S7wk0af+Ka6H89zo3ZBD0EMZILlbt63/5HQHNDUAzaZh3nhyWhpzMJDXocdE
XAddgb3CQYUrHNfZrrkkJXBhAz7xe1PTaZkD6IETYoUcLPXXvpTT4iV33GQN
pOVwohEs6pP7yDTQp9DhK96XIEV1i3mARDOS18iJtFUz7QFgfN+R0naAdcTB
iX+9pB68l3IpQEvANdUi2W3OOgKwlP/SGzb216ElOohR6FChZI7r09nDRC90
cQVr8smBF5JQMGKNhMibB/q5YnBRQwcByEseVbc6c5eG00zSFL+HI8LcQbiQ
6Kcn52xd7q+KdTHife0R8WmgYIKjOX7vuo9mslpO4pdUgtCqfXFdzTj8BCPk
001S4Bo9Tmo9OXzKwGz4oNBxxnXwYehCD5W2w/CWf4VPFFwMg/YCpMShCZEk
PV04hef7vm5RSUVbcRMIRwOf3CEBAmpuXtbjOutjEzHJM5CAuC8VTSTZ3e+d
rG7IyXIRAzZAvr5zATnAzwNfEZmWZ2/DuAQjRjfdBUpop5ytZYDo9l89+dd+
p5tkmS5P73lcgo01T/JfX/jpAYL/0DZWYxqJALznrK53pAASThz3+frklP0P
V0yyNsJ+cI0cPbkoxKBB+jvfOVTIBFUT+a9T8vfg5DBD3O2CzPGTu9/6NvFt
h/xzp9zt61mD1Tv5ySnQogiaygeooN+8uUeSjn5TkwAOf/NTHc4Fs2iQY3v6
wR01+lclCgdrPj+VlRVkfke9ztgX9v4Bs3rlciS994K8Hdhos+ENdjTkpJov
AWv3CmxxnW6CETM1dPKVM+QoT8gzvm6u9yeHpADIgnXife/V7C4zZcPMeiN+
D2rpErbCxUuQGIjxCeCJqkbiVyWek77zDvIyfTOS8thIp5px+UIwX3vK4QID
/43xCcL4ySGoZ3459Wks1EO+oQKmcKy4W2Y8JzwykKTsYQKnd77jnINQ9qlG
z+iYBwo/OYgwN+Ccje9Fso2YDwhGEzjtkBMzBF+CKQTne8ipQKoYtiyZ8c5f
98mSxkKpw210VlwH04P8gjUdEaaQH+JDwAK7qcTj+ad7ASxnGIkEx3MCajYb
xHHZzrOrqc7lbKQii4Kqc/L3ABjrV9ALoDmek4AtcWmg2M5ah7wZxk6rQnjD
Y/8yDSbJd4sQ8rFPjh2JMcxJYssg5PAHDIL69rFDn5hqjzoXtiUNUuK+HGfd
rvuhTGvEcxIyIPA0PkrR5wfBcEmXCzdE+tqmPzlIuG0K0+rmGm+eNeXVHdGb
s3sz1uGw2lmOY1A4/UBulEzDxscxCCS/xTpHs8mDgxrbFLLPbqHbkaknqF0e
xjQ/OZPPoQY+Vc5JrBNQ1VwH3l+fSPl7dAO5M+KnPfzZ5moI8zgCyv7pAWL5
dgMJ0RvQ/eRQyJhpcXM232cnW8cOR8SaOcji/OLwhWwdjDxMA/09Dz1F3aaD
DAXYl/f8lFpz4PNVbEXskA8qnKb7SdLVNX5P1213t+NhR9jJjRPCUDlMbkLd
8XvnmtYxHLtmHAC2LHQ5pQTkzNrzgzAkae8kbeva1RXnEZGIa1ga/Eolz1m4
p79iI0pcWQafHOZ9G6uAzkBEveek8x5Fq3CSk62KdQga3n6fW9IkiIvaBFqx
LqK1B2Okh5x2IZvU5rGBGNdH/cAU5pZaHHgh5xykosZcWmlvUGlP/RddMyE5
D32+TCZAt4E1fJLFdeAg+RqoEvZsMf9E3Z2cP67gnzueH7Q3JWpUOlMF8ebf
uZ9jsZsrtpg3amSLq5IJVvSwo+jLMilaG44rpx4AUc+Db2vLGuBkCrpZEiwg
cK+pz80Q3aeDGPSMC/vHFjhmKmXigPfy93RBA0S9HPV+cY/mppNU4XYCwifs
fwCGWApkXtwu6oFOTfJgVBqNKsinxfMvU+LR1ItERIBg4XjpbCBiE9pf7fkp
oJuIwMENAVa9hF4yUSCAE+rucajeunIxNaEBMATstvf89MYEbHzd9sW93Z6c
vqgAJCdEFiP0g+uJYHlzg2VCOk/evvY7RPYIgYZ+IyXupuBsO3ejenK3bwRh
a7jfiO+CmWkc83IrvLDPzSqJwdQ/hrsb+xeuWyB3+2tUtldcZ7u1Hb1D3KSt
x/s6gg0FMQkccDFPTraTYAgnkpk8P/l1bRokY8sN9uL8Is7f3Od0uRwrfw8R
LdEi0BpwTvSQS20A76/u5ERB5JNDkipzxrB0DqEnd+EtjiMa8wTozgwJZEsX
GW3i93F9itLoTWpmRPg7npznq+Zop9j+3LgvTLAwdKNEqTk7ISdvRGbL/ejK
s6NA3OF5gJF1TckKOcFJVL9jlDNArd1MnGYoJYVOCuPJu+vEQKpRWrOe/0sQ
mbTNMks9AJ0bchymYTeGaG2N63dwBLjR6NDZnl7q5ms7wwYiJ/8778wWRxAO
vndqgZ+/5rKO41g2YOYZca1u041vs93J4664DnhxEF+EsSnbiOtcUnTmjTcv
yo7rkB8B2c2adaFNyK9ZRjBAt7tyfXJTJh+j/w8ezouDoSRpfMkB2/74caYk
qXZUwGVASB5y+HmWO9IxeSV/b9AshDYkH3bMG8oNVpxKLycKat/7An112xJa
0u2Mh3fcVc4Q2owAPuopvzbdPkRrP/HdQXHxVvB28d2eXdFhZ+Bfp4luyUc9
OdTYwAdpXr+cvf7k1KnjATnxC5/FJzflPnHGjhsjbTZD3ok6YbvDdZHXh1fs
uITYlTgj1iEGZftAMqji+eK6IHiALBKmwgit8b5tuY8tXidZ5tDzcEweM9+Y
ZhIL98md4ENbUZjmTiifHDg6ptehfGTEOd6NiCDD59gQyizkpLo+9Amw+p3y
64j7B1nDJXpyF3GZ0Rdmzfv0DzlVE1Ufgo5YiDXkF0vDxSkgip6eRw4tBWhc
N9KO/YiNTVaEptmYkLFfWPdG8pO7d5Qg5F9Ki8ekQ0aL57kcyYAOSEuuyBsC
pMfZdGSMwHs8P9e+pA55JB2o9ydn5UMkjrpt8V1gqLeF7NJsOsI9ubt8zK9T
C1UMcR1OTVg/j9OQ+/nRIK7c3I+o9ZceCPn+CkEaUSZZKC3ktqyI9ZMoPq+I
gPiXuaypMzbStYacuORXeNcc/37y7WJisyeiVm88v8Nl1W1K3M3vfXcIlBrl
riBa8cpTvqh+Pv3rLR/n1NeZnZ9+tdkz5BC88l5G7sIX/tYt9o1xvexYML0j
5M86b6ZMKC2uQ950OMdGuXTYe9Tt0f2EkMIHh6khN80o0Vcy2JHvA6VUSdGj
267jSSmHEM35xwvQqIQcwA62gFNMO9bDnOb5cxtbiEzjO7qVGPmSYhK1E/vi
y8q6IRW9lCKPiWlYTDVgqCetC558Uy5LZLGZjSzW2yTYweOTanKpQshJyRDd
g9eA4zjkNJeHI8NVK2fE84NggrecfD0QkLwOLbs29sYEZ5C/p2y9OARMq9n7
4hIduwTV7Cw7uuC9F35EN9reXYqiuAygld327RoYVNCTE5C2KcUXwKcLOUqm
UAIPtrfUuC9hdWNH3Uqi5n3dVpCubtXxyJh/g78J9BhYWk8+//maON6vG1db
IScyTMwaw86FDCEfX2snGsKY6STk1zZvwTVyS/BP7qZ91a9mlvw4L8zD+PWX
A/AQ8RCcbbK8tLLHUpk9ruNqAEez66fQn3y6FSf8BOS66rNvORiLmVPxDLH0
a8qb03yEV0zx9eRUS6zlzpKHlN0M+TUukkC0tEnEP7vPV8xAp3IA0oYcojcf
GG5bmu/LXHZXPtlnDn1OtQPcgTR8crPIuA6L0z4rVERS9yfkEzrs6bwuaPH8
PacOviJ+8wx/odtEpqrwAmHfkb+gpgpqV1Dax12fQ16tlyG2od5gP7saZYIb
CgZ8uPz33dchb2p8KAeUVR16jxazUHxcHF7g1ym3NVeI+BHEf/ENervDC87/
NuurEXIwXGTWiGfQL+LJAZddU90150Te/BxWmfOvBEzYSSGn43U3nQ5RzrAz
L6AfdBBTRtLihJzJIYBOqRdd5EJ+yQqaXcXaL65TCRFTDezWaLmP3CHt6yP+
NVR/88ARAU/ucC9M+ByeHEI6U9NQ6kYz2Sd3dGa7drc6QRhyCFacFbvXXAtP
vpzfpV6Sc7i8fOLXHRU0D+xiVD3FdaA/Ad2qDcNLrJR3F9+ZZh59m3JsKFj4
cGBqfpdr/mYKY0hAEDIKebN5TrEbaZk4L6iaImdJedFfv+Ze17vi2sCtFf7R
MGqb3kVYlZtCwZDD8+WKA6eSavy+O1VhB955lhtyCmE655EbJD19ZYgjqKJr
eLRuH9enktndP6pdn6c3APC4Y6lbo7kq4clBLZCtJlZHV77x5OSL+zALI1th
xe/N9zNgI77Qn5R4/kuwcn4F3qVEfnY4rU27TZpz0ir3PSf+IccWITh/oJDj
JgJVM5rrRPEv2V9COuBQ8Ebui19RachB2Gx1mVTtyXka2HMJhTEPKScZAbUw
SckV+AE68cJ73Ww7uuop5SAWAZC5I+Hzm4ZpopggNja5+RJyd0+kMx+Yn4hP
+tGbK0RI8paI1w2TmBKfIixhpuWQT2CZ28Q3LYvvvr5nABcGaPy13noebmI2
m0l2cOtL/N4kueujBnL5xpPDwegmYZ0ZiX03aMUCVgJSe4iMnx7AunEfM/el
d8vhJ4fbg8MKdnzywnFfkpLFvV8olYy8mzta6aGIPVEiG34fwSAoUunAfVxi
/757J1bjE5LeBkDZQw7CCBOHIAk0RyGH3cDm/zHE6c0zCmO6H3lzuVZ8LwMA
76u9BvwZ8uYoNXsMnzZwDiaK3F+TVEzo885ZykXdpwSOB4penl6Cn9u1j2Sg
wHS+885NoSBsbfTGA9rw5oEmd3RmAI0Jx2WJ67NA8FGpNYfFOq7DjiOeM12c
FkWRjssglALCmQ6/2P0HwYYUMwHneYqcYgSAEeMjuHlyCpAKaCIKfNnxIWeb
NB6ESbsrnh/UvrtiU9aOA/XkYNvppQZGtdAC5pMP3DeKtHFRJy1snhzDypFU
wq9Yu09OtIKIB+BfF7anfNrhv+6fE/kvb/VjqE39agV6ymEugpyJ+uXAi3KS
utG9s0hgAOJ5WGdWTsdh9Pi+uIykS744A6DIJ/+u7EAwnJkvTk6ymxMAcwGb
fPaWckLxzXzEl/B3yGlxVarLLKmded/d1PeA3XBjSI6OlButRThHNlkN/YzZ
6YI7TFK3Gg05qwoiBzytGfYJ7ZnhV6/wh4C7i/WDfwfxFI4cHZmfXefWzNAc
4UugbEI/zC8N6L5q4OdPXIeacVxXsCAw3795o4QNALMh13RBDTln7Lnu3jfN
ffvkwNcB+RBXcZFRyKvrow+JxYZ3knKaMRCgpXNO2C3jK63vkG+BbYo8vmns
KXkHqWq/482P3EQD3gFYYPWGHjM9eccxgPAQTN6Tg8DkFPYSIpP/5BCKHIj2
qHogbBhywmWEVahVaXkus5poGknPFXBhoR8WIGd8StMGgI1/csobyLPUr81o
rH/yH8XqyjQnuX7MhDW7DxhmI+wEsFqYiMX9lm7kN8nW2o2jvNd0OS3kVMje
bQ5k/N13fbPRwewLrITcXA058UCQqNN1t/OPnBoSsFbbhEchpx/WMA0ulGZx
LiBnoduEXrBDPnlzfNx4J5qgxPfdzVR27qUOWXusE6plAH8Cfu/u+RVy/AhM
vtP++ONmTga4DS3ex0/85C50rWQfKg1L8n1x2wktQrFJ/9MScugCXFRBcHXm
PIMNIH5OOtd9556cWinAM6d+5Dzx+2Pe/+FcGYDOmfJjing+CTWxK+QLQJ6Z
WWW9pV1xvhB/a14YPfL7QKJnc9t6SC2w4Z+8mkp/27tj17/v7vgjvROhh5w3
z6PjyBwQgQ6ONXCJeC0QqgLCNXVinLPwZFDiN2Flcqgk5LBLYgUCxbkR/8FF
/Fpo0QLFlLRPTvqFg+WzHFPvkUIBhYFbw7K98Xu2mmnhAcGutJcoLh0gikmA
OuEachfg8X2+wFnMjxustq9ZJ6syfm8d9hmxoKZi/x7q3YCMYMeCC37rjaaL
kO2M9lE5xDq87k7bXRTmLjpvPVwqogkhkREqNIMIOaqNBl9wQNTAWw6ASBz8
cDOYvmH/5ETSwHqYF3SEHFJjgr5QkmMB/OQse/wzd6N884Yuoiqbj85mq/H8
bl6PyQTfAOjjJ6cbM+lr/IwLViDkGKzwVrAUd+A5XS2FTQeQhTP6xZ+BLdDO
yr0h7808keEMH/08DGzgzkJOlBkW5ENsIe0capaoqwTNDjgmv8tx06DlzMzt
QRpGqwFC08vNS0n41ScHQdT4Io673rcvyIj7y1CyBsPhs8eIapi9nRJWIssn
rkOeGnQWxBPmuws52ExoTug+w2n+5NDr0h/X/fi0Hb95douSChnCcppqPD1A
e4TiHngwudM3rIV8WMNgnHLevXi+Swcp5zlmhEOJhnyYhRR0C4S9Le7baTAB
Lf3yP82Qk/Q1CurQlyT8PrifOTkJEExC6Pmc4wuzUwltGPubT4OfKbdnNlvG
9yZczRXmqmue3vP8gknDcXsA0xUVfcXzgMCXKoO3x+H5nnL2J5hd90R+dvg0
Z7Px983d0tpP/nVaRU2MEaQogM9dreZeTD8/xSWAx1BsYr478sjkqAmPkzMk
wn3evqZyxkQI3RzOJfLdkMjQpGZASuvW5yvkZoMk8o3LEHkuRzw/CLf/J3Ck
6H6AjXhmtAFbsX6gK3GXASq0zgz8xjQWvjrgDTNqnEdwF2ySibRTMhYirs+b
gRKA+btShvnkRrfRyowFQDI45KwzKg5ofvxbhzQoA9dNbKz+zkFQzwfCwq8m
qc/Yj25HUtxGHqOsvzgGIdEDMx63gVY9nqfD0gFtaTHYLEilkNMdjSVlPO8O
uanR5nL7EIrVZsipbenWPsTQnj6cUImS0iA3QF4pvi8gCtqgmQmS5fKev+uV
ME6KQ1gt8vJE3ph+VBhVAXHOIgdKgVtGLW6cj9IK1eX3pKMHaz2ef+M6oZ1c
vD1efBhGuUXfg+UyoRJ+B50qYV1B1XZINJ/enrQmgXb5IwmgpcGT09EFl5aY
ENCg976w7LBSQBsUM2eEHP8RFByB4hJ1CoZIcEbSEAYeuIennQ4dsVUIfzdq
uJ58GGQIYnMZjxHPyU51/TV5yRHkb9N1Nx2mbTuzYSfQQACtTJE9yjbw8/DS
VRfaEW2xAR1ycKhnuW6194inTepbAYeQGqBTYegTMqGAp2A8RbP0/D08QkDl
ndwOu4ua4UMglQpCTO6YN/P5OeJt6pPIk07Dv72pqVMjABFy12ZT0Ub67jy/
bxpqDzu3y16p2U85MY9rlDn8RnEd6gqgSDBYCxBxyPlIrKni9uw3f3/oGm3v
olUzqX9ysjtYlDTmJpUa9zXSeLpDD0WWsU+JTAISpO87jSdf3ABMQbeJdfD1
d9j/yEkPAe0yB2rsr2ncCMZsdYvd+I4Yz5SUwI8KpDe+IxTQZALpRD5W4uon
/hWxXaoSQMq/eMI008HcZkPDTCspJ41g2sZiT+/dl6qXr6U2qKwZeFESOnSP
hmaMirScB/0TjO7L0BnYBt7+WhS70hqSNUqiP67j/oHoOJlUqwb+c5r5bZtq
k8RlD71h0+Nrc01ryPXwMFSZAuE1eQylTw9fR29dH1NAgLZtsJCjeFAO1cCY
Fy+l9NA+HglTaqvi3NxucTmZHGAQ7aScFAVsebT5blHnC7wEcqeBBTvcO/XJ
Qd7S1JAeDibkf3Ie1CnvaZLYsFu2uy7TMIW2JD3ww/Rp4dynFJZTsob+Ie8G
3cJ0G0BiH09+bX1Qdr/N4/x+D+hzuiqBKniw9E8O/b2/Sb9ORL75pMqxOrkH
lkdjPeTQMEBV4IrWiCdMoJl0Y4AFH+760Of4U+B/4F0wa3RLOS4orUUX6dyY
H1wXOI04SU3E/t7reK0C5AKuSHT0ya9xsPvl+W/oyY/DEGefqqQTcSe4SYgi
4TQBPRrPz6WLCX8C/tlo1bg+cCwKMsw5RxL7XR9cBVxLBAtpUxDf/bavewVt
yjQhLfThdVFKt3vM4o51eN3ADsOBzk8r6mphM7vtw1wY8R/nBR27qKXZRn5A
sBzyaZQu1vVep+bz26+AT416Rl79yckN6WMSSAIMF+eXq/cpo+tWKFEHQfU5
zAI4uqCNz4vDE3iGl2trEHvwj9yN5U2iRJDr7VMAqFAG4Q66hPy917IOw2sj
RklSc4bczdOIS7CNyzuPKIYlokCIG1PutJDTtGCYigqLJ/D2K3iAzFuDKZq/
ty6BhoBGDHPE89NpGc0DWQV8OHEdw3sumUmKIyOfu8jEERTlHNk0zmlPTrst
0DUYaVSYxDxwPg3DDciAzRP3xeE2x7rp2urzQxdFKdS4un0Rhe435aRI3AQV
0scdcqiQ3fJ40wBzxzxUGyyXk8cFrfFezAutj68LfKief/L5edsgM0Hbv/1I
9hLSPTyFgXu2W8qBo3Y3ipvJA7Cq8bfkx+EBokA+5ax+8NSVAHjMD42FDng8
8EQOHD/5gT1iGclmWtyQ32XMCw3bOKne+ULzG7g8tZ9pNAAN0ZPzY2e5aLG8
o87dnuowqQKF3m6m88npHAfSShYcudqnZyCOcT0JySUspBdPW+4mYbo9QBY9
6v6gVy5YlzRrxRQcKac7PF7P/LrcxH2pK5uGHRwAMM/Oh4zKiClcJPZBrAfS
SgSX3FgeLP0KOQQH7hZMi7H2cETLAE1al3Z/oiD9JkTd4KpvJiagO0LI8Rf8
GSDOrnkdIPAApXE+vk5nn3x8TaqocrkU87x1ReBEG54WlzbrarwXDcggmcN3
mnluUiFCNxQKWKkDDbJQGLVgxKYmH78g8HjERyhHxumW/qvh74A4YUnQ1ANt
GfXvy9W3dKBAT7B23zwAMa/uflbqR0r45FjuBHYLQLcScUu0RuEoMi3a7oFz
szbh4be9Ar1kD7lbbriUD0qAFtcBD71cPARh+izx/DisXJ96Mnz8eE5dEmvV
KCtzvD75/QqQ2te9cYR+ILFP3Me4SoP1Qk72yJ1rpU1q6lXwLpjZnF+wnoV8
fjk9Pgm1bCPWOb0ICLlP82mNwAdySXiYJxEYkMJjpJzi1fr1+0m+AgNGbBJ0
8zT1WCfswjEdbcG5XHkdmC6IBEAoC59pXAdbGmoqcB+YqPE8HO4L4hnQWSYk
+uRARXh+ndiUO8f35aB16SuVGNgJb/4XbfwaNWHw1cP8nXKgR1SaQ5sSdjt0
fxTuEP/7zvkScpBo7hTAKTyfvcGhNr1m+4dGivW5TIZPix1wUiP87rWIVMAl
RuSC133PvxwexHsxM0vu0wWXWHN5Cn+z8jobK80t5R2GX3EdzmP3cCeoOQLv
B4O9W8MSXgIV9vwph+5Yu1guRFJiHigm3OcjcKO6MPSVy7iIOTb3FQm+ApcT
0chimVlnBQ+GQeSmnlvG4LZ4/u1yLahAaDqxIw6wTPsAHH5/sMK873DvTHcH
MoyihJwEVyfdDrRt533hAAG7N4HiU9ry5NPdtKiYAez0mwc8MCcS3Piu17iv
ZrqaC49SuzHyOa+rt+kZRqY04hsAMehaSZeaYwrLGXKqms2me1x8+65/vsq1
YzAtHDHxe3pgYWMtp6Nr6FuXIQNzxeNB5cZ1QLYavU8HYneC/OQ60s/F0EAT
gXoIORAuhyt0/tBQ4ckxnwm2XDc5nLE+TT/cwZ8xVMOPtpzKKnLVZhN964GK
67ZNOwrmM/UzVC7b/45PlnkTqNvu+BKTXw/xlJPjADvjCEvajaTZqXWgmBuI
7IsLfSXXXJa438h4Cz3sONvcsZom3i3k0Jw4xwkkc0dzAfitYEoBReF3Cf1J
nGVALUUS02yhllu5kcKh36Ehc/PJTYYK74arMsaLo24XxKATCfFDuLdCDtoM
/OhX3/ziEvgW1TxZtO/pM767dTPH8SYSBAdLXJ/OWzCOsMhP1l9suoUOgESO
4RJ+Dfl1CTax8GaunJS7szRRHny5p1dxyIi8TkLnNJB+9iTuFU5jJbNKIKml
HJcAcKUZqMsKOfDDYupUYpoRbwSyBslGMeQX5M4OOSnpAsE3Xyf8OGLOnFIk
7qCPajV+T3WOuerRNyXyNRB6bYOZhzXsaHFfXqoCLjYNdDnxe5upHw+ug0Bx
3+s+fLQ0pG9s8IOBUTFXW31VnS/Oj69H5SNRBdM3x/XpeEmXccJsX0vKJ8ch
AFrvMqEZ+KjNIeU/oHELpFEj5LzQASZlkM7Lexp4tXio5gqbqDtzxcjXFofX
O+fpSeDPE+3vklgnM0KOw7/NTwvp+Y77GrtKyRnKEtjDk9P1h+wziWAU9E05
vJPQCXUM+BJyaszhiyEdgpfz5Ki7ai7ZbcTEy1M4QoSrRo6WQGINOeEI81yw
mkErPDne0fRJak7VF7e0qT0MnmUNjWguA6MNMZUJyzhB09jvBBjICHRoRcnE
x3UcEHT1ViGa8/zNbR5FjJ9NPIoMR8gpqKDKzFRGuT5BZsAuShl0t0EScrIg
qC08sB04OlfVHN7Bie8WdfS2qDCzj4k6b+B5CG1TGU3kH5bNdvI6YOuaizcd
Y333BccFb4hrAs1y9OQE2XHsmvu1jZg3gIP2+wgE0eo1fw8nA1QAbLobdbhk
HarJDEFVkkuK3wNvgd3TPHs97A0y45QwcVTABRa4XDOoeHleEPEz6qGozHIp
Jlx68IDFehhkIhysJpA3o2kClD3k7iDfwBOK8xSyXVqqGVJglr93HRK0QJTA
jCyzuj+5aUOgNXKLtsj7E26F44HwZDMzxfvuUPvRNaSb8Wj8fr+qCTSpVQap
+ewBWqKyfwm8GVR7fnITpMLrjxZ4cctNgI9aUtv/EN/Ec8KLB/K8FfdYyvtC
/oZ27s0YrecXy2a7XIQULRnXqE8kME6BH14SpMoR73Ul0d4+Su0Ax/WhxSci
gkVKJcnDfX2Uf9plQFIPgey376xeCnX+nC0t8NXY99exYGOUR8nnIYzKxx2u
0CpxrpEtlL2C7+Rj9cZzgg7YBvTApbvjPPWOM2HDcb1+6KsNMRApfjTrGoFP
dj9jqurxS0DjPDsTx/1u08+3r+5/hLzZ7qdo/ZjtLORE5UBgUeVFFdKT40iD
rnN8ted+58Nw7EB1RFA1n4cIDB6o90qNuMq23wsca5mRJ5rW2SwkyesiGlBp
8b6AY4bPBkeJcx4oSDaZLeD/ntc/X9vJ5rIiiqB2yFGCBBto+EbO5cnNQEXu
DW28I59l254ei9R6NryAlLstuJOzQHBDTxLyJMoFEPqAdszr64VQ5TOIGp4c
V8SstpAWlqj/2p4bGMYWpGIl4h6wbU0X6bAeDZUMeXcPomIkciv5PK7HG8AU
QEKHH7E5HgGNL1KhO3mNiEeTpCM6AZN0xH/MxTg+BssFTDL2EW1jATWzXygR
jvOXxr6gorobkCSOGhJSzCj6ZRK5D54Q0hR4ygS9J2Sw8TyXYDrOLs0gsZzi
OgBmu5upTRev15CP/rmurJ59f79nBTXbpHDdhB14HWeDuIgKjZ7PD3LRbQpJ
GJ/Eu25TPnC+Ai2j6jyvAynTNh7PXXnj+WFygGmA7s/0yYzr43bRkYlOmfau
Qn5NJgmj58BjefNsrlOC0Fjc2IPfe52vb/02eSkK8537LgB1J8pNdUaP/UVh
BfgqME+g4iOf9TVX4ezEJgCdVZ68FRu821CKxPmAQSD3bO40ilV6XAfTwWxl
eCQjeOcOWZBCXBdyFINdnpxD30hVgi2UQ4ccVtxBtM4EWT1/L0UyviAo8nwe
+GXc+oWza4a/dnyGY4mY9qIE3s8k7pPAMfUL5oJ7cvOPVdcouMHKTHkzExUg
PhpzvuvU8tnhFEGS7Hp2DuoE4CGNBGEg2nFfyADPl3imRGP1kLevHy35X+Cq
7zyCBYxgwTFii8zfCDkWhEvm7Pm8c8fqygjZYtR11M+SscKyAhC2DYiK5wT5
1d06G3BKbfE8003EIDgbkI2/8wuuNUfJ3UR7Z30r3D5uP6LTt3EoPjsZw3LZ
iPsM0GhSBnaDyDSK2XzP8fwU85DwZ1kDo3l+3FfyCqxpuDPvfHlkjmjgAQ6F
AOSKde4AG6Uu0ADDlX9C/rXrbGbealHHRDkPOHxObWv1E8+PIzuNjKLcpT0/
gqI8U2oumEIobnjPT12JiYNhy4FJdIUcpn3wSSSRT9TvuHKWWIC5aMn9x+/p
woM5anL9G/hA2sfbAsKsZIreeXFcQIjd5tgJDH0hh9tkFeDq58/+orftML4X
q3cFvyWYDgIZFFmYAfD5CwR0zR2A91VKnoPHR6JJTwlK1eAXOrAzXughdarR
Pijm07WujowZaR12lynQv0osuvG03KdE/IHQc0C2kvxsrpwHo0+0H5rJ0ANj
uwrE3Wdwj1Y8zwb9RiSJqpIe+v+4v2Y3opmIT/B4gJ657mCDKUgwNZ6H2MNw
Ecr9wwNw3NnTwJ9hlyH0ISGhbifMajfyxVB1brff4enh5y4/+SU7SZmvc38h
v4DY3QEN5PrzB+WPclpuF5uQuA+9RAKeIrDphh8n/EqTY3MLHc5AGqNOAT2F
oWRC1d6Sj8iNUKv5Z2D8OcH/4IYENOx0M889oq6EgAQkHUSecMbLs58NnARP
Oz8ipjxfFvRNw9lkUEo79jVLs9EUcLl6LXA11hf21aisgsbyvddyi1H8ebRl
2ufuqgP6kOADGyPW1Uc7aaYBUCI5nwTEF2V/oPB/9ezeXfaHYZ+BAOfNw3Kj
10Y9O1DDmvMAlaHJc7pZAHr+ntTbh/Fhedb4/XUzSvo78+LhVxIf6ccsYNBa
Jx+La2S/rmfVDWlCb7uLN56yWxmUqOeFIKW4oo2OeCub57I/dYq7rtb0dc9e
db9D57e2yZqCJ+2YIBNeLGNVMSKf3LEOE+JTpRjxSVypZfApkVbX9zw5ENcO
/bYhjlG3cuxHkJUhpE4zsDdvHOMDqC4wmpr5X+TnumjGiafUb2g9iuzBz9uO
jesQTzuGmLJVS5wv2yg/WG3hOb6BbzwYZJzN1fzZWZ+FOUxyDe1DBiv8ffoC
uWtYcxvGEfyiNAlA59JIB9R98EAeg7yx78l4WKmEnEpAAmbF6MxYV1QUfn1R
j/sq7ZSD85OaccPCEjiBrxUrcB0q4WGZit87HQOto/vtRL0JJxOJuu2vDCYm
npPiKBm95oJcNfLaB1N3+0AAxliDL8u9O7w8qTskshLzwwlmRLrhfjfOZXiH
qczFIgA/HnaRKZIpjYHZmYd+74U1tLdbPvWvg9iTAwSEopaIDEG3uD5xRRqB
kYpAhZSQ+xikcTUMpnnOsmIG0cIGNKhHfQSHwqNQoK0yAb0np7kLjAL+mDfq
szgr4Zkho0sLtah3MFlENSAV+wHH+MlNe+VydBZW5BmvYfJw67qPUgm8kzlt
WjPdHjWG8/mJfAwYFLYbdLiY6clB9oHhcnpjRP7xFnfyve7jRmvGF5+8LsdB
L0DGONvM5wTsArZxu19D8EWjwEjLHpJNxEtL/J6QHw//9YUPvkq0Hu7zdMec
m/Vr3otg0kn+4h6NeM7rBfjRNTkJ+slpZ0ZLEwAN3aiMkJsZEZw//nTgH6Bn
g8scgA52ROB8yDluN08FAd1nxAcujRMqnckoz5bDGN8Rjt5JeYXLC1bk40iw
gp6BloxPUd45DjtAI3aMaTVq1uURzYdZkfABrxj1p5eQzKWIT6fzcNfzJ19G
iJMKp567tXh+N34CZg4iaof9RnWiHV+X6Lesm8PWIz176DOCaXHi9+DlTBLg
tNmM9UZ9OrGVC/pNr/72C6XkzSWNG0gsLFX/Hy4mkms=
                    "], "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1: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
pX3SeqF9RW08+AdJ4bBK
                    "], "Version" -> {11.3, 0}, "ID" -> 
                    8271446901366827342, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
               Span[1, 2464], 
               Span[2465, 2465]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnRAY2WOoBBQ1NFxbssGIESyCBBA9sd8tN6770Ick5Jlfb
6n3MxbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b/Pp+nvPG0u48=
                  "],
                  "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             821998144885263164]]}, "Invertibility" -> "Impossible", 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8143147147439565807]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             8208025887441778832, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8413217448475986683]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Not Question" -> 0.5, "Question" -> 0.5]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1: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
jjLZCw1e1UHOqDPtIyXyvqSB2764jjeCX2O6RTYe2l8rEa9XbL0D8XGZ4PD8
BX46tgvX/egglAw3SfR8wgCq82mn40D3+Qw8tj8NTFfdkiifpGzZc1eSfC91
U69hQs553vD4Hi6ZvQ9ftC5n6Z9U2eJXMbB0czK+1+0i7KqUMLrVEXO0ZrKB
fA7bNb+QGywLh1ofE+wfUwXk2yW931JG8QOsbPaA53cOiwGBJdKCuHc8eW0o
b7dvEZJHu/3VQz7Ptq8uccIY/wZbvDGmE7P1i5EzDspeIFxBlCR9RTrHCa0T
GGktG99hEJ8Wx2unzJIoo6TXqC57Jd8BZRjU/6R1luprCu2YeCld9Q3oTnGU
8YTytDZLnbH4eTBQ1jpcpwImlgySyutaOOHV3UEnsXvLREg/85t3HXkLXBRu
Sn26BMo69uWrZUzarYfdCtcJ8shUu6QtTYbbcvIGvxdZims9K7jv7XuyFicd
vatzAlJWQzgfdTYR91dH8UyLeYJ0N/mIvi8HMcq1qF4uTZwrUS6Y8Bd7Gm01
oGFUf4zwnQDkWSmvIh2WvnccEEa8mbpURLwajolp12H0IE2RPDkdpmerCpqJ
JF3LwenKCRC4K032osTJFzRdYf+AxWDr3QbrtyTCtt9arMTiBRCfRQbflQjH
CZea552VsafD9mJUr4qXM9Q1X9bKs6Wmi8ZydkJZlZPzMJkXaI5xoiKZRaUW
S6umvULyAP1CrZBqLs03A5IKh8IitdkwXnkPdFyWjpTVXCx7Lucsfs0TcPHX
/TAisSMjTXi0QRGODU2Ct4ZB4PneFo9++w1fLfWA+qVb2yZOWpJ6olZ5Lxh+
TmOLtSVhEGWKpOmp1/M1L/Ngiy7MbWYnVhTgwLC5DvPf1fMi2xjcvyRRAhtT
RpqYcKrq+V0grDoxyBWbu/eUs3faV02hOaNc1EfVk5P/pNzUdHIKv3npFzTW
xsvP8tyaLm05Ox6ft57mxZOOSxf7mYPPrhS0mfoVzVYWSg/H1SLlm4Qxh771
ZIqduyPx+9i1udLc90ryzEE9LUxQtuIfMEr2QG9MarHW3EJQPkBY1rkuVWpZ
XsN1Yi9J1OuUF9zeYyjoXLfPVpT9N+mmi07bsefok/J8z3HwV3yjkCrRz8iH
EZ/MOesv6My+eqfyon5n4U15pezLJjs/RGXVZt56LhN/XOoBNBuk+tv9MRRo
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
Uilm5UX7/wFz7pw3
            "], "Biases" -> 
           RawArray["Real32",{1.3009573221206665`}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 2465,
            "$InputDimensions" -> {2465}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{2465}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQEAUANCvNMZ1YgbJ7aAwgERtAJ01RKMwgIlscBuIGEL3XvPSOPdT
FRFHHfEdceelKeu1tbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b9+2fq
9uEp+QVpdYH0
            "], "Type" -> "NumericalVector"], "Key" -> "(f1f2)", 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
      "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.001, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.16774744866751698`, 0.025176751892371965`], "Accuracy" -> 
         PlusMinus[0.9653465346534669, 0.028323007560324794`], 
         "EvaluationTime" -> 0.00414315, "TestSize" -> 100, "TrainingSize" -> 
         10, "TrainingTime" -> 0.078017, "TrainingMemory" -> 2550960, 
         "ModelMemory" -> 84256, "ExperimentCount" -> 1, "ModelUtility" -> 
         2.102882844685245, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.16774744866751698`, 0.017802651991347458`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9653465346534669, 0.020027390709503514`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.001, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 2000], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 148326838184929]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.16774744866751698`, 0.025176751892371965`], 
              "Accuracy" -> 
              PlusMinus[0.9653465346534669, 0.028323007560324794`], 
              "EvaluationTime" -> 0.00414315, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.078017, 
              "TrainingMemory" -> 2550960, "ModelMemory" -> 84256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.102882844685245, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.16774744866751698`, 0.017802651991347458`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9653465346534669, 0.020027390709503514`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7575530906112448, 0.10079293388276368`], "Accuracy" -> 
              PlusMinus[0.5852795421952756, 0.04550971072727253], 
              "EvaluationTime" -> 0.000084665, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.094747, 
              "TrainingMemory" -> 4525816, "ModelMemory" -> 84256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5553624732231522, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7575530906112448, 0.07127136704418953]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5852795421952756, 0.03218022506509257]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7951923613305368, 0.1461218490354745], "Accuracy" -> 
              PlusMinus[0.7033803230777476, 0.045909990757171414`], 
              "EvaluationTime" -> 0.00008082, "TestSize" -> 200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.268896, 
              "TrainingMemory" -> 17849040, "ModelMemory" -> 84256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5238999476312295, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7951923613305368, 0.10332375033250099`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7033803230777476, 0.03246326578860762]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00008082, "MeanCrossEntropy" -> 
             PlusMinus[0.7951923613305368, 0.1461218490354745], "ModelMemory" -> 
             84256, "TrainingMemory" -> 17849040, "TrainingTime" -> 
             1.8706570000000002`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6019457386111525, 0.09413380826406466], "Accuracy" -> 
              PlusMinus[0.6089108910891095, 0.06917727028697561], 
              "EvaluationTime" -> 0.0005803, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.125819, 
              "TrainingMemory" -> 251368, "ModelMemory" -> 1268960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6618384518666951, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6019457386111525, 0.06656265416243438]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6089108910891095, 0.04891571692389512]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7715262519520374, 0.09806411097121684], "Accuracy" -> 
              PlusMinus[0.5495049504950499, 0.07042869408830647], 
              "EvaluationTime" -> 0.00052825, "TestSize" -> 100, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.297586, 
              "TrainingMemory" -> 7260288, "ModelMemory" -> 1329704, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5168182229559996, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7715262519520374, 0.06934179785877753]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5495049504950499, 0.049800607179954416`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.696069617868586, 0.10373509293267809`], "Accuracy" -> 
              PlusMinus[0.668316831683169, 0.06686571256203529], 
              "EvaluationTime" -> 0.00066022, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.75094, 
              "TrainingMemory" -> 31621776, "ModelMemory" -> 1472296, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5643770755165539, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.696069617868586, 0.07335178765971337]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.668316831683169, 0.047281198781485664`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00066022, "MeanCrossEntropy" -> 
             PlusMinus[0.696069617868586, 0.10373509293267809`], 
             "ModelMemory" -> 1472296, "TrainingMemory" -> 31621776, 
             "TrainingTime" -> 5.132085666666668], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8012570215530461, 0.05957499384732085], "Accuracy" -> 
              PlusMinus[0.5573419442216595, 0.0490156649536851], 
              "EvaluationTime" -> 0.000024314999999999997`, "TestSize" -> 200,
               "TrainingSize" -> 10, "TrainingTime" -> 0.010931, 
              "TrainingMemory" -> 457816, "ModelMemory" -> 70392, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.531146288950708, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8012570215530461, 0.042125882138587416`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5573419442216595, 0.03465930907311853]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8809518238384777, 0.07874116076807004], "Accuracy" -> 
              PlusMinus[0.4840036169266624, 0.04924731963917535], 
              "EvaluationTime" -> 0.000024645, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.028259, 
              "TrainingMemory" -> 2444736, "ModelMemory" -> 70520, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.48166974561013043`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8809518238384777, 0.05567840873760246]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4840036169266624, 0.034823113672122326`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.917702370975501, 0.11137837215919617`], "Accuracy" -> 
              PlusMinus[0.5604862986050617, 0.04944658575225914], 
              "EvaluationTime" -> 0.000024415000000000003`, "TestSize" -> 200,
               "TrainingSize" -> 300, "TrainingTime" -> 0.146968, 
              "TrainingMemory" -> 11959656, "ModelMemory" -> 70904, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4594929120439354, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.917702370975501, 0.07875640223128658]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5604862986050617, 0.03496401609194456]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9636748597691448, 0.10207967493671777`], "Accuracy" -> 
              PlusMinus[0.6550214734934421, 0.03365193915706495], 
              "EvaluationTime" -> 0.000024004999999999998`, "TestSize" -> 200,
               "TrainingSize" -> 1600, "TrainingTime" -> 1.961481, 
              "TrainingMemory" -> 63855072, "ModelMemory" -> 73208, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4388954963543639, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9636748597691448, 0.10207967493671777`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6550214734934421, 0.03365193915706495]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000024004999999999998`, "MeanCrossEntropy" -> 
             PlusMinus[0.9636748597691448, 0.10207967493671777`], 
             "ModelMemory" -> 73208, "TrainingMemory" -> 63855072, 
             "TrainingTime" -> 2.4627822499999996`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5015293530487926, 0.01800424201104656], "Accuracy" -> 
              PlusMinus[0.17106345186013097`, 0.006386813663075646], 
              "EvaluationTime" -> 0.000042595, "TestSize" -> 200, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.005502, 
              "TrainingMemory" -> 621184, "ModelMemory" -> 268048, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.8550140446622703, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5015293530487926, 0.012730921616134745`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.17106345186013097`, 0.004516159251335683]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6874099461554081, 0.005599049380364253], "Accuracy" -> 
              PlusMinus[0.17106345186013097`, 0.006386813663075646], 
              "EvaluationTime" -> 0.00006033, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.009074, 
              "TrainingMemory" -> 3682840, "ModelMemory" -> 1254512, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5974098724949155, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6874099461554081, 0.0039591257850539]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.17106345186013097`, 0.004516159251335683]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6226057332888906, 0.0181054561497153], "Accuracy" -> 
              PlusMinus[0.7211374176226493, 0.02863088818425721], 
              "EvaluationTime" -> 0.00008012, "TestSize" -> 200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.045185, 
              "TrainingMemory" -> 18048240, "ModelMemory" -> 5989624, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5515054822643178, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6226057332888906, 0.012802490819939368`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7211374176226493, 0.02024509518648207]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6792599299093025, 0.01891295518479654], "Accuracy" -> 
              PlusMinus[0.5531342717817249, 0.0344952129455084], 
              "EvaluationTime" -> 0.00045474, "TestSize" -> 200, 
              "TrainingSize" -> 1600, "TrainingTime" -> 0.378628, 
              "TrainingMemory" -> 102597848, "ModelMemory" -> 31637792, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.41214721514591846`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6792599299093025, 0.01891295518479654]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5531342717817249, 0.0344952129455084]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00045474, "MeanCrossEntropy" -> 
             PlusMinus[0.6792599299093025, 0.01891295518479654], 
             "ModelMemory" -> 31637792, "TrainingMemory" -> 102597848, 
             "TrainingTime" -> 0.4787870000000001], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6082028750860861, 0.006583797002331766], "Accuracy" -> 
              PlusMinus[0.9950495049504966, 0.015592717276212148`], 
              "EvaluationTime" -> 0.00082937, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.013616, 
              "TrainingMemory" -> 427072, "ModelMemory" -> 149944, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7085989176432449, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6082028750860861, 0.004655447506304455]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9950495049504966, 0.011025716123134242`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.692393772857481, 0.005907084103373648], "Accuracy" -> 
              PlusMinus[0.4159008988456401, 0.01596960788383195], 
              "EvaluationTime" -> 0.00020784499999999999`, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.016679, 
              "TrainingMemory" -> 1907520, "ModelMemory" -> 149960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6227229960615146, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.692393772857481, 0.004176939226534763]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4159008988456401, 0.011292218027547722`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.668266751154941, 0.00909490713745311], "Accuracy" -> 
              PlusMinus[0.6782178217821788, 0.06637035020526592], 
              "EvaluationTime" -> 0.00020374, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.043216, 
              "TrainingMemory" -> 9027192, "ModelMemory" -> 151528, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6445519479119697, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.668266751154941, 0.006431070511155026]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6782178217821788, 0.046930924699869495`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6299316854421751, 0.012845067812269647`], 
              "Accuracy" -> 
              PlusMinus[0.7033803230777476, 0.03246326578860762], 
              "EvaluationTime" -> 0.00026687000000000005`, "TestSize" -> 200, 
              "TrainingSize" -> 1600, "TrainingTime" -> 0.370523, 
              "TrainingMemory" -> 47655864, "ModelMemory" -> 168120, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6828504207460594, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6299316854421751, 0.012845067812269647`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7033803230777476, 0.03246326578860762]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00026687000000000005`, "MeanCrossEntropy" -> 
             PlusMinus[0.6299316854421751, 0.012845067812269647`], 
             "ModelMemory" -> 168120, "TrainingMemory" -> 47655864, 
             "TrainingTime" -> 0.47676975], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association[
          "Experiments" -> {}, "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471003906823, 0.0056083910307054485`], 
              "Accuracy" -> 
              PlusMinus[0.603407360998317, 0.047069796098415204`], 
              "EvaluationTime" -> 0.00007617000000000001, "TestSize" -> 200, 
              "TrainingSize" -> 60, "TrainingTime" -> 0.022479, 
              "TrainingMemory" -> 3639976, "ModelMemory" -> 84256, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6221104816936112, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471003906823, 0.003965731329357633]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.603407360998317, 0.03328337201025749]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007617000000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.6931471003906823, 0.0056083910307054485`], 
             "ModelMemory" -> 84256, "TrainingMemory" -> 3639976, 
             "TrainingTime" -> 0.472059], "Index" -> 10]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "LogisticRegression", "NaiveBayes", 
             "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], 
        Association["ID" -> 148322543217633]], "MaxTrainingSize" -> 2000, 
      "LastReportingTime" -> 3.740140767671256`16.325462937208663*^9, 
      "PreprocessorEvaluationTime" -> 4.49560546875`2.*^-6, 
      "PreprocessorMemory" -> 236488, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.9260597766239437, 
          "ElapsedTimes" -> 1.051271, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 60, "TimeBudgets" -> 1.1575747207799292`, 
          "ElapsedTimes" -> 1.149221, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 1.446968400974911, 
          "ElapsedTimes" -> 1.744718, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 1600, "TimeBudgets" -> 1.8087105012186382`, 
          "ElapsedTimes" -> 3.267566, "ExperimentCounts" -> 3]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[148331133152225]], "ID" -> 
         148335428119521]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {"WHERE'S CZECH GIRL."}, "ID" -> 7260497226573184975], 
         "f2" -> Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{12, 12, 7, 13}}, "ID" -> 6490666254881497590]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 16.700505, "MaxTrainingMemory" -> 150369848, 
      "DataMemory" -> 701640, "FunctionMemory" -> 457992, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 9, 15, 59, 28.998768`8.214954529002265}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7401587690360613`*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"bf9e3740-1061-453f-bc41-e36d43b8ba70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl1000", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"partsOfSpeechNumbers", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740158251434836*^9, 3.740158267226678*^9}, {
  3.740158573490692*^9, 3.740158574169509*^9}, {3.7401587762326193`*^9, 
  3.740158777871828*^9}},
 CellLabel->"In[94]:=",ExpressionUUID->"ff3e3682-e8a6-4fab-a152-1dffd7dd02f9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7059999999999999609`4.891395124401546", "\[PlusMinus]", 
                    "0.0144142905400084214`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 2000, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnRAY2WOoBBQ1NFxbssGIESyCBBA9sd8tN6770Ick5Jlfb
6n3MxbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b/Pp+nvPG0u48=
                 "], 
                "Type" -> "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    7263179337424669307]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    114010418416267986]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                10.158144370086415`, "StandardDeviation" -> 4.020779979572767,
                 "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUmuRbuOXF/DHfdcTcADMKC6GEIC2cohuGHALTfSA/JQHSu2yHPzI/9/
jzp3F9oSxSIY/O//8//82//6f//xn3/+/T/8888///q///3//st/0z/8j9tq
PXXee+ep465ZSgyUfYv+fa2xz+qn199Av7vPMfe8bbSx30C9+/a6d+t9ljHb
LTlQRz1F175jnKOfxMDZtek/vY01Rlt1xMA6Y+0262qrtV7rzYG+9umjnXnO
mGfmwLhtDv3f1hO1O/tvYOnxy+xFz3SW/iUGut6sjr3XXnWVemcOtF3mOKPr
j6fmpv8Gyur3Hj1SGavdFgNNt6h6gL70enX/7lFP73ecfSWf48+b13bXOHpk
vRGPdX8DZZXVNPlMlu4eA6Xf0+fU9K9aey8xUG7R6+n3deua+rccOKcXzaBe
8fTV6qo5sDS7pXXNlT7Wzm9e9Gb78OJX4/q8/TdQWQdaJKVrim+8oNbC0Xfr
mtetvxk9B/rZo2hS5unnahG130ArZ5Ta69HN145pL21rNlqdulfrepUcKPoE
Rxdq59yrj5iXKl1zoUWq21Y9eLygfnW5iR52afq1Ln8DmgdNBo9VRtcii4Gz
z+76f/36Dn3/HNALnr3uurudrVkeOVB1h321FE6/c5UWA2vr/kW30W7QRPf9
G+i9shDrHrvUcWJAr1TqrNoBR99k17y5/lrLQVNSuNSs+RejaL0X/e+ca9ce
k3huv1qJRQ+q77jY3DmwtQu0pKreRdvk91Rdq1e/rbOwtLWCfwP19rIrK6JM
7bcYaENP1PmOU/tz/WZXM6EFsfRs+2gC5ls++mzaUGXeoWfQEq69xIAupi+u
m1wvurZz4Oyp3Tn09uXqT9pvQGuma8kf/adprnNgTW1lfS+9hJ5h99+AVEDt
KIi6Nc15j7UWakxf+2o16OlzoDCDVctn9KFZzgFNgv6iSNHtNaS+ckAPqtfT
7m9Tq7GefFxpo1qanqr1o62dn1ZTuvRVpRWKtg0zHQNdD9S7RGPPLg2bj9uu
/kWPPzTlUwt25kDXPtRCqPpfbZvzG5BO0su3Nqa2XM/FoAG9V9X+XKvp/2tO
op5cL6aba39K+5a41NZKG1rBp21NcGuh4dgwVW/feYnmdRcDB72vFacJ0C92
KEsN6CpFr6LFMKdUxs0BXaINRsqZ68y8lK56z9Q6OFMvP27+hVSMlO+Q9pYC
6DunhIe8U/MuXaUtt+Mo0k6WYjk+jJb2z87VvrVijtRCLwsFsHKV7OmDS0uT
RaWPlvfQfOi40b2kUobOpPiCUhT1sDt1TC5WXM6V1kDRGkAxSY+XlZeSfp11
Nk2IVgNf7Q1oQekM0tNqReh5W6hXDWheeWvp8q0ZbjcH+mYXjyk9rYc98R46
NhfKXRtZ61f7J6ZEqlvrRifd0iGtBV/yUlPaTo8rlaJ/6L+tJv3Rdf05Z+c8
vvnmS59DOkG6pulDar3ngF68cCfpBO1qbcIc0DNqtnhBraCSClnPKt2iz6dl
r3tpvnKgSNdLZXELra/U1FrFV59ap2cbOj5O7iirNu0/PZQ05a75BTV72mIy
MzrH8GypZLTupdcuJsPWd7o9L1WGjSXZLd49qWTmRkdK7w30sT5yDgyfm/pG
nVNB6yQHdIjrNbAvOIRzriYzV7SytKOllrQgcsA6lXNWO1FHYhxFmsA2pL+m
FknnGW8O6LFYztINBwun5MB8i/PqM2tZ5T30mWQUSDNKq+hYCquPAeluTZTW
NrbDikvpA+nryHqTzab3ljaPgW3zrmPgTRbpb0Azd9BuPiS0HmNgsqH1zihA
rMHxG5BQ/2XtphNu5YCWuaZJNo6Uo3bVyQE+N/aVrBtMy7y5bBcd5zJupUJ1
qbQZZGzJSJO60K7Sc9ycRH2JwlLR1HdeLzWDTlGUQNHhJP1dfgvO6lAmsFbd
QGGlshwdO1q31s+lkkfOrv5Jr8upiYGjB8gBm3TaiZpyf7K8lN5WC54jdTYs
33xcWZAy279lqpEdi1p7c1wphqJDZWnvjvIbkCnL5pASX6iBHMC6q5Wrd3RR
zm5B/2xsvCVroOe06wkHakOfT2rg/CwynRmyaqVk8ARkv6aG0wm4rUO0GtHT
O7657JUmO1+noY517eYS065X0LzKspQe5QFzJWqyZZTpXbC4tdPzVNOA1qFM
qY45r8W6ckD7prBpKneZNR9Xu0xLHY2s+ecQywF9kM+EkfvDeZ8DaNA75Zjo
ALs9J1F/oP1ZOas0l/x3DixmAitblpaWVc+BiX3RpXh1Ndktv78YOuNlZ+B2
8dVnDnBu68EwYZmdnETpBA1szlS5bLfHX0ip4vLIu8MCk+kdN28Hh+JI68jQ
1+fMtSvrFyWg195Ti0yfJwc0izqmtHJknWiK40Pp/QYKS3vUk5iaGt2KT6BH
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
                    "], "Values" -> 
                    None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1: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
pX3SeqF9RW08+AdJ4bBK
                    "], "Version" -> {11.3, 0}, "ID" -> 
                    8271446901366827342, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Spans" -> {
                  Span[1, 2464], 
                  Span[2465, 2465]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnRAY2WOoBBQ1NFxbssGIESyCBBA9sd8tN6770Ick5Jlfb
6n3MxbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b/Pp+nvPG0u48=
                    
                    "], "Type" -> "NumericalVector"]], "Version" -> {11.3, 0},
                 "ID" -> 821998144885263164]]}, "Invertibility" -> 
            "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8143147147439565807]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                8208025887441778832, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8413217448475986683]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["Not Question" -> 0.5, "Question" -> 0.5]],
        "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association["Weights" -> CompressedData["
1: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
jjLZCw1e1UHOqDPtIyXyvqSB2764jjeCX2O6RTYe2l8rEa9XbL0D8XGZ4PD8
BX46tgvX/egglAw3SfR8wgCq82mn40D3+Qw8tj8NTFfdkiifpGzZc1eSfC91
U69hQs553vD4Hi6ZvQ9ftC5n6Z9U2eJXMbB0czK+1+0i7KqUMLrVEXO0ZrKB
fA7bNb+QGywLh1ofE+wfUwXk2yW931JG8QOsbPaA53cOiwGBJdKCuHc8eW0o
b7dvEZJHu/3VQz7Ptq8uccIY/wZbvDGmE7P1i5EzDspeIFxBlCR9RTrHCa0T
GGktG99hEJ8Wx2unzJIoo6TXqC57Jd8BZRjU/6R1luprCu2YeCld9Q3oTnGU
8YTytDZLnbH4eTBQ1jpcpwImlgySyutaOOHV3UEnsXvLREg/85t3HXkLXBRu
Sn26BMo69uWrZUzarYfdCtcJ8shUu6QtTYbbcvIGvxdZims9K7jv7XuyFicd
vatzAlJWQzgfdTYR91dH8UyLeYJ0N/mIvi8HMcq1qF4uTZwrUS6Y8Bd7Gm01
oGFUf4zwnQDkWSmvIh2WvnccEEa8mbpURLwajolp12H0IE2RPDkdpmerCpqJ
JF3LwenKCRC4K032osTJFzRdYf+AxWDr3QbrtyTCtt9arMTiBRCfRQbflQjH
CZea552VsafD9mJUr4qXM9Q1X9bKs6Wmi8ZydkJZlZPzMJkXaI5xoiKZRaUW
S6umvULyAP1CrZBqLs03A5IKh8IitdkwXnkPdFyWjpTVXCx7Lucsfs0TcPHX
/TAisSMjTXi0QRGODU2Ct4ZB4PneFo9++w1fLfWA+qVb2yZOWpJ6olZ5Lxh+
TmOLtSVhEGWKpOmp1/M1L/Ngiy7MbWYnVhTgwLC5DvPf1fMi2xjcvyRRAhtT
RpqYcKrq+V0grDoxyBWbu/eUs3faV02hOaNc1EfVk5P/pNzUdHIKv3npFzTW
xsvP8tyaLm05Ox6ft57mxZOOSxf7mYPPrhS0mfoVzVYWSg/H1SLlm4Qxh771
ZIqduyPx+9i1udLc90ryzEE9LUxQtuIfMEr2QG9MarHW3EJQPkBY1rkuVWpZ
XsN1Yi9J1OuUF9zeYyjoXLfPVpT9N+mmi07bsefok/J8z3HwV3yjkCrRz8iH
EZ/MOesv6My+eqfyon5n4U15pezLJjs/RGXVZt56LhN/XOoBNBuk+tv9MRRo
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
Uilm5UX7/wFz7pw3
               "], "Biases" -> 
              RawArray["Real32",{1.3009573221206665`}]], "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              2465, "$InputDimensions" -> {2465}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{2465}, NeuralNetworks`RealT]],
             "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQEAUANCvNMZ1YgbJ7aAwgERtAJ01RKMwgIlscBuIGEL3XvPSOPdT
FRFHHfEdceelKeu1tbZt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27b9+2fq
9uEp+QVpdYH0
               "], "Type" -> "NumericalVector"], "Key" -> 
            "(f1f2)", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Method" -> "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0.001, "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.16774744866751698`, 0.025176751892371965`], 
            "Accuracy" -> 
            PlusMinus[0.9653465346534669, 0.028323007560324794`], 
            "EvaluationTime" -> 0.00414315, "TestSize" -> 100, "TrainingSize" -> 
            10, "TrainingTime" -> 0.078017, "TrainingMemory" -> 2550960, 
            "ModelMemory" -> 84256, "ExperimentCount" -> 1, "ModelUtility" -> 
            2.102882844685245, "MeanCrossEntropyHistory" -> {
              PlusMinus[0.16774744866751698`, 0.017802651991347458`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.9653465346534669, 0.020027390709503514`]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 0.001, "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 2000], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 148326838184929]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.16774744866751698`, 0.025176751892371965`], 
                 "Accuracy" -> 
                 PlusMinus[0.9653465346534669, 0.028323007560324794`], 
                 "EvaluationTime" -> 0.00414315, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.078017, 
                 "TrainingMemory" -> 2550960, "ModelMemory" -> 84256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 2.102882844685245, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.16774744866751698`, 0.017802651991347458`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9653465346534669, 0.020027390709503514`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7575530906112448, 0.10079293388276368`], 
                 "Accuracy" -> 
                 PlusMinus[0.5852795421952756, 0.04550971072727253], 
                 "EvaluationTime" -> 0.000084665, "TestSize" -> 200, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.094747, 
                 "TrainingMemory" -> 4525816, "ModelMemory" -> 84256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5553624732231522,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7575530906112448, 0.07127136704418953]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5852795421952756, 0.03218022506509257]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7951923613305368, 0.1461218490354745], 
                 "Accuracy" -> 
                 PlusMinus[0.7033803230777476, 0.045909990757171414`], 
                 "EvaluationTime" -> 0.00008082, "TestSize" -> 200, 
                 "TrainingSize" -> 300, "TrainingTime" -> 0.268896, 
                 "TrainingMemory" -> 17849040, "ModelMemory" -> 84256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5238999476312295,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7951923613305368, 0.10332375033250099`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7033803230777476, 0.03246326578860762]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00008082, "MeanCrossEntropy" -> 
                PlusMinus[0.7951923613305368, 0.1461218490354745], 
                "ModelMemory" -> 84256, "TrainingMemory" -> 17849040, 
                "TrainingTime" -> 1.8706570000000002`], "Index" -> 1], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6019457386111525, 0.09413380826406466], 
                 "Accuracy" -> 
                 PlusMinus[0.6089108910891095, 0.06917727028697561], 
                 "EvaluationTime" -> 0.0005803, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.125819, 
                 "TrainingMemory" -> 251368, "ModelMemory" -> 1268960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6618384518666951,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6019457386111525, 0.06656265416243438]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6089108910891095, 0.04891571692389512]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7715262519520374, 0.09806411097121684], 
                 "Accuracy" -> 
                 PlusMinus[0.5495049504950499, 0.07042869408830647], 
                 "EvaluationTime" -> 0.00052825, "TestSize" -> 100, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.297586, 
                 "TrainingMemory" -> 7260288, "ModelMemory" -> 1329704, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5168182229559996,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7715262519520374, 0.06934179785877753]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5495049504950499, 0.049800607179954416`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.696069617868586, 0.10373509293267809`], 
                 "Accuracy" -> 
                 PlusMinus[0.668316831683169, 0.06686571256203529], 
                 "EvaluationTime" -> 0.00066022, "TestSize" -> 100, 
                 "TrainingSize" -> 300, "TrainingTime" -> 0.75094, 
                 "TrainingMemory" -> 31621776, "ModelMemory" -> 1472296, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5643770755165539,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.696069617868586, 0.07335178765971337]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.668316831683169, 0.047281198781485664`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00066022, "MeanCrossEntropy" -> 
                PlusMinus[0.696069617868586, 0.10373509293267809`], 
                "ModelMemory" -> 1472296, "TrainingMemory" -> 31621776, 
                "TrainingTime" -> 5.132085666666668], "Index" -> 2], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8012570215530461, 0.05957499384732085], 
                 "Accuracy" -> 
                 PlusMinus[0.5573419442216595, 0.0490156649536851], 
                 "EvaluationTime" -> 0.000024314999999999997`, "TestSize" -> 
                 200, "TrainingSize" -> 10, "TrainingTime" -> 0.010931, 
                 "TrainingMemory" -> 457816, "ModelMemory" -> 70392, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.531146288950708, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8012570215530461, 0.042125882138587416`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5573419442216595, 0.03465930907311853]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8809518238384777, 0.07874116076807004], 
                 "Accuracy" -> 
                 PlusMinus[0.4840036169266624, 0.04924731963917535], 
                 "EvaluationTime" -> 0.000024645, "TestSize" -> 200, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.028259, 
                 "TrainingMemory" -> 2444736, "ModelMemory" -> 70520, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.48166974561013043`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8809518238384777, 0.05567840873760246]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4840036169266624, 0.034823113672122326`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.917702370975501, 0.11137837215919617`], 
                 "Accuracy" -> 
                 PlusMinus[0.5604862986050617, 0.04944658575225914], 
                 "EvaluationTime" -> 0.000024415000000000003`, "TestSize" -> 
                 200, "TrainingSize" -> 300, "TrainingTime" -> 0.146968, 
                 "TrainingMemory" -> 11959656, "ModelMemory" -> 70904, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4594929120439354,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.917702370975501, 0.07875640223128658]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5604862986050617, 0.03496401609194456]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9636748597691448, 0.10207967493671777`], 
                 "Accuracy" -> 
                 PlusMinus[0.6550214734934421, 0.03365193915706495], 
                 "EvaluationTime" -> 0.000024004999999999998`, "TestSize" -> 
                 200, "TrainingSize" -> 1600, "TrainingTime" -> 1.961481, 
                 "TrainingMemory" -> 63855072, "ModelMemory" -> 73208, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4388954963543639,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9636748597691448, 0.10207967493671777`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6550214734934421, 0.03365193915706495]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000024004999999999998`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.9636748597691448, 0.10207967493671777`], 
                "ModelMemory" -> 73208, "TrainingMemory" -> 63855072, 
                "TrainingTime" -> 2.4627822499999996`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5015293530487926, 0.01800424201104656], 
                 "Accuracy" -> 
                 PlusMinus[0.17106345186013097`, 0.006386813663075646], 
                 "EvaluationTime" -> 0.000042595, "TestSize" -> 200, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.005502, 
                 "TrainingMemory" -> 621184, "ModelMemory" -> 268048, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.8550140446622703,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5015293530487926, 0.012730921616134745`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.17106345186013097`, 0.004516159251335683]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6874099461554081, 0.005599049380364253], 
                 "Accuracy" -> 
                 PlusMinus[0.17106345186013097`, 0.006386813663075646], 
                 "EvaluationTime" -> 0.00006033, "TestSize" -> 200, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.009074, 
                 "TrainingMemory" -> 3682840, "ModelMemory" -> 1254512, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5974098724949155,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6874099461554081, 0.0039591257850539]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.17106345186013097`, 0.004516159251335683]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6226057332888906, 0.0181054561497153], 
                 "Accuracy" -> 
                 PlusMinus[0.7211374176226493, 0.02863088818425721], 
                 "EvaluationTime" -> 0.00008012, "TestSize" -> 200, 
                 "TrainingSize" -> 300, "TrainingTime" -> 0.045185, 
                 "TrainingMemory" -> 18048240, "ModelMemory" -> 5989624, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5515054822643178,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6226057332888906, 0.012802490819939368`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7211374176226493, 0.02024509518648207]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6792599299093025, 0.01891295518479654], 
                 "Accuracy" -> 
                 PlusMinus[0.5531342717817249, 0.0344952129455084], 
                 "EvaluationTime" -> 0.00045474, "TestSize" -> 200, 
                 "TrainingSize" -> 1600, "TrainingTime" -> 0.378628, 
                 "TrainingMemory" -> 102597848, "ModelMemory" -> 31637792, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.41214721514591846`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6792599299093025, 0.01891295518479654]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5531342717817249, 0.0344952129455084]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00045474, "MeanCrossEntropy" -> 
                PlusMinus[0.6792599299093025, 0.01891295518479654], 
                "ModelMemory" -> 31637792, "TrainingMemory" -> 102597848, 
                "TrainingTime" -> 0.4787870000000001], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6082028750860861, 0.006583797002331766], 
                 "Accuracy" -> 
                 PlusMinus[0.9950495049504966, 0.015592717276212148`], 
                 "EvaluationTime" -> 0.00082937, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.013616, 
                 "TrainingMemory" -> 427072, "ModelMemory" -> 149944, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7085989176432449,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6082028750860861, 0.004655447506304455]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.9950495049504966, 0.011025716123134242`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.692393772857481, 0.005907084103373648], 
                 "Accuracy" -> 
                 PlusMinus[0.4159008988456401, 0.01596960788383195], 
                 "EvaluationTime" -> 0.00020784499999999999`, "TestSize" -> 
                 200, "TrainingSize" -> 60, "TrainingTime" -> 0.016679, 
                 "TrainingMemory" -> 1907520, "ModelMemory" -> 149960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6227229960615146,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.692393772857481, 0.004176939226534763]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4159008988456401, 0.011292218027547722`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.668266751154941, 0.00909490713745311], 
                 "Accuracy" -> 
                 PlusMinus[0.6782178217821788, 0.06637035020526592], 
                 "EvaluationTime" -> 0.00020374, "TestSize" -> 100, 
                 "TrainingSize" -> 300, "TrainingTime" -> 0.043216, 
                 "TrainingMemory" -> 9027192, "ModelMemory" -> 151528, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6445519479119697,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.668266751154941, 0.006431070511155026]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6782178217821788, 0.046930924699869495`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6299316854421751, 0.012845067812269647`], 
                 "Accuracy" -> 
                 PlusMinus[0.7033803230777476, 0.03246326578860762], 
                 "EvaluationTime" -> 0.00026687000000000005`, "TestSize" -> 
                 200, "TrainingSize" -> 1600, "TrainingTime" -> 0.370523, 
                 "TrainingMemory" -> 47655864, "ModelMemory" -> 168120, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6828504207460594,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6299316854421751, 0.012845067812269647`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7033803230777476, 0.03246326578860762]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00026687000000000005`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6299316854421751, 0.012845067812269647`], 
                "ModelMemory" -> 168120, "TrainingMemory" -> 47655864, 
                "TrainingTime" -> 0.47676975], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 6],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 7],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 8],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association[
             "Experiments" -> {}, "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
                1, "TrainingMemory" -> 1, "TrainingTime" -> 1], "Index" -> 9],
             Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931471003906823, 0.0056083910307054485`], 
                 "Accuracy" -> 
                 PlusMinus[0.603407360998317, 0.047069796098415204`], 
                 "EvaluationTime" -> 0.00007617000000000001, "TestSize" -> 
                 200, "TrainingSize" -> 60, "TrainingTime" -> 0.022479, 
                 "TrainingMemory" -> 3639976, "ModelMemory" -> 84256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6221104816936112,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931471003906823, 0.003965731329357633]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.603407360998317, 0.03328337201025749]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007617000000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.6931471003906823, 0.0056083910307054485`], 
                "ModelMemory" -> 84256, "TrainingMemory" -> 3639976, 
                "TrainingTime" -> 0.472059], "Index" -> 10]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "LogisticRegression", "NaiveBayes", 
                "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 10], 
           Association["ID" -> 148322543217633]], "MaxTrainingSize" -> 2000, 
         "LastReportingTime" -> 3.740140767671256`16.325462937208663*^9, 
         "PreprocessorEvaluationTime" -> 4.49560546875`2.*^-6, 
         "PreprocessorMemory" -> 236488, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.9260597766239437, 
             "ElapsedTimes" -> 1.051271, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 1.1575747207799292`, 
             "ElapsedTimes" -> 1.149221, "ExperimentCounts" -> 6], 
            Association[
            "TrainingSizes" -> 300, "TimeBudgets" -> 1.446968400974911, 
             "ElapsedTimes" -> 1.744718, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 1600, "TimeBudgets" -> 1.8087105012186382`, 
             "ElapsedTimes" -> 3.267566, "ExperimentCounts" -> 3]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[148331133152225]], "ID" -> 
            148335428119521]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {"WHERE'S CZECH GIRL."}, "ID" -> 
              7260497226573184975], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{12, 12, 7, 13}}, "ID" -> 6490666254881497590]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 16.700505, "MaxTrainingMemory" -> 
         150369848, "DataMemory" -> 701640, "FunctionMemory" -> 457992, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 9, 15, 59, 28.998768`8.214954529002265}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"YOU DUMB BITCH.", {11, 1, 7, 13}}, {
        "AND YOU COULD STAND TO GET A LITTLE SMARTER AIN'T THAT RIGHT YOU \
DUMB BLONDE FUCK.", {3, 11, 15, 15, 10, 15, 4, 12, 12, 12, 2, 4, 12, 11, 1, 
         12, 12, 13}}, {"AN ITALIAN RIGHT.", {4, 1, 7, 13}}, {
        "MAJOR WHAT DO YOU THINK COULD HAVE DONE THIS.", {1, 4, 12, 11, 12, 
         12, 12, 15, 7, 13}}, {"YOU SAW THIS.", {11, 15, 7, 13}}, {
        "HOW CAN YOU BE HERE AND SAY THIS.", {12, 12, 11, 15, 2, 3, 15, 7, 
         13}}, {"NATALIE WHO.", {12, 11, 13}}, {
        "WHERE WILL MY TOYS BE.", {15, 15, 12, 12, 15, 13}}, {
        "THE CAR OR DEBBIE.", {4, 7, 7, 12, 13}}, {
        "THAT ' S WHO YOU WANT ME TO BEND MY RULES FOR.", {4, 13, 7, 11, 11, 
         15, 7, 10, 15, 12, 7, 10, 13}}, {
        "I'VE NEVER GOTTEN A LETTER LIKE THIS HAVE YOU.", {11, 15, 2, 15, 4, 
         7, 10, 7, 15, 11, 13}}, {
        "YOU DON'T THINK SO.", {11, 15, 2, 12, 12, 13}}, {
        "I BELIEVE WE SHARE AN ART INSTRUCTOR YOU KNOW CHASTITY.", {11, 15, 1,
          7, 4, 7, 7, 11, 15, 7, 13}}, {"CALL THAT FRESH.", {1, 4, 12, 13}}, {
        "OH SHUT UP HUH.", {7, 12, 9, 12, 13}}, {"THE POET.", {4, 7, 13}}, {
        "WHY DOESN'T SHE JUST HANG UP AND CALL THE POLICE.", {2, 15, 2, 12, 2,
          15, 9, 3, 1, 4, 7, 13}}, {
        "IF YOU NEED TO COME TO WHERE I LIVE OK.", {10, 11, 15, 10, 15, 10, 
         15, 11, 15, 5, 13}}, {"WHO WILL YOU KILL.", {11, 15, 11, 15, 13}}, {
        "WHO IS DEAD.", {11, 15, 12, 13}}, {
        "YOU REMEMBER HIM FROM HIGH SCHOOL.", {11, 15, 12, 12, 12, 12, 13}}, {
        "YOU HUNGRY OR THIRSTY OR BOTH.", {11, 1, 7, 12, 7, 4, 13}}, {
        "HOW OFTEN DO YOU SEE MR. KRAMER AND HIS SON.", {12, 12, 12, 11, 15, 
         12, 12, 3, 11, 7, 13}}, {
        "WHO'S MR. JOCULARITY.", {11, 15, 12, 12, 13}}, {
        "SO NOW WHERE WERE WE HERE.", {12, 12, 12, 15, 12, 2, 13}}, {
        "CHARGE SET.", {1, 7, 13}}, {
        "YOU SERVE MARTINIS DONCHA.", {11, 15, 7, 12, 13}}, {
        "GOIN' DOVE HUNTIN'.", {12, 7, 7, 13, 13}}, {
        "AND MADEMOISELLE.", {3, 12, 13}}, {
        "IS IT THAT BAD.", {15, 11, 4, 12, 13}}, {
        "THEY'RE TRYING TO UNNERVE US. WHY DID THEY DO THAT.", {12, 12, 12, 
         10, 12, 12, 13}}, {
        "WHAT NUMBER DID YOU TEAR OUT.", {4, 7, 15, 11, 15, 12, 13}}, {
        "JUST A LITTLE JOKE MISS FARMER. ...DID YOU REALLY SAY THAT.", {2, 4, 
         7, 7, 7, 7, 13, 13}}, {
        "HI VIV.  CARLOS YOU KNOW MY ROOMMATE VIV. YOU SPENT IT ON DRUGS \
DIDN'T YOU.", {12, 12, 13}}, {
        "WHAT HAVE YOU GOT TO DO.", {4, 12, 11, 15, 10, 12, 13}}, {
        "DO YOU KNOW HER.", {15, 11, 15, 7, 13}}, {
        "WHAT THE HELL IS A TREADSTONE.", {4, 4, 7, 15, 4, 7, 13}}, {
        "PAPA.", {7, 13}}, {"AS A PLUMBER.", {10, 4, 7, 13}}, {
        "WHAT TEN THOUSAND POUNDS.", {4, 8, 12, 12, 13}}, {
        "UP GET IT.", {7, 15, 11, 13}}, {
        "ARE YOU DECLARING AN EMERGENCY.", {15, 11, 15, 4, 7, 13}}, {
        "SHALL I REMAIN HERE IN OUR HOTEL ROOM HIDING OR SHALL I CARRY ON THE \
BEST I CAN.", {12, 11, 15, 2, 10, 12, 12, 12, 15, 7, 7, 11, 15, 10, 4, 7, 11, 
         15, 13}}, {"WHATSAMATTER.", {7, 13}}, {
        "WHAT WAS I GONNA SAY.", {4, 15, 11, 12, 12, 12, 13}}, {
        "AND THOSE WERE THE GUYS WHO WENT ON THE EXERCISE WITH YOU.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}}, {
        "I WANT THE MONEY ASSHOLE WHAT DO YOU THINK.", {11, 15, 4, 7, 12, 4, 
         12, 11, 15, 13}}, {
        "I MEAN WHAT KIND OF PEOPLE DO WELL AT THIS STUFF.", {11, 15, 4, 12, 
         10, 12, 12, 12, 10, 12, 7, 13}}, {
        "HOW ARE THEY TREATING YOU.", {12, 15, 7, 15, 11, 13}}, {
        "WANNA STAY WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}}, {
        "AT WHAT EXACTLY.", {10, 4, 7, 13}}, {
        "DO YOU THINK IT'S DONE.", {15, 11, 15, 11, 15, 12, 13}}, {
        "WHAT IS SO GODDAMN VALUABLE IN YOUR LIFE THAT YOU'RE WORRIED ABOUT \
LOSING.", {4, 15, 12, 12, 12, 10, 1, 7, 4, 11, 15, 1, 10, 15, 13}}, {
        "PITTSBURGH.", {12, 13}}, {
        "[WAS IT] &QUOT;MEIRSCHULTZ&QUOT;.", {13, 12, 12, 13, 12, 12, 13, 
         13}}, {"I KNOW YOU'RE EXPECTING SOME KIND OF -- EXTRAVAGANT BEHAVIOR \
BUT BELIEVE ME -- DO YOU BELIEVE ME.", {11, 15, 11, 15, 15, 12, 12, 10, 13, 1,
          7, 12, 12, 12, 13, 12, 11, 15, 7, 13}}, {
        "WHAT'S A LUNCH COST THESE DAYS.", {4, 15, 4, 7, 7, 7, 7, 13}}, {
        "WHERE IS INNER SPACE.", {15, 15, 12, 12, 13}}, {
        "WHY WON'T YOU CHECK OUT LV-426. ...BECAUSE JUST ONE OF THOSE THINGS \
MANAGED TO KILL MY ENTIRE CREW WITHIN TWELVE HOURS OF HATCHING...", {2, 12, 2,
          11, 15, 7, 7, 13, 13, 12, 2, 8, 10, 4, 7, 15, 10, 15, 12, 12, 12, 
         10, 8, 7, 10, 15, 13}}, {
        "LOOK BUTTHEAD I'LL TREAT YOU SO NICE YOU'LL NEVER WANT TO LET ME GO \
OKAY.", {8, 7, 11, 15, 15, 11, 2, 1, 11, 15, 2, 1, 10, 12, 12, 12, 12, 13}}, {
        "THAT OBVIOUS HUH.", {4, 1, 12, 13}}, {"PERMISSION.", {7, 13}}, {
        "OKAY MISS STARLING.", {1, 12, 12, 13}}, {
        "WHAT'S DR. GILLMAN SAY.", {4, 15, 12, 12, 12, 13}}, {
        "WHY DID THEY TURN BACK.", {2, 12, 12, 15, 2, 13}}, {
        "WHAT'S SHE DOING.", {4, 15, 12, 12, 13}}, {
        "HOW YOU DOING SAM.", {12, 11, 15, 12, 13}}, {
        "WHY DO YOU EAT THAT STUFF.", {2, 12, 11, 15, 4, 7, 13}}, {
        "WHAT EXACTLY DID HE CALL OUT.", {4, 12, 15, 11, 1, 12, 13}}, {
        "SAY---YOU THINK THAT'S THE SAME GUY WHO WAS IN THE ACCIDENT WITH \
LUCY.", {7, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}}, {
        "AND YOU SVEN AREN'T YOU AFRAID OF CROSSING THE RAINBOW BRIDGE TO \
ASGAARD.", {3, 11, 12, 15, 2, 11, 12, 10, 12, 4, 12, 12, 10, 12, 13}}, {
        "NOT GREAT.", {2, 1, 13}}, {
        "RUNNING OUT OF TIME ARE WE.", {15, 12, 10, 12, 15, 7, 13}}, {
        "YOU'RE NOT USING THE SAME GUY WHO TRIED TO FIX IT.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}}, {
        "TO YOU ... .", {10, 11, 13, 13}}, {
        "DID YOU KNOW YOU SHOULDN'T LIGHT THREE CIGARETTES WITH A MATCH.", {
         12, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}}, {
        "MY MY MY HOW DID THINGS TURN SO HOSTILE SO QUICKLY.", {12, 12, 12, 
         12, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "NO BUT MY DOG HE'S A GOT MILLIONS OF THEM -- HAVE YOU GOT A \
LICENSE.", {4, 12, 12, 12, 11, 15, 4, 15, 12, 10, 12, 13, 12, 11, 15, 4, 7, 
         13}}, {"THIS THIS HAPPENED.", {7, 7, 15, 13}}, {
        "HOW DID YOU MANAGE IT.", {12, 12, 11, 15, 11, 13}}, {
        "WHOSE JUSTICE.", {1, 7, 13}}, {
        "DID THEY TELL YOU TO SLEEP WITH ME.", {12, 12, 12, 11, 10, 15, 10, 7,
          13}}, {"MAX, WHAT IS IT.", {12, 13, 4, 15, 11, 13}}, {
        "WILL YOU COME SEE HER WITH ME.", {15, 11, 15, 15, 7, 10, 7, 13}}, {
        "HOW YOU FEELING ALL RIGHT.", {12, 11, 15, 7, 7, 13}}, {
        "IS IT INEVITABLE THAT THE GAME PLAYS YOU.", {15, 11, 1, 4, 4, 7, 15, 
         11, 13}}, {"YOU FOUND ANYONE IN YOURS.", {11, 15, 7, 10, 12, 13}}, {
        "DON'T YOU WANT TO SEE WHAT DADDY DOES FOR A LIVING.", {7, 2, 11, 1, 
         10, 15, 4, 12, 15, 10, 4, 7, 13}}, {
        "WELL COULD YOU LEND ME SOME MONEY TILL YOU HAVE ONE.", {12, 12, 11, 
         15, 2, 12, 12, 12, 11, 15, 8, 13}}, {
        "I'M JUST HERE SHOOTING THIS BAND WHAT ABOUT YOU.", {11, 15, 2, 2, 15,
          7, 7, 4, 12, 11, 13}}, {
        "IT'S YOUR BANK AS WELL AS MINE ISN'T IT.", {11, 15, 1, 12, 12, 12, 
         12, 12, 15, 2, 11, 13}}, {
        "VASQUEZ HOW YOU DOING.", {12, 12, 11, 15, 13}}, {
        "YOU DON'T LIKE ME.", {11, 15, 2, 10, 7, 13}}, {
        "PHILIP SWANN.", {12, 12, 13}}, {
        "THE POLICE ALWAYS DO DON'T THEY.", {4, 12, 12, 12, 12, 2, 12, 13}}, {
        "PEOPLE ARE GONNA BE THINKING THE YOUNGER JAMES GANG.", {12, 15, 12, 
         12, 15, 15, 4, 1, 12, 12, 13}}, {
        "SO WHY ISN'T IT ALL BLOODY.", {12, 2, 15, 2, 11, 7, 7, 13}}, {
        "IS THAT ALL THERE IS.", {15, 4, 7, 7, 15, 13}}, {
        "THEN WE'LL GO DANCIN' OKAY.", {2, 12, 12, 12, 12, 12, 13}}, {
        "YOU'RE NOT FROM L.A. HUH.", {11, 15, 2, 10, 12}}, {
        "WHY DIDN'T YOU SAY SOMETHING.", {2, 12, 2, 11, 15, 7, 13}}, {
        "WITH ID AND A GUN....", {10, 7, 3, 4, 7, 13}}, {
        "WHAT IS HE -- MUSCLEMAN.", {4, 15, 11, 13, 12, 13}}, {
        "WHAT'S WRONG DID YOU MISS ME.", {4, 15, 1, 7, 11, 15, 7, 13}}, {
        "WHAT'S A TREE.", {4, 15, 4, 7, 13}}, {
        "- WHERE THAT COME FROM.", {13, 7, 4, 15, 7, 13}}, {
        "YOU'RE BACK AGAIN HUH.", {11, 15, 2, 2, 12, 13}}, {
        "PROFESSIONALLY.", {2, 13}}, {
        "ABOUT THE DUMPER DIDN'T HE TELL YOU THAT.", {10, 4, 7, 15, 2, 11, 15,
          11, 4, 13}}, {
        "KEEPING YOURSELF OUT OF JAIL.", {12, 12, 12, 10, 12, 13}}, {
        "WHAT ABOUT THE CAPTAIN.", {4, 12, 4, 7, 13}}, {
        "WHAT IS IT THE STAIRS.", {4, 15, 11, 4, 7, 13}}, {
        "WHAT OF THE REPORTS OF THE REBEL FLEET MASSING NEAR SULLUST.", {4, 
         10, 4, 7, 10, 4, 7, 7, 15, 10, 7, 13}}, {
        "TWO YEARS AGO.", {8, 7, 2, 13}}, {
        "PERHAPS A LITTLE REFRESHMENT FIRST.", {2, 4, 1, 12, 12, 13}}, {
        "THEN WHAT CAN I DO FOR YOU.", {2, 4, 12, 11, 15, 10, 11, 13}}, {
        "HAVE THEY QUESTIONED YOU YET SID.", {15, 12, 15, 11, 2, 12, 13}}, {
        "WELL DOES MARCUS HAVE AN ALIBI.", {12, 12, 12, 12, 4, 12, 13}}, {
        "WHO WOULD EVEN KNOW TO DO THIS.", {11, 15, 12, 12, 10, 12, 12, 
         13}}, {"HE WAS HERE.", {11, 15, 2, 13}}, {
        "KEEPING A STIFF UPPER LIP.", {15, 4, 1, 12, 7, 13}}, {
        "YOU KNOW WHAT HAPPENED TO THE TOWER OF BABEL DON'T YOU.", {11, 15, 4,
          15, 10, 4, 7, 10, 12, 12, 2, 11, 13}}, {
        "YOU MEAN BESIDES THE WARRANT OUT ON US FOR BLOWING UP OUR COMMANDING \
OFFICER.", {11, 15, 10, 4, 12, 12, 12, 12, 10, 12, 9, 12, 12, 7, 13}}, {
        "HOW ABOUT YOU TWO HIT THE STRIP AND START KNOCKING SOME HEADS \
TOGETHER.", {12, 12, 11, 8, 12, 4, 7, 3, 12, 12, 12, 15, 2, 13}}, {
        "HOW LONG AGO DID THIS GUY RETIRE.", {12, 12, 12, 12, 12, 12, 15, 
         13}}, {"WHAT HAVE I DONE.", {4, 7, 11, 15, 13}}, {
        "WILL YOU TAKE IT EASY.", {15, 11, 15, 11, 7, 13}}, {
        "WHO THE FUCK ARE YOU DR. JOYCE BROTHERS.", {11, 4, 7, 15, 11, 12, 12,
          12, 13}}, {"IT NEEDS BLOOD.", {11, 15, 7, 13}}, {
        "WHAT HAPPENS WHEN HE DIES.", {4, 15, 2, 11, 15, 13}}, {
        "YOU REALLY THINK YOU'LL BE ABLE TO FOOL A JURY WITH THIS BULLSHIT.", \
{11, 2, 15, 11, 7, 15, 1, 10, 7, 7, 7, 10, 7, 12, 13}}, {
        "IF YA WAS WANTIN' MY HELP WHY DIDN'T YA ASK.", {10, 12, 12, 12, 12, 
         12, 2, 12, 2, 12, 12, 13}}, {
        "HOW DO YOU KNOW THIS.", {12, 12, 11, 15, 7, 13}}, {
        "IS THAT A BEASTLY THING TO SAY.", {15, 4, 4, 1, 7, 10, 12, 13}}, {
        "HEY WHERE'S THE FIRE SISTER.", {12, 12, 4, 7, 7, 13}}, {
        "WHAT'S YOUR AIR READING.", {4, 15, 1, 12, 7, 13}}, {
        "HAVE YOU HEARD THE TERMS OF THE SEVENTEEN POINT AGREEMENT.", {15, 11,
          15, 4, 7, 10, 4, 8, 1, 7, 13}}, {
        "IS THAT AN OFFER.", {15, 4, 4, 7, 13}}, {
        "YOU COULD LIFT ME IN YOUR BIG STRONG ARMS.", {11, 15, 15, 12, 10, 1, 
         12, 1, 7, 13}}, {"THE BLAST.", {4, 7, 13}}, {
        "YOU NEVER HEARD OF PHYSICS EINSTEIN.", {11, 2, 15, 10, 12, 12, 
         13}}, {"CAN YOU DRIVE ME BACK NOW.", {12, 11, 15, 2, 2, 2, 13}}, {
        "TWOMBLEY.", {12, 13}}, {
        "AND WHAT IF I TRANQ HIM KELLY.", {3, 4, 10, 11, 15, 12, 12, 13}}, {
        "WE CANNOT DEFEAT THIS -- PEACE.", {12, 12, 12, 12, 12, 13, 7, 13}}, {
        "ARE YOU OKAY WADE.", {15, 11, 1, 7, 13}}, {
        "HOW ABOUT SOME AMMO.", {12, 12, 12, 12, 13}}, {
        "DOES THAT WORK.", {7, 4, 15, 13}}, {
        "HOW THE HELL DID HE GET AWAY.", {12, 4, 7, 7, 11, 15, 2, 13}}, {
        "EXCUSE ME SKIPPER--- WHAT ABOUT TIME....", {15, 12, 12, 13, 4, 12, 7,
          13}}, {"SEE THAT PATCH OF SHIRT.", {15, 4, 7, 10, 12, 13}}, {
        "DID YOU HAVE A PLEAANT FLIGHT.", {12, 11, 15, 4, 1, 7, 13}}, {
        "DO YOU HAVE YOUR OWN CELL.", {15, 11, 15, 1, 7, 7, 13}}, {
        "YOU SELL MUCH OUT HERE.", {11, 15, 12, 12, 2, 13}}, {
        "WHAT WAS SHE DOING IN YOUR APARTMENT.", {4, 15, 12, 12, 10, 1, 7, 
         13}}, {"YOU'LL GET PICKED UP.  RIGHT.", {11, 15, 15, 15, 9, 13}}, {
        "WHAT IS NOT GOOD TO YOU.", {4, 15, 2, 1, 10, 11, 13}}, {
        "DIDN'T THEY DUFFY.!", {12, 2, 12, 12, 13, 13}}, {
        "NOW WHO ELSE.", {2, 11, 2, 13}}, {
        "WHEN SHE WAS WILLING TO SACRIFICE US ALL.", {2, 12, 12, 12, 10, 15, 
         12, 7, 13}}, {
        "YOU'VE GOT A COMEBACK FOR EVERYTHING DON'T YOU DANNY.", {11, 15, 12, 
         12, 12, 10, 12, 12, 2, 11, 12, 13}}, {
        "GONNA KILL US ALL, IS THAT IT.", {12, 12, 12, 12, 7, 13, 15, 4, 11, 
         13}}, {"NOW I'M WORKING THE DROP CAR.", {2, 11, 15, 15, 4, 7, 7, 
         13}}, {"IS IT BEAUTIFUL.", {15, 11, 7, 13}}, {
        "I'M ASSUMING THAT'S WHAT MADE HIM THE DEAD ONE.", {11, 15, 15, 4, 15,
          4, 12, 12, 4, 1, 8, 13}}, {
        "PERMISSION TO LEAVE SIR.", {7, 10, 15, 7, 13}}, {
        "WHERE IS HIS HOME LEX LUTHOR.", {15, 15, 11, 12, 12, 12, 13}}, {
        "WHY THEY GOTTA MAKE MY NOSE SO BIG.", {2, 12, 15, 12, 15, 12, 12, 12,
          12, 13}}, {
        "THAT MAKES IT ALL THE MORE DIFFICULT \.97\.97 HAVE YOU ANY OTHER \
RELATIVES MARY.", {4, 15, 11, 7, 4, 1, 7, 13, 13, 15, 11, 12, 12, 12, 12, 
         13}}, {"AGRIPPA.", {12, 13}}, {"THE DOLL.", {4, 7, 13}}, {
        "REALLY THINK SO.", {12, 12, 12, 13}}, {
        "DID YOU JUST ASK ME WHAT'S A NEGRO.", {12, 11, 2, 15, 7, 4, 15, 4, 7,
          13}}, {"WHAT DO WE HAVE TO DO.", {4, 12, 12, 12, 10, 12, 13}}, {
        "DID THE RANCHER FUCK YOU.", {12, 4, 7, 7, 11, 13}}, {
        "JUST BECAUSE I DRESS WELL AND LIKE TO DANCE -- IS THERE SOMETHING \
ABOUT FLAMES.", {2, 10, 11, 15, 2, 3, 10, 10, 12, 13, 15, 12, 12, 12, 12, 
         13}}, {"HOW'S OUR DEAL COMING ALONG.", {12, 12, 12, 12, 12, 13}}, {
        "YOU HAVE ANY KIDS.", {11, 15, 12, 12, 13}}, {
        "WHAT DO YOU FEAR.", {4, 12, 11, 7, 13}}, {
        "CAN YOU MAKE IT THAT FAR.", {12, 11, 15, 11, 4, 2, 13}}, {
        "WHAT DYA MEAN.", {4, 12, 7, 13}}, {
        "HOW COULD IT BE A CHARADE.", {12, 12, 12, 15, 4, 7, 13}}, {
        "BUT WHAT IS THE REAL ISSUE HERE.", {12, 4, 15, 4, 1, 7, 2, 13}}, {
        "NOW WHY CAN'T I TELL THE STORY.", {2, 2, 12, 2, 11, 15, 4, 7, 13}}, {
        "A PSYCHIATRIST.", {4, 7, 13}}, {
        "HOW TERRIBLE CAN IT BE.", {12, 12, 12, 12, 15, 13}}, {
        "STAKE YOU.", {15, 11, 13}}, {
        "CAN YOU FIX IT.", {12, 11, 15, 11, 13}}, {
        "MANTAN IT IS POSSIBLE THAT MY HYPHENATED SENTENCES ARE ENTIRELY TOO \
COMPLEX FOR ALL THE INTELLECT CONTAINED IN THAT DIMINUTIVE COCONUT.", {12, 12,
          15, 1, 4, 12, 12, 12, 15, 2, 2, 12, 10, 7, 4, 7, 15, 10, 4, 12, 12, 
         13}}, {"THAT IT ALL SOUNDS MYSTERIOUS.", {4, 11, 7, 15, 1, 13}}, {
        "I DON'T KNOW 14000 A KILO.", {11, 15, 2, 12, 8, 4, 7, 13}}, {
        "YOU SURE YOU'VE LEFT NOTHING OUT.", {11, 15, 11, 15, 12, 12, 12, 
         13}}, {"HAVE YOU PULLED YOURSELF TOGETHER.", {15, 11, 15, 12, 2, 
         13}}, {"DON'T YOU REMEMBER.", {7, 2, 11, 15, 13}}, {
        "BOYS.", {7, 13}}, {
        "WHERE'D YOU GET THEM.", {15, 12, 11, 15, 7, 13}}, {
        "WHAT IS THE POINT IN THAT.", {4, 15, 4, 1, 10, 4, 13}}, {
        "OH GOD WHY.", {7, 7, 2, 13}}, {"GOING NORTH.", {1, 12, 13}}, {
        "YOU TWO ARE GONNA HELP ME TAME THE WILD BEAST.", {11, 8, 15, 12, 12, 
         12, 12, 12, 4, 1, 7, 13}}, {
        "BUT LOOK -- AN EMPTY TOMB.", {12, 12, 13, 4, 12, 7, 13}}, {
        "DOESN'T THE DREAM MASTER WORK FOR YOU ANYMORE.", {7, 2, 4, 7, 7, 15, 
         10, 11, 2, 13}}, {
        "WHILE YOU'RE WAITING FOR YOUR FRIEND WOULD YOU LIKE TO SEE SOME NEW \
FIGURES I HAVE DOWNSTAIRS.", {10, 11, 15, 12, 10, 1, 7, 15, 11, 10, 10, 15, 
         12, 12, 7, 11, 15, 7, 13}}, {
        "WHERE THE FUCK ARE THEY GOING.", {15, 4, 7, 15, 7, 7, 13}}, {
        "THAT'S THE KIND OF MONEY IT TAKES ISN'T IT.", {4, 15, 4, 7, 10, 7, 
         11, 15, 15, 2, 11, 13}}, {
        "EVERYONE SAYS THIS IS A BIG ACCIDENT.", {7, 15, 12, 15, 4, 12, 12, 
         13}}, {"IS IT YES.", {15, 11, 7, 13}}, {
        "WHERE ARE THEY THEN.", {15, 15, 7, 2, 13}}, {
        "NO ROSE JESUS NO -- DO YOU HAVE ANY CHILDREN WITH ANYONE.", {7, 15, 
         12, 7, 13, 12, 11, 15, 12, 7, 10, 7, 13}}, {
        "DALUTAN! ...'SCUSE ME.", {12, 13, 13, 13, 15, 7, 13}}, {
        "TIRING ISN'T IT.", {15, 15, 2, 11, 13}}, {
        "THIS PACKAGE WHATEVER IT IS DO YOU GIVE IT TO THE CIA.  DO YOU \
REALLY THINK THEY DESERVE IT.", {12, 12, 12, 12, 15, 12, 11, 15, 11, 10, 4, 
         12, 13, 15, 11, 2, 15, 12, 12, 12, 13}}, {
        "WHERE'D THEY COME FROM.", {15, 12, 12, 12, 12, 13}}, {
        "IT'S PAY DAY AIN'T IT.", {11, 15, 7, 7, 7, 2, 11, 13}}, {
        "WHERE ARE YOUR FOLKS.", {15, 15, 1, 7, 13}}, {
        "HONEY'S DEAD.", {7, 7, 13}}, {"YOU'RE POLISH.", {11, 15, 7, 13}}, {
        "WHAT KIND OF FILES.", {4, 12, 10, 12, 13}}, {
        "DO ME.", {12, 12, 13}}, {
        "DON'T YOU KNOW WHAT CAEN'S FAMOUS FOR SARGE.", {7, 2, 11, 15, 4, 12, 
         12, 10, 12, 13}}, {"HOW 'BOUT THIS ONE.", {12, 13, 12, 12, 8, 13}}, {
        "WHAT'S THE OCCASION.", {4, 15, 4, 7, 13}}, {
        "HE'S A GUEST IN MY HOUSE ISN'T HE.", {11, 15, 4, 7, 10, 12, 12, 15, 
         2, 11, 13}}, {
        "YOU'RE NOT GONNA STAY FOR THE ICE CREAM.", {11, 15, 2, 12, 12, 12, 
         10, 4, 7, 7, 13}}, {
        "BOY YOU GUYS ARE REALLY SOMETHING Y'KNOW.", {7, 11, 15, 15, 12, 12, 
         12, 12, 13}}, {
        "WHAT ARE YOU WAITING FOR.", {4, 15, 11, 15, 10, 13}}, {
        "WHAT BUSINESS IS YOU IN JACK.", {4, 12, 15, 11, 10, 12, 13}}, {
        "YOU BURN YOU PINE YOU PERISH.", {11, 15, 11, 15, 11, 15, 13}}, {
        "NOW HOW SMART IS THAT.", {2, 12, 12, 15, 4, 13}}, {
        "EDDIE ARE YOU OKAY.", {12, 15, 11, 1, 13}}, {
        "NOT YET -- GIVE YOU THE CLUE FOR THE BUST IF YOU SHOW ME SOME TRUST \
-- OH YOU'RE A RAPPER HUH.", {12, 12, 13, 15, 11, 4, 7, 10, 4, 7, 10, 11, 15, 
         12, 12, 12, 13, 7, 11, 15, 4, 7, 12, 13}}, {
        "IS THAT A TRICK QUESTION.", {15, 4, 4, 7, 7, 13}}, {
        "WHAT POINT IS THAT.", {4, 1, 15, 4, 13}}, {
        "IT ISN'T RAPE THEN IS IT.", {11, 15, 2, 7, 2, 15, 11, 13}}, {
        "ANY SORT OF ABUSE.", {12, 12, 10, 7, 13}}, {
        "COOPER TRUST ROBBERY.", {12, 12, 12, 13}}, {
        "YOU THINK FOR ONCE WE COULD TALK ABOUT SOMETHING BESIDES \
BASKETBALL.", {11, 15, 10, 2, 1, 12, 12, 12, 12, 10, 7, 13}}, {
        "OR DO YOU THINK YOU CAN FIND THE AIRPORT BY YOURSELF.", {7, 7, 11, 
         15, 11, 12, 12, 4, 12, 12, 12, 13}}, {
        "WHAT DO YOU REMEMBER ABOUT THAT -- DUMPER.", {4, 12, 11, 15, 10, 4, 
         13, 7, 13}}, {
        "HAVE A SNIFF OF THIS WHY DON'T YOU.", {15, 4, 7, 10, 12, 2, 12, 2, 
         11, 13}}, {"PIMPS.", {7, 13}}, {
        "HOW OLD. ...WHAT.", {12, 12, 13, 13, 13}}, {
        "YOU GOT SOMETHIN' AGAINST THE CAP'N.", {11, 15, 12, 12, 4, 7, 13}}, {
        "WHY'D YOU DO THAT.", {2, 12, 11, 15, 4, 13}}, {
        "YOU HAVE SOMETHING DR. WEIR.", {11, 15, 12, 12}}, {
        "YOU THINK I'M SILLY DON'T YOU.", {11, 15, 11, 15, 1, 7, 2, 11, 
         13}}, {"WHAT DO MY EYES SEE.", {4, 12, 12, 12, 15, 13}}, {
        "BUT WHAT BECAME OF YOUR LAMB.", {12, 4, 15, 10, 1, 7, 13}}, {
        "WHAT'S HERE.", {4, 15, 2, 13}}, {
        "IS DETECTIVE GORDON GOING TO BE AT YOUR HOUSE.", {15, 12, 12, 12, 10,
          15, 10, 1, 12, 13}}, {"WHAT HAPPENS HERE.", {4, 15, 2, 13}}, {
        "WHY DON'T YOU HAVE MORE TIME.", {2, 12, 2, 11, 15, 1, 7, 13}}, {
        "-- DO YOU WANNA CUP.", {13, 7, 11, 15, 12, 12, 13}}, {
        "HUH...", {12, 13}}, {
        "NOW DARLIN' WHAT HAS THE SOUTH GOT TO DO WITH THIS.", {12, 12, 4, 15,
          4, 1, 12, 10, 12, 10, 7, 13}}, {
        "UH YEAH COOP I'M STILL HERE. ...DO YOU COPY.", {12, 12, 12, 11, 15, 
         2, 2, 13, 13}}, {"SO...THE STATION IS EMPTY.", {12, 13}}, {
        "HAVE THEY LOCATED MY DAUGHTER YET.", {15, 12, 12, 12, 12, 12, 13}}, {
        "MAY I SPEAK FREELY.", {12, 11, 15, 2, 13}}, {
        "JASON WHAT HAVE YOU GOTTEN US INTO.", {12, 4, 12, 11, 15, 12, 12, 
         13}}, {"NIGHTCAP.", {7, 13}}, {
        "WHAT HAPPEND TO YOU.", {4, 12, 10, 11, 13}}, {
        "ON THE DAY OF THE MURDERS  WHAT DID THE DEFENDANT REQUEST.", {10, 4, 
         7, 10, 4, 7, 4, 15, 4, 7, 7, 13}}, {
        "ARE YOU DEAF TOO.", {15, 11, 1, 7, 13}}, {
        "HOW COME YOU TOOK SO MUCH INTEREST IN HER DR. DARLING.", {12, 12, 11,
          15, 12, 12, 7, 10, 12, 12, 12, 13}}, {
        "THEN WHAT ARE YOU DOING HERE.", {2, 4, 15, 11, 15, 2, 13}}, {
        "LONG ENOUGH FOR YOU TO PRETTY MUCH READ ME LIKE A BOOK RIGHT.", {12, 
         12, 10, 11, 10, 12, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "SO WHAT DEAD-END STREET DID YOU AND SHAWNEE HIT.", {12, 4, 1, 12, 12,
          11, 3, 12, 12, 13}}, {
        "WANT TO REGISTER PLEASE.", {1, 10, 12, 12, 13}}, {
        "FLEA.", {7, 13}}, {
        "IF SHE HAD WHAT REASON WOULD SHE HAVE FOR NOT CALLING YOU.", {10, 12,
          12, 4, 12, 12, 12, 12, 10, 12, 12, 11, 13}}, {
        "YOU'RE GOING TO GET YOURSELF UP AND GO OUT.", {11, 15, 1, 10, 15, 1, 
         7, 3, 7, 7, 13}}, {
        "ARE YOU TWO ALL RIGHT.", {15, 11, 8, 7, 7, 13}}, {
        "WHAT SIR.", {4, 7, 13}}, {
        "IS THAT A GOOD SIGN DOCTOR.", {15, 4, 4, 1, 7, 7, 13}}, {
        "WHERE'S THE HANDLE.", {7, 4, 7, 13}}, {
        "BUT WHAT ARE YOU DOING MIXED UP IN ALL THIS.", {12, 4, 15, 11, 15, 
         15, 9, 10, 7, 7, 13}}, {
        "NOW...WHEN DO I GET A TASTE.", {2, 13, 13}}, {
        "YOU WROTE IT DIDN'T YOU.", {11, 15, 11, 15, 2, 11, 13}}, {
        "MARK ARE YOU OKAY.", {12, 15, 11, 1, 13}}, {
        "IS IT TRUE THE MOST YOU'VE EVER MADE IN A PRIZEFIGHT IS FIVE HUNDRED \
DOLLARS.", {15, 11, 1, 4, 1, 11, 15, 2, 15, 10, 4, 12, 15, 8, 15, 12, 13}}, {
        "HOW LONG THEY BEEN LIVIN' HERE.", {12, 12, 12, 12, 12, 2, 13}}, {
        "DOES THAT SCARE YOU.", {7, 4, 15, 11, 13}}, {
        "BAUMGARTNER SOUND IRISH TO YOU FUCK FACE.", {12, 12, 12, 10, 11, 15, 
         7, 13}}, {
        "WHY DIDN'T YOU TELL US ALL THIS IN THE FIRST PLACE.", {2, 12, 2, 11, 
         15, 12, 7, 15, 10, 4, 12, 7, 13}}, {"WE'RE IN.", {12, 12, 10, 13}}, {
        "NO SIR-- PRIVATE JOHNSON ARE YOU UNHAPPY IN THE ARMY.", {7, 7, 13, 
         12, 12, 15, 11, 1, 10, 4, 7, 13}}, {
        "YOU MEAN YOU'VE ACTUALLY BEGUN SOME.", {11, 15, 11, 15, 12, 12, 12, 
         13}}, {"DON'T YOU REALIZE YOUR WORDS COULD BE CONSIDERED \
HERETICAL.", {7, 2, 11, 15, 1, 7, 15, 15, 15, 1, 13}}, {
        "HOW DO I GET IN TOUCH WITH YOU.", {12, 12, 11, 15, 10, 7, 10, 11, 
         13}}, {"IS YOUR FAMILY IN THE APPLE BUSINESS TOO.", {15, 1, 7, 10, 4,
          12, 12, 12, 13}}, {"YOU'RE WHAT.!", {11, 15, 4, 13}}, {
        "BUT IF THEY <U>DO</U>.", {12, 10, 12, 12, 12, 12, 13}}, {
        "YES THEY DO, THEY DO, BUT I'LL MAKE MY DREAMS COME TRUE, YOU SEE.", {
         12, 12, 12, 13, 12, 12, 13, 12, 11, 15, 15, 7, 7, 15, 1, 13, 11, 15, 
         13}}, {"YELLO.", {12, 13}}, {
        "THAT REALLY HAPPENED.", {4, 1, 7, 13}}, {
        "SHE'S ALIVE.", {12, 12, 13}}, {
        "YOU WANT TO HAVE KIDS WITH HIM.", {11, 15, 10, 12, 12, 10, 12, 
         13}}, {"WE FINISHED THE COURSE AND CAME HERE THEN HEARD AN EXPLOSION \
--  WHERE'S PIKE.", {12, 12, 4, 12, 3, 12, 2, 2, 15, 4, 12, 13, 15, 12, 
         13}}, {"CAN I SEE YOUR SECURITY BADGES.", {12, 11, 15, 1, 7, 7, 
         13}}, {"IS IT GASSED UP.", {15, 11, 15, 9, 13}}, {
        "WHAT ABOUT A DRINK ON THE WAY HOME.", {4, 10, 4, 7, 10, 4, 12, 12, 
         13}}, {"YOU WOKE ME UP TO TELL ME THAT.", {11, 15, 12, 9, 10, 12, 12,
          4, 13}}, {"OH YEAH HOW.", {7, 7, 7, 13}}, {
        "DON'T YOU CARE WHAT THE PEOPLE WILL SAY.", {7, 2, 11, 12, 4, 4, 12, 
         15, 15, 13}}, {
        "IN VIEW OF YOUR INDECISION WHY NOT RELY ON THEIR ADVICE AND JUDGMENT \
AS WELL AS MINE.", {10, 12, 10, 1, 7, 2, 12, 12, 12, 12, 12, 3, 12, 12, 12, 
         12, 12, 13}}, {"YOU A SENIOR.", {11, 4, 1, 13}}, {
        "HOW DO WE DO THIS THEN.", {12, 12, 12, 12, 12, 2, 13}}, {
        "ALL IT TAKES IS ONE SECOND.", {7, 11, 15, 15, 8, 7, 13}}, {
        "DID YOU CALL THE COPS.", {12, 11, 1, 4, 7, 13}}, {
        "FOUR DOOR.", {8, 7, 13}}, {
        "WHATTA YOU GET OUTTA THIS. ...I'M DOIN' IT FOR A FRIEND.", {12, 11, 
         15, 1, 7, 13, 13, 11, 15, 7, 13, 11, 10, 4, 7, 13}}, {
        "SO ARE YOU LIKE GONNA POLISH OUR NOBS OR WHAT.", {12, 15, 11, 10, 12,
          12, 12, 12, 12, 7, 4, 13}}, {"YES CAPTAIN.", {2, 7, 13}}, {
        "THEY DON'T.", {12, 12, 2, 13}}, {
        "I'M NOT SURE I HEAR A QUESTION IN THERE.", {11, 15, 2, 1, 11, 15, 4, 
         7, 10, 7, 13}}, {"WHERE'D YOU GET IT.", {15, 12, 11, 15, 11, 13}}, {
        "MAKING A LOT OF MONEY HUH.", {15, 4, 7, 10, 7, 12, 13}}, {
        "MUFFY -- COFFEE.", {12, 13, 7, 13}}, {
        "BUSY WHEN YOU WERE GONE LAST YEAR -- WHERE WERE YOU.", {1, 2, 11, 15,
          12, 12, 12, 13, 12, 15, 11, 13}}, {
        "I'II GO....IS IT...BACK HERE.", {11, 13, 8, 7, 13}}, {
        "THEN WHY CAN'T I GO IN THERE.", {2, 2, 12, 2, 11, 15, 10, 7, 13}}, {
        "DID YOU MAKE THOSE INQUIRIES WE SPOKE ABOUT. ...AS I SAID IT'S ONLY \
A PHYSICAL PROBLEM...", {12, 11, 15, 4, 12, 12, 12, 12, 13, 13, 10, 11, 15, 
         11, 15, 12, 12, 12, 7, 13}}, {
        "WE CHANGE THE SCAM.", {12, 12, 4, 7, 13}}, {
        "YOU THINK MAGRUDER WANTS TO HANG BESIDE ME.", {11, 15, 12, 12, 10, 
         15, 10, 7, 13}}, {"MR. PIZZA.", {12, 12, 13}}, {
        "YOU DON'T KNOW ANY WAY YOU'LL TRUST ME.", {11, 15, 2, 12, 12, 12, 11,
          15, 7, 7, 13}}, {
        "IT'S A ZOO BACK THERE -- IS THAT WHY YOU DID IT.", {11, 15, 4, 7, 2, 
         15, 13, 15, 4, 2, 11, 15, 11, 13}}, {
        "CAN YOU CONFIRM VISUALLY OR JUST RADAR.", {12, 11, 15, 2, 7, 2, 7, 
         13}}, {"IF HIS FRIENDS DON'T HELP HIM WHO IS GOING TO HELP HIM.", {
         10, 11, 7, 15, 2, 15, 12, 11, 15, 12, 10, 15, 7, 13}}, {
        "WHY DOES IT ALL MEAN SO MUCH TO YOU.", {2, 15, 11, 7, 7, 2, 12, 10, 
         11, 13}}, {"THIS IS -- WHAT.", {12, 15, 13, 4, 13}}, {
        "YOU STILL WANT TO GO TO ASGAARD.", {11, 2, 15, 10, 12, 10, 12, 
         13}}, {"WHAT TIME ARE WE SUPPOSED TO GET TO THE HOTEL.", {4, 12, 15, 
         1, 1, 10, 15, 10, 4, 7, 13}}, {
        "ROSE WHO WERE THOSE SCOUNDRELS IN BIRMINGHAM.", {12, 11, 15, 4, 12, 
         10, 12, 13}}, {
        "JUST WHAT ARE YOU UP TO.", {2, 4, 15, 11, 9, 10, 13}}, {
        "LLOYD HONEY JUST COME HOME OKAY.", {12, 12, 2, 15, 12, 12, 13}}, {
        "CONINUED WELL WHAT IS IT.", {12, 12, 4, 15, 11, 13}}, {
        "HOW IS IT YOU COME TO BE HERE.", {12, 15, 11, 11, 15, 10, 15, 2, 
         13}}, {"WILL YOU SHUT UP!.!!", {15, 11, 15, 9, 13, 13, 13}}, {
        "WHAT ABOUT MARGO WEST.", {4, 12, 12, 12, 13}}, {
        "YOU CAN SEE WHY IT'S SENSITIVE.", {11, 15, 15, 2, 11, 15, 12, 13}}, {
        "DID YA WIN.", {12, 12, 12, 13}}, {"BANK.", {12, 13}}, {
        "DO YOU HAVE THE SUSPECT IN CUSTODY.", {15, 11, 15, 4, 1, 10, 7, 
         13}}, {"WORK RELATED OR OTHERWISE.", {15, 12, 7, 12, 13}}, {
        "SO THAT'S ALL YOU DO....", {12, 4, 15, 7, 11, 15, 13}}, {
        "MORNING AFTER. ...I'M AT LEAST HALF A BUM.", {15, 7, 13, 13, 11, 15, 
         10, 12, 12, 12, 12, 13}}, {
        "YOU DON'T WONDER THAT.", {11, 15, 2, 12, 4, 13}}, {
        "WHAT MAKES YOU THINK YOU CAN ORDER ME AROUND.", {4, 15, 11, 15, 11, 
         12, 12, 12, 12, 13}}, {
        "WHY ADD TO YOUR MISERY BY CONFESSING TO MURDER.", {2, 12, 10, 1, 7, 
         10, 15, 10, 7, 13}}, {
        "WHY DIDN'T YOU CALL IN FOR BACKUP INSTEAD OF MAKIN' A GRANDSTAND \
PLAY.", {2, 12, 2, 11, 1, 10, 10, 7, 2, 10, 12, 4, 7, 7, 13}}, {
        "AND WHEN THE OTHER RABBITS HEAR OF FIVER'S VISION DO THEY BELIEVE \
HIM.", {3, 2, 4, 1, 7, 15, 10, 12, 12, 12, 12, 12, 12, 13}}, {
        "ME I'M KINDA AGGRAVATED. ...FINE. ...HOW'S THE TURTLE FOOD THIS \
WEEK.", {7, 8, 15, 12, 12, 13, 13, 13}}, {
        "ON WHAT GROUNDS.", {10, 4, 7, 13}}, {
        "HOW ABOUT THIS CHILD.", {12, 12, 12, 7, 13}}, {
        "HOW CAN THEY KNOW ANY OF THAT.", {12, 12, 12, 12, 12, 10, 4, 13}}, {
        "ANYWAY WHAT THE FUCK DO YOU CARE.", {2, 4, 4, 7, 7, 11, 12, 13}}, {
        "WELL THAT'S WHAT YOU THINK ISN'T IT.", {12, 4, 15, 4, 11, 15, 15, 2, 
         11, 13}}, {"ANYBODY SEE MY BOY.", {7, 15, 7, 7, 13}}, {
        "MAY WE PROCEED WITH THE BUSINESS.", {12, 12, 12, 10, 4, 7, 13}}, {
        "THAT BUGS YOU TOO.", {4, 7, 11, 2, 13}}, {
        "WHERE THE FUCK ARE YOU GOING.", {15, 4, 7, 15, 11, 1, 13}}, {
        "WHAT THE FUCK POSSESSED YOU.", {4, 4, 12, 15, 11, 13}}, {
        "SHE IS NOT DEAD.", {12, 15, 12, 12, 13}}, {
        "WHAT GAPS.", {4, 7, 13}}, {
        "Y'KNOW TO MAKE IT SO LONG.", {12, 12, 10, 15, 11, 12, 12, 13}}, {
        "YOU BELIEVE ME DON'T CHA.", {11, 15, 7, 7, 2, 12, 13}}, {
        "YOU LIKE THE CAR.", {11, 10, 4, 7, 13}}, {
        "ROSE ROSE.", {12, 12, 13}}, {
        "WHAT DO YOU WANT TO DO WITH IT.", {4, 12, 11, 15, 10, 12, 10, 11, 
         13}}, {"I DON'T KNOW YOU THINK EDDIE WILL GIVE ME HIS AUTOGRAPH.", {
         11, 15, 2, 12, 11, 15, 12, 15, 15, 7, 11, 7, 13}}, {
        "WHAT TERRIBLE THING IN CAVE SPRINGS.", {4, 1, 7, 10, 12, 12, 13}}, {
        "HOW'D IT GO IN THERE.", {12, 12, 12, 12, 10, 12, 13}}, {
        "A MAN OR A MOUSE.", {4, 7, 7, 7, 7, 13}}, {
        "IS SHE AROUND.", {15, 12, 12, 13}}, {
        "JACK'S PRETTY TOUGH ON YOU ISN'T HE.", {7, 2, 1, 10, 11, 15, 2, 11, 
         13}}, {"AND DO WE HAVE ANY OF THAT BREAKFAST TEA AROUND HERE.", {3, 
         12, 12, 12, 12, 10, 4, 7, 7, 10, 2, 13}}, {
        "YOU MEAN RAY DUNBAR.", {11, 15, 12, 12, 13}}, {
        "WHAT VARIABLES.", {4, 7, 13}}, {
        "WHERE ARE MY GODDAMN BOOKS.", {15, 15, 7, 1, 7, 13}}, {
        "OH -- WELL I THOUGHT HE ONCE MENTIONED -- WHY WOULD YOU SUPPOSE \
SO.", {7, 13, 7, 11, 15, 11, 2, 15, 13, 2, 12, 11, 15, 2, 13}}, {
        "WHAT ARE YOU NUTS.", {4, 15, 11, 7, 13}}, {
        "THAT THE BIG PLAN.", {4, 4, 12, 7, 13}}, {"A LITTLE.", {4, 7, 13}}, {
        "WHAT'S TO EAT.", {4, 15, 10, 15, 13}}, {
        "THEY WILL SEND A NURSE SOMEONE WHO CAN TAKE CARE OF ALL OF THAT FOR \
YOU -- I JUST I JUST -- I JUST -- I'M JUST IN A FUCKING STATE I KNOW HE'S \
GOING AND IT'S LIKE I DON'T KNOW HOW -- JUST TELL ME <U>PRACTICAL</U> THINGS \
-- WHAT THE FUCK DO I DO WITH HIS BODY.", {12, 15, 15, 4, 7, 7, 11, 12, 15, 
         12, 10, 7, 10, 4, 10, 11, 13, 11, 2, 11, 2, 13, 11, 2, 13, 11, 15, 2,
          10, 4, 1, 7, 11, 15, 11, 15, 1, 3, 11, 15, 10, 11, 15, 2, 12, 12, 
         13, 2, 15, 7, 12, 12, 12, 12, 13, 4, 4, 7, 7, 11, 15, 10, 11, 7, 
         13}}, {"YOU KNOW HOW LONG IT'S BEEN SINCE I WAS BEHIND THE WHEEL.", {
         11, 15, 12, 12, 12, 12, 10, 11, 15, 10, 4, 7, 13}}, {
        "ANY OTHER VICES.", {12, 12, 7, 13}}, {
        "WHAT BANK ARE YOU WITH.", {4, 12, 15, 11, 10, 13}}, {
        "MAYBE WE'VE BEEN PRETTY DUMB-- NOT TOO HARD IS IT.", {2, 12, 12, 12, 
         2, 1, 13, 2, 2, 1, 15, 11, 13}}, {
        "NO DID HE TELL YOU ABOUT IT.", {4, 12, 11, 15, 11, 10, 11, 13}}, {
        "YOU WANNA GO HOME.", {11, 15, 12, 12, 12, 13}}, {
        "ARE YOU SURE YOU EVEN PACKED IT.", {15, 11, 15, 11, 2, 15, 11, 
         13}}, {"WHAT THE HELL ARE YOU DOIN' IN THERE. ...", {4, 4, 7, 15, 11,
          7, 13, 10, 12, 13, 13}}, {
        "DO YOU HAVE ANYTHING DEROGATORY TO SAY ABOUT THE CHAMPION.", {15, 11,
          15, 12, 12, 10, 12, 12, 4, 7, 13}}, {
        "DON'T WANNA GET YOUR DADDY IN HOT WATER DO YOU.", {7, 2, 12, 12, 15, 
         1, 12, 10, 12, 12, 12, 11, 13}}, {
        "WOULD THEY BURN.", {12, 12, 12, 13}}, {
        "WHEN *DOESN'T* HE HAVE BRONCHITIS.", {2, 14, 15, 2, 14, 11, 15, 7, 
         13}}, {"WHY THE CROSSOVER.", {2, 4, 7, 13}}, {
        "CRYSTALLIZED. ...HOW'S THE CLIENT.", {12, 13, 13, 13}}, {
        "SO WHAT ARE YOU SEEING.", {12, 4, 15, 11, 15, 13}}, {
        "WHERE'RE YOU HIT.", {15, 7, 11, 15, 13}}, {
        "YOU WANT TO GET INTO A FINGER POINTING CONTEST ABOUT CHARACTER.", {
         11, 15, 10, 15, 10, 4, 7, 15, 7, 10, 7, 13}}, {
        "WHAT IS SHE DOING <U>NOW</U>.", {4, 15, 12, 12, 12, 12, 12, 13}}, {
        "BUT ARE HURONS DOGS.  ...MAGUA'S WAY IS FALSE.", {12, 15, 12, 7, 13, 
         13, 12, 12, 15, 12, 13}}, {
        "HAD THAT SHAKING THING WHATD'YACALL IT EPOXY.", {12, 4, 12, 7, 15, 
         13, 12, 12, 12, 13}}, {
        "HAS THAT GIRL -- HAS THEA EVER TOLD YOU WHERE SHE COMES FROM.", {15, 
         4, 7, 13, 15, 12, 12, 15, 11, 15, 12, 15, 12, 13}}, {
        "YOU WANNA KILL YOURSELF THAT IT YOU LOOKING TO COMMIT SOME KIND OF \
DIVINE SUICIDE.", {11, 15, 12, 12, 12, 4, 11, 11, 15, 10, 12, 12, 12, 10, 12, 
         12, 13}}, {
        "WHY NOT JUST BUY YOUR BABY A NIGHT LIGHT.", {2, 2, 2, 15, 1, 7, 4, 
         12, 12, 13}}, {
        "YOU BEEN ON PROZAC LONG.", {11, 15, 10, 12, 12, 13}}, {
        "WAS GOD EXPECTING ME TO OFFER FORGIVENESS IN THE FACE OF EVERY \
OFFENSE NO MATTER HOW PAINFUL.", {12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 10, 
         12, 12, 7, 7, 12, 12, 13}}, {
        "IF YOU DIDN'T KILL HIM THEN WHO DID.", {10, 11, 15, 2, 15, 7, 2, 11, 
         15, 13}}, {"AND SHALLOW AS WELL.", {3, 1, 1, 7, 13}}, {
        "WHERE IS ROB.", {15, 15, 12, 13}}, {
        "SATISFIED WITH YOUR CABIN.", {1, 10, 1, 7, 13}}, {
        "HOW HARD DO YOU THINK IT IS TO SELL ONE DRUG DEALER'S DRUGS TO \
ANOTHER DRUG DEALER.", {12, 12, 12, 11, 15, 11, 15, 10, 15, 8, 7, 7, 7, 10, 
         12, 7, 7, 13}}, {
        "RODERICK I'M GONNA HAVE TO CITE YOU FOR A VIOLATION OF STATE LAW-- \
NO SHERIFF I'M JUST-- YOU TELLING ME WHAT TO DO RODERICK.", {12, 11, 15, 12, 
         12, 12, 10, 15, 11, 10, 4, 7, 10, 12, 12, 13, 7, 7, 11, 15, 2, 13, 
         11, 15, 7, 4, 10, 12, 12, 13}}, {
        "SO THAT'S IT JUST FORGET ABOUT US.", {12, 4, 15, 11, 2, 15, 10, 12, 
         13}}, {"SURE YOU'RE OKAY.", {1, 11, 15, 12, 13}}, {
        "JUST TO LEAVE HER LIKE THAT.", {2, 10, 15, 12, 12, 4, 13}}, {
        "WHAT DO HERBS HAVE TO DO WITH IT.", {4, 12, 12, 12, 10, 12, 10, 11, 
         13}}, {"ARE YOU STILL WITH US.", {15, 11, 2, 10, 12, 13}}, {
        "WHAT ABOUT.", {4, 12, 13}}, {
        "WHY PICK ON HIM .", {2, 12, 12, 12, 13}}, {
        "DID YOU KNOW THAT'S WRITTEN IN THE CONSTITUTION OF THE UNITED \
STATES.", {12, 11, 15, 4, 15, 12, 10, 4, 12, 10, 4, 12, 7, 13}}, {
        "WHERE DO YOU WANT TO GO.", {15, 12, 11, 15, 10, 12, 13}}, {
        "YOU'VE HEARD NOTHING ABOUT THE INCIDENT.", {11, 15, 15, 15, 10, 4, 7,
          13}}, {"YOU THINK THEY SOLD ME OUT.", {11, 15, 12, 12, 12, 12, 
         13}}, {"IF GOD HAD INTENDED MAN TO FLY HE WOULD HAVE GIVEN US \
WINGS.", {10, 7, 7, 15, 7, 10, 15, 11, 12, 12, 12, 12, 12, 13}}, {
        "PRETTY RIDICULOUS ISN'T IT.", {2, 1, 15, 2, 11, 13}}, {
        "DO YOU HAVE ANY WITNESSES OR FINGERPRINTS.", {15, 11, 15, 12, 12, 7, 
         7, 13}}, {"HOW'S AUSTIN.", {12, 12, 13}}, {
        "HE SQUEEZED MONEY OUT OF YOU.", {11, 15, 7, 7, 10, 11, 13}}, {
        "SO YOU WERE NEVER A PROSTITUTE.", {12, 11, 15, 7, 4, 7, 13}}, {
        "MAY I BE QUITE FRANK WITH YOU.", {12, 11, 15, 1, 7, 10, 11, 13}}, {
        "WHAT ARE YOU TALKING ABOUT FELLA.", {4, 15, 11, 15, 10, 7, 13}}, {
        "DO THEY HAVE PRESSURE.", {12, 12, 12, 7, 13}}, {
        "TWO OF US DIED IN THE LAST TWO DAYS DOES THAT STRIKE YOU AS \
PARTICULARLY NORMAL.", {8, 10, 12, 15, 10, 4, 7, 8, 7, 15, 4, 15, 11, 1, 7, 7,
          13}}, {"THE UH CYNTHIA BRANSON ESTATE WAS WORTH HOW MUCH.", {4, 12, 
         12, 12, 12, 12, 12, 12, 12, 13}}, {
        "PERHAPS YOUR DEAR WIFE MIGHT CARE TO PROFIT FROM MY INSTRUCTION.", {
         2, 1, 7, 7, 12, 12, 10, 12, 12, 12, 12, 13}}, {
        "SHOULD WE STAY HERE.", {15, 15, 12, 2, 13}}, {
        "YEAH. ...LEELOO.", {2, 13, 13, 12, 13}}, {
        "WHY DO YOU WANT TO GO BACK AFTER ALL THIS.", {2, 12, 11, 1, 10, 15, 
         2, 10, 7, 7, 13}}, {
        "ARE YOU ON ONE OF THOSE CONFERENCE CALLS.", {15, 11, 10, 8, 10, 4, 
         12, 12, 13}}, {"YOU MEAN SOMEBODY ASKED.", {11, 15, 12, 12, 13}}, {
        "THE HOLIDAY INN.", {4, 7, 7, 13}}, {
        "WHAT DO YOU WANT FROM ME COLETTE.", {4, 12, 11, 15, 10, 12, 12, 
         13}}, {"WHAT'S THAT IDIOT DOING NEXT DOOR.", {4, 15, 4, 12, 12, 12, 
         7, 13}}, {
        "NOW WHAT'S WRONG WITH NATURE HUH.", {2, 4, 15, 1, 10, 7, 12, 13}}, {
        "WHAT WOULD YOU CALL IT.", {4, 15, 11, 1, 12, 13}}, {
        "IF YOU FOUND THIS DEED WHY DIDN'T YOU JUST ASK EDDIE.", {10, 11, 15, 
         7, 15, 2, 12, 2, 11, 2, 15, 12, 13}}, {
        "SHE TRIUMPHED OVER EVERYTHING WHAT ARE YOU BLUBBERING ABOUT.", {12, 
         15, 10, 15, 4, 15, 11, 15, 12, 13}}, {
        "SO WHY'RE YOU EVEN CONSIDERING IT.", {12, 2, 7, 11, 2, 15, 11, 
         13}}, {"WHERE DO YOU LIVE JACK.", {15, 12, 11, 15, 7, 13}}, {
        "BUT DID THEY TEACH YOU THIS.", {12, 12, 12, 15, 11, 7, 13}}, {
        "GOT OUT OF MY OTHER COMMITMENT. ...YOU WANNA WORK -- HERE.", {12, 12,
          10, 12, 12, 12, 13, 13, 11, 12, 12, 15, 13, 2, 13}}, {
        "DO YOU LOVE THEM.", {15, 11, 15, 7, 13}}, {
        "WHAT DO WE HAVE.", {4, 12, 12, 12, 13}}, {
        "HE TOLD YOU HE WASN'T COMING RIGHT BACK CAUSE HE WANTED TO QUESTION \
NORMAN BATES' MOTHER RIGHT.", {11, 15, 11, 11, 15, 2, 15, 7, 2, 15, 11, 15, 
         10, 12, 12, 12, 12, 12, 13}}, {
        "WHAT DO YOU LIKE BEST ABOUT YOUR DADDY.", {4, 12, 11, 10, 12, 12, 1, 
         7, 13}}, {"YOU DON'T READ DO YOU.", {11, 15, 2, 15, 7, 11, 13}}, {
        "DON'T TELL ME YOU DON'T KNOW HOW ALL THIS WORKS.", {7, 2, 15, 7, 11, 
         15, 2, 12, 12, 7, 7, 15, 13}}, {
        "MAYBE I SHOULD JUST YA KNOW...TURN TO THE CAMERAS AND SAY DO YOU \
MIND IF WE JUST WORK SOMETHING OUT.", {2, 11, 15, 2, 15, 12, 13, 13}}, {
        "AND I'VE GOT A TEST TOMORROW ON - WELL.", {3, 11, 15, 7, 4, 7, 7, 10,
          13, 7, 13}}, {
        "YOU THINK GOD FORGIVES PEOPLE LIKE ME.", {11, 15, 7, 15, 7, 10, 7, 
         13}}, {"WHAT DIRECTION DOES THE SYSTEM INDICATE.", {4, 12, 15, 4, 12,
          12, 13}}, {
        "ARE THEY ALL IN THE BUSINESS.", {15, 12, 7, 10, 4, 7, 13}}, {
        "WHAT'S THE MATTER WITH BJORN.", {4, 15, 4, 7, 10, 7, 13}}, {
        "BIG-ASS TITTIES.", {1, 7, 13}}, {
        "WHY DO YOU ALWAYS ANSWER A QUESTION WITH A QUESTION.", {2, 12, 11, 1,
          7, 4, 7, 10, 4, 7, 13}}, {
        "WHAT YOU GONNA PUT ME ON YOUR CHRISTMAS CARD LIST.", {4, 11, 12, 12, 
         12, 12, 12, 1, 12, 12, 7, 13}}, {
        "WHO'S LACERDA, HE'S WAITING FOR US IN A ROOM ON THE TWELFTH FLOOR.", \
{11, 15, 12, 13, 11, 15, 12, 10, 12, 10, 4, 7, 10, 4, 1, 7, 13}}, {
        "YOU HAVE NOT MET A MAN WORTHY OF YOUR ATTENTION.", {11, 15, 2, 7, 4, 
         7, 1, 10, 1, 7, 13}}, {
        "HAVE YOU SEEN MY GLASSES.", {15, 11, 15, 12, 12, 13}}, {
        "AND YOU STILL MAINTAIN -- WHAT.", {3, 11, 2, 15, 13, 4, 13}}, {
        "SO HOW IS IT THAT YOU GUYS ARE FLUENT IN RUSSIAN.", {12, 12, 15, 11, 
         4, 11, 15, 15, 1, 10, 12, 13}}, {
        "HAS MR. KESSLER SAID ANYTHING REGARDING THE ATTACK ON THE MOORS.", {
         15, 12, 12, 15, 12, 12, 4, 7, 10, 4, 7, 13}}, {
        "ANGELA.", {12, 13}}, {
        "WAS EVER BOOK CONTAINING SUCH VILE MATTER'S SO FAIRLY BOUND.", {12, 
         12, 12, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "YOU HEAR ME PRIVATE.", {11, 15, 2, 12, 13}}, {
        "DO YOU THINK THAT GUY'S CUTE.", {15, 11, 15, 4, 7, 15, 12, 13}}, {
        "DON'T YOU GAMBLE.", {7, 2, 11, 15, 13}}, {
        "WELL WE PAY FOR THE [.].", {12, 12, 7, 10, 4, 13, 13, 13, 13}}, {
        "MA. DID HE EVER SAY THAT HE FIGURED OUT A WAY TO RECALL A LOST \
MEMORY YEARS AFTER HE BLACKED IT OUT FOR THE FIRST TIME.", {12, 13, 12, 11, 2,
          15, 4, 11, 15, 12, 12, 12, 10, 12, 12, 15, 7, 7, 10, 11, 15, 11, 12,
          10, 4, 12, 12, 13}}, {
        "HOW REAL DOES IT FEEL.", {12, 12, 15, 11, 7, 13}}, {
        "SINCE WHEN IS IT A CRIME TO HAVE A SCALE IN YOUR HOUSE.", {10, 2, 15,
          11, 4, 7, 10, 12, 12, 12, 10, 1, 12, 13}}, {
        "YOU WANT A WAR.", {11, 15, 4, 7, 13}}, {
        "WHO THE FUCK WAS HE ROCCO.", {11, 4, 7, 15, 11, 12, 13}}, {
        "DO YOU WANT ATHOS ARRESTED YOUR MAJESTY.", {15, 11, 1, 7, 15, 1, 7, 
         13}}, {"WHEREFORE STORM YOU SO.", {1, 7, 11, 2, 13}}, {
        "YOU GONNA LEAVE SOME CASH BY THE BED WHEN YOU PASS THROUGH TOWN.", {
         11, 15, 7, 15, 12, 12, 12, 4, 12, 2, 11, 15, 10, 7, 13}}, {
        "DR. RUTH.", {12, 12, 13}}, {
        "FOR FIVE HUNDRED WHAT DO I GET.", {10, 8, 15, 4, 12, 11, 15, 13}}, {
        "AFRAID OF THE HOSPITAL.", {1, 10, 4, 7, 13}}, {
        "WHO CAN WE TRUST.", {11, 12, 12, 12, 13}}, {
        "NON LOQUIS LATINUM.", {12, 12, 12, 13}}, {
        "DID YOU HELP HIM OUT OF A BIND.", {12, 11, 15, 12, 12, 10, 4, 7, 
         13}}, {"YOU KNOW HOW SOMETIMES YOU JUST BECOME THIS PERSONA.", {11, 
         15, 7, 2, 11, 2, 15, 7, 7, 13}}, {
        "WASN'T THAT THE PROBLEM WITH YOU TWO.", {12, 2, 4, 4, 7, 10, 11, 8, 
         13}}, {"YOU ARE FUCKIN' DEAD YOU GO IN THERE TODAY.", {11, 15, 7, 13,
          1, 11, 15, 10, 12, 12, 13}}, {"OUT THE BACK.", {12, 4, 2, 13}}, {
        "AND I AIM TO CURE YA OF YOUR WICKEDNESS.", {3, 11, 7, 10, 15, 12, 10,
          1, 7, 13}}, {
        "AND I USED TO KNOW YOU PERSONAL WAY BACK WHEN.", {3, 11, 15, 10, 12, 
         11, 1, 7, 2, 2, 13}}, {
        "IF YOU DON'T WANT MY FILM - I'LL CALL ANOTHER SHOW.", {10, 11, 15, 2,
          1, 7, 7, 13, 11, 15, 1, 12, 12, 13}}, {
        "SHADOW GETS CRAZY-- IT'S NOT OUR JOB TO GET INVOLVED IN YOUR \
PERSONAL LIFE BUT WHEN IT INTERFERES WITH THE TRAINING HERE-- FROM BACK IN \
HOUSTON.", {12, 15, 12, 13, 11, 15, 12, 12, 12, 10, 15, 1, 10, 1, 1, 7, 12, 2,
          11, 15, 10, 4, 7, 2, 13, 10, 2, 10, 12, 13}}, {
        "GREAT RUNNING INTO YOU, BUDDY.", {1, 15, 10, 11, 13, 12, 13}}, {
        "I HAVEN'T FELT THIS GOOD IN A LONG TIME.", {11, 15, 2, 15, 7, 1, 10, 
         4, 7, 7, 13}}, {"NERVES OF STEEL.", {7, 10, 12, 13}}, {
        "I SHOULDN'T BE OVER HERE AT THIS HOUR.", {11, 15, 2, 15, 10, 2, 10, 
         12, 12, 13}}, {
        "-- THE TRAIN FOR MARSEILLES LEAVES AT FIVE O'CLOCK.", {13, 4, 7, 10, 
         12, 15, 10, 8, 7, 13}}, {
        "-- YOU SAID SO YOURSELF THE FIRM IS LARGE AND POWERFUL.", {13, 11, 
         15, 12, 12, 4, 12, 15, 12, 3, 12, 13}}, {
        "THIS IS NOT MY USUAL FRIDAY NIGHT!", {12, 15, 12, 12, 12, 12, 12, 
         13}}, {"I SENT IT TO MYSELF IN PARIS.", {11, 15, 11, 10, 12, 10, 12, 
         13}}, {"YOU SAID IT CLARK.", {11, 15, 11, 7, 13}}, {
        "I DON'T KNOW WHAT YOU'RE TALKING ABOUT MAN.", {11, 15, 2, 12, 4, 11, 
         15, 15, 10, 7, 13}}, {
        "OUR RENDEZVOUS POINTS AND RADIO FREQS.", {12, 12, 12, 3, 12, 12, 
         13}}, {"YOU STILL GOT A SHITLOAD OF PLOWING TO DO.", {11, 2, 15, 4, 
         12, 10, 12, 10, 12, 13}}, {
        "HE TOLD ME THAT I WAS STUPID BECAUSE MY BOYFRIEND DIDN'T REALLY LOVE \
ME.", {11, 15, 12, 4, 11, 15, 1, 12, 12, 12, 12, 2, 12, 12, 12, 13}}, {
        "BUT I...", {12, 12, 13, 13}}, {
        "THIS SORT OF THING AIN'T MY BAG BABY.", {12, 12, 10, 12, 12, 2, 12, 
         12, 7, 13}}, {
        "WE'RE MAKING A STATEMENT.", {12, 12, 12, 12, 12, 13}}, {
        "I KNOW THIS.", {11, 15, 7, 13}}, {
        "I THINK I SHOULD GO BACK.", {11, 15, 11, 15, 15, 2, 13}}, {
        "NO QUESTION ABOUT IT.", {4, 12, 12, 12, 13}}, {
        "HEY YOU HAVEN'T CHANGED YOUR CLOTHES!", {7, 11, 15, 2, 15, 1, 7, 
         13}}, {"THE RESISTANCE THE ANGER IN YOUR VOICE.", {4, 7, 4, 7, 10, 1,
          7, 13}}, {"NO I'M OKAY FOR NOW.", {7, 11, 15, 1, 10, 2, 13}}, {
        "NO ALL THE GOOD ONES ARE MARRIED.", {4, 7, 4, 1, 7, 15, 15, 13}}, {
        "THE GOVERNMENT DOESN'T HAVE TO TELL PEOPLE TO DO IT.", {4, 12, 12, 2,
          12, 10, 12, 12, 10, 12, 12, 13}}, {
        "THAT'S COOL.", {4, 15, 12, 13}}, {
        "SARAH LAWRENCE IS ON THE OTHER SIDE OF THE COUNTRY.", {12, 12, 15, 
         10, 4, 1, 12, 10, 4, 7, 13}}, {
        "PLEASE ROSE BE A GOOD SPORT.", {15, 12, 15, 4, 1, 7, 13}}, {
        "YOUR FACE WAS DARK AND YOUR HAIR WAS BACKLIT -- I COULD SEE A HALO \
OF FRIZZ -- YOU ASKED ME IF THINGS WERE OKAY BETWEEN NAOMI AND ME.", {1, 7, 
         15, 1, 3, 1, 7, 15, 12, 13, 11, 15, 15, 4, 7, 10, 12, 13, 11, 15, 12,
          10, 12, 15, 1, 12, 12, 3, 12, 13}}, {
        "HER NOT BELIEVING ABOUT YOUR CONDITION..", {12, 12, 12, 12, 1, 7, 13,
          13}}, {"WE SEE YOU NEXT HARVEST.", {12, 15, 11, 1, 7, 13}}, {
        "THEY MAY LOOK GOOD BUT THEY WEIGH TWELVE POUNDS EACH THAT'S \
THIRTY-SIX POUNDS RIGHT THERE.", {12, 12, 12, 12, 12, 12, 15, 8, 12, 12, 4, 
         15, 8, 12, 12, 12, 13}}, {
        "THIS IS ANTHONY ADAMS MR. HENRY.", {12, 15, 12, 12, 12, 12, 13}}, {
        "NO. DADDY SAYS ROSE IS CALM AS LETTUCE.", {7, 13, 12, 12, 15, 15, 7, 
         1, 7, 13}}, {
        "I'M SORRY IT'S JUST THAT..", {11, 15, 12, 12, 2, 4, 13, 13}}, {
        "BUT THEN  --  --  THAT SILLY WAR..", {12, 12, 13, 13, 4, 12, 7, 13, 
         13}}, {"SHE CALLED ME AN OLD LADY HERE TOO!", {12, 15, 1, 4, 1, 7, 2,
          2, 13}}, {
        "FIVE NIGHTS AGO HE FOUND THIS PARATROOPER CAUGHT IN A TREE WITH A \
BROKEN LEG.", {8, 7, 2, 11, 12, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}}, {
        "ALONE.", {2, 13}}, {
        "I AVOIDED CAPTURE USING THE MAK'TAR STEALTH HAZE.", {11, 15, 12, 12, 
         4, 12, 13, 7, 7, 7, 13}}, {"IT IS IT IS!", {11, 15, 11, 15, 13}}, {
        "LEAVE THAT ALONE!", {15, 4, 2, 13}}, {
        "I DON'T WANT TO TALK ABOUT HIM.", {11, 15, 2, 1, 10, 12, 12, 12, 
         13}}, {"GOOD AFTERNOON MR. HARRIS.", {1, 7, 12, 12, 13}}, {
        "JOHN I'D LIKE YOU TO MEET ONE OF THE BRIGHTEST LIGHTS OF THE BRITISH \
STAGE MRS. KENDAL.", {12, 11, 15, 10, 11, 10, 15, 8, 10, 4, 12, 12, 10, 4, 1, 
         7, 12, 12, 13}}, {
        "DON'T KNOW IF I'LL STILL WANT IT.", {7, 2, 12, 10, 11, 15, 2, 1, 11, 
         13}}, {"MADAM SENATOR...", {12, 12, 13}}, {
        "I'LL GET HIM.", {11, 15, 15, 7, 13}}, {
        "AT LEAST TALK TO HIM HEAR WHAT HE HAS TO SAY.", {10, 12, 12, 10, 12, 
         15, 4, 11, 15, 10, 12, 13}}, {
        "LOUELLA PARSONS IS HERE.", {12, 12, 15, 2, 13}}, {
        "THREE MEN AND A WOMEN.", {8, 12, 3, 4, 12, 13}}, {
        "IT'S COSMETIC.", {11, 15, 7, 13}}, {
        "AND YOU WILL GIVE ME OCCASION.", {3, 11, 15, 15, 12, 12, 13}}, {
        "I'M HAPPY.", {11, 15, 12, 13}}, {
        "LET ME OUT OF HERE!", {15, 12, 12, 10, 2, 13}}, {
        "MAYBE HE DIDN'T KNOW EXACTLY WHAT HE WAS GONNA DO BUT HE HAD A \
PRETTY GOOD IDEA.", {2, 11, 15, 2, 12, 12, 4, 11, 15, 12, 12, 12, 12, 11, 15, 
         4, 2, 1, 7, 13}}, {
        "AND BECAUSE HE'S MY FRIEND.", {3, 10, 11, 15, 12, 12, 13}}, {
        "I DON'T KNOW WHY I SAID IT.", {11, 15, 2, 12, 2, 11, 15, 11, 13}}, {
        "HOWE I HATE TO BRING IT UP BUT SHE'S GOT AN AWFUL TOOTHACHE WE'VE \
GOT TO CARRY HER TO THE DENTIST.", {12, 11, 15, 10, 15, 11, 9, 12, 12, 12, 4, 
         12, 12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 13}}, {
        "WHENEVER PEOPLE SAY 'AW THAT DAMONE IS A LOUDMOUTH' -- AND THEY SAY \
THAT A LOT -- I SAY 'YOU JUST DON'T KNOW DAMONE.' WHEN SOMEONE SAYS YOU'RE AN \
IDIOT I TELL THEM 'DAMONE'S NOT AN IDIOT.", {12, 12, 12, 13, 12, 4, 12, 15, 4,
          7, 13, 13, 3, 7, 7, 4, 4, 7, 13, 11, 15, 13, 11, 2, 15, 2, 12, 12, 
         13, 13, 2, 12, 15, 11, 15, 4, 7, 11, 15, 12, 13, 12, 15, 12, 4, 12, 
         13}}, {"GOOD THING HE DOESN'T ALWAYS KNOW WHAT HE'S GOT...", {1, 7, 
         11, 15, 2, 1, 7, 4, 11, 15, 12, 13, 13}}, {
        "IT'S FOR SOMEBODY NAMED THOMPSON BUT IT SAYS 'CARE OF RAOUL DUKE'.", \
{11, 15, 10, 12, 12, 12, 12, 12, 12, 13, 12, 10, 12, 12, 13}}, {
        "THEN TAKE IT FROM HIM.", {2, 15, 11, 10, 7, 13}}, {
        "A WOW FINISH.", {4, 12, 7, 13}}, {"EARS.", {7, 13}}, {
        "TRADE YOUR EXCELLENCY.", {7, 1, 7, 13}}, {
        "JUST ONE COMPADRE...", {2, 8, 7, 13}}, {
        "I'LL TAKE EVERYTHING AT FACE VALUE.", {11, 15, 15, 15, 10, 12, 12, 
         13}}, {"IT'S MUCH SAFER IN THERE SWEETY.", {11, 15, 12, 12, 10, 12, 
         12, 13}}, {
        "WELL DO SOMETHING ABOUT IT.", {12, 12, 12, 12, 12, 13}}, {
        "HOLD ON . . .", {15, 12, 13}}, {
        "LET ME HAVE MANUAL CONTROL PLEASE.", {15, 12, 12, 12, 12, 12, 13}}, {
        "MY AUTHOR.", {12, 12, 13}}, {
        "NOW LISTEN BEFORE YOU DO SOMETHING YOU'LL REALLY REGRET YOU'D BETTER \
STOP AND THINK-- HERE ARE THE SLIPS FOR THE LAUNDRY AND THE CLEANING.", {2, 
         15, 10, 11, 15, 12, 11, 15, 12, 12, 11, 15, 12, 15, 3, 15, 13, 2, 15,
          4, 15, 10, 4, 7, 3, 4, 7, 13}}, {
        "IF THAT'S THE WAY YOU WANT IT.", {10, 4, 15, 4, 7, 11, 15, 11, 
         13}}, {"I SAW IT GOING DOWN.", {11, 15, 11, 12, 12, 13}}, {
        "I'LL LAY YOU FIVE TO ONE YOU WON'T SLEEP.", {11, 15, 7, 11, 8, 10, 8,
          11, 15, 2, 7, 13}}, {
        "THAT WON'T YOUR FAULT.", {4, 1, 2, 1, 7, 13}}, {
        "I LIKED THE HORSE.", {11, 15, 4, 7, 13}}, {
        "LET'S GET A PICTURE.", {7, 15, 4, 7, 13}}, {"UHM..", {12, 13, 13}}, {
        "THEN YOU ARE A FOOL -- A FOOL WHO HAS NEVER LOST A SON.", {2, 11, 15,
          4, 7, 13, 4, 7, 11, 15, 12, 12, 12, 12, 13}}, {
        "NO ONE CAN STOP THEM.", {7, 8, 12, 15, 12, 13}}, {
        "WELL IT SEEMS YOU ARE DETERMINED TO KEEP LASZLO HERE.", {12, 12, 15, 
         11, 15, 15, 10, 15, 12, 2, 13}}, {
        "LIKE HE'S WILD.", {10, 11, 15, 12, 13}}, {
        "HE'S NOT ARMY IT'S NOT OFFICIAL -- HE'S FORMER ARMY AND THE BEST \
I'VE EVER SEEN IN A ROOM.", {11, 15, 12, 12, 12, 12, 12, 13, 11, 15, 1, 7, 3, 
         4, 7, 11, 15, 2, 12, 10, 4, 7, 13}}, {
        "NOTHING REAL OR SUPERNATURAL IS BUSTING THROUGH THIS LEAST NOTHING \
THE SIZE OF THE BEASTS.", {15, 7, 7, 1, 15, 12, 10, 12, 12, 12, 4, 7, 10, 4, 
         7, 13}}, {"I WOULD HANG HIM!", {11, 15, 7, 7, 13}}, {
        "I'M FEELING FINE THIS MORNING.", {11, 15, 15, 12, 12, 12, 13}}, {
        "AND I HADN'T BEEN LIVING MY OWN LIFE.", {3, 11, 15, 2, 12, 12, 12, 
         12, 12, 13}}, {
        "I JUST KNOW HOW YOU GET.", {11, 2, 15, 12, 11, 15, 13}}, {
        "I MEAN IT'S NOT AS IF -- YOU'RE GREAT WITH THE ADVICE CLARK.", {11, 
         15, 11, 15, 2, 1, 10, 13, 11, 15, 1, 10, 4, 12, 12, 13}}, {
        "SCREWIN' SOME POOR SLOB OUT OF HIS RETIREMENT.", {7, 13, 12, 12, 12, 
         12, 10, 11, 7, 13}}, {
        "IT'S ALL WORKING OUT JUST LIKE WE PLANNED.", {11, 15, 7, 15, 12, 2, 
         10, 12, 12, 13}}, {
        "THEY JUST STOOD THERE CONFUSED.", {12, 2, 15, 1, 1, 13}}, {
        "COME ON STACY IT'S YOUR SECTION AND YOUR MAN.", {15, 12, 12, 12, 1, 
         7, 3, 1, 7, 13}}, {"UH..", {12, 13, 13}}, {
        "I HAVE NO LUGGAGE.", {11, 15, 7, 7, 13}}, {
        "I -- I...", {11, 13, 7, 13, 13}}, {
        "I TOLD YOU I'D GET IT.", {11, 15, 11, 11, 15, 15, 11, 13}}, {
        "HAVE A DONUT.", {15, 4, 7, 13}}, {
        "NOBODY WALKS AROUND LIKE THAT.", {7, 15, 10, 12, 4, 13}}, {
        "WELL PERSONALLY MAJOR I WILL TAKE WHAT COMES.", {12, 2, 15, 11, 15, 
         15, 4, 15, 13}}, {
        "YOU DID PICK A REAL STRANGE TIME TO GO AND BE BRAVE ALL ON YOUR \
OWN..", {11, 15, 12, 12, 12, 12, 12, 10, 12, 3, 15, 1, 7, 10, 1, 7, 13, 
         13}}, {"CHARLES I MUST APOLOGIZE AGAIN FOR THE KRONOS MISHAP.", {12, 
         11, 15, 15, 2, 10, 4, 7, 7, 13}}, {
        "I GAVE MY GRIEF TO JESUS CHRIST.", {11, 15, 7, 7, 10, 12, 12, 13}}, {
        "NOW YOU MIGHT BE ONE OF THESE HOLLYWOOD TYPES CHANGE YOUR NAME AND \
ALL THAT BUT PEERLESS DOTHAN IS ON YOUR BIRTH CERTIFICATE.", {2, 11, 15, 15, 
         8, 10, 12, 12, 15, 12, 1, 7, 3, 7, 4, 12, 12, 12, 15, 12, 1, 7, 7, 
         13}}, {"STOP SAYING YOU KNOW WHEN I SAY 'Y'KNOW.' I KNOW YOU KNOW.", \
{15, 12, 11, 15, 2, 11, 15, 13, 12, 12, 13, 13, 11, 15, 11, 15, 13}}, {
        "HE'S NOT A STAG HOUND.", {11, 15, 2, 4, 7, 7, 13}}, {
        "SO IT'S ALL WORKED OUT PERFECTLY..", {12, 12, 7, 15, 12, 2, 13, 
         13}}, {"SOUNDS DELIGHTFUL. ... MEANWHILE I'D LIKE TO PREPARE YOU FOR \
A COLONOSCOPY SO WE CAN TAKE A LOOK INSIDE.", {15, 12, 13, 13}}, {
        "I ASKED IF WE COULD GIVE HIM ANYTHING ELSE.", {11, 15, 10, 12, 12, 
         15, 12, 12, 12, 13}}, {"PAY'S GOOD THOUGH.", {7, 1, 7, 13}}, {
        "DOESN'T MOVE.", {7, 2, 15, 13}}, {
        "IT'S REALLY NICE TO TALK WITH YOU SAM.", {11, 15, 2, 1, 10, 12, 10, 
         11, 12, 13}}, {
        "HOW YOU GOT ME LOCKED UP LIKE A DOG ON A...", {12, 11, 15, 7, 15, 9, 
         10, 4, 7, 10, 7, 13, 13}}, {"TREVES.", {12, 13}}, {
        "I DON'T KNOW HOW IT GOT THIS WAY..", {11, 15, 2, 12, 12, 12, 12, 12, 
         12, 13, 13}}, {
        "IT SEEMED SHE WAS HARMING YOU.", {11, 15, 12, 12, 12, 11, 13}}, {
        "OTHER PICTURES--I DON'T KNOW--IT'S NOTHING I WANT TO LOOK BACK ON.", \
{1, 7, 13, 11, 15, 2, 12, 13, 11, 15, 15, 11, 1, 10, 15, 2, 10, 13}}, {
        "I'LL RISK IT.", {11, 15, 7, 11, 13}}, {
        "I THINK THEY HAVE ANOTHER FELLA THERE TO KEEP IT OFF YOUR CHEST.", {
         11, 15, 12, 12, 12, 12, 12, 10, 15, 11, 7, 1, 7, 13}}, {
        "I'LL GO OUT FOR A SMOKE.", {11, 15, 12, 12, 10, 4, 7, 13}}, {
        "INDIA IS A NEWLY INDEPENDENT NATION.", {12, 15, 4, 2, 1, 7, 13}}, {
        "I CAN'T BELIEVE WHAT A --!", {11, 12, 2, 15, 4, 4, 13, 13}}, {
        "IT COULD BE PARASITES AN INFECTION..", {11, 15, 15, 12, 4, 7, 13, 
         13}}, {"SAYS SHE CAN GET ME IN TO SEE THIS KILLER.", {12, 12, 12, 15,
          7, 10, 10, 15, 7, 7, 13}}, {"SEE YOU.", {15, 11, 13}}, {
        "NO NO!", {7, 7, 13}}, {
        "YOU CAN GO BACK WITH JACK.", {11, 15, 7, 2, 10, 7, 13}}, {
        "WE WONDERED ABOUT THE DISCOLORATION SO HE RAN A SPECTRO.", {12, 15, 
         10, 4, 12, 12, 11, 15, 4, 7, 13}}, {
        "OF COURSE YOU CAN'T!", {10, 12, 11, 12, 2, 13}}, {
        "JUST HOPE.", {2, 7, 13}}, {
        "LONGITUDE 109 -- LET'S GO.", {7, 8, 13, 12, 7, 13}}, {
        "WELL I HAVEN'T HEARD ANYTHING ABOUT THE DISAPPEARANCE OR \
ANYTHING...", {2, 11, 15, 2, 15, 15, 10, 4, 7, 7, 7, 13}}, {
        "TWENTY-FIVE YEARS.", {8, 7, 13}}, {
        "LET ME SEE!", {15, 12, 15, 13}}, {
        "WHY HE COULD OPERATE ON ME ANY OLD TIME AND I WOULDN'T EVEN BE \
SCARED.", {2, 11, 12, 12, 12, 12, 12, 12, 12, 3, 11, 15, 2, 2, 15, 12, 13}}, {
        "THE PACE OF REFORM MUST MEET WITH THE DESIRES OF THE TIBETAN \
PEOPLE.", {4, 7, 10, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}}, {
        "MY PLAN INVOLVES ALL FOUR OF US ACTING TOGETHER.", {12, 7, 15, 7, 8, 
         10, 12, 12, 2, 13}}, {
        "ROSE, YOU'RE VERY SICK.", {7, 13, 11, 15, 2, 1, 13}}, {
        "WHICH IS A WONDERFUL CROOK.", {4, 15, 4, 1, 7, 13}}, {
        "I LOST A WORKER.", {11, 15, 4, 7, 13}}, {
        "SHE SAYS HE COMES BACK IN DREAMS.", {12, 15, 11, 15, 2, 10, 7, 
         13}}, {"THE DANGER.", {4, 7, 13}}, {
        "ABOUT SIX MONTHS AGO SOME PARTS OF BODIES WERE FOUND DOWN BY THE \
RIVER.", {10, 8, 7, 2, 15, 7, 10, 7, 15, 15, 2, 10, 4, 7, 13}}, {
        "THE PERSONALITY INVENTORIES WOULD TRIP HIM UP.", {4, 7, 7, 15, 7, 7, 
         7, 13}}, {
        "IF FIRED UPON TELL OUR FIGHTERS THAT THEY ARE ORDERED TO ENGAGE.", {
         10, 15, 10, 12, 12, 12, 4, 12, 15, 15, 10, 15, 13}}, {
        "IT WORKED!", {11, 15, 13}}, {"JUST MY LUCK.", {2, 7, 7, 13}}, {
        "LECTER DID IT TO AMUSE HIMSELF.", {12, 12, 12, 10, 15, 7, 13}}, {
        "IT'S A STUPID TRADITION.", {11, 15, 4, 1, 7, 13}}, {
        "I'LL GO OUTSIDE AND TAKE A LOOK IN THE GARAGE.", {11, 15, 7, 10, 3, 
         15, 4, 7, 10, 4, 7, 13}}, {
        "SO MUCH FOR NUTSY FAGIN.", {12, 12, 10, 12, 12, 13}}, {
        "SUPPOSE THAT YOU BEAR FIVE OR SIX CHILDREN WITH YOUR \
CHARACTERISTICS.", {15, 4, 11, 15, 8, 7, 8, 7, 10, 1, 7, 13}}, {
        "IT DOES AND IT IS A BETTER LOOKIN' REASON THAN YOU JACK WINTHROP.", {
         11, 12, 3, 11, 15, 4, 1, 7, 13, 12, 12, 11, 12, 12, 13}}, {
        "FUCK OFF FRAT BOY.", {12, 12, 12, 7, 13}}, {
        "IT'S REALLY SOLID THIS TIME OF YEAR.", {11, 15, 1, 1, 7, 15, 10, 7, 
         13}}, {"NO I READ IT ON THE MESSAGE.", {7, 11, 15, 11, 10, 4, 7, 
         13}}, {"WELL SURE..", {12, 12, 13, 13}}, {
        "GIVE MY BLESSING TO THE GIRL.", {15, 12, 12, 10, 4, 7, 13}}, {
        "I FEEL ALL RIGHT TOO.", {11, 15, 7, 7, 7, 13}}, {
        "PROBABLY HE MEANS NO HARM.", {12, 11, 15, 7, 7, 13}}, {
        "SOMEDAY YOU'LL HAVE A SON JUST LIKE YOU JEREMIAH.", {12, 11, 15, 12, 
         12, 12, 2, 10, 11, 12, 13}}, {
        "THESE ARE HIS PEAK HOURS.", {12, 15, 11, 7, 7, 13}}, {
        "QUITE.", {12, 13}}, {"GOOD THING.", {1, 7, 13}}, {
        "HE KNEW WHERE HER ROOM WAS.", {11, 15, 12, 12, 12, 12, 13}}, {
        "JOANNA GO FUCK YOURSELF!", {12, 12, 12, 12, 13}}, {
        "NUMBNESS.", {7, 13}}, {"NO I...", {7, 7, 13, 13}}, {
        "I DO IT 'CAUSE IT WORKS-...", {11, 15, 11, 15, 11, 15, 13, 13}}, {
        "JIM JONES Y'KNOW.", {12, 12, 12, 12, 13}}, {
        "THERE'S NOTHING TO UNDERSTAND.", {7, 12, 10, 12, 13}}, {
        "WHY IT DOES ME GOOD JUST TO SEE HIM SIT THERE ALL SOLEMN AND GO \
POKIN' IN HIS BAG LIKE HE'S GONNA CURE ME WHICH HE DID OF COURSE.", {2, 11, 
         15, 2, 1, 2, 10, 15, 12, 7, 7, 7, 1, 3, 7, 7, 13, 10, 11, 7, 10, 11, 
         15, 12, 12, 12, 12, 4, 11, 15, 10, 12, 13}}, {
        "YOU KNOW THAT SOMETIMES IT'S HARD TO UNDERSTAND GOD'S GREAT PLAN.", {
         11, 15, 4, 2, 11, 15, 1, 10, 12, 12, 1, 7, 13}}, {
        "HEY INSPECTOR I DON'T INTEND TO TAKE THE RAP FOR THIS.", {7, 7, 11, 
         15, 2, 15, 10, 15, 4, 7, 10, 7, 13}}, {
        "YOU UNDERSTAND HOW I FEEL.", {11, 15, 7, 11, 15, 13}}, {
        "HE DOES A LITTLE SPOT WHERE THE BUTTER HAD BEEN.", {11, 15, 4, 12, 
         12, 15, 4, 7, 15, 7, 13}}, {
        "I CAN'T BELIEVE IT'S ALREADY STARTING TO GET DARK SO EARLY.", {11, 
         12, 2, 12, 12, 12, 12, 10, 15, 1, 7, 7, 13}}, {
        "THERE'S NO FIRST ACT.", {7, 7, 12, 12, 13}}, {
        "GOD PARDON SIN WAS THOU WITH ROSALINE!", {7, 7, 7, 15, 12, 10, 12, 
         13}}, {"UNDERSTAND THAT.", {12, 4, 13}}, {
        "LOOK DIFFERENT THAN YOU SOUNDED ON THE PHONE.", {8, 1, 10, 11, 15, 
         10, 4, 7, 13}}, {
        "GEORGE WORK WITH ME I ALWAYS GET A LAUGH WITH THAT ONE.", {12, 15, 
         10, 7, 11, 15, 15, 4, 7, 10, 4, 8, 13}}, {
        "I CAN'T DO THIS.", {11, 12, 2, 12, 12, 13}}, {
        "ONLY BY A DIRECTOR OF THE FIRM.", {2, 10, 4, 7, 10, 4, 7, 13}}, {
        "RICK'S WOULDN'T BE RICK'S WITHOUT THEM.", {12, 12, 2, 15, 12, 6, 12, 
         12, 13}}, {
        "RICK'S GOT AN IMPORTANT ANNOUNCEMENT TO MAKE.", {12, 12, 4, 1, 7, 10,
          15, 13}}, {
        "I SHOULD GO YOU ARE THE BOY ...", {11, 15, 15, 11, 15, 4, 7, 13}}, {
        "THEY COULD CLEAN AROUND THE ARRANGEMENT.", {12, 12, 12, 10, 4, 7, 
         13}}, {"REMEMBER LIKE I SAY I FOUND YOU IN THE ROAD..", {15, 10, 11, 
         15, 11, 15, 11, 10, 4, 7, 13, 13}}, {
        "BUT LOVE ISN'T THE OPERATIVE WORD HERE PEACE IS!", {12, 12, 15, 2, 4,
          7, 7, 2, 15, 15, 13}}, {
        "IT'S A PERSONAL THING.", {11, 15, 4, 1, 7, 13}}, {
        "TEN'S STANDARD.", {8, 7, 13}}, {
        "AND DO NOT TRY TO UNDERSTAND THEM.", {3, 12, 12, 12, 10, 12, 12, 
         13}}, {"IT'S NO TROUBLE.", {11, 15, 7, 7, 13}}, {
        "A 'QUICK FIX'...", {4, 13, 1, 7, 13, 13}}, {
        "GOOD NIGHT!", {1, 7, 13}}, {
        "THEN GO A LITTLE FORWARD IN TIME.", {2, 7, 4, 1, 2, 10, 7, 13}}, {
        "DAMN STRAIGHT!", {1, 7, 13}}, {
        "HE'S DOING VERY WELL.", {11, 15, 15, 2, 2, 13}}, {
        "EXCEPT BACK TO NOWHERESVILLE.", {10, 2, 10, 12, 13}}, {
        "I'M GOING TO BOW OUT ON YOU.", {11, 15, 12, 10, 12, 12, 12, 11, 
         13}}, {"-- SIT DOWN.", {13, 7, 7, 13}}, {
        "COLE DRAGS DEBBIE INTO ONE OF THE THEATERS.", {12, 15, 12, 12, 8, 10,
          4, 7, 13}}, {"THERE IS ONLY ONE BED.", {15, 15, 12, 8, 7, 13}}, {
        "DON'T JERK ME AROUND.", {7, 2, 12, 12, 12, 13}}, {
        "YOU REMEMBER IN SCHOOL WE TALKED ABOUT WORKING TOGETHER.", {11, 15, 
         10, 12, 12, 15, 10, 15, 2, 13}}, {
        "YOU SAID AS LONG AS I DON'T ACT LIKE A FUCKIN' NUT IMPLYING THAT \
I'VE BEEN ACTING LIKE A FUCKIN' NUT.", {11, 15, 1, 7, 10, 11, 15, 2, 12, 12, 
         12, 12, 12, 12, 4, 11, 15, 12, 12, 10, 4, 7, 13, 12, 13}}, {
        "SO HAVE DINNER WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}}, {
        "MAYBE I BETTER ASK AROUND SEE WHAT YOUR PALS THINK.", {2, 11, 15, 12,
          10, 15, 4, 1, 7, 7, 13}}, {
        "QUIT ACTING ALL SQUEEZED OUT.", {12, 12, 7, 15, 12, 13}}, {
        "WE'LL HAVE JUST ONE DRINK THEN WE'LL GO.", {12, 12, 12, 2, 8, 7, 2, 
         15, 12, 12, 13}}, {"YOU AND EVERYBODY..", {11, 3, 7, 13, 13}}, {
        "JUST NOT IN TIME FOR....", {2, 2, 10, 12, 10, 13}}, {
        "CARLOS.", {12, 13}}, {"THIS IS ADAM.", {12, 15, 12, 13}}, {
        "I KNEW WHEN YOU CAME LOOKING FOR THE CHEMICALS.", {11, 15, 2, 11, 15,
          15, 10, 4, 7, 13}}, {"MILLER COME IN...", {12, 12, 10, 13}}, {
        "WHEN HE WAS KILLED.", {2, 11, 15, 15, 13}}, {
        "WE GET MORE ACCIDENTS MORE ROBBERIES MORE RAPES MORE HOMICIDES MORE \
OF EVERYTHING WHEN THERE'S A FULL MOON.", {12, 15, 1, 7, 1, 7, 1, 7, 1, 7, 1, 
         10, 12, 2, 7, 15, 4, 1, 7, 13}}, {
        "YOU SHOULD STICKAROUND SOMETIMES.", {11, 15, 15, 2, 13}}, {
        "FOR ALL THOSE VACATION DAYS YOU GOT COMING.", {10, 7, 4, 12, 12, 11, 
         15, 15, 13}}, {
        "I KNEW HOW PLANES FLEW BUT I WAS STILL A LITTLE NERVOUS.", {11, 15, 
         12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "SHE'S BEEN PREPARING ALL MORNING.", {12, 12, 12, 7, 7, 13}}, {
        "I AM SURE THAT YOU ARE AWARE OF THE HORRIBLE ALLEGATIONS AGAINST JIM \
CUNNINGHAM.", {11, 15, 1, 4, 11, 15, 1, 10, 4, 1, 7, 10, 12, 12, 13}}, {
        "HONOUR AND PROTECT ALL BLACKSMITHS.", {12, 3, 12, 7, 7, 13}}, {
        "THEY'VE GOT A GATLING!", {12, 12, 12, 12, 12, 13}}, {
        "WE MET ONCE OR TWICE.", {12, 7, 2, 7, 2, 13}}, {
        "I'LL NEVER REACH THE HOUSE.", {11, 15, 2, 15, 4, 12, 13}}, {
        "MUSIC!", {7, 13}}, {"VECCHIO.", {12, 13}}, {
        "NO WE GOT PRESSURE FROM CALIFORNIA STATE.", {4, 12, 12, 12, 12, 12, 
         12, 13}}, {"I SAW HIM ON T.V.", {11, 15, 12, 10, 12}}, {
        "THIS IS AN ISOLATED INCIDENT COUNSELOR UNLESS YOU CAN PROVE \
OTHERWISE.", {12, 15, 4, 1, 1, 7, 10, 11, 15, 15, 2, 13}}, {
        "AFTER ALL I GOT STUCK WITH A RAILWAY TICKET.", {10, 7, 11, 15, 1, 10,
          4, 7, 7, 13}}, {"I SMASHED MY CAB.", {11, 15, 12, 12, 13}}, {
        "THAT'S WHAT WE CALL IN THE TRADE AUDITION FREE-FOR- ALLS AND MOST OF \
IT SUCKS.", {4, 15, 4, 12, 12, 10, 4, 7, 7, 7, 13, 7, 3, 1, 10, 11, 15, 
         13}}, {"I'M ALSO GOOD ENOUGH TO GO PRO.", {11, 15, 2, 1, 7, 10, 12, 
         6, 13}}, {
        "SHE'S STRUNG OUT NOW; YOU WON'T FIND HER.", {12, 12, 12, 2, 13, 11, 
         15, 2, 15, 7, 13}}, {
        "COME BACK AND HAVE A BEER!", {15, 2, 3, 15, 4, 7, 13}}, {
        "I WARNED YOU DIGNAN.", {11, 15, 11, 12, 13}}, {
        "'CAUSE THAT'S THE WAY GUYS ARE -- THEY LAUGH WHEN YA TALK DIRTY.", {
         12, 4, 15, 4, 7, 15, 15, 13, 12, 12, 2, 12, 12, 12, 13}}, {
        "I DOUBT YOU EVEN REMEMBER OUTPOST 1.0 -- YOU'D HAVE TO START \
PRACTICALLY FROM SCRATCH.", {11, 15, 11, 2, 15, 7, 8, 13, 11, 15, 12, 10, 12, 
         12, 12, 7, 13}}, {
        "HE SAYS HE'S GOTTA TALK TO YOU TONIGHT.", {11, 15, 11, 15, 12, 12, 
         12, 10, 11, 2, 13}}, {"PLEASE BABY...", {15, 7, 13}}, {
        "I WAS HOPING TO STOP THERE FOR LUNCH.", {11, 15, 12, 10, 15, 12, 10, 
         12, 13}}, {
        "BUT NOW HE HAS COME TO LEAD HIS NATION.", {12, 12, 11, 15, 12, 10, 
         12, 11, 7, 13}}, {
        "YOU DON'T NEED TO BE NERVOUS AROUND ME THOUGH.", {11, 15, 2, 15, 10, 
         15, 12, 10, 12, 12, 13}}, {
        "WELL SHE DOESN'T COMPLAIN MUCH.", {12, 12, 15, 2, 12, 12, 13}}, {
        "I WISH YOU'D GIVE ME A LITTLE MORE OF A CHANCE.", {11, 15, 11, 15, 
         15, 7, 4, 12, 1, 10, 4, 7, 13}}, {
        "'GUESS WE'LL FIND OUT WHAT ELSE WE HAVE TO TALK ABOUT.", {13, 12, 12,
          12, 12, 12, 4, 2, 15, 12, 10, 12, 12, 13}}, {
        "BUDDY DEEDS.", {7, 7, 13}}, {
        "I KNEW WHO POISONED ME IN THE MAZE.", {11, 15, 11, 15, 12, 10, 4, 7, 
         13}}, {"THAT SURE IS A THOUGHT.", {4, 1, 15, 4, 7, 13}}, {
        "WRITING.", {12, 13}}, {
        "AND THAT'S NOT FUCKING GOOD ENOUGH.", {3, 4, 15, 12, 12, 12, 12, 
         13}}, {"HE'S COMATOSE.", {11, 15, 12, 13}}, {
        "YOU SAID IT WAS A STRANGE WORLD.", {11, 15, 11, 15, 4, 1, 7, 13}}, {
        "VERY GOOD JOE.", {2, 1, 7, 13}}, {"ST. PETERSBURG.", {12}}, {
        "IN OTHER WORDS SCURVY.", {10, 1, 7, 7, 13}}, {
        "BUT MAYBE SOMEDAY.", {12, 12, 12, 13}}, {
        "IF YOU'LL EXCUSE ME JUST A MOMENT -- BARNARD THOMAS MANAGER OF THE \
HOTEL.", {10, 11, 15, 12, 12, 2, 4, 7, 13, 12, 12, 7, 10, 4, 7, 13}}, {
        "I SAW FRANCE AND AFRICA HALF OF SOUTH AMERICA.", {11, 15, 12, 3, 12, 
         12, 10, 12, 12, 13}}, {
        "HE WAS IN ON THE SAME JOB.", {11, 15, 10, 12, 4, 12, 7, 13}}, {
        "YOU'RE THE ONE WHO KEPT SAYING RAM HIM.", {11, 15, 4, 8, 11, 15, 15, 
         12, 12, 13}}, {
        "GET CHECKED IN CLEANED UP...", {15, 12, 10, 12, 7, 13}}, {
        "REPAIRING THE ANTENNA IS A PRETTY DANGEROUS OPERATION.", {15, 4, 7, 
         15, 4, 2, 1, 7, 13}}, {"DIRECTED BY LASER.", {15, 10, 7, 13}}, {
        "THE BOURBON.", {4, 7, 13}}, {
        "BE GRATEFUL FOR SMALL MERCIES.", {15, 12, 10, 12, 12, 13}}, {
        "THE GREATEST FIND IN HISTORY..CAN YOU IMAGINE THE IMPLICATIONS.", {4,
          12, 12, 10, 12, 13, 13}}, {
        "MR. HARRIS DOESN'T CHECK OUT UNTIL TOMORROW.", {12, 12, 15, 2, 15, 
         12, 12, 12, 13}}, {
        "SHOW SOME PRIDE HAMILTON.", {15, 12, 12, 12, 13}}, {
        "JUST REACH ON IN.", {2, 15, 12, 10, 13}}, {
        "I KNOW IT MAN.", {11, 15, 11, 7, 13}}, {
        "READ MY LIPS: ZIMMERMANN OR NOTHING.", {15, 7, 7, 13, 12, 7, 7, 
         13}}, {"FIVE SEVEN EIGHT DOLLARS.", {8, 8, 8, 12, 13}}, {
        "YOU SAY SHE WAS BEAT ON.", {11, 15, 12, 12, 7, 10, 13}}, {
        "THE SEMESTER'S ALMOST OVER SO YOU BETTER HURRY.", {4, 7, 12, 10, 12, 
         11, 1, 7, 13}}, {
        "BOBBIE AND PHOEBE ARE THROWING ME A SHOWER.", {12, 3, 12, 15, 15, 7, 
         7, 7, 13}}, {
        "DAD I'M ABOUT TO HAVE A KID OF MY OWN HERE.", {7, 8, 15, 10, 10, 12, 
         12, 12, 10, 12, 12, 2, 13}}, {
        "THEY'VE ONLY JUST BEGUN ...", {12, 12, 12, 2, 15, 13}}, {
        "QUIT ACTING LIKE SOME RETARD OR I'LL CALL YOUR MOTHER AND TELL HER \
WHAT A NAUGHTY LITTLE SHIT YOU'VE BEEN.", {12, 12, 12, 12, 15, 7, 11, 15, 1, 
         1, 7, 3, 7, 7, 4, 4, 12, 12, 12, 11, 15, 12, 13}}, {
        "NEWT TIME THEN CAN WALK RIGHT UP AND KNOCK.", {12, 12, 12, 12, 12, 
         12, 7, 3, 7, 13}}, {
        "MY PLATELETS LOOK GOOD TOO.", {7, 7, 15, 1, 7, 13}}, {
        "WHAT YOU ARE SAYING IS YOU DON'T KNOW WHAT THIS..THING..IS.", {4, 11,
          15, 15, 15, 11, 7, 2, 12, 4, 12, 13, 13}}, {
        "TOO GOD DAMN MUCH HEART.", {2, 12, 12, 12, 7, 13}}, {
        "I SEEM TO HAVE TOUCHED A NERVE.", {11, 15, 10, 12, 15, 4, 7, 13}}, {
        "EVERYTHING ELSE IS CONVERSATION..", {15, 2, 15, 7, 13, 13}}, {
        "WELL SIR...", {12, 7, 13}}, {
        "THERE MUST HAVE BEEN SOMEBODY.", {12, 12, 12, 12, 12, 13}}, {
        "I BOUGHT IT FOR HIM -- ALL THE STUFF HE WAS USING IT WAS IN HIS \
CONTRACT.", {11, 15, 11, 10, 7, 13, 7, 4, 7, 11, 15, 12, 12, 12, 10, 11, 7, 
         13}}, {"MIS-TER KRAMER IT'S...  ...ALMOST FOUR NOW.", {12, 12, 12, 
         13, 13, 2, 8, 2, 13}}, {
        "I JUST GOT A MESSED UP STOMACH.", {11, 2, 15, 4, 15, 9, 7, 13}}, {
        "BY THE WAY ROGER YOU WERE RIGHT ABOUT YOUR WIFE.", {10, 4, 12, 12, 
         11, 15, 12, 12, 1, 7, 13}}, {"I TRUST RICK.", {11, 12, 12, 13}}, {
        "I TOLD YOU ABOUT SAMMY - I DUNNO...", {11, 15, 11, 10, 7, 13, 11, 15,
          13, 13}}, {"MOVING ON.", {15, 9, 13}}, {
        "I DON'T KNOW ANYTHING.", {11, 15, 2, 12, 12, 13}}, {
        "WELL THAT'S GREAT COMING FROM A GLORIFIED GRAVE ROBBER!", {12, 4, 15,
          1, 15, 10, 4, 1, 1, 7, 13}}, {
        "MOMMY'S COMING BABY!", {12, 12, 7, 13}}, {
        "GOOD-BYE ADAM.", {12, 12, 13}}, {
        "YOU'RE A BEAUTIFUL GUY.", {11, 15, 4, 1, 7, 13}}, {
        "THEY *ARE* AGAINST THE LAW.", {7, 14, 15, 14, 10, 4, 7, 13}}, {
        "THAT'S WHY YOU'RE A GAMBLING MAN.", {4, 15, 2, 11, 15, 4, 7, 7, 
         13}}, {"KID GLOVES.", {7, 7, 13}}, {"D.C.", {12}}, {
        "YEAH THEY'RE GOIN' -- THAT'S NATURE..", {2, 7, 7, 7, 13, 13, 4, 15, 
         7, 13, 13}}, {"DIG 'EM UP!", {12, 12, 7, 13}}, {
        "GOT PLENTY TO EAT.", {12, 12, 10, 12, 13}}, {
        "LISTEN GET A HOLD OF OUR AVAILABLE SECURITIES AND HAVE THEM TURNED \
INTO CASH.", {15, 15, 4, 15, 10, 12, 12, 12, 3, 12, 12, 15, 10, 7, 13}}, {
        "GET SHEEP OVER SIDE..", {15, 12, 10, 12, 13, 13}}, {
        "YOU MUST GET TO AMERICA.", {11, 15, 15, 10, 12, 13}}, {
        "BEING A FOREIGNER I WOULD LOVE TO LEARN.", {15, 4, 7, 11, 15, 7, 10, 
         12, 13}}, {
        "I'VE GOT A MEETING TONIGHT.", {11, 15, 12, 12, 12, 12, 13}}, {
        "I'VE GOT FIFTY BUCKS TO THROW AWAY.", {11, 15, 15, 8, 7, 10, 15, 2, 
         13}}, {"ONE THOUSAND FEET.", {8, 12, 12, 13}}, {
        "UNCLE 'TIS A SHAME.", {7, 11, 15, 4, 7, 13}}, {
        "I JUST WANTED -- YOU SET ME UP.", {11, 2, 15, 13, 11, 15, 7, 7, 
         13}}, {"EVEN RESPECTABILITY.", {12, 12, 13}}, {
        "I JUST TURN MY BACK ON THAT KIND OF TALK AND LOOK AWAY.", {11, 2, 15,
          7, 2, 10, 4, 7, 10, 12, 3, 12, 2, 13}}, {
        "I CAN'T EXPLAIN IT NOW.", {11, 12, 2, 15, 11, 2, 13}}, {
        "PATRIS BENEFACTUM ET --  ...IT WAS MALCOLM'S FAVORITE.", {12, 12, 12,
          13, 13, 11, 15, 12, 12, 13}}, {
        "THE IDEA THAT YOU COULD DIE SUDDENLY WITH NO OFFSPRING DISCONCERTING \
LET'S MATE COMMIT YOUR GENES TO PERPETUITY.", {4, 7, 4, 11, 15, 15, 2, 10, 7, 
         12, 12, 12, 12, 12, 1, 7, 10, 12, 13}}, {
        "LESGO LESGO LESGO.", {12, 12, 12, 13}}, {
        "THAT'S ALL I DO WILL.", {4, 15, 7, 11, 15, 15, 13}}, {
        "I'D LIKE TO THINK OUR NEXT SECRETARY OF THE NAVY WOULD BE PREPARED \
FOR ANYTHING MR. HAYES.", {11, 15, 10, 10, 12, 12, 12, 12, 10, 4, 12, 12, 15, 
         12, 10, 12, 12}}, {
        "AND SAY EVERYTHING WENT WONDERFULLY.", {3, 12, 12, 15, 2, 13}}, {
        "BUT YOU DON'T LOOK VERY HAPPY.", {12, 11, 15, 2, 15, 2, 1, 13}}, {
        "YOUR FATHER CAN BE IN NOME ALASKA TOMORROW.", {1, 7, 12, 15, 10, 12, 
         12, 12, 13}}, {
        "SHE SUPERVISED WORKERS REMOVING CORTODIAZAPINE FROM GEL CAPS BY HAND \
AND REPLACING IT WITH POWDERED SUGAR.", {12, 15, 7, 15, 12, 12, 12, 12, 12, 
         12, 3, 12, 12, 10, 12, 7, 13}}, {
        "I'LL CALL TOMORROW..", {11, 15, 1, 12, 13, 13}}, {
        "I WAS ONLY FIVE...", {11, 15, 2, 8, 13}}, {
        "THAT'S WHAT THEY'RE GOING TO ASK YOU.", {4, 15, 4, 12, 12, 12, 10, 
         12, 11, 13}}, {
        "FROM THE FIRST MOMENT I SAW YOU I SAW YOUR BAD QUALITIES AND \
TREMBLED AT YOUR VIOLENCE; BUT I COULD NOT HELP LOVING YOU.", {10, 4, 12, 12, 
         11, 15, 11, 11, 15, 1, 1, 7, 3, 15, 10, 1, 7, 13, 12, 12, 12, 12, 12,
          12, 11, 13}}, {
        "I'LL SEND YOU A POSTCARD.", {11, 15, 15, 11, 4, 7, 13}}, {
        "WE CAN'T LOSE.", {12, 12, 2, 15, 13}}, {
        "HE'S A BLACK GUY.", {11, 15, 4, 1, 7, 13}}, {
        "YOU AREN'T TALKING ABOUT MONEY THEIR BEADY LITTLE EYES GO DEAD.", {
         11, 15, 2, 15, 12, 12, 12, 12, 12, 12, 12, 12, 13}}, {
        "NOT IF YOU'RE OVER SIXTEEN.", {12, 10, 11, 15, 10, 8, 13}}, {
        "YOU CAN'T CHANGE IT.", {11, 12, 2, 15, 11, 13}}, {
        "SS'KYA'TA'.", {7, 13, 7, 13, 13}}, {"YOUR MOTHER'S.", {1, 7, 13}}, {
        "WE STAY OFF HARD LIQUOR CIGARETTES..", {12, 12, 12, 1, 7, 7, 13, 
         13}}, {"I WANT TO SHOW YOU SOMETHING.", {11, 15, 10, 15, 11, 7, 
         13}}, {"BRAD THE BARTENDER.", {12, 4, 7, 13}}, {
        "LET'S SEE...", {7, 15, 13}}, {
        "I AM GOING TO BE FAMOUS.", {11, 15, 1, 10, 15, 12, 13}}, {
        "JESUS. ... INTERVIEW EVERY EMPLOYEE SUPPORT STAFF ASSOCIATES \
PARTNERS.", {12, 13, 13}}, {
        "NOT EVEN WHEN I'S DRINKIN'.", {12, 12, 2, 11, 15, 12, 13}}, {
        "EITHER BECAUSE HE'S SO GOOD AT WHAT HE DOES HE DOESN'T THINK HE \
NEEDS IT OR HE'S SO INSECURE HE CAN'T ADMIT IT.", {12, 12, 11, 15, 2, 1, 10, 
         4, 11, 15, 11, 15, 2, 1, 11, 15, 11, 7, 11, 15, 12, 12, 11, 12, 2, 
         15, 11, 13}}, {
        "HE'S SATAN'S LAP DOG OR SOMETHING.", {11, 15, 12, 7, 7, 7, 12, 
         13}}, {"I JUST WANTED SOME MAKE-UP.", {11, 2, 15, 12, 7, 13}}, {
        "IT'S BROKEN.", {11, 15, 12, 13}}, {
        "I'M TELLING MOM.", {11, 15, 15, 7, 13}}, {
        "FUCKING DUMP.", {15, 7, 13}}, {
        "TOM I'M THIS CLOSE TO COMING WITH YOU..", {12, 11, 15, 7, 15, 10, 15,
          10, 11, 13, 13}}, {
        "I GOT MY MIND MADE UP AND I AIN'T GONNA BE MOVED ON THIS.", {11, 15, 
         12, 12, 12, 7, 3, 11, 15, 2, 12, 12, 15, 15, 10, 12, 13}}, {
        "I DON'T THINK I'LL BE HAVING SEX EVER AGAIN.", {11, 15, 2, 12, 11, 
         15, 15, 12, 12, 12, 2, 13}}, {
        "I *HELPED* YOU NOT TO THINK ABOUT WALLY.", {11, 14, 15, 14, 11, 2, 
         10, 12, 12, 12, 13}}, {"JACK!", {7, 13}}, {"SPIKE!", {15, 13}}, {
        "THAT'S WHY YOU GOT SCARED WHEN MRS. CHRISTIAN HIRED ME.", {4, 15, 2, 
         11, 15, 1, 2, 12, 12, 15, 7, 13}}, {
        "I'LL BE BACK NEXT THURSDAY WE'LL TALK THE WHOLE THING OVER THEN.", {
         11, 15, 15, 12, 12, 12, 12, 12, 12, 4, 1, 7, 10, 2, 13}}, {
        "AND YOU WERE HUNGRY REMEMBER.", {3, 11, 15, 1, 7, 13}}, {
        "GROUND DEFENSE.", {7, 7, 13}}, {
        "IT COULD SAVE THE VOYAGE.", {11, 15, 15, 4, 7, 13}}, {
        "IF SHE GETS OUT LEGALLY THEY CAN'T COME AFTER HER.", {10, 12, 15, 12,
          12, 12, 12, 2, 15, 10, 7, 13}}, {
        "THERE WASN'T ANY PLANE.", {15, 12, 2, 12, 7, 13}}, {
        "I'M TRYING TO PUT OUT A NEWSPAPER HERE.", {11, 15, 15, 10, 12, 12, 
         12, 12, 2, 13}}, {
        "IT'S HARD TO BELIEVE...", {11, 15, 1, 10, 15, 13}}, {
        "EXTRACT OF PINEAL!", {15, 10, 7, 13}}, {
        "HEY HEY HEY.", {7, 7, 7, 13}}, {
        "SHE SLAMMED EVERY DOOR ON HER WAY DOWNSTAIRS -- EXCEPT THAT ONE.", {
         12, 15, 12, 12, 12, 12, 12, 12, 13, 12, 4, 8, 13}}, {
        "YOU DON'T HAVE ANY MORE VACATIONS TO SELL, ON ANTHRAX ISLAND.", {11, 
         15, 2, 12, 12, 1, 7, 10, 15, 13, 10, 12, 12, 13}}, {
        "AS SOON AS YOU GET BACK WE'LL TALK.", {1, 12, 12, 11, 15, 2, 1, 7, 
         12, 13}}, {
        "YOU USED ME, MR. CRAWFORD.", {11, 15, 7, 13, 12, 12, 13}}, {
        "LET THEM TALK.", {15, 12, 12, 13}}, {
        "I CAN'T BELIEVE SHE'S WITH THAT GUY NOW!", {11, 12, 2, 12, 12, 10, 4,
          7, 2, 13}}, {"MY MORE THAN SISTER.", {12, 1, 10, 7, 13}}, {
        "BRAD AND I ARE WATCHING THE HOUSE.", {12, 3, 11, 15, 15, 4, 12, 
         13}}, {"YOU WERE RIGHT MR. DICKSON!", {11, 15, 7, 12, 12, 13}}, {
        "I KNEW THEIR FATHERS AND MOTHERS BEFORE THEM.", {11, 15, 12, 12, 3, 
         12, 10, 12, 13}}, {
        "YOU WOULD TAKE A PAIN \[CapitalIAcute]N THE ARSE FULL STOP.", {11, 
         15, 7, 4, 7, 7, 4, 7, 1, 7, 13}}, {
        "IF YOU'RE GOING TO TALK NONSENSE I DON'T WANT TO TALK TO YOU AT \
ALL.", {10, 11, 15, 1, 10, 12, 7, 11, 15, 2, 1, 10, 12, 10, 11, 10, 7, 13}}, {
        "I BETTER GO I'LL TALK TO YOU LATER.", {11, 15, 7, 11, 15, 12, 10, 11,
          2, 13}}, {
        "THEN WE SHALL STATE ANOTHER TIME AND ANOTHER PLACE.", {2, 12, 12, 12,
          12, 12, 3, 12, 12, 13}}, {
        "HE *LOVED* IT!", {11, 14, 15, 14, 11, 13}}, {
        "SEE WHAT YOU DON'T KNOW IS YOU'RE ALREADY IN THE LAST TWO MINUTES OF \
YOUR LIFE.", {15, 4, 11, 15, 2, 12, 15, 11, 15, 12, 10, 4, 7, 8, 7, 10, 1, 7, 
         13}}, {"DAMN I HATE THIS JOHNNY I REALLY DO.", {1, 11, 15, 7, 7, 11, 
         15, 7, 13}}, {"BEAUTIFUL MORNING.", {1, 7, 13}}, {
        "SO WHY DON'T YOU TAKE A DEEP BREATH JAKE AND I'LL COUNT TO TEN.", {
         12, 2, 12, 2, 11, 15, 4, 1, 7, 7, 3, 11, 15, 12, 10, 8, 13}}, {
        "NO NOT GRUNEMANN.", {4, 12, 12, 13}}, {
        "IT WAS AT LEAST AS GOOD AS THE SKY.", {11, 15, 10, 12, 12, 12, 12, 4,
          7, 13}}, {"I JUST HAD A PHONE CALL.", {11, 2, 15, 4, 7, 7, 13}}, {
        "YOU HAVE TO DRESS FOR SUCCESS.", {11, 15, 10, 12, 10, 7, 13}}, {
        "SCARY MOVIES ARE GREAT FOREPLAY.", {1, 7, 15, 1, 7, 13}}, {
        "DIGNAN THOSE AREN'T RUNNING SHOES.", {12, 4, 15, 2, 15, 7, 13}}, {
        "HE AND HIS WIFE BOTH SAID SHE HAD A FINE MORAL CHARACTER AND WAS \
WONDERFUL WITH CHILDREN.", {11, 3, 11, 7, 4, 15, 12, 12, 12, 12, 12, 12, 3, 
         12, 12, 10, 7, 13}}, {"OKAY I PROMISE..", {1, 11, 15, 13, 13}}, {
        "I DIDN'T MAKE IT THIS FAR BY ATTRACTING A LOT OF ATTENTION.", {11, 
         15, 2, 15, 11, 7, 2, 10, 15, 4, 7, 10, 7, 13}}, {
        "WE SHOULDA BEEN THERE TO BACK YOU UP.", {12, 12, 12, 12, 10, 2, 11, 
         9, 13}}, {"SOMEONE WAS AT THAT WINDOW.", {7, 15, 10, 4, 7, 13}}, {
        "YOU'RE EVEN SUSPICIOUS OF HIM.", {11, 15, 2, 1, 10, 12, 13}}, {
        "WE SHOULD KNOW SOMETHING FIRST THING IN THE MORNING.", {12, 15, 15, 
         12, 12, 12, 10, 4, 7, 13}}, {"OKAY DOWN BOY.", {1, 7, 7, 13}}, {
        "BIRD DOG TO SCARECROW.", {7, 7, 10, 12, 13}}, {
        "WHICH ANYONE COULDA TAKEN OUT OF MY GEAR ON THE CHOPPER.", {4, 12, 
         12, 12, 12, 10, 12, 12, 10, 4, 7, 13}}, {"SIMPSON.", {12, 13}}, {
        "WHEN THEY WATCHED AT ALL.", {2, 12, 15, 10, 7, 13}}, {
        "I SAW IT IN THE EYE.", {11, 15, 11, 10, 4, 7, 13}}, {
        "I'M JUST PROCRASTINATING.", {11, 15, 2, 15, 13}}, {
        "YOU WAKE UP EVERY NIGHT SHEETS SOAKING THE SAME NIGHTMARE OVER AND \
OVER..", {11, 15, 9, 12, 12, 12, 12, 4, 1, 7, 10, 3, 10, 13, 13}}, {
        "THIRTY MINUTES OR LESS.", {8, 7, 7, 7, 13}}, {
        "SOME SHADE OF GREY MY EYES DON'T SEE.", {12, 12, 10, 12, 12, 12, 12, 
         2, 15, 13}}, {"IT'S OKAY HONEY.", {11, 15, 1, 7, 13}}, {
        "BUT I'LL BE IN TOMORROW NIGHT WITH A BREATHTAKING BLONDE AND IT WILL \
MAKE ME VERY HAPPY IF SHE LOSES.", {12, 11, 15, 15, 10, 12, 12, 10, 4, 1, 7, 
         3, 11, 15, 15, 12, 12, 12, 10, 12, 15, 13}}, {
        "I APPRECIATE YOUR HONESTY GEORGE.", {11, 15, 1, 7, 7, 13}}, {
        "IT WAS SOMEONE ELSE.", {11, 15, 12, 12, 13}}, {
        "YOU WORTHLESS BASTARD.", {11, 1, 7, 13}}, {
        "I LEAVE YOU ALONE FOR THREE MINUTES AND YOU START WAVING THAT \
GODDAMN MARLIN SPIKE AROUND -- YELLING ABOUT REPTILES!", {11, 15, 11, 2, 10, 
         8, 7, 3, 11, 12, 12, 4, 12, 12, 12, 12, 13, 15, 12, 12, 13}}, {
        "DELIGHTED I'M SURE.", {1, 11, 15, 7, 13}}, {
        "I ALSO PLACE LAS CHOCOLATES ON THE PILLOW.", {11, 2, 15, 12, 12, 12, 
         4, 7, 13}}, {"SO IT'S MR CLEAN.", {12, 12, 7, 12, 13}}, {
        "YOU PEOPLE ARE CRAZY!", {11, 15, 15, 7, 13}}, {
        "HE COULD HAVE KILLED ME A DOZEN TIMES.", {11, 15, 12, 12, 12, 12, 12,
          12, 13}}, {"AHHHHHH.", {2, 13}}, {"TUMESCENT!", {1, 13}}, {
        "THE WOUND IS BLEEDING!", {4, 12, 15, 12, 13}}, {
        "ONE-SEVEN-FOUR-NINE-FIVE NATOMA.", {1, 12, 13}}, {
        "CHECK YOUR PARENTS' BLOOD TYPES.", {15, 1, 7, 7, 7, 13}}, {
        "FELLOW...", {12, 13, 13}}, {
        "LOOK YOU'RE A PLAYER...", {15, 11, 15, 4, 7, 13}}, {
        "I'M NOT USED TO SUCH KINDNESS.", {11, 15, 12, 12, 10, 12, 12, 13}}, {
        "THEN I SIT BACK AND I THINK I MEAN WHO'S TO SAY I'M NOT A DUMB \
BITCH.", {2, 11, 7, 2, 3, 11, 15, 11, 15, 11, 15, 10, 12, 11, 15, 2, 4, 1, 7, 
         13}}, {"THANK YOU MRS. PHILLIPS.", {15, 11, 12, 12, 13}}, {
        "WHEN YA DON'T DO WHAT YA ARE TOLD IT MAKES ME LOOK BAD KID. \
...FINE.", {2, 12, 12, 2, 12, 4, 12, 15, 7, 11, 15, 12, 12, 12, 7, 13, 13, 7, 
         13}}, {"IT IS A LIVING THING.", {11, 15, 4, 15, 7, 13}}, {
        "HUMID OR DRY.", {1, 7, 7, 13}}, {
        "SOMEBODY'LL SEE.", {7, 7, 15, 13}}, {"MR...", {12, 13, 13}}, {
        "WE APPRECIATE IT.", {12, 12, 12, 13}}, {
        "QUIET AND DRAMATIC.", {1, 3, 7, 13}}, {
        "IF YOU FEEL DIFFERENTLY BOB YOU SHOULD SAY SO WHEN YOU'RE CALLED TO \
THE STAND.", {10, 11, 15, 2, 2, 11, 15, 15, 12, 2, 11, 15, 15, 10, 4, 7, 
         13}}, {"THAT'S RIGHT HOMER.", {4, 15, 12, 12, 13}}, {
        "I HAVE NO CHOICE.", {11, 15, 7, 7, 13}}, {
        "TRY THE PAY PHONE.", {7, 4, 7, 7, 13}}, {
        "BE QUIET YOU FAT FOOL.", {15, 12, 11, 15, 7, 13}}, {
        "HIS ARMY STARVES.", {11, 7, 15, 13}}, {
        "IT GOT ME OUTTA WOODSBORO.", {11, 15, 12, 12, 12, 13}}, {
        "COME ON WILL.", {15, 12, 15, 13}}, {
        "THE GENERAL IS HERE.", {4, 12, 15, 2, 13}}, {
        "IT'S NOT THAT -- IT'S ONLY TEMPORARY.", {11, 15, 12, 4, 13, 11, 15, 
         12, 12, 13}}, {"SHE'S A JERK.", {12, 4, 7, 13}}, {
        "YOUR ORDERS MIGHT BE DIFFERENT FROM MINE.", {1, 7, 15, 15, 1, 10, 7, 
         13}}, {"I HAVE LOVE ALL OVER.", {11, 15, 7, 7, 10, 13}}, {
        "YEAH GAL I BEEN HERE BEFORE.", {2, 7, 11, 15, 2, 10, 13}}, {
        "SOMEDAY SCOTT THIS WILL ALL BE YOURS.", {12, 12, 12, 15, 7, 15, 12, 
         13}}, {
        "PROBLEM IS DON'T WANT TO HOLD A CONVENTIONAL SUB OFF-SHORE FOR \
TARGET PRACTICE.", {7, 15, 12, 2, 12, 10, 15, 4, 1, 7, 7, 10, 7, 7, 13}}, {
        "I DON'T EVEN KNOW WHAT THIS IS.", {11, 15, 2, 12, 12, 4, 12, 15, 
         13}}, {"BUT LOOKED LIKE A BUNCH OF THOSE BIG BOYS CHEWIN' EACH \
OTHER'S GONADS OFF.", {12, 12, 10, 4, 7, 10, 4, 12, 7, 12, 12, 12, 6, 12, 12, 
         13}}, {"THEY WERE SWEETIES UNTIL A MONTH AGO.", {12, 15, 7, 10, 4, 7,
          7, 13}}, {"THE DOGS HAVE A SCENT.", {4, 7, 15, 4, 7, 13}}, {
        "WELL NO NOT REALLY.", {12, 7, 12, 12, 13}}, {
        "HE WAS THERE IN THE STORM...", {11, 15, 12, 10, 4, 7, 13}}, {
        "THAT'S ALL YOU CARED ABOUT.", {4, 15, 7, 11, 15, 12, 13}}, {
        "REMEMBER: DIGNAN I -- HAVE THE CAR RUNNING AT THE NORTH- WEST \
CHECKPOINT.", {7, 13, 12, 12, 13, 12, 4, 7, 15, 10, 4, 12, 13, 7, 7, 13}}, {
        "NO PICTURES-- TWO YEARS.", {7, 7, 13, 8, 7, 13}}, {
        "IT MIGHT BE A GOOD IDEA FOR YOU TO DISAPPEAR FROM CASABLANCA FOR A \
WHILE.", {11, 15, 15, 4, 1, 7, 10, 11, 10, 12, 12, 12, 10, 4, 7, 13}}, {
        "YOU'RE READY FOR THE QUIZ.", {11, 15, 1, 10, 4, 7, 13}}, {
        "MAKE MINE A BLOODY MARY.", {15, 12, 4, 12, 12, 13}}, {
        "S'NOT BAD S'VERY GOOD BUT..", {12, 12, 12, 12, 12, 13, 13}}, {
        "I MEAN I'M...", {11, 15, 11, 15, 13}}, {
        "IF ARLYN PAGE IS LIVING WITH TOM GRUNEMANN -- WHAT THE HELL DO YOU \
THINK'S THE MATTER.", {10, 12, 12, 15, 15, 10, 12, 12, 13, 4, 4, 7, 7, 11, 15,
          4, 7, 13}}, {"I FROM MINE.", {11, 15, 7, 13}}, {
        "BUT YOU CAN'T PROVE IT!", {12, 11, 12, 2, 15, 11, 13}}, {
        "HE IS COMING TO MEET YOU.", {11, 15, 12, 10, 15, 11, 13}}, {
        "WE'RE FUCKED I KNOW -- LET'S GO TALK TO BILL..", {12, 12, 12, 11, 15,
          13, 12, 12, 12, 10, 12, 13, 13}}, {
        "IT WON'T EVER BE OVER LIKE THIS.", {11, 15, 2, 2, 15, 10, 12, 12, 
         13}}, {"WIDOW'S BENEFITS.", {7, 7, 13}}, {
        "CHARLEY MY HUSBAND AND I ARE ...DIVORCED AND KIM THAT'S OUR DAUGHTER \
IS ABOUT BILLY'S AGE AND THE CHILDREN PLAY TOGETHER A LOT.", {12, 12, 12, 3, 
         11, 15, 13}}, {
        "THEN I'LL MAKE THIS EASY FOR YOU.", {2, 11, 15, 15, 7, 1, 10, 11, 
         13}}, {"BARNES TOOK A BULLET RIGHT THERE.", {12, 15, 4, 12, 12, 12, 
         13}}, {"DON'T GIVE ME THAT BULLSHIT.", {7, 2, 15, 12, 4, 12, 13}}, {
        "WE SHOULD LET HIM REST.", {12, 15, 15, 12, 12, 13}}, {
        "I'M TAKING YOU BACK.", {11, 15, 15, 11, 2, 13}}, {
        "I HAPPEN TO KNOW THAT HE GETS TEN PERCENT.", {11, 15, 10, 12, 4, 11, 
         15, 8, 7, 13}}, {
        "THE WOMAN I GOT IT FROM IS NEVER GOING TO GIVE IT A SECOND \
THOUGHT.", {4, 7, 11, 15, 11, 10, 15, 12, 12, 10, 15, 11, 4, 1, 7, 13}}, {
        "YEAH WE GOT THAT PART.", {12, 12, 12, 4, 12, 13}}, {
        "LAY OFF OF THAT STUFF SON.", {7, 7, 10, 4, 7, 7, 13}}, {
        "NO I THINK A WHISKEY.", {7, 11, 15, 4, 7, 13}}, {
        "THE RANCHER WAS SO ANGRY HE SENT ME TO LIVE AT THE LUTHERAN \
ORPHANAGE IN BOZEMAN.", {4, 7, 15, 12, 12, 11, 1, 7, 10, 15, 10, 4, 1, 7, 10, 
         12, 13}}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question"}, "LogProbabilities" -> CompressedData["
1:eJxlu3c41/H3/2/PlL3J3nsWlVFKKCtCg6JIQnbITMMIhVJKycrIKpXxPKfM
rLIysiMksrIyfnpf1+97fa73+/XHud3/eV3X6/l4nOc59/N8vJ6C593MLpCR
kJBMkJOQ/GP/9WO5yl93YsIMken9KxF6j8qcN0qZB0fxIpqptS4QEtEyo6Wi
hrgTYc93MIng+ag1jRt0GSD3c6qwq5gWX9iqLH92moOooNbTNAa98EBP6AD5
AwHcX94oxGSrANM+sw8/3ZNCDpVKH02/CqK7zhUjJoVQir8gtj+EFTIpB3OE
7SRQ+Ffd66FTnYRMgivXGw1qXKPLOMU+kAciiSwbSVQl8DJlokuagxLzLQt3
kn/jQG2HN2HerBeAJoWvMopaBCNzdrv7eFFD7K2sA1GeYVBtnnqB/xsz3jLq
Ys8vk8RHfGmC7W9qiJAR02eDh0qBNZaM7/EwOcpej5hKDvQG22F/KipyNsy6
k3BV2ZsRFzO3RX8cBPuKqx9rEEQWDPIVXxaE8cRdqhOlUnjE/OpCw60yItui
xMArdg6eWjZLMa/3wKuWTxwDnH/grYb44INf7eCw2gpL+nnw48iWzTF7ahxK
99pYvhkMkme2KrMDWDBxt4XYqUssqC+llRO9IwROu9urKZn1EyXx8VJTleKo
HkSxT8mAC1cvfz+CV89AKl9oFi2LOPrLL/Yw+Y0SGcx0g9/nz4PucEAghT4n
kjX9bFWkqIUQ6/1l0hEb4Jgn6VUdJwpSXtXujS6CyMuwa0jATxkZffhAnVuO
WLtaSi5sNQ7brPq6cwyccliYGe3nIPXlcf0yi17YTWn22/qYAFZEx5K9HFeC
85dNWs1v8KNyUjf3iT4taJgzeCbTr4j2P3UueFSYEfe6bW8mOPYTyun7DH0q
xLFLZPiDJKkCaqRXeh9jDiI+XXaSLYyNAxcn2S/ZtxixiofHV5K7FAa630VZ
z5Ljy2brfs0kVmxPU3P888MXGshXvBO3IoFsvYzO/yQTvoyqcHZgJsUHZfW5
VAIID7h9sNJJEY3cFDIybp4hvg/sIg5lbwLXctDsul010L7l6jgWzY+3ZT9e
oXqiBaVPldUKvn2DV+PRDDtzZiFsqEHQkEEBj4AhL82rQCKIrfHUA8NlWLWQ
+b2w8QUcTMWuWQRS47hVwtG7M7nA/PwuOe1+FeCjZrbxlhJA6jva6UlPmTCB
gTmURvYOtF9ns2cg34LHM7mcumNVIFDayV/vsoeod+Eckl9Xwvu7ewUXub7B
2C0fK1uKObiS0b+q7NILpy758u+wmoNVRhLtmdE9+Mdta2v3amGl4tUUU+fl
FULFYJrwMhBF+3McR/j2hUNR1Au58kJm3L6FBd40a+PK1r/PWMV/r092r+zD
whgBFOs0n2bPUwCnj80fCukVcKV1JVysL5DYocXdsLxPAK0P3NzNEKEMRYk2
mXF/5HBxWqDK0vkOEchDEnLr0h7Uu7m5ZRxYXvmi9zSjN0k5dP4Ic7p3iQy1
mLRFXqVNwDYd0n58h5LRoJn6G7z43SKp77OOAcTwFGTFbNHjtdqYrnbHVOgx
u79rwYkHXaJkVVfNTMEy/MHe1xJrUMBd0XT6YyM87Qq3Z2SiwooFf/fT1YVQ
Mzzv6WHDiNe3RYlJPLQ3kFcoqrLh0WPSu2a9vEBXOs/OpmwHSj1ns2R8ngI+
IxWi+Ycj4OrAPZ8/R5mxI2zvUDCrAP4ZvfSBV0AVsvxWQixzFFDCbvoX6y43
4rY3uUDcrAo6CX8J1s6jJwbl9nE6HufBiInpj+F1pqBL0SGSa/sUaLOPWs7r
7kAxElWZm+s0GECrzRBAnwXD+0Q2vbulkV7Idlu+IpRlBx/FTUzCNm2edo2A
DhffCn32bnx63OQw9ZI6HCYPvH98mQW7uBhmm6cDYOavrd97y+F/5Dz3fQpE
14UVhM/NQeJsrHamdS84he9sszzUDr3PwlWO3f0DXKQkAp3PNdFmaXu7469W
plL6Xe6yXIVVGTy172IzXGWPDuhOrIKWsKvGiQe2YGa/g3+xXSDsSn76i3ac
BclebKoICOVD9Fo7ia8ENfJpkinFTleBwxFtse/rm1AQn3bQ+QorXik/HHl3
yA+iYpquXO4Vw8+mpd31fT8Ic8Kr4IqcLF7euzMzcPIpsTck0vkipRh+FWgg
PXFijvA4qc7Js51nbgpqnP/ybsFiTobXnh0lkgoiHT1cwUJlXNDvCgtesGhN
oV4JhlsP3eLecooi/1ON6sDwv8TWmIPFAQ4hdNLcaPz0kx8u8JDgWec9SNze
3NK6UF45JiZvwveKDHP6RinnGcsgs0E5td42D6Q/B47QnKHGUdupsl/NIuh4
RnjLpmuLyErPF1Sg40ZwMejldrKC5BZP6sVqQYwueNjiKS4E6tDz+cq5Vmhx
W1L+trYEInPfVDqGSPG6SNDj2tUKCHU9NP/1iS0cEXE7Y0fKhdYXmu54WArh
Jk1xw0NzHvBhD+sMvvcMbGgsgyfv0WPG4erpt/sqQVXINdXrMynqHWb02pHB
hhbMXDpfLDzAV4C1k8yjn3jJHteI5eJoGfpQwDx8BvLIFD8Mig0Cz7PpEo1y
Zjypqv0tizYc2kI+LoxWVAG3id8BecEtyJk5GXxfhxwPdm78BKl3oLO3rPLR
fUn0jdE1uetaRwhndk1kHToN/jFBdOOeXNilqf/4Zxc9vv2zs62U/BnE2r7d
qO4Vx9vyP+emSr8Rqmqkdz8mHyYilGUFnpzdrk+mUnMGy1Pwj676w3D7J0eZ
lv4uJDn0h/7M+wQ4fnbz1pW2Qpif18pLoKPCV46bHzSOSGEz74Wp5GAkFE9k
HN15lxeN2W7mqFAaQNPFHoF0WmGkOfSwuViHBUpsx2ovWuxGwexfJ9+v7oWO
xqfm9/KZ0TbrwX5Hw3A4tHJ8hVXsGhAsBzJOnGdF+0tPBHnYqPG5lY0jzeV8
+O/+bfVL7vPspCQep5hgK2+sIu4emNCq9BBDk9WhifDNKeJTXSrT0VeXYFVZ
6JIwEwfauvz6/ivyLyyft9/tov4J/NIGPzXoJYMe3E90LGXA7qZyj88M9Lig
uvDq9OvnkBDF/KEhTgFNbjUdei9xldj57WKuYoMs6v4K5i1tTiJS6QaKrwRy
ItfKidkkkvNgoHr5tWoPCx4V68xrrQqEmRTda7v6DgFbQ4CAlTsfHv578UPX
dl5UOA3K7NGshH2LcIv5uyNsLZuclznFgTK8zHkBl2fg5B6R7q5Dg5B7d064
dlIeKb3GTnlHBxO/upFut+QrcCCXDrz5nQrbq2k7nWsksY7tmcpV3RpChVGR
JOZSAbEdbE2rpNE5NVUglUcRve7U7Z1esCcoeXkK/Ha8gaFuvxo1EwrUVrFO
UNUqgbRPab9sSSjRzmCUvCkukiBVTqcaH5DD260jn8mTqkHRZt2aOWwTnhCs
e/rWNuHnYgYazFaBY+fa4crny8RgtnpH4kVR/NurFqUjOkSUcJ4YuREtjqRR
Xx4mrk/CNruT60ZA+k86boWpgkHolt5e+u36cLtgfqGdFj/uG8k9XZz+P/3z
v/fbgXIkq2aBC5O1LQWC5q0gzvFmtOEzYRxvO/CUq3gHcEycvnImgApbKDVO
ltcXAItm9sEdx4WQsk3Mx6SOB1KoGl5cGPaAsHmnVZ5bbKibynZTXpcab3xx
jDj3MQ/e5bwbMl5SQPu0vDlLNkdidYT02YcoVdxe7K0H8puVUnQ6m450r8GU
Zh6IQgosfFU8RGwqYMMdldlOi4vEqfSO37sezcPleDOt9c0uuP7m5G/u6uH/
MPfYFMgL9E2++sWEy2e137GY3gIKhr7u4WlOFOR3GqrltYNHfHXXH2k8Ax/e
5UnuSnq05H4fstHJgeav2uop5S+AP4X/UvKpZZhgmrC+9fMLrLMzcTLIDP2j
1cvEaZDJ29UutBIJX29dar1nxYROOFwgdqABGPase19YXoOcuzMLqZ3vwNsr
ddBxBzmKm31hE1TjwFCN+LBX1U5wqFmHUdtEAs+re2bvpflK9NSmrlh09xE1
BR9vGtWK4561mbHHnPLoLWw4PFF+i0isy5q8FbjtK8cStpUIJATy6fPs4YBd
6QwpX18Kocs0s4eSFAO2vPGhtWZ/DDfmDsb6iLKgEvX3W2fFQ+FUwGQs2Zgq
tO+mdFYkE0ALZ8Z36rIZ8FJnaOBPBi36fXnn084VCU6nyyUHrzGh3puyiVg9
cWyoNz+RGzVCUNJfflOb9Q6srHLZbnKTox7p4i2edmYsjiSb+PwwDCi/rV75
qj4LLC7j6pa9fTAlsRM/3FJGIlhd66upDNHtrJabv1IPp5ovWggX/AUDNlKB
L1xquP/J0lbyibnK+ng9nt/09PjzqkNr0rvncLe7LeS5YD0wn+JWOCq3DtfO
0bedoGZGk/mP7KOlN2Fun30bS/drIkO8cPKSkjRattLahY0p48eU1OC8NGEi
vLHoLns0HX4e8sg7OJIGO6mY547mimHt3X47AaZJgsyU2XRikg/9jwsYCN3U
BXF/XQ5PsieweEMuszh1BxpAKI/vFgXun1R3D9ApgR/dp0m6pHmRKOR9TJ9u
BPExY5H7N5lRTIinMbE9FLZcrxxyBErgae2R3y8ngrFhzbp8M/VgVmhNc/jN
XzDL3uPq7UeGenRsdfmNZbB1xWLd3V8I68Y3vuX4ccGpnexn9B/x43p/Urie
vBYYfuqwtZkRw9jQkgSjjTEimf76EL+NInp7n7H6oWtL/POjVZd0cPM/frSu
IvPsmeOL37jw24WfnWO3rcGhzfBOvAM7VvDeP2vg6Ao/yJS+7WaQQWMH7m2Z
S1CLUDxYpf8MoTeGzLriVsAoZt8Duc/MmPyQ+5pcbhj0s9g5nS7lxpud+0lv
PjsBDjXMnUzfqyHPKs3mmOEm3OveoGPlFsCeVf1fQWMqwORixV8VKoKcs7qF
566RwaOoPO1XNtP/SMJsPgT/7ZffHyAlkVxSRf/kha37UwuVxebTtXJfp2Gb
N8dIh4Dq4tTeOt5dyE9e8ue0TCIkte2fYHHehSKGk/wJ5xIgSUakp2d+CWyK
40ZdL7eC9iyvi4lVC9A8DZct/b4CxS+cVw/qcaOPiGZOEu1JuJzbF7pSuw6n
To3tbJWsg9b8V0XLxmXg5h1T2fGYDP3PbOzu+1wDBblbB1WyN8BhiCnMV2EN
hMhjGU+WNMICrdQxUmkSlEt91haq9BG21z+EuKr3by74z+e+x+OP1a/GYZtk
W8QoyDmEPVJ+Hg5KOs3WlCnM+L4jSPR6OzfGxRlOn9xxAjTzsyUDbw39453o
HdPw3q9DfDfTdp0+cXrfz4OqkKpLK87ASwYfj5LfWo4S+Z95bLOVI3QqSgH7
RK4O775+leDX4Vmm/T4D+8PUZlYLBoCH7qHLkQeyyGqnpMaqkEw4rJ6Ttc0T
Qha9uvkqbg6wajUh6fukiBWxn1csVE4Q/PcvdpfN0mBiXTqXpVwWvOOfHVb3
50L1a1Okuzm3fU5Q0WDIO0FCu48mpHZL+X9+T2vH3ZiiXiHM+5X2ko+HDchA
ojEwZQ6o1tNkqEZ6oJH9Qqv5CZZtfyrbIHQ+BKICg/IkonlR3DH+cyyTAVi3
VPglJEug6hvRxmSOdiK1WT8j8ZM4Kl7sLuF62UeYe2kkD9KIYNSSQeukAzUU
DLSbzwbSYWXu8mIH1QvommHLsZXgxLS3PgUmUfZQ7+Ek/fOTLKp+vBI79iWJ
CNmsun8i8DUs7n6aHhFBgSciuWp98wSQ7bt5JNdFefgsLjFl3CmLLsLkT41N
koi3M9x1CQzU2JRfXht/Kx9o38wqmtc+AOdh+4v0Sjtxhj9h4faXLAg0aRGu
KqPBF/HUjJekpmGbcTaeQzDgu+eEuxUnas4RVc8zzsN47f2qrBFazH8/N1oY
lQ4qxXu5T3czorCjg+fig7uw/OhBhZUkHwa1nl24d+owqC4aeAcWDv0jm8GX
X/BgtmlLKHEHkX6P3E5/QgXFtURSpzNkieW2nXaUgcr43/1cTd2YbmGLB22q
f/w4OnYM+thLjVddU0HOJXX+4wY9Bt+6YhSq1Q5D53g8ifg/ULrSVfrZgRbD
ZDff7B/KgPVu4ytUH2hw5MCSeUBlFvyul7KfV6TACT7rCyJ2b4CFN1XAZSAT
3APD3IfoadFB3bLjUHUKuOVl0+YX7sBHSxZDO8sUkcbAwS/zugXBeOK709uj
cijtHiKQXRtPDDTwnY5JygBpX/fOM8G0aMb43Ov1QQlsuWBEJ5TwlXjfO3Xs
qrowng/2eNP1mAkmu4Z+taz0EY6+tY4M1eLIeaQ0Or+AEY/K33Xp6YqFqX+D
Oc/ZSr/tujjhvw936UcqNY/EwzZibu5lRPE3439ntqSxKYRlW+YSan0pzfa7
vEHdccEvlIMNNdJf20aucEGvvF5KsLsQBsRn9z83OQ/MbzQ7vjhzItsF3ibl
TUm0+2utx0VdRRxXZhh6m6yMTWC69fiiFGEXxZ1eeI0FC4JkneOSgkGPn530
xUl+JJLqq4TStUGWzkxA5M0WXDCNI0v/+xFCB++UeX/6A5RB4s6U821wZY3T
eNdgNzw+UPs9SnAexpjcRsY+0qH1terH+nZpUHJXWelbZTn4pMRf41clQ7OG
B+HdLZeIap+WIehRwOtlnvv8ipkxeNVr/J1yOPik7fbNo6VFuycTdf2jmZBe
xtAyzfAb9L15eF0CBsAo46nRXP5DMNyffN7rBwPm936pbWZkRnebN88ZQm+C
rjY0eFNLYfTME8YvBR+J/SOfrBIOkOBX4afRv8g+wt9bJK4idQJYk7x2i6RF
FowMKezs3I+CEAm5vXwGL0r9FSpoHhXExgzJv0K7BKHQj4n+3OWf/2io5j4C
lq7sGY4XhPDM2dw+mUhu+MzOIyn7aRY0T7mkyz/8BpGsM8E1MyREDx8ZGruq
4suqvyyXPkjhe7K3HcMb7wkKhgOBbZ/7QCd816DXvlm4ux4xGCLKAVVu6HE1
V+hfXQ5ZMdb/f/WZeWTLymORH0f9b6xo3d0Hu5jkh3RPKGG33FfvW7ePEJu5
PIGe2i0Q4h3uNjyzAl/YP7t+sUKiXMeedNFQCgut7rc0cYmipVdIzSOvv8TG
t71mPwaFsHVg7a3nKCs024olaW/33zsN6xfOx1iD0Dtj0YCnbCh7e+gAm5cH
5K7T3k3MUAFWXmlpTQEBPHto0b9Dahi2udYi8AvMSfd0H0+WwgXL4y9JeCsI
ofsChUkBrBh02ygMb/uBnzd7sjGjADrPl2tEGanCuK50ukmzPCokP02hzw8h
PF+I2/Sxc6GPgrp/2p+zcMqSInmA7SAI1y/OWDby4cBUa6pkaCQsTXzu0HFm
QvnQrXtkV4RQo+Is2ZYoN6RoSdtNXVJCdweZnS2peoR9s7fZiy9SGJnlV/RD
4z1xf2lp3s2EGc1Ep6dFRSLAiYyEhLtHA3smtu+7A+GVGTXPnR3mOcFUVYmL
M0IIB+w2zx5V6IQ9D+GkyMFFsP/KqK73VwxHfsheZLg6Rnitb39v9/HKfSQk
KCazH6PbbKUMKOZBySBY8jd7D3zvywkn3a7nCqzjlnwx9hBxNWHU0z4Tak3v
7bqoRotc1Ir7T2czoHd0+MMBj2RoUzN9tHWWHZPiSu+0xbuCeXfDcS/6ZChK
fOJUVs+AngsHTFp8W8B1gPondecKpCnTlqjrKgLzRTeKzQABfHFxwsw3kxsj
1J1vyi2c+J/rG0+8+Kw5WhGDbva1XMuwJtIv2T8uEBiDbX4j0xuH3dv5Nta9
HyX/GbKCA5Uf78u27K6lQbdZhyjyV1kgHeRJ5uoviTPN/ZGDKfVETcwxkVAF
Gjxy1Z6FK+Il5A+cOEDVZAhZ84oCnga8+PnwmbxQWTrMKjHl0Gx8AWRPddH8
ryLmHeqMCMkyIZhoSezcIvbip/ytLVuhtEoSu/0Cn+m3YGvrJ2lQTxWc+FTY
9zwoC0SrPOraO2mwPaiZZOgmL/ab9hZwqRjApPJMzy7W7X7c6ti34BEKde4v
vr08LY7ctF471MuGCZk3yq8is0nxeoZP7UZHJfA5XX4yu5sJffd++eofHg1n
La8PPSmeBx/rP6QhbV0gm/KzaET8HJzYb9lXlM+Jy39Sl+N6lqCvK/isclQr
1AjWJ0XV9cFVmmJRLu1ZMMsL1W41UUT2nWP7I1XtiMJyq+rG3aL47nhgf43Q
X4LX+1nlwS4boO7VTJjM5sL3FTr9o/G18EA9+xujxAaU9ml06LUsQI/H1Bfv
qU74NPgbi8JZwW+oW1BrUgijQxh9jYeocFxIoPqJ6is4E0t1gBOoUaTrRegu
8lxwXx1RCTLd9pPvAq9qPE+A9B6TRoUAFrSKu3gwPzIY1pdPueabD8LmX1n1
97YzsElZGR3bzoJ3lzgWi38FwqoKO9UfQUuwP2eidciVG+m3a8zB0QMY9c+O
p4pWukty3opYYUNLzLBLGXOHSrKGfd2xZJh0Ujs59VoZmN4bbOrcnQ1Hg5S7
Jp7RYE2VUK2xETMwfRc/XC8sjEqxReUPgoUw7KADv706F/QxNTr2ivpD9Xxy
aawGK648eUVHrVYBs14WnMmsZHhY5Zutsi0jam6LLc14kHlFH0L7XhnL433h
5GlxYsyqRdEgSgD+xeBFQRx/qnFNl64Eljs+eRawUaLGgOJUn5YgkubvHVCM
EoeMFYWHd/YLYUe7wdy5Ql7IPnF7RegeHc5IsgkR7WnQYQI2ktZsYJefsKOn
QwgZWbIvqPmPwjZFO9fGQfFX4B8uOw78EXVuPLfGER5tsPlGH3gFSyf75sgH
qHCGvaCYWZUca/tHLILM3sGQEZbYTfBj2rg6y+zoPrhw6rbHZRtGNN8WbSbx
QMzT/ZShl0NjfbPAMbYEQoVsjEmfooOI1RbSPhsqgbbcvxPTWprA6HtlMfPz
Vei8EdR9vJAaT6s+331TLRd8yJ3TJgSrwU37WIfO102YCPt4qf58CXCwHq9S
mKdAD5NDXs8IKdz3gHKvhFAZkbPcVOM3/wdeDig/GHnfBrKmq+w3xikwVVRq
sOx6CfTJCT453fUcym94zZtv0uEft6LRPfGZgDX3qnzEaPFtJCeDkxw31rvm
3m69exImCutnfPpvgpWDr2YyCTPe1CS9bNkni7TuxTt8yZII9rO+c8adYngp
12bYm2OcqL+U+3HLQQT5Xgpk5UeSQ0sBd9/xWmakfGyrutIRBpI7JOM829JB
MV17prOOFuWfkeDRTDU0rVjd+k45Wrl6UiBiIGwRRm1DE0ybO2DyAU1rxBla
PLUmqpu+mAGtd/o4f/JTIpdGPE/4QjFQxi8on13jQ/UkAY8gDV3ojBBmyuJO
B467hyr0dtLhQIzvubUpMbwW2dvvx/GD8Ex9EL8ewIhRHqkPijAO2K9QTe96
yYjc2yKGKg6WFBn/7uv8A7112i5tw21QnpRl7RNZCKX7mj3+SlMhx8MBPefq
FXiPi3Kpj1uA53fNfdHtQYKKiFkeea8KXvKf1PyFDOFoaeuCoD0vPkr+fG7o
OCNGJid/Dg2PB4cd5HZTjKqo2tEbLGhPQyxLZO64qLALnwawmoutJADcUinf
qBNDn7CpAP2SceJLld4xkfpqQjVeoJ2hVRJ57Cz5HaqW4UqI9eqK6xeokUw7
knGID8uS9+gtVuuBoOiU2hNjUdwzSSVp/XaFuGj7cCExRxwjvxX9ovccIHht
G2meFDDDxRstXXRcwv/jv2la1DL2MIz+h1I+E+D3gt/7ujMrCg/F+HfM+0Gk
i9v3nwvM6MXaM0BFFga+U296R2moMb/fP/9icj6kckvfFh82heIwP7MsfR4U
i9T1dgjLB0m6zqK5ndQ4d/OkBd0IHWpVDFtQcqZtr8eas6g5DU5zhhMNrC/B
cHP54VcNJlRIXP89Vx0FTO6kxXKBlChIJqddylIMrJvl9Lt374VZucCUVN/d
WPLiZ6wEsGB7490crbDrUORi/LfgPjMeP9/z1KchHNg4b5CwGSliiEflc7Jw
OyLGPLPyU/kI/KMj/U/Y+aPF0KGoiZCPr7k3Ji2JHKb0JEIflPHETLCWXJoY
cWn9a2GSiiTyFuhyg2oTQev4vo7a8w+Ipow97XBuhyvaTqzaTwWxlnZbJQjD
wX5T09PTfNjrmK0p5aMLRXIS0W5Sv+H8GZOHFVYDEFbDZ7SvhRu5RKz6Poid
AAULC31966OQq6tr0JbNi1y+MmMzsXNg31eUwPu3B2QLaJzF2OfhTYWQxIfF
bki5RLPXq6YGVBgEHdUKNmDJmkORu7eTuNP65bjXCQlMOEi1T2HvOPzjR+kx
+CDmQ6J8+jLU7LSjOveFHZdCRfdcVqEF2hZuhjcjwmhtE0WE5GwSrRwmnbLD
InhnXOiG1LYv+MfIbZ9QkqEzHH3kAFBHKPO7v+PHZrpVqYtC275gNLf74yIN
3pyNswkNFIB4m9C+o0uCaMFDYdYmuxPv5jCQ0bY/gMWedxnxLVVwgOftiT8s
W+Bwd89zg+37T/GfqIoD5R9YPOrZALW8VuykvWvws5Plo9MlJwjQ5Ty2eIgD
nc3DZiI03cDgS6U781F2fOXJ8sf1zgVwTRtoZq3hQL1j0s/ryeeATTWfQonn
G3D6rN3NVOXBhZBzWb/VzMDtSkxMZXYOlKqqqZn1UOOoBt3dOWtXOPJB8anZ
RXYsG/BfEHYmwZSpfPXRRx/g93yYtLEnDbaWVwwZvMoGn5VRd9Ol+zD3afi8
csIu1KGMKeL5ZQFfOMuHaf248QUPu+zfhaNQ5NQDr+N48cFr+fHhx7Nwqo1I
KVj7Bn1uLgSyHyJCZSVIagOV8Hrj4ZOUm+OwTY5TvqMAn4oGhui256029b1f
f+tA+stfn0dM38OxC8GWeT/IkFfA0EqujAFYkqLuqt0VRn/RUxSRVpfhQpR2
6+T2frbsX1BdSi2FmeQC06iP5EgfvlO8KNqTYG7cI+jopoDu9H3Sq58KQM69
YHRXABXyHWF5QcbJADXZJLX7k4WRcYNccquRHKnSggXYbpTCHosRFwfZcqK3
3qb0Xo4U+gnWGUjQ3YB4e9GOxZvM+PA7Ffmeh8qwk8qdkUxTAJfFR7YYeykJ
3XKyZ5SyqnhN5oo/TRArqO+nCG7a9jNpJg5xfJLjBFVPPPOndjGUPRswp3Ex
DAoq/TY2+5nxVnaw0hHqa/AztYlJw5EVj0xbEbwZ1cSqR0KxW4ck2jiMfy1k
SiAud9NIPdzuo+UNXe7LUb6woNq3cSuDFcOey+gYfm8GhQTRiV7uVWD/qdnv
328Mg5NfpTMJHkwUDbX7sLeGCKMcV9lXK4leR4buqvetQpomme9RqyZQDw+Y
kthHCoMadMbGGSJIrb8m27vhTrzo3xV67L4C8ljyHWk7mwR5GndHLfJ3ouar
jxzf/OyIntrwZ8XbdeVWdIT8kok32A9HPZGgZ8PUUJPsKO16UGGk+/OGZx3S
d/AWPuKshoRQ8iSO/k34rXI2h5IjBzr8Xn51oKBBux8dr6g0rOD4tLNAFRM3
1qZmml09Og3bZI47OwS/1UUzJchqiOQ0GpWQRklsKN3aClZ+WMlARWJHMr0X
NS/QDN1jUEGjG+9TvRsEiK78fLMLelcJC0vWcwKxClivkUay+ZAcJEO0Dt+x
F8EN/90OS0OmsKJz0bh4uz7/Urd58trAANp+pnu7hvNisgTPHpEDNlASejBt
Bbhw7BK26UxZE9T5jsgZqYhzxyNtJumuQkKapQ38ZsP1edGfCjS9AIF3pC7d
mYNxhv6fMoWF4DZhOe7ITYXiOXxOrkxW8C30h2UAJzcyyg9yH3Oqh5GxU99X
yNfhs6qyj8/FMniVXKRsnUiG6hOTaTGslFDmJHxB6YAIFlJIe8aOREBY4ntx
dVlmJO0cOfIukARZTGSDjrp9AOen6uR7NvlRJujReLP+Phh8WR223noNpIoE
bF2PsGLA5bAZ1H0Dp1m86iL2UWAsQ5NpYuU6oZFTrH6OTBT7mFpzLugLw3as
Z84UxDc3qveGftMGkRbaCmeDbV83H71l23+SCPG21d6XqojROvcCTgaWEsuv
VmSS6aUxq+t4aY3jIFEse0Dz4yNxrH2TwRr9lw2V2buS2rrdYde6ZBXbUiAE
N7hnHGpjQTvC33/rdw6s/ZysTK6mxkC93BxdVVLIzTG5wpspgme5AltEN3yI
M21uz3/qKWAkWcEM9aGr8CH37wevETYccYxRlr+QR6jIX6igWJbGxuiBb6Iq
9tAWUH7DWoMTBf76SuRI1oHD1k5Kprp1WJct6RFrbYfgRpelN9J/4OYPZ57Z
+Q/g9KrUVEWPBPuKoioqK44RAdc0Q05zKmF8PafesbfFoFcrkROrTokCT3aK
Zvb7Q9bBO5OT/Kyo5VqqOPf4KJTE3NE6/ZQXG4+oZ/9+3gYLrQxSwhRLQJ3w
pyPg7lcgu7CfTcZlAarjLb+8FGNCilvC+Xbm0ZDH9jyPO1YA/kXabT8v+y7l
7vKxB0Td30xpJpBFr93Fe3u5LsMhtSPfeHrZkUvMNj7aap2QuccU5U0rig57
7h/xLwgijv7utF9blscrD1700YV6ww+Jt2TKZGx4r/dh2VI4Ixid+RuqayWM
dUISvKHZrJjBHfXM3d/3f84Pe088j9O4twP5r+SYSKg8AX6qvc9wixGJfTs8
tF1jwPVd532TxdvQ9/NodmIWE0qPPT/zQ3KZeN24T6/DXRSz9Ct9eQ5HQ/pA
ef5NCSZsMLy1HPnSHiZnz8arCXGi4TsdlxfHafAdsyujofBL0OW9R9IU1wC3
DzI/O9aw3e+Cz6jrT5UQbnFfHbOOSqP+vjtyxhRkuH5bvJXSswJMqv1P/tEQ
xZDKcKGv5avEQ7u/W0eVhysf3SERUGhWw9M7rK2dJQXx4qdTO6yTJcBYnq9Z
EgLB6Ijnz94eFiy6zgVq01wQY/uY3faqENLbMiYIeFgSYfXWIdOvFFFyZqEv
/JIZaH3ev/JYigfLSHnmSzV4sVtL3e6ghhFQiN9JeGQhgPRUYfcPPVKCGbkb
F7vLzxNVA4n4UVoRO2Zzmj5IRIOfxY+QbBkmdHkpdsr8iDSIb8eAxe3+wKM/
PfqknPj2SVP9dJoUFq9eNz4koEAcEmC087uojK3BMkNPzysh1yKj64TWYWLR
UdRK80YIvGbO62cyYsFhFRtnnkJzeJFRqrPjBzfqh/Mf8nUURpLrcVT7aRjh
jR1JyGoxP5BgYE8/txDm3zrQL+36AHZdL+tKMN6JnrExCWmHMuGAmlmksg7t
/3uu9u85m+hZQ4w/vbAF7r8qb34n0fY0UkMVpidyQmOi2KLw9M6E1zwxYfSF
qofBFeh6Bb6dc2fH/O7+7xJrZVAzw3/r5GUy/Ej+1fIJSyP4Ya+U+I01YOV4
Mn7PmBvJtK62XmuxhNcPGmguF1Dj318ZSml7c6FLblf41Tcq23n2PbKYXwAF
iSADDscR+Ecu359wdnf4t8hfMrAdXYK/CuCFIqPQzPbbYJ2pbd6cx4QOiszF
a+8mYZvzqxsjEM/WUr719QhcHdjwTR/nRdr7jeQFHQHErEFl6DqrAiocTyl7
XZYAKXu8L1Uc2YUvFp/vZ2T1gOtOuw75lLDhxAmxyfTZcEJDcl2k4ao8bpQ2
lve8FYem8h5ftn2C2PL3dZxyMS8alF5LZec/Css/1Hi6nh+Gtz3v5L7x8v3P
eUryJ88DF/W/wcX5FDf3mVkQnNqilM1BKN601VZuJ0FO/eY4zSpfMFMedVVL
YcX85uKvRzpLiPzYHPEBQ2lMJD9lJ24eCWGyhQuyV5kw2VPocECtNrAq9t53
NubHK3bSv61tMyAsv+JI8H1azOgdepTVRIUWL9Xe+YS9grbEGLJaaUb81ZoY
oyt4D1q+JZ3k6PeDt2OdEStXWJHv6TTZMz0xmCF7VmNwWhDZqyL8/vw+S3yF
gGefTiuicMHJ8aGHSlDQ8qEVt/P+tmIs+7fQLjjf9OLCq8F5MPLo1n/LlQxj
hfGvNKsZUPrKhtPcTCsYntLivh61BBd/k5xuT+6GXk0Sdc3D80B9fgjkfrPA
rO2D5ZllIZSrq+CqKrpD1Lq7ZK7+lkO+J2oB9StL4O3V60Lh0ArKr9L2iDOm
Eikstz/PSMuiwJ6irel3vFi+g0J8aUEfXvk2f4u4TAULPsP+mfzb/fGt2qXg
dW54/Frrad9pITTeox7HR3WJmFaoH8oYVkC7iXfnczq/wzaFLpZOwD0TJn3D
PRsQfyNSe8qvFn4N2ThunRXADgEf9/yDSmA+/uHRetVvIu+TVgW1khhG91gf
oXKmRlZ7n6/xCnnwn2PbrYKKf+e4Rpa6+D2H5NvXk7mQR+byuDGTGo3Cx74c
ZaGFvV5t1SfHhPFFXLF/b10iCF74s+j9fSfeOe7wUv6NGK4wx08cSpog3s9Z
lIlM2xD3X18esghRxPJxv/cqxqfg7gPDBZUHXHju4pcjtXVdhJbSgafikhL4
+brovRf9o7DNNuOYcTj8IFmkaTIamoyYxT4xMWH9vBSTpe8W7Es6eeecYRXI
yntnbfAJouGRbSUuCZEd0bWb75og/lFrd0vuKmTs7a5VV79PfH/8+FOXoBwW
R6eM7YyiRN2k+BKKuSLQF8zWeXH5ElCoOp24y8PxP/Oy45mIlnVSAbxjW/JK
d1wVKF5TGz7h4cfAayFLdhk6IHa8osDtMCOabYvf2fFg4NH1ToVj9D985zwB
bKsGpbf8f4PUfOIv45V+4NKIWjCvo0XNmy0jTe3p4JZClufwjQ0/lF2lKzx/
FYRMD5FJ1+9Ghav6rPF71EH2L6uXEG8waFE+ua19hwUFdN8LOZDGwzaq61wY
0Vb9+v4eDXX488fhcm3dbtTPXbKnvVVC1DPvrGs1l0a3SWHFbNd6kLsucliR
ZB0uHdqhrLPaTDRRjC3fYZP8v/WSpKXc8H+uvznZQ65sanufWlMkx0Wswb5t
8aTH80Viy0BOZXeeKBpVZQzMmsyDIsODtfqIblAd+fRR2fQDCD+VWc+8Q4K0
PH0qDAcl8M4V0XPhj78S17/Suz+rDoYlMl6nMU8WLHyWHVh+eR4+hqV5rJt3
w0Fn7o7RsTIwa3+WueMqGTZk7L/M5/eTeP019MjlWDE8v0Z3wLScGTuqFtn2
0YYDk8UDh6m5e5Aj9+mr4eYuTGq/PjH25i8UpcwcpJuuB+/L5gHudXTQyd83
V1AljDQkoQf25WsS+/J5UKFPCT9ftjRny/OEx50nMkTOsOFrvj2qRSl1RGe1
R9CrWEnkF4w4p7SfBaoUkgd46ITRUr8zyMfYGV72fpazW2FHE3eNtD/hzCj5
bMjrENcNkB4zIzyuN0LG6QZfX6M1IJX6VMsfJIJml8iyRR6TQa/1Q7/fK4wY
8LpEYe5ZDFQr3U04/3jqHztGI4dBJNaYPo+bBSv0+VPZLUNhUzBxkNhpAmar
09KZpTwYq8KR9/isJeHmbx3SVKCIvZwL92z+TsNrxR8Zb9sHof9T8u/K/Mn/
kIP6O7BwHmlut6DFPopa04N0mfB7309hgSka7NWMXVs5kAUyFD50osfeEmwG
j2ZsVqWQ6ei3F3t3u8KlAJVbLK7seN/V8FS3+DDxJuL6vMcVcXypQ2Gg+9kN
bmsflTitxo4q94aPGmjeB5Gq+x0dg7uwuV9CYmU3N6a39cWEjZ6EH447ztYb
Tf3jQFX1MAQIHIniJyb/0fDL6sj//L/rUDY/n2HeOcL6fAy+0lDE4hc9lUPH
a8BHpfwtB8kmdGeJaJx0LiC2Q/ChKmnc+ZKxND2bCQ/wmAnmTd8G0mOnL/oa
ZhLbYanXQwYzteMk1YxdgUap5nCFIztK1W/ohSjpwYw8GeuELR9yUlmhfY0Q
KuyR31FIwg5V/udeFP+QwMYoFyt5ly/E/PvM8Mi+q/Bq8pluI7ChQkd003tq
1m2fb6JcHBAATHwH1Phrq4geP85dYT8lMenGr8R9VsWEzLXC9M+e0oiB6Z8o
O7aA7IfwMdOOjyB0cfRjpXMcbKM/Oo4Rj8QHjjhs+zmR1D3v27b9nOFpnim2
KDFUrc6tflP0k2Da20hW8IcVLoZ2lWkPCOFmlQMF7waCttHh2WOvSDD0vhE/
i3AtuN/7dDDHfQOeKglt1N4Wge2oPxwhiHuOzZoP15wESi22Azyi3LiL/6jc
rW9UcK9x2PIDqwiS9g3+peAzg81K4y82mjzIff24RPiYE3yhvWDSo8CBPI7n
AumH8yAlYk52ci81JgTE5YrJCuIT4n5A3GUJEGZ1us9xuwNoKXvTDxcugvov
xac+V2/CEqexZhwLM/pdjGZ+71IAjxQN0ufiqVAp1nyl5/UF8KDT0txVyYFF
X3bYrdUcBUeSdrfWB7wYb+zpbpVhBI/CqyKzpXnxOp+571UdXvRNLLD/SWcE
VVQ1gj+3/YaLCa/uQBsJ5toP0KUMVoN30ykd4tgmmOXoFpwgqyYqzWgVvEYl
MXFkn1beWzL4vGuKgTFABN9019KyDL2DWrXjK8q05Ghjcjg24rkjIbOj0s54
VgF3PL7/S4w7AlqO+rCYmTFjBM/vNR0yF/h+RmvC5R07PptNSX+7ew3II8ZF
mtob4Qb77efnPE9DKCe3pekVLkw/f8TyMNEEJ37VR8q/XIV3e/wNlOkvwxHj
S2J6fewos2k5N1BPEN8r4ys/OkuhpnOllgcrB8FXQ6mdcEUFE734Wpo6J2Gb
x4t/jEB3yyvnsyvF4OtjUTLLS4ka8kfY2K0ewtm7Ui4iZDtxXETmcripFhTl
MWT+SOTHZ/v5TDM4eHFpuSRLWO0YfJ42mZ9OjIMZk/ljUjcZcX15JfXp2nvA
uq2EtNdkGPTmmq6FbhZ8/UHbuTlJg23Jtn2OEVngGHR19/12GkxXF6ndGDsH
t6rf2VqHcWKpaGF7WtkkbNM8bX0EKCyUT2U+LoTsRz3FC8JUONS8TCV/4SMM
BLqFOLCT4Fa3/VmbY9ngEHtNcu89Gtx/ZiCUe4kJfmszfDOQFcYyh2JGl/td
IJcsU93cOQ8VAe4f1XzYkXmoP5xl5AoIbJIL9e1xhBDtG39p/TiwkWbqr9nv
83Duui1djT4nvpjocrr3pQck11QNdDLmoDKRkv74vV5wu/Dh3jW9OfA8q+Bf
91YY39I0X/vgRA8NhXrRBhUbYHxT9jxHcQ1Ip7sMzn3fgTlsZqUF9CmgORWQ
YikQCUv7j18e9mPCKO6NDwZaRdAxsctSqIcSj1FUe2b6LoIyE6Nx0kAHpCfb
3L+U1gqXMr867KlbAkftrn6XPU8JNzXeAnKNbX+X8DeYqeAMvN/iMJ3Q4cKB
kbO6GqMHYZm57cPGMz5kOn1K3mHNC7q+0vdc52HDIuU+PK/zEj67k0ub6tGg
+meBKHkLG2AoXin2reDCOx4Fn9J+vCXu6zX/tvolha31nXSy5C7w3ub5BcPt
/LQW/VXqWn0FIvq/5sv5s2MhE5vnJY0GoiljkmbEWhLXGja3tBI+VEoIk2CI
1B48PDYydy3qCTTWfPf85L8D6ZoTyY7eBnB6xar/aj8p3spdf+U66w3SkPu4
cpoVVSD/tl0KFQo0u0nf0y2A//+9k39+0fKL9v/1E5ioYY5C9wyPx9tSoM4h
j093Rl7DWKp8bmA6GTRJ7Z7kuy6CELc/7hMPBbZyFFPrPn2z3Vc/LOVX2oNm
N6EqyM+JTe+inrw1/Ej4DMhdOsoshXore9c/v2wCWq1btqdLVuHAyu1QIxdW
XFseEr457gclgSXRj2KuwqDMi4tJrWzYxHjOcWSFHYqUr/KaFAhh5b9zc4Pw
yktkJAL+3Rpoc/5gn5W2H/QwqqtducWKXbSULylG04ntwCqZIIPxrvFUhPIo
/KOswQRg2yVaNfcf//jp668x8B4ylx0UNyAIY5Uhtb1KyPdla7H6+EHYyhJP
CgQ+dC2QjxmUTAeCUCFO0tBh0lHBkufpHyCZVUmT4iIJkle0/d27oQAZy56P
dtwQQONPN44rXjtI2M+LaVfeUMIlUpvg6P33gMwmWOaxKCOWZPnfeBfEj+ku
SydiKbThhsu56MGSp9DzkXNLTXYHvtu/HGnuYQhlJ1OY3U7y4gU+Oh0LY1bk
T/SWoEi9BhML61u7Zxor+9RJSNZK1PH78Yb3nLeYUaDmSYIn7Q2g7V8P+pQU
A25BIGK0xoj21wr5H47vJR6OcwkITiuh6LpA6Sl/PaAp6i92N+ND02+9s4px
Q7BN94KtX1BjmxfolU8F0rvPXG7mFMGQaZt4YvMjFJ6RZn5bvAXnWV6ckub4
Czsfc/YnUjTARGsNFo8q4DEVj/V9ZU5E447ZxINBYhixlNdEYjtFPDAsyyk7
9Z6w8H7bRtcihUFkfxzPhMkhhW3BMm1HLPHHwbV1zSMOLri2Poq9y4idLXpP
98sJYoPItjorAQzTXXL+06zgwlFpSTsohI1xkw0i7JlwMFP6foopLV77eJBJ
Q0oJbgt5vW44J4CiQys38Yko3jwjTlqn/oegSHR30surIdLYipLulkvivrmc
qgVOMrwtftb7i2gF8Fzw1xbhF0e6jiLTTOpRQr6Mad5gjRpuVNwL0l0XRqq3
P55lKS8SfItemUOlori3/enWx2Ee4uoK1ZDCfhVc1DR++TyuGoLGJVVnIjZh
a3RXvcz7ani2Trp31WkTyouSXlxysYOvHirTpr2cWJwSfWlVRA7vD4o77OW6
TzRnk4lcpngAZpT6ScmeOzF8NrR2d2YwBD6byyrzZcFiUtGcn0OmYJKWM/Na
nwePtwvM0zTpAnX8kZDpXj78S0s/p3XmApwT3Dxi3MyBJefnSs6pFBCvz6kM
ltZK42FnKV3mO8VgZs5k9tqAEl+HZHR5ib0hCiaNcualpPFH3UAC946vsFak
HnG6bAEmtSjAPFcJaIKylmrMBfC/39f5v/OGJrM5Xnd3GyQ5lElsB5+bnjKo
l9ZAc01fCRKZ5hmvbc+tXLoxqXvkQgmJu4YODIQ8lrK3mcYNkaDjZUG+u9EI
Oed/0k542YPRftKNJRlO/PNCPSjLyxsmYwZpQyjYUKa85paLAQu+tPKJ2hUV
AoTKL9vrjawYsNRWuFXgA6a3A9MayL1BKDX73msuNuyOsGzf0XUDDuZe+sFg
y4xpDfkBrotiqPObJ6evbIwQN3HKeNEbARKv25iy5Zjx9F4nZL2cSNhFvpHS
/ymLc5wvs85tnAfhPypNLXqc+Mtf2XtA2hT2mI9fJ/fgwa3OsIstN9bgbwG7
ynnmRlg699GgcsMExPI6Aj4H8qAOt2lK9yYjsoSppK14xUDX5mEnSVc5/KVA
5G/ExBHDaKCkrF0O1Jb3rPEkGcYxJj5bGnlImARcdXF/IouPXXXP7czKhTLa
iOTTcdQYIW22xmATDFEJQeQ2oSxIfUVGW46aGfV39lrh25sgOvPky7lH0vD0
y7myKzMCuDEiFGNU+Qu2eSy8cgh6DlmmvTO1BQfRyL909FzI+H3+UrX2HfBY
VRHyf8yEVVv0J31K94DC6Z7Vy7d3Y1JyL7ug8zHoLKWZi2HkRR29uXbR6Bh4
sTI5//4vI34SovU9bseKs0JRIn1K1+CwreVzIf5wUMg1iV8sZUaLcJbDJn8/
E5w606mWixLIlJn35E9fNjws9klKdqDBqlJHsePrPVA0nWxtGTsHtM+f54ow
BoPThBRtQyQLZs36sep+/wpS+/gTPTQWYN2yM67qXB+AhWq60ZVZWHG9sXvV
Y+ofB29mD8P1xyvXpT1+w5raXMBxsgFYoT7xhX+1ArSfhS1tDZFiuPupSUrz
PeCawWGU/nA3ch2+cPksDTuUqMqLFFULoeH+UBvRH0ZA1yFlmiXEiw8+u/kb
fd6JAY3j6k+2EuE7pV+8R0IlyGPUid/vSLF70TeO7ww98Dsc4Xj+ThgH5Z4G
hj4eAHcOY6JkYQa427slyIZVodiUgiyWTADbb9LtFabpJ+q5dOo3P4rjp94n
j7MStwivhdceTG0imEH9o6W9uwz2K/jyV3qR4YDa6OCA22k4uDn95PO2H91Z
3qfp5RAI8ss7+8N+sOBXs6+Pi6fSwdDarcGGoEUNRlv6Rc9e4tSz1Pup8+IY
Zf53ymmeFM9cdQ7OL62AU6WdG9Grs0R5qqLW+i4xnCgv73xqkw6zM5aP/f7Q
4oVsL2//eR40f7Yj8ZXBcZAjueDkr8MOyiqVeBuE0K7niVJtKBmSyZSbD+SU
wY7dTq4K0S0wQt58Ja5xBf4/2tQ3gw==
     "], 
    "CountMatrix" -> {{370, 130, 0}, {164, 336, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwN0lVrFgAAQNFvTrFzKLbO7u6eLfaG3bMDY3aLOgNzCttsna3Y3V0zht2F
IqKIiYJ9Hs79BTc0clj40KBAIBAlP/jJL/7wl38EJQsEkhFMClKSitSkIT0Z
yEwWQshKdnKQk1zkJg95yU8oBShIIQpThKIUozglKEkpSlOWcpSnAhWpRGWq
UJXq1KAWtalDXeoRRn0a0JBGNKYJTWlGC1rSita0oS3hRNCO9nSgI53oTBe6
0o3u9KAnvYikN33oR38GMJBBDGYII4hiJKMYw1gmMInJTGEq05nBTKKZxRzm
Mo/5LGAhi4hhCUuJJY54lrGClaxiNWtYSwIb2MgmNrOFrWxjBzvZxW72sJd9
7OcABznMUY5xnBOc5iznOM8FLnGZKyRylRskcZN7POYJT3nGc17wkte84S3v
eM8HPvKJz3zhK9/4zi9+ExTsc4JJTgpSk4a0pCMDGclECFnJRnZykIvc5CEv
+chPKAUoSGGKUJRiFKcEpShNGcpSjvJUoCKVqUJVqlGdmtSiNnWpRxj1aUAj
GtOEpjSjOS1oSSvCiaAd7elARzrRmS50pRvd6UFPehFJb/rSjwEMYjBDGMow
hjOCKEYymjGMZRzjmcBEJjOFaUxnBjOJZhazmccCFrGYGJYSSxzxLGM5K1jF
atawlnUksJ4NbGQTW9jKNrazg53sYS/7OcBBDnGE45zgJKc4wznOc4GLXOIK
iVzlGte5QRK3uM0d7nKfBzzkEY95wlOe8ZwXvOQVr3nDW/4DGaSy4A==
       
       "], CompressedData["
1:eJwV0LkrxgEAxvGfIxRyJMoiZVMmgyiT6TU48heIZPC+Booox4I3SXotsshg
oCiDq1yDDJT7GklSsjlzfQyf+tazPYWNkfpwXBAEg7yIV9754Ot/iA+CRJJI
JY0MMskhlzwKKKGMCkJU00AzbYSJ0E4nXXTTQz8DDBFlnBiTTDHDLPMssMIa
m2yxwx4HHHLECaeccc4lV1xzwy133PPAI08888Ib73zwyTc//BIk+IRkUkgn
i2xyyCOfIooppZxKqghRQy11NNBEC6200UEvfQwwzAhRRhljghiTTDPHAoss
scwq62ywzS77HHHMBbfc88AfsqJKFQ==
       "], {}}, {CompressedData["
1:eJwN0E1LEwAAANBZu0mRJzVwEuRwChZRTJ23Pg4eFCqMMLTtEHlILTFmgRB1
EAlESIYgYtONMrCCSBo4i2BQ2WEwAhFqB7sMrKNgl97h/YF3IjFyebgqEAis
cJgg1RzlGDXUUsdxGgjRSJhmIrRymrNEaaeDGF1coIcrXKefAQa5SZxb3OEu
Y4xznyQPmeQRT5jmKTPMkmKeBRZZ4jlplsmQ5QWveMM71smxQZ5NPvKZAl/4
yje+U6TED3b4RZkKe+xzwD8CYg8R5Aj1NBDiJE2EidBCG6c4wzmitNNJjC7O
c5FLdNPLVfq4Rj83iJPgNkOMMMo9xkkywQMmecwUM8zyjDlSLLBImmUyZHnJ
Kmu85i3vWecDOfJs8okCWxQpsc1Pyuzymwp/+Mt/QuxSAA==
       "], CompressedData["
1:eJwl02loCAAYBuCNmPuam2JGE3MfRbmPjW3Y3DJk5r6JXLnPobWxsBZq5T6H
JpSzuYncV66Z3GeU61l+PO/7+6vvDRk+KW5iYEBAQC+R3wUoRGGCKEJRilGC
kpSmHMGUpwIVqUI1qlOTEGoRSm3qEEY9wmlAQxrRhKY0owUtaU0b2tKO9nSg
I53oQlciiKQb3Ykimhh65t9GLHH0oS/96M8ABjGYeIaTwAgSGcVoxjCWcYxn
IpOYzFSmM5NZzGYu85jPAhaxmKUsYzkrWEkSa1hLMimkso71pLGBTaSTwWYy
2cYOdrKbPexlHwc4SBaHOUI2RznGcU5xmrOcI4fzXOYq17jODW5yizvc5R73
ecgjHvOUZzznBS/J5RV5vOYNb3nPBz7yic984Svf+M4PfvKL3/zhL4GetSCF
KEwQRShKMYpTglKUpgxlKUcw5alARSpRmapUozo1qEkItQgljLrUJ5wGNKYJ
zWhOS1rRhra0oz0d6EhnIoikG1FEE0OPwP87jCWO3vRlAAMZRDxDGMowEhhB
IiMZxVjGMZ4J5A98CtOYzgxmMoe5zGM+C1jIIpawlGUsZyWrSGI1a1hLMimk
ksYGNrKJdDLYzBa2ksk2trOL3exhPwfJ4hCHyeYYxznBSU5zhrOcI4fzXOAi
l7jCVa5xnRvc5Ba3ucNd7vOAhzziCU95xnNyeUUer3nDW97xkU985gtf+Qch
WaeU
       "], {}}}, "ExtendedClasses" -> {"Not Question", "Question"}, 
    "Weights" -> SparseArray[Automatic, {1000}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00044159, "SingleEvaluationTime" -> 
    0.0061762499999999994`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740158275742425*^9, 3.7401588612161293`*^9},
 CellLabel->"Out[94]=",ExpressionUUID->"7a329f44-a841-4e2a-9c9d-6cc60b045aec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"a28f438c-b49b-4104-a35a-3130cb085a1f"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8912604464301641, 0.6944741802940725, 
   0.27370902115127005`}, {0.928327465642366, 0.4911976474695699, 
   0.003568374951087935}}, {{1., 0.42, 0.}, {0.9175725176402327, 
   0.806972124925851, 0.505302658348255}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["370", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "370", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6928838951310862`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.74`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7156673114119925`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{370, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.6928838951310862}], 
         Row[{"Recall = ", 0.74}], 
         Row[{"FScore = ", 0.7156673114119925}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["164", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "164", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.30711610486891383`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.328`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          164, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.30711610486891383`}], 
         Row[{"Row fraction = ", 0.328}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["130", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "130", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.27896995708154504`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.26`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          130, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.27896995708154504`}], 
         Row[{"Row fraction = ", 0.26}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["336", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "336", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.721030042918455`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.672`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6956521739130436`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{336, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.721030042918455}], 
         Row[{"Recall = ", 0.672}], 
         Row[{"FScore = ", 0.6956521739130436}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.74`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.74}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.672`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.672}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "534", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6928838951310862`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{534, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.6928838951310862}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "466", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.721030042918455`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{466, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.721030042918455}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["500", TraditionalForm]}, {0.5, 
       FormBox["500", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["534", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["466", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7401582818924913`*^9, 3.740159096756035*^9},
 CellLabel->"Out[95]=",ExpressionUUID->"2ff93e4d-7ab4-43cd-b9e3-5ab0f946d6b6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wh - question s", "Subsection",
 CellChangeTimes->{{3.7401456348239403`*^9, 3.740145642044519*^9}, 
   3.7401520017503357`*^9},ExpressionUUID->"8c8c4504-2f1d-43ec-95ba-\
13964edcd4f7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"whQuestions", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
    "\"\<which\>\"", ",", "\"\< what\>\"", ",", " ", "\"\<whose\>\"", " ", 
     ",", " ", "\"\<who\>\"", ",", " ", "\"\<whom\>\"", ",", " ", 
     "\"\<whose\>\"", ",", " ", "\"\<what\>\"", ",", " ", "\"\<which\>\"", 
     ",", " ", "\"\<where\>\"", ",", "\"\<whither\>\"", " ", ",", 
     "\"\<whence\>\"", ",", "\"\<when\>\"", ",", "\"\<how\>\"", " ", ",", 
     "\"\<why\>\"", " ", ",", "\"\<whether\>\"", ",", "\"\<whatsoever\>\""}], 
    "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.740145645159799*^9, 3.74014581746736*^9}, {
  3.740156894480092*^9, 3.740156944142395*^9}},
 CellLabel->"In[55]:=",ExpressionUUID->"2c39e4b2-e44e-4951-a038-6f2d45c565eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringContainsQ", "[", 
  RowBox[{"\"\<which\>\"", ",", " ", "whQuestions"}], "]"}]], "Input",
 CellChangeTimes->{{3.740158611009521*^9, 3.740158628101625*^9}, {
  3.740158664099506*^9, 3.740158677387236*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"8ffd62dc-42f0-4668-98ee-f7ee71c8aef2"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.740158770055189*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"7276e46d-bd20-462d-90b4-aa990e1d8d55"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"vectorNumbers", " ", "[", " ", "lines_", " ", "]"}], " ", ":=", 
   " ", 
   RowBox[{"Map", "[", "\n", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             RowBox[{"TextStructure", "[", 
              RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
             RowBox[{"[", 
              RowBox[{
              "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
              "]"}], "]"}], " ", ")"}], " ", "\n", "     ", "/.", " ", 
           RowBox[{
            RowBox[{"Missing", "[", "]"}], " ", "\[Rule]", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}], 
         ")"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], " ", "&"}], " ", ",",
      "\n", " ", "lines"}], "\n", " ", "]"}]}], "\n", " "}], "\n", 
 RowBox[{
  RowBox[{"whQuestionsChecker", " ", "[", " ", "lines_", " ", "]"}], " ", ":=",
   " ", 
  RowBox[{"StringContainsQ", "[", 
   RowBox[{"lines", ",", " ", "whQuestions", ",", " ", 
    RowBox[{"IgnoreCase", "\[Rule]", "True"}]}], "]"}]}]}], "Code",
 CellChangeTimes->{{3.740158920961334*^9, 3.740159136230294*^9}, {
  3.740159202152775*^9, 3.74015920902262*^9}},
 CellLabel->
  "In[101]:=",ExpressionUUID->"b05ded02-c2b4-4cfe-b820-81ccea690354"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"whQuestionsChecker", " ", "[", " ", 
   RowBox[{"testq1", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "100"}], "]"}], "]"}], " ", "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"True", "\[Rule]", "1"}], ",", 
    RowBox[{"False", " ", "\[Rule]", "0"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.740159151006712*^9, 3.7401591724621477`*^9}, {
  3.7401592685703497`*^9, 3.740159287497027*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"2e8f4877-cfc2-4e55-833b-a6cd59c8c11f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "1", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "1", 
   ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "0", ",", 
   "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellChangeTimes->{{3.740159166627046*^9, 3.740159173190194*^9}, 
   3.7401592178537827`*^9, 3.740159288718835*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"007e139a-ba5d-40c2-bba4-d6b60ac6e021"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["1000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 3.7400883194708557`*^9}, {
  3.740158177371798*^9, 3.740158178411964*^9}, {3.740159552959792*^9, 
  3.74015955405449*^9}},ExpressionUUID->"e1bfd86c-b4d9-4adb-ab28-\
100e769c4867"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"createClasses", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"createClasses", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"createClasses", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "300"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"createClasses", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "300"}], "]"}], "]"}], "]"}]}]}], " ", 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 3.74015855015483*^9}, {3.740159429774341*^9, 
   3.7401594638126287`*^9}, 3.740159505209405*^9, {3.7401595565268803`*^9, 
   3.740159576062914*^9}, {3.740170957481477*^9, 
   3.740170970433209*^9}},ExpressionUUID->"2fa3af23-900f-4dfb-b4da-\
54d74ec65c98"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Failed"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Boolean\""}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], Frame -> True, FrameTicks -> None, 
                  FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Boolean\""}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["2000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 39980200, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10529750764281074200745768412229120318435128887516371411408, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529750764281074200745768412229120318435128887516371411408,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740159512816429*^9, 3.740159782434148*^9},
 CellLabel->
  "Out[110]=",ExpressionUUID->"df4306c6-f894-4f11-9c3e-2f4b711cf376"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl200", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"createClasses", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"createClasses", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740158251434836*^9, 3.740158267226678*^9}, {
  3.7401594789628983`*^9, 3.740159482899502*^9}, {3.740159582199562*^9, 
  3.740159585588765*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"b6d3bf9f-acfc-4af8-b284-392b2d2d911a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["400", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["400", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7099999999999999645`4.442172731972345", "\[PlusMinus]", 
                    "0.0227165160236034828`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 400, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"], "f3" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 3]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence", "Boolean"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f3" -> Association["Type" -> "Boolean", "Weight" -> 1], "f1" -> 
              Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2f3)" -> Association["Weight" -> CompressedData["

1:eJztxTEJgEAABdAvJhEnU3gZPG4XwdmEBrGFEQQHOwjvLW/YjmXvkpQ+adN4
rWedbdu2bdu2bdu2/c/zur8fzDND0A==
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8638625972092938175]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 2181139535596031377, "Output" -> A\
ssociation["f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6345089180380480927, "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    631332860152842886]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    2682676190599947125]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 400, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.2775}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.293546, "MaxTrainingMemory" -> 116768,
                     "DataMemory" -> 3448, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 7, 9, 16, 11, 48.862662`8.441552099376917}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                    5830460000005304866]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                    10.224338282763073`, "StandardDeviation" -> 
                    3.9951166871210613`, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 3886868189269964860]], 
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 7098352295252712621]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7255900053155452923, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7649166098026585256, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 5208716758835946799, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
wUX8uBmXoPEYOdoxSRe9TyH3kppNT2jI5RrQvHIRz7TKmFFFHp98W18wUcCe
z+SN9m1G34ZVD7tFc11R67B3rtowA0G+8zRWl0SBHbqMfs+LcBUdnVIiOyPb
naf0J5KpVfPir/y8/NLbHlZwvCh2nw+lMxOl15YUP5fnGNM9VuLdQ3Nu/ZNP
k3C2/Rv3rtTbsH5mlwAiS9zXz7aXpcrVCBxK3M+4clt1LPLomea6uCfc2vEs
EY6SYurHoq5ti3ZMbiOZlJv+LuHy2QoigPscu+m6TRzyAvvh7ueDnkTqIPqA
MrPV7M8Q4Xj/MY2ddhXVW/bG0NS7Pfu5clNCYE+zuDwNKa7ca08e66BeXnq6
cievBT3WnDDPnXJv4Lg9Joxm79/ntTYxVM/PKu577a625dDreE7txgtuonAb
99DweOXidrNF2xsoe+og1MQrD0e9vYkW7gTXeeXDm3bBus6JZPqVey5MTE8B
SAJ55QRfwoOZPKOn3Pcj4ZLMuJ3g1sUrW/js3Q4gtvHo2m03XrI3Uw4blax5
5bJwXqqT9+LT9Zu2ca0IFswGm6N89dDFQWumuqqYcLlyP20NXlcFT7h27oVT
rzmYQ8e+sIJ3XT0q2lhT5I+jFyDlAocpQkldeUrK5QgSrqgAm5W6cu9Eavkz
aibr2qFJP01KuNoWba8f6TaEmOkzTPI67MVP+5713raD2QCRvN2kf/eanKWg
affBc+U2SHlr0osOMvjyyc3umHztbwXklbuA19MCLXZ4Xj3YregVrcjwepTu
PD1p25gaa5Ybtfve6APFydu1E317d99NeFkam7YfVY3lys01GERwJlcku175
m09mhtEFDkDd509vVtUdGSpP0Y1rejRFNHHPkiZ/vHqe5p/kG3ayRt/1lXvb
yPa9teOyZu4jjmZ5b9HMk+WhXNeK/OZjhuux6+aTm4eaVlofKUpWQqIDe0rL
vZdmrvja245grZy49DJO+i+D5xrXiviDnP5m9D2dcTOJwKhEnv6uVyoh29WZ
Fmvh+ZwZaTrnRYzmyl+5twyawVwV/bwGceVegXyiq35Ey9Gd/4kGOa+EuWUm
7a7cPlS9r0Vn69F3v0yMMu0Znh/cuLxaNIq2Bq/a2mJ88dO0P98V498rNE9+
3srzsDHN5rlVLj7bLCKYFkmgzQQX9wAk02ReIzZ7aH/1lUvagv17d2eeey68
ohhcnEi0hTttn5yJuP2Wrue+cSjoAw7aCKVau2bwyvUEb8gc/2HjXznufnnj
yMuTof595Y+5iGZXFcdrpF/zwpStpGqnByO783QatgPYW2sy8vmRQzqbqGsK
sbd8r/nyuJNfvEFhg1nIuxTMhm4vG9p61lJums9stqGStdNP7p0478MVG2Iv
bxRCdvcRsl95bz7/vTpgjs1mx7RD2zfcbVPDHvly/cvAECV1w+Yx7yamnrvX
N6d3Fax1gTf3+Sram/BmtjySOX+vrnebwDzW5txnyuMiGJqwF8L88JXrmZsI
X6L5+OKe9zTsnDWssh38XL82LIkTGTDzKGafm6+LO2O2PHkivdaXdm525G2/
NWFnW8CVD0tKAKo9eHC7y/+9nAKx7d6Eqz7y+zx+1is0YqI/pZD7G0fElAHr
kFDW+/ll4TMo34gKbdo/xu9Y9YK8zf3Xrw3vQg978W2S6TYrXXk1YF3eSBVc
z42z7KP2pxviNrDtjZffDvMtXnCv1m2XxZMrtyfEtJ6tkSbS73pt/sVTrMsr
T9rDMbzm0Jjn9vbk5QMYsp+phgzbUzPf+Zh8s13X9k7Cg7pvxS/qS7apnLh0
w5vy896uFsj1YCp9XLl20IPumXkeOz8vEOqPbAW12+Td32klC38TSbxIgJ4r
N34wFWx32vjypdGAbZe9sUpcUChXvu0Y85aPlVE87pVXO1geqeSxNtlyvaZK
TQBAl+wdq1dvXnvxpv7wIp1n+fp3zHME87cjQj3lPG3+sDlqRW+1SrlyLxF5
h5932+Nz7WRacdteZTHC8/7L/Xy3X9TrjUy4hqu5cn9qgBVV+7UM8NaVixBV
9mugUsb1R/4SxmObT31b+/rK5xxvpWxrq5yW59vfYXkDRvB2+7TMl87gNrwQ
ja2g43f+JpfMxYu3cdRaynmGbfDWKKqx9JUvf7ljBmzZH53zHHEx0Xssywxr
4rlt+9MEmEmjYJB3nj4+ukcNRjgE1194H+D9OYPlma8Z303ji22VSOjY9Vx8
myvSL+yuLbUEEzcvMW20NzH/eNrjBzdeubtaovwld9AurrzHxedmMu+xZ/rO
B2Ycv/1B4EQc7SSu3P5aQE+gGf4exvv5+AUMy9ePTS3xux0pN9iecefHSO/m
RSV7BhVR5dfQSz5Hby2B1kC91fvaiS2RyzvX9uT72wf3HK24TOLR0tnZSJuf
33Hdr2ubQHTZ+XnElqg8i9s48r7X+3R8rJlNNlq58bhk+/a2jLime/Fzyc+f
aBKRtXtN+8qtjBx/Z8Lz1K23v/JwGJH9KGY2r9+UlFqsj1+3mWEvVy53s7oa
2Qz7YK78lPi5C+mYzc9jpnyYeZO12LZY9/d5Uwk1roXWuJf2yrsH154O2zej
SnDlxhEVXm1HfbW+eOXS5CVl945YSzuMa/emuqwdWUpKe/Dqj/Gh15HK+xMn
IdcLGbHW+FmJOVM/oJc5V4lkjQzv1YOOxNzYkFjHDyy8ciO1ZXeaZVV/LuQ+
384DS0ueoPhpjGsPU7fmZPqM/oub54kfjbDXOHojqxp55eYVMTWLLbYsnIvP
/sqE2SI5vTm0cv2+csKdaJmyP3CknZiStwboj6PoDcuVb5OTsLwV1x4tDF05
IXUkDQTEaVYp5UYLhIr6CgB55HM4Ws3S19J5YgT5HNZlUMiWY6Z2f73yY0ek
FXLvXlhmufMHQrw5EvFL9Dq+z9/+hsnbJW4+0js0Vy6ttbau7ZpSK1fuROzw
86rlOZkHsDdnvZfmbJTtWZeJS2PTy7+7RuHg4uT2ltTyh1TsqPL3cvL53h2x
g8ngxl+QuvO0o1xH4VVYb5vNlEvXe4178yd+rOnKV48YPZpBjZJe+5Ej2zC0
bfhTzze+3ma6xCtvzmyz6/n58fbG1ag8mNK4ckMsQTSuhtpG/crjdiAYGjVI
8/R3PqaNvTDjT74cr4qPlBtf2Dc1OAUn64a2+XtVf/ojIc1Ohdee5cJesbRf
dMmIV0n5bu/PvHjju2acK5e2BIWd6zTsp7xy3XXx6qd3JmqeI38FqRiTWya1
XJb70r3aYG1wS/NNVl056tlWKaxSc2JSP9FeFwFED0hJO7EV4XgRPLDNsuWV
i/I24fgO+/rz817Ct2fQXxwT9K8+7XzwV1qQ236zU/+Cs/lGQV7FpZ2YJd1R
KyqWF7732rv3dkLFb15lZ5xcrFvJ90JL8YrYnU/8HotVQu9o2mhx7XzZti3b
6MK6v+pz5ZbuvScITZzhr165iVv9rMmS6EItKcdB2nEZPYX+0saVs/yY5jBi
Nqp+5VFSter5WMjwN9auvAV6xm8YvY1SV2552ksxJpQkGSXl8pu4/G2Z/9w6
gpd9lxzc20YehuuXT4Tj1hgNSnQvM+VWjfwhiWNr27i47dGMtqsTNKVnPHVs
v2k+BKPWIO/8T9CMKZp5NcCs2pU3KSJG1f3hJx67U25ziA0kx4ut5fpB2cB8
b4PEpf+R7/U3g7y21v3RBGzok8fvlRgDeO/NkP9/CxcBIQ==
                    "], 
                    "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    Block[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy1WE1IVFEUfqHjT/NnOZmMUhNtkrFNLoYIW0yB6Yj0J02LlEITpmiiha6s
oU0EkTmLoowsUCQUSotEIt4ULQxsKFwUMUiFkIUFFUFUVps5sziPwzn3znN1
uPfdd+853/3Ozz0bjsT3dq4wDGN7gWG4+uqPPXrvT4FMN7Q5f1RXpi4ZZ0Zr
D6xJUd9hXDOfeBW64rWsa2pJzjzprbDMY2kGw5/HTvnYddT559wfNk9Xrhb/
r3sOJ6X2Lvc+aXPWteVbGYsrZR8+H3hw9HtvXySyavn0zuqjijteP3gj4fNW
WfkIUmpH8oL3+r9hD21f8b3jvybLeb5k12H7YD9Vu0EvWF/xd3fmhL9Un89Z
/aj74/Tj5s9f7Vk30OVk9VqMdb/YGfLk+Evdiyo/dP0ZSxwPdePOnmh9e5HT
zeqja6/0v63jL9uj+60454tfQ+fwu1szpRZ8lj5dbplwW88DXKV47psajHT0
8+t6ft41A/5y8jucC3ZReUwss35ExV0qn2I9MM7UPPgLjPG5wANpfsX3g/2Q
un9qfzjf7ZxqW5lxaOeHmtjt13/uuMT4Az8suKF4zfKcWS/1B3zvYnsUJYev
XfUJyNP9X5rGGx3i9RRPKL5zduB75u4JZC7uCfmgGxcLD68vCj5bMqW46+ZX
jMvi2+azD+eKyfvuijvDzTF3bjw/PdS67aY8D6jy/2Rmsuz+aEluDHFe1V4q
Xkp5lq+k4jfFM4w/zAe+LhycjVr9H+pSqj7UtYvLO1zegzxK+SnFs2vxZPXc
xQI6rgvzLdidb/1G2Y/1l/qr7vvWYgcTh6i6iKqTOV6CzL2D0PkUHhz/VeME
V5+p4i3lB16H62Cu7wG4c/Warn4cPtL8COOnQ899h1oXzLWO2onEm48m9V9d
wLGx+wGdz1XzrLR/JI2jOA6QfEDvbSneduUN6lzgGfee3hQaqWv0/CbvCSTu
A9ilL35XUBL6LFSew/viford8ZzzO7vrXwtOivUk9AHwPPYbCl/VvMitw/ZQ
fTDd/al9uDyA9bK8U5lzuX4g5f+6fKH+4/prynxH+R/XU6r5VVVK6wGKv3nr
MbZrYCRcQtY3WE/QY0dHMF31uNCiP1Wnce8M/B339+yyV9fPcb/sP5XBAvo=

                    "], "Version" -> {11.3, 0}, "ID" -> 6413031506679139115, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3519824094447848605, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    1107852814282405113, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
                  Span[1, 830], 
                  Span[831, 831], 
                  Span[832, 832]}, 
                "Wrappers" -> {SparseArray, Identity, Identity}, "Output" -> 
                Association[
                 "(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxTEJgEAABdAvJhEnU3gZPG4XwdmEBrGFEQQHOwjvLW/YjmXvkpQ+adN4
rWedbdu2bdu2bdu2/c/zur8fzDND0A==
                    "], "Type" -> 
                    "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
                599417332904572119]]}, "Invertibility" -> "Impossible", 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 504074388080892407]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                1867570019887632781, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7443894421457286454]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["Not Question" -> 0.5, "Question" -> 0.5]],
        "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association["Weights" -> CompressedData["
1:eJw1V3tcztcffyqpKETlMt0eubRcyqWFvuckS41lXYa0NtJla+XX8pDLFCla
IVPuiS6YZ3NZCKPv5ygjkkSkJPUyYpZLlkv82G/v83r9/niq53m+55zP5/O+
nRznxQdFG2o0Gp3pvz+CwhdPWrAgfGlwV7yJCo8bMzoOXxr8+/Iy0mhelTxU
nLQ/klPtYTbqr1Rhb5nB3vj9Qn62ipi2x41c9ueyo9OF4loWRCEXu4nkK5Vs
3+dDeeLIdNLaNKv569L56f4JdOvCfSKXw2S+3YO73sqg2Nar1LnKlqd8eI10
YWeVXom7KC/MmQ4E+/PLS0ezl9cT2EZfDUu/U8xMndfS0o06ml5oKuo1c+mN
Q1/hPGcIuzn7F6ZVVikxr5xEt4AtNK1mA/thWRtbHm5NTwYbkPZOKqH+ofmb
WPEbPdu2poxN152hRvdMQp1FvzxUrn3Xn1D/+QnDKOQS42RpyTPsUskzu5yW
llsrhkMW0ng1ktKs3bmrOKn4TtzB2yuthLatiO0Onk1hhUspqTP19N9uW2S/
+Lxf1moKtM+lnGA79qj9NTvmMJ4Z9TPjqPHVmpPqhKoY+Tu6dpIIN7Bk6qnz
bLrShT+tSKHhRaqy0GoP7TqynyYEdhdhZQdlffZPU5TIQoVHWzUo2nhjfvdk
VypgGsWVDDn2jktOZg3PrZhXy0PV9qRGvJ47hH9p4sFz8vPpyHFn6vLCQZS/
fMBWhcwlrBUGjcrNJ/vV+i4Owv6LruJt5ny2ZeVvpP/ykDI63I3bmjxWgIfD
bB8x52Y0b2xLIuDm1RHIWlYO5ph11cMXyt2LKqtsXUDXPrcSnj4fsYS2c/J9
7le7ad2iZnXeziMUMb6SLSrjIrY5jIBr4szJrLX6gooz3N4mEp7/PtCFjA75
UfvbLOV1rcIuV2fQfbvvqGJRE1l+c5J6bcuimT/6EPrcPLVMgJO23FCgH8yM
nv+jFqZvJpejx1n3M3Po+h1L/sDuOcuoM+Tzv+wp5+ZXsF2d2GOW8MldSOAI
eOF/rpDp1j2m0XG9+EC1DwOn3V5OlLU3/5UtzyxcuZUMruylEYPKqDQtg9kF
VdO7bv+ol2sTJYcxz0J/I9a7ZJiwGdPCEqv7i5bW+7SuvxUtuZLH15qZ0KW8
LDpg8Vyt9mhj4O4fa07Q0yku8u/d0bvo/toC1tL7a6mpaFNrarvemzLNMph6
ezKrHNhDagg1oVdw96rBUXa66DhDL4OOmHCDRnvR/UAFq14+hSh+gDxra44N
nXoZxru4X2IDjkUxfbkRuax15MUuw3msYwz1dk7hodo6ery6hel69qIgx6k8
+5C1sAkul7oBJqgvqd6coS/dfxN4u/ti2tj0hnqMW0NZQ5rVT5oyWcK0/hIn
wznvmVfeSSU7QkNXGpspr4Nz9JNVdJVWW0Yo+6xSyWbcp+I7i1NKmWU/gTV9
zUPo/E/b1DV7b7CYEhPBrVZwPV/rCZ2j3y+0WjnHqRbpyqZHSaWrp0URdAie
+NwYw4FD+hYHDjz99COo1bqCBpX3YZ7592jypRrCd9AlagR+0CM0i3m+KHJn
Dg/WU8mp2ZKXVVQj9055lM9rbNPJqCqVYm3vqejBZvtUyWnsg/fwK/uzJvz9
gNvq4qg5UhvwIzxvXOzEUaeH4wBufsKXW/m3qbonaQp8ZHbpGoLnXAk7oFZP
MGUBOcsY5rHyo99VeOZB/3tszw0z1XvnYLFsnhtPjy5WwC9ggXOxPi9MT71M
pnD47A93VQbcMQevoZO9mv/W8k/vTSR4QViXcjbC6CdaoExWoxzjpXYuXtpf
ih6zIn6m7tXJlGXXQqdqvcX7qn5eQY1nCZ9jNiG23iKH92fl56x5RuNhFd4N
HwZPsB48Xv/sCVV47yDdD1mSJ/Di8MCzxI5PJp/8F6zR9xPaccWRPI6mKGFJ
k9g3JfspzWOwsNleqX7mOI8Kvp4lvQhnWszWiLk7Y6kt7Q7teRJA2w4bcvC1
adY8ySV4J3IHeE19FMHAD8x6beYZWnwihA9r72QXPshR/D/tI4InufBn9iWU
V+4ldXcwLIFbKefYwhI7oblYrz4zGOtZt8FAtDkGkHFELb1ISJYeAl64hjZI
b4aPrHPqQ+vf5YhRSVZin/co/v2mJOqZ+oa+snAiI7eL7LrpXRp4eYHMAcy/
27bbAjwEx5AtFwet4KdfZTDwF3p8pOkg0yVdeXL6fgJvME/wCTqCDrHPcqci
ZlmRJjkyJSeSO0ZaCniB8YSBPPTgNmYcEUxbOwvk+hvaWgJvgNf7cFJQ3+Bx
OzjOMht7mAqDrMTM4aly/vpjO1nx5GYyn/8tm976WPrpkmknBfAER5r+s0zm
1z7NdDb2chpFJtVTwc/GdNRiC912zWVm6nYGveo33FQszxgLZPSft35nfF+M
5CNeZ47foy5BgxkyENrJaoplN7rZCMwGeqjoFiD9tDwuhkaZF0tdA8NYk1wF
PlAXeUs+A26/c9kifTy0t46DL2V5ofzZiamUut2DsjNncP2HxWrQkyHUkHqY
NQR0sM7IkQx54XJrGbnfz1FNgvpzv2shhO+QAZh11xuLVJyJjOsePoHB/2dl
F0iPOP80jaD5QEXP9NMb1KurV8lsR654tg0nZNfHzsdktj3eoSiYd92GFKro
F8Jml3QRvoNdxRsLR5k/wNA8Y6v0A6fNVyRWv30wlhmZD+PVn+lK43cVUZ3/
A+ZeM1NqF3kTMC1e+fbqT57Ju/axKMNf5Wxb/X9l8JZvwzrIc0Y7Az64U2CW
yGPcZ6C18UvqlTFVbmrvrUdldjwqNVQnGnBWWVolZwovz/p8jQBPwEs8A49X
733IN86tIZyBHH2sP0C472Se62ToG7y8X/dUYrTEYoS8/xifsOfYD3ecnREj
efztGtmfye3NbE5eu/TskrhGanf/mSorNhLyNT0+VHoPPBM9nGnrxoE/7mio
/aObRmR9+rjMgvV/2gmdbxJDlmMN7kLQQl+nbMI67A99Ag9vrTFHtoxOPCz9
B3OHR8J3sZew9ZaehTPn6PcS7pLn9uygsmGxfNXCTjpdb8azxtZ5YobwOGgX
OXXK7i8VXg8/g5e2BzlweJJ3ul3pSON2Jff8VYb7EnBDPq2Pe6lq3w3luLOE
GrxQmt7O4MARNW36O17wUfYM2kBNbdtaGHpYbHtMRb3K+OsEvSArwUX3ESEc
mY5n/o9x7fo+wm+FnuUNjJeaOaU3Zcgb9Aa+AZMT+b4Cukcu9hhrI4Bzsm8u
RY67IDNAZptdg/QKaBdzOnbnJjuwooVeF6yjF33suGmMpYAfQy/wYugCmsPd
DrPYuDxPrgM/rIudxILmKK60eBCyALpED6NeD+e4r/X4+DxhD+NarQA/kD/A
2m3ZXIkDanWc+gn/zeG9Ol/fURrk0yG5onvrzAt2/+Hp1s+eLfHfraKeGYE9
VWT72cBm9kezM0O+I0t8luay8G9WqODHodAaNoiCmccMS/F2cV/CDPG/CvrF
9+AutPvw8jBWvcKS424AHwXmBe4VigiuY5J/Gp3UR4KxO+0VzuJ/6D19Vg==

               "], "Biases" -> RawArray["Real32",{0.19115674495697021`}]], 
            "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              832, "$InputDimensions" -> {832}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{832}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAUAMAnJlGYQ7RKCYlWoraAwiBaM/wh1OawgEI0dpDcNVeMcztl
EVHnEX33OqttLfdraGzbtm3btm3btv3Tj7Qc6b6+H+pSHFw=
               "], "Type" -> 
              "NumericalVector"], "Key" -> "(f1f2f3)", "Invertibility" -> 
            "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 1., "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.614118173014006, 0.05141519382548088], "Accuracy" -> 
            PlusMinus[0.6463414634146336, 0.1077717371085514], 
            "EvaluationTime" -> 0.0000149, "TestSize" -> 40, "TrainingSize" -> 
            60, "TrainingTime" -> 0.052871, "TrainingMemory" -> 1587432, 
            "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
            0.6917393730242389, "MeanCrossEntropyHistory" -> {
              PlusMinus[0.614118173014006, 0.036356032210018235`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6463414634146336, 0.07620612612971057]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 1., "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 400], 
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 178202630696649]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6870146135990522, 0.01960398948836083], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.0000261, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.018697, 
                 "TrainingMemory" -> 600704, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6251277481616853,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6870146135990522, 0.013862113905529737`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6693993832848402, 0.022281393431403684`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.000013325000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.022093, 
                 "TrainingMemory" -> 1356048, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6409724334266117,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6693993832848402, 0.01575532438963094]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000013325000000000002`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6693993832848402, 0.022281393431403684`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1356048, 
                "TrainingTime" -> 0.107069], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8900486491660474, 0.097762113526596], "Accuracy" -> 
                 PlusMinus[0.45005876293147196`, 0.07366539350591472], 
                 "EvaluationTime" -> 0.000012516666666666668`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.0075766666666666664`, "TrainingMemory" -> 
                 195861.3333333333, "ModelMemory" -> 32488., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 0.4748492443803536,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8256155695930784, 0.08416623342739597], 
                   PlusMinus[0.9744744617103884, 0.09634320115912236]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.4024390243902437, 0.07715223468995282]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9703704613747226, 0.19732274701258334`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000012224999999999999`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.017813, 
                 "TrainingMemory" -> 877912, "ModelMemory" -> 32616, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.42771676987798013`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9703704613747226, 0.13952825249495523`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.07790084880165644], 
                 "EvaluationTime" -> 0.000015375, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.200318, 
                 "TrainingMemory" -> 4449592, "ModelMemory" -> 33256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4181838886376063,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9909652934368359, 0.20944832834106417`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000015375, "MeanCrossEntropy" -> 
                PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                "ModelMemory" -> 33256, "TrainingMemory" -> 4449592, 
                "TrainingTime" -> 0.2579741666666667], "Index" -> 2], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9831052301834508, 0.14695736316119218`], 
                 "Accuracy" -> 
                 PlusMinus[0.5854527031917199, 0.05660919690222907], 
                 "EvaluationTime" -> 0.0009525999999999998, "TestSize" -> 80, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.04738966666666666, 
                 "TrainingMemory" -> 745026.6666666666, "ModelMemory" -> 
                 447104., "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.4265508031926865, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9239027906160499, 0.19256161689087925`], 
                   PlusMinus[1.0402509117513454`, 0.18918714823140675`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444], 
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6684929650137739, 0.10983241284740038`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.11016843689567841`], 
                 "EvaluationTime" -> 0.0008424, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.075356, 
                 "TrainingMemory" -> 2471504, "ModelMemory" -> 473384, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.62549464467201, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6684929650137739, 0.07766324391847729]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.782242546575857, 0.1440948112973481], "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.07845762192924444], 
                 "EvaluationTime" -> 0.000809625, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.317852, 
                 "TrainingMemory" -> 11530272, "ModelMemory" -> 518216, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5324801981558621,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.782242546575857, 0.1440948112973481]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000809625, "MeanCrossEntropy" -> 
                PlusMinus[0.782242546575857, 0.1440948112973481], 
                "ModelMemory" -> 518216, "TrainingMemory" -> 11530272, 
                "TrainingTime" -> 0.44470466666666675`], "Index" -> 3], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6969912772858453, 0.011167770262348994`], 
                 "Accuracy" -> 
                 PlusMinus[0.4877764677472049, 0.05712072069272695], 
                 "EvaluationTime" -> 0.00013925833333333333`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.012341333333333333`, "TrainingMemory" -> 236325.3333333333,
                  "ModelMemory" -> 110389.33333333333`, "ExperimentCount" -> 
                 2, "ModelUtility" -> 0.6177061704471231, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6987804360961366, 0.01673493701845681], 
                   PlusMinus[0.6956062614680996, 0.014724040495996129`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.47560975609756073`, 0.07882661924740107]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6943796219635396, 0.021306074971810893`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000136775, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.013327, 
                 "TrainingMemory" -> 734024, "ModelMemory" -> 110400, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6182225114812014,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6943796219635396, 0.01506567009303646]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6695285647147997, 0.016794150789926635`], 
                 "Accuracy" -> 
                 PlusMinus[0.6707317073170727, 0.07505505492736586], 
                 "EvaluationTime" -> 0.00023022500000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 320, "TrainingTime" -> 0.029232, 
                 "TrainingMemory" -> 3364352, "ModelMemory" -> 114800, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6418830450657396,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6695285647147997, 0.016794150789926635`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6707317073170727, 0.07505505492736586]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00023022500000000003`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6695285647147997, 0.016794150789926635`], 
                "ModelMemory" -> 114800, "TrainingMemory" -> 3364352, 
                "TrainingTime" -> 0.04888133333333333], "Index" -> 4], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6706809259088216, 0.04581923399439435], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.05586884030282884], 
                 "EvaluationTime" -> 0.000018091666666666665`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.004745333333333332, "TrainingMemory" -> 229216., 
                 "ModelMemory" -> 97560., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.6353168439046083, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.681864802362421, 0.047407523570423674`], 
                   PlusMinus[0.6395981709181233, 0.07903343206175434]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6232230096974638, 0.05481194009075559], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.000022000000000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.007065, 
                 "TrainingMemory" -> 1331352, "ModelMemory" -> 430824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6810048328513942,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6232230096974638, 0.03875789452816406]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5980360778718854, 0.050917801192207825`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.00004882500000000001, "TestSize" -> 40,
                  "TrainingSize" -> 320, "TrainingTime" -> 0.044524, 
                 "TrainingMemory" -> 8005440, "ModelMemory" -> 2163760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6401889137107134,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5980360778718854, 0.050917801192207825`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00004882500000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.5980360778718854, 0.050917801192207825`], 
                "ModelMemory" -> 2163760, "TrainingMemory" -> 8005440, 
                "TrainingTime" -> 0.060400333333333334`], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.4699393329353883`, 0.3403664903166638], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.0000169, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.05541, 
                 "TrainingMemory" -> 919048, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.2808318301048885,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.4699393329353883`, 0.2406754533915783]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8539205092579377, 0.20614413893915554`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000019925, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.053958, 
                 "TrainingMemory" -> 1587448, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4825149086371433,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8539205092579377, 0.1457659185457387]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000019925, "MeanCrossEntropy" -> 
                PlusMinus[0.8539205092579377, 0.20614413893915554`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587448, 
                "TrainingTime" -> 0.271242], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931402808957658, 0.019468354810628287`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000017825, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.0109, 
                 "TrainingMemory" -> 426904, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196583399374144,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931402808957658, 0.013766205705141005`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6928654062877444, 0.013758280934718845`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.000014675, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.021362, 
                 "TrainingMemory" -> 6447080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6209205123753709,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6928654062877444, 0.013758280934718845`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931134722249647, 0.019467226016634472`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.00001545, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.017153, 
                 "TrainingMemory" -> 1249080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196823757613998,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931134722249647, 0.013765407527253415`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00001545, "MeanCrossEntropy" -> 
                PlusMinus[0.6931134722249647, 0.019467226016634472`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1249080, 
                "TrainingTime" -> 0.079512], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6917718278486031, 0.053150641011307384`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000014275000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 10, "TrainingTime" -> 0.065649, 
                 "TrainingMemory" -> 919000, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6149226939087926,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6917718278486031, 0.037583178683507266`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.614118173014006, 0.05141519382548088], 
                 "Accuracy" -> 
                 PlusMinus[0.6463414634146336, 0.1077717371085514], 
                 "EvaluationTime" -> 0.0000149, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.052871, 
                 "TrainingMemory" -> 1587432, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6917393730242389,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.614118173014006, 0.036356032210018235`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6463414634146336, 0.07620612612971057]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000149, "MeanCrossEntropy" -> 
                PlusMinus[0.614118173014006, 0.05141519382548088], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587432, 
                "TrainingTime" -> 0.277133], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.256857008620053, 0.5962017585768732], "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.0000148, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.034848, 
                 "TrainingMemory" -> 918896, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.18177828484850891`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.256857008620053, 0.4215783064450519]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3302359386688085`, 0.41376042395331447`], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.000021825000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.050481, 
                 "TrainingMemory" -> 1587192, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.30568051008889097`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3302359386688085`, 0.29257280156400944`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000021825000000000002`, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.3302359386688085`, 0.41376042395331447`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587192, 
                "TrainingTime" -> 0.23677199999999998`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931462551126191, 0.009734303709166375], 
                 "Accuracy" -> 
                 PlusMinus[0.5992095617999024, 0.0733577253566291], 
                 "EvaluationTime" -> 0.000014166666666666668`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 0.010483, 
                 "TrainingMemory" -> 398037.3333333333, "ModelMemory" -> 
                 37240., "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.6213885495577779, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931464905173004, 0.013766391370773663`], 
                   PlusMinus[0.6931460197084198, 0.013766377272709985`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109], 
                   PlusMinus[0.6463414634146336, 0.07620612612971057]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931438084740744, 0.01946850383932111], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.00001335, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.014555, 
                 "TrainingMemory" -> 1249000, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196551802368115,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931438084740744, 0.013766311084340292`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931189437717526, 0.013765569362545015`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.0000146, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.086558, 
                 "TrainingMemory" -> 6449080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6206929824764315,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931189437717526, 0.013765569362545015`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000146, "MeanCrossEntropy" -> 
                PlusMinus[0.6931189437717526, 0.013765569362545015`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 6449080, 
                "TrainingTime" -> 0.1186805], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6456775130058557, 0.08568835948193107], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.00016675000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.103432, 
                 "TrainingMemory" -> 1300840, "ModelMemory" -> 163760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6516297811548131,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6456775130058557, 0.060590820058424054`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6157855875246737, 0.11537326026223872`], 
                 "Accuracy" -> 
                 PlusMinus[0.6219512195121948, 0.07715223468995287], 
                 "EvaluationTime" -> 0.000139975, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.128644, 
                 "TrainingMemory" -> 4370216, "ModelMemory" -> 169840, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6760625991034054,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6157855875246737, 0.11537326026223872`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6219512195121948, 0.07715223468995287]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000139975, "MeanCrossEntropy" -> 
                PlusMinus[0.6157855875246737, 0.11537326026223872`], 
                "ModelMemory" -> 169840, "TrainingMemory" -> 4370216, 
                "TrainingTime" -> 0.26423700000000006`], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 178198335729353]], "MaxTrainingSize" -> 400, 
         "LastReportingTime" -> 3.740141512330669`16.325463023676384*^9, 
         "PreprocessorEvaluationTime" -> 4.4814453125`2.*^-6, 
         "PreprocessorMemory" -> 174200, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000002, 
             "ElapsedTimes" -> 0.733886, "ExperimentCounts" -> 15], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             1.1450550000000002`, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 320, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             1.008427, "ExperimentCounts" -> 7]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[178206925663945]], "ID" -> 
            178211220631241]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, "Values" -> {"OKAY WADE."}, 
              "ID" -> 8454876219130345882], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{12, 12, 13}}, "ID" -> 4356659753071005787], "f3" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5106358782184230910]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 4.239985, "MaxTrainingMemory" -> 
         15050064, "DataMemory" -> 150864, "FunctionMemory" -> 385072, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 9, 16, 11, 52.773925`8.474994370507925}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"YOU DUMB BITCH.", {11, 1, 7, 13}, 0}, {
        "AND YOU COULD STAND TO GET A LITTLE SMARTER AIN'T THAT RIGHT YOU \
DUMB BLONDE FUCK.", {3, 11, 15, 15, 10, 15, 4, 12, 12, 12, 2, 4, 12, 11, 1, 
         12, 12, 13}, 0}, {"AN ITALIAN RIGHT.", {4, 1, 7, 13}, 0}, {
        "MAJOR WHAT DO YOU THINK COULD HAVE DONE THIS.", {1, 4, 12, 11, 12, 
         12, 12, 15, 7, 13}, 1}, {"YOU SAW THIS.", {11, 15, 7, 13}, 0}, {
        "HOW CAN YOU BE HERE AND SAY THIS.", {12, 12, 11, 15, 2, 3, 15, 7, 
         13}, 1}, {"NATALIE WHO.", {12, 11, 13}, 1}, {
        "WHERE WILL MY TOYS BE.", {15, 15, 12, 12, 15, 13}, 1}, {
        "THE CAR OR DEBBIE.", {4, 7, 7, 12, 13}, 0}, {
        "THAT ' S WHO YOU WANT ME TO BEND MY RULES FOR.", {4, 13, 7, 11, 11, 
         15, 7, 10, 15, 12, 7, 10, 13}, 1}, {
        "I'VE NEVER GOTTEN A LETTER LIKE THIS HAVE YOU.", {11, 15, 2, 15, 4, 
         7, 10, 7, 15, 11, 13}, 0}, {
        "YOU DON'T THINK SO.", {11, 15, 2, 12, 12, 13}, 0}, {
        "I BELIEVE WE SHARE AN ART INSTRUCTOR YOU KNOW CHASTITY.", {11, 15, 1,
          7, 4, 7, 7, 11, 15, 7, 13}, 0}, {
        "CALL THAT FRESH.", {1, 4, 12, 13}, 0}, {
        "OH SHUT UP HUH.", {7, 12, 9, 12, 13}, 0}, {
        "THE POET.", {4, 7, 13}, 0}, {
        "WHY DOESN'T SHE JUST HANG UP AND CALL THE POLICE.", {2, 15, 2, 12, 2,
          15, 9, 3, 1, 4, 7, 13}, 1}, {
        "IF YOU NEED TO COME TO WHERE I LIVE OK.", {10, 11, 15, 10, 15, 10, 
         15, 11, 15, 5, 13}, 1}, {
        "WHO WILL YOU KILL.", {11, 15, 11, 15, 13}, 1}, {
        "WHO IS DEAD.", {11, 15, 12, 13}, 1}, {
        "YOU REMEMBER HIM FROM HIGH SCHOOL.", {11, 15, 12, 12, 12, 12, 13}, 
         0}, {"YOU HUNGRY OR THIRSTY OR BOTH.", {11, 1, 7, 12, 7, 4, 13}, 
         0}, {"HOW OFTEN DO YOU SEE MR. KRAMER AND HIS SON.", {12, 12, 12, 11,
          15, 12, 12, 3, 11, 7, 13}, 1}, {
        "WHO'S MR. JOCULARITY.", {11, 15, 12, 12, 13}, 1}, {
        "SO NOW WHERE WERE WE HERE.", {12, 12, 12, 15, 12, 2, 13}, 1}, {
        "CHARGE SET.", {1, 7, 13}, 0}, {
        "YOU SERVE MARTINIS DONCHA.", {11, 15, 7, 12, 13}, 0}, {
        "GOIN' DOVE HUNTIN'.", {12, 7, 7, 13, 13}, 0}, {
        "AND MADEMOISELLE.", {3, 12, 13}, 0}, {
        "IS IT THAT BAD.", {15, 11, 4, 12, 13}, 0}, {
        "THEY'RE TRYING TO UNNERVE US. WHY DID THEY DO THAT.", {12, 12, 12, 
         10, 12, 12, 13}, 1}, {
        "WHAT NUMBER DID YOU TEAR OUT.", {4, 7, 15, 11, 15, 12, 13}, 1}, {
        "JUST A LITTLE JOKE MISS FARMER. ...DID YOU REALLY SAY THAT.", {2, 4, 
         7, 7, 7, 7, 13, 13}, 0}, {
        "HI VIV.  CARLOS YOU KNOW MY ROOMMATE VIV. YOU SPENT IT ON DRUGS \
DIDN'T YOU.", {12, 12, 13}, 0}, {
        "WHAT HAVE YOU GOT TO DO.", {4, 12, 11, 15, 10, 12, 13}, 1}, {
        "DO YOU KNOW HER.", {15, 11, 15, 7, 13}, 0}, {
        "WHAT THE HELL IS A TREADSTONE.", {4, 4, 7, 15, 4, 7, 13}, 1}, {
        "PAPA.", {7, 13}, 0}, {"AS A PLUMBER.", {10, 4, 7, 13}, 0}, {
        "WHAT TEN THOUSAND POUNDS.", {4, 8, 12, 12, 13}, 1}, {
        "UP GET IT.", {7, 15, 11, 13}, 0}, {
        "ARE YOU DECLARING AN EMERGENCY.", {15, 11, 15, 4, 7, 13}, 0}, {
        "SHALL I REMAIN HERE IN OUR HOTEL ROOM HIDING OR SHALL I CARRY ON THE \
BEST I CAN.", {12, 11, 15, 2, 10, 12, 12, 12, 15, 7, 7, 11, 15, 10, 4, 7, 11, 
         15, 13}, 0}, {"WHATSAMATTER.", {7, 13}, 1}, {
        "WHAT WAS I GONNA SAY.", {4, 15, 11, 12, 12, 12, 13}, 1}, {
        "AND THOSE WERE THE GUYS WHO WENT ON THE EXERCISE WITH YOU.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}, 1}, {
        "I WANT THE MONEY ASSHOLE WHAT DO YOU THINK.", {11, 15, 4, 7, 12, 4, 
         12, 11, 15, 13}, 1}, {
        "I MEAN WHAT KIND OF PEOPLE DO WELL AT THIS STUFF.", {11, 15, 4, 12, 
         10, 12, 12, 12, 10, 12, 7, 13}, 1}, {
        "HOW ARE THEY TREATING YOU.", {12, 15, 7, 15, 11, 13}, 1}, {
        "WANNA STAY WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}, 0}, {
        "AT WHAT EXACTLY.", {10, 4, 7, 13}, 1}, {
        "DO YOU THINK IT'S DONE.", {15, 11, 15, 11, 15, 12, 13}, 0}, {
        "WHAT IS SO GODDAMN VALUABLE IN YOUR LIFE THAT YOU'RE WORRIED ABOUT \
LOSING.", {4, 15, 12, 12, 12, 10, 1, 7, 4, 11, 15, 1, 10, 15, 13}, 1}, {
        "PITTSBURGH.", {12, 13}, 0}, {
        "[WAS IT] &QUOT;MEIRSCHULTZ&QUOT;.", {13, 12, 12, 13, 12, 12, 13, 13},
          0}, {"I KNOW YOU'RE EXPECTING SOME KIND OF -- EXTRAVAGANT BEHAVIOR \
BUT BELIEVE ME -- DO YOU BELIEVE ME.", {11, 15, 11, 15, 15, 12, 12, 10, 13, 1,
          7, 12, 12, 12, 13, 12, 11, 15, 7, 13}, 0}, {
        "WHAT'S A LUNCH COST THESE DAYS.", {4, 15, 4, 7, 7, 7, 7, 13}, 1}, {
        "WHERE IS INNER SPACE.", {15, 15, 12, 12, 13}, 1}, {
        "WHY WON'T YOU CHECK OUT LV-426. ...BECAUSE JUST ONE OF THOSE THINGS \
MANAGED TO KILL MY ENTIRE CREW WITHIN TWELVE HOURS OF HATCHING...", {2, 12, 2,
          11, 15, 7, 7, 13, 13, 12, 2, 8, 10, 4, 7, 15, 10, 15, 12, 12, 12, 
         10, 8, 7, 10, 15, 13}, 1}, {
        "LOOK BUTTHEAD I'LL TREAT YOU SO NICE YOU'LL NEVER WANT TO LET ME GO \
OKAY.", {8, 7, 11, 15, 15, 11, 2, 1, 11, 15, 2, 1, 10, 12, 12, 12, 12, 13}, 
         0}, {"THAT OBVIOUS HUH.", {4, 1, 12, 13}, 0}, {
        "PERMISSION.", {7, 13}, 0}, {
        "OKAY MISS STARLING.", {1, 12, 12, 13}, 0}, {
        "WHAT'S DR. GILLMAN SAY.", {4, 15, 12, 12, 12, 13}, 1}, {
        "WHY DID THEY TURN BACK.", {2, 12, 12, 15, 2, 13}, 1}, {
        "WHAT'S SHE DOING.", {4, 15, 12, 12, 13}, 1}, {
        "HOW YOU DOING SAM.", {12, 11, 15, 12, 13}, 1}, {
        "WHY DO YOU EAT THAT STUFF.", {2, 12, 11, 15, 4, 7, 13}, 1}, {
        "WHAT EXACTLY DID HE CALL OUT.", {4, 12, 15, 11, 1, 12, 13}, 1}, {
        "SAY---YOU THINK THAT'S THE SAME GUY WHO WAS IN THE ACCIDENT WITH \
LUCY.", {7, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}, 1}, {
        "AND YOU SVEN AREN'T YOU AFRAID OF CROSSING THE RAINBOW BRIDGE TO \
ASGAARD.", {3, 11, 12, 15, 2, 11, 12, 10, 12, 4, 12, 12, 10, 12, 13}, 0}, {
        "NOT GREAT.", {2, 1, 13}, 0}, {
        "RUNNING OUT OF TIME ARE WE.", {15, 12, 10, 12, 15, 7, 13}, 0}, {
        "YOU'RE NOT USING THE SAME GUY WHO TRIED TO FIX IT.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}, 1}, {
        "TO YOU ... .", {10, 11, 13, 13}, 0}, {
        "DID YOU KNOW YOU SHOULDN'T LIGHT THREE CIGARETTES WITH A MATCH.", {
         12, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}, 0}, {
        "MY MY MY HOW DID THINGS TURN SO HOSTILE SO QUICKLY.", {12, 12, 12, 
         12, 12, 12, 12, 12, 12, 12, 12, 13}, 1}, {
        "NO BUT MY DOG HE'S A GOT MILLIONS OF THEM -- HAVE YOU GOT A \
LICENSE.", {4, 12, 12, 12, 11, 15, 4, 15, 12, 10, 12, 13, 12, 11, 15, 4, 7, 
         13}, 0}, {"THIS THIS HAPPENED.", {7, 7, 15, 13}, 0}, {
        "HOW DID YOU MANAGE IT.", {12, 12, 11, 15, 11, 13}, 1}, {
        "WHOSE JUSTICE.", {1, 7, 13}, 1}, {
        "DID THEY TELL YOU TO SLEEP WITH ME.", {12, 12, 12, 11, 10, 15, 10, 7,
          13}, 0}, {"MAX, WHAT IS IT.", {12, 13, 4, 15, 11, 13}, 1}, {
        "WILL YOU COME SEE HER WITH ME.", {15, 11, 15, 15, 7, 10, 7, 13}, 
         0}, {"HOW YOU FEELING ALL RIGHT.", {12, 11, 15, 7, 7, 13}, 1}, {
        "IS IT INEVITABLE THAT THE GAME PLAYS YOU.", {15, 11, 1, 4, 4, 7, 15, 
         11, 13}, 0}, {
        "YOU FOUND ANYONE IN YOURS.", {11, 15, 7, 10, 12, 13}, 0}, {
        "DON'T YOU WANT TO SEE WHAT DADDY DOES FOR A LIVING.", {7, 2, 11, 1, 
         10, 15, 4, 12, 15, 10, 4, 7, 13}, 1}, {
        "WELL COULD YOU LEND ME SOME MONEY TILL YOU HAVE ONE.", {12, 12, 11, 
         15, 2, 12, 12, 12, 11, 15, 8, 13}, 0}, {
        "I'M JUST HERE SHOOTING THIS BAND WHAT ABOUT YOU.", {11, 15, 2, 2, 15,
          7, 7, 4, 12, 11, 13}, 1}, {
        "IT'S YOUR BANK AS WELL AS MINE ISN'T IT.", {11, 15, 1, 12, 12, 12, 
         12, 12, 15, 2, 11, 13}, 0}, {
        "VASQUEZ HOW YOU DOING.", {12, 12, 11, 15, 13}, 1}, {
        "YOU DON'T LIKE ME.", {11, 15, 2, 10, 7, 13}, 0}, {
        "PHILIP SWANN.", {12, 12, 13}, 0}, {
        "THE POLICE ALWAYS DO DON'T THEY.", {4, 12, 12, 12, 12, 2, 12, 13}, 
         0}, {"PEOPLE ARE GONNA BE THINKING THE YOUNGER JAMES GANG.", {12, 15,
          12, 12, 15, 15, 4, 1, 12, 12, 13}, 0}, {
        "SO WHY ISN'T IT ALL BLOODY.", {12, 2, 15, 2, 11, 7, 7, 13}, 1}, {
        "IS THAT ALL THERE IS.", {15, 4, 7, 7, 15, 13}, 0}, {
        "THEN WE'LL GO DANCIN' OKAY.", {2, 12, 12, 12, 12, 12, 13}, 0}, {
        "YOU'RE NOT FROM L.A. HUH.", {11, 15, 2, 10, 12}, 0}, {
        "WHY DIDN'T YOU SAY SOMETHING.", {2, 12, 2, 11, 15, 7, 13}, 1}, {
        "WITH ID AND A GUN....", {10, 7, 3, 4, 7, 13}, 0}, {
        "WHAT IS HE -- MUSCLEMAN.", {4, 15, 11, 13, 12, 13}, 1}, {
        "WHAT'S WRONG DID YOU MISS ME.", {4, 15, 1, 7, 11, 15, 7, 13}, 1}, {
        "WHAT'S A TREE.", {4, 15, 4, 7, 13}, 1}, {
        "- WHERE THAT COME FROM.", {13, 7, 4, 15, 7, 13}, 1}, {
        "YOU'RE BACK AGAIN HUH.", {11, 15, 2, 2, 12, 13}, 0}, {
        "PROFESSIONALLY.", {2, 13}, 0}, {
        "ABOUT THE DUMPER DIDN'T HE TELL YOU THAT.", {10, 4, 7, 15, 2, 11, 15,
          11, 4, 13}, 0}, {
        "KEEPING YOURSELF OUT OF JAIL.", {12, 12, 12, 10, 12, 13}, 0}, {
        "WHAT ABOUT THE CAPTAIN.", {4, 12, 4, 7, 13}, 1}, {
        "WHAT IS IT THE STAIRS.", {4, 15, 11, 4, 7, 13}, 1}, {
        "WHAT OF THE REPORTS OF THE REBEL FLEET MASSING NEAR SULLUST.", {4, 
         10, 4, 7, 10, 4, 7, 7, 15, 10, 7, 13}, 1}, {
        "TWO YEARS AGO.", {8, 7, 2, 13}, 0}, {
        "PERHAPS A LITTLE REFRESHMENT FIRST.", {2, 4, 1, 12, 12, 13}, 0}, {
        "THEN WHAT CAN I DO FOR YOU.", {2, 4, 12, 11, 15, 10, 11, 13}, 1}, {
        "HAVE THEY QUESTIONED YOU YET SID.", {15, 12, 15, 11, 2, 12, 13}, 
         0}, {"WELL DOES MARCUS HAVE AN ALIBI.", {12, 12, 12, 12, 4, 12, 13}, 
         0}, {"WHO WOULD EVEN KNOW TO DO THIS.", {11, 15, 12, 12, 10, 12, 12, 
         13}, 1}, {"HE WAS HERE.", {11, 15, 2, 13}, 0}, {
        "KEEPING A STIFF UPPER LIP.", {15, 4, 1, 12, 7, 13}, 0}, {
        "YOU KNOW WHAT HAPPENED TO THE TOWER OF BABEL DON'T YOU.", {11, 15, 4,
          15, 10, 4, 7, 10, 12, 12, 2, 11, 13}, 1}, {
        "YOU MEAN BESIDES THE WARRANT OUT ON US FOR BLOWING UP OUR COMMANDING \
OFFICER.", {11, 15, 10, 4, 12, 12, 12, 12, 10, 12, 9, 12, 12, 7, 13}, 0}, {
        "HOW ABOUT YOU TWO HIT THE STRIP AND START KNOCKING SOME HEADS \
TOGETHER.", {12, 12, 11, 8, 12, 4, 7, 3, 12, 12, 12, 15, 2, 13}, 1}, {
        "HOW LONG AGO DID THIS GUY RETIRE.", {12, 12, 12, 12, 12, 12, 15, 13},
          1}, {"WHAT HAVE I DONE.", {4, 7, 11, 15, 13}, 1}, {
        "WILL YOU TAKE IT EASY.", {15, 11, 15, 11, 7, 13}, 0}, {
        "WHO THE FUCK ARE YOU DR. JOYCE BROTHERS.", {11, 4, 7, 15, 11, 12, 12,
          12, 13}, 1}, {"IT NEEDS BLOOD.", {11, 15, 7, 13}, 0}, {
        "WHAT HAPPENS WHEN HE DIES.", {4, 15, 2, 11, 15, 13}, 1}, {
        "YOU REALLY THINK YOU'LL BE ABLE TO FOOL A JURY WITH THIS BULLSHIT.", \
{11, 2, 15, 11, 7, 15, 1, 10, 7, 7, 7, 10, 7, 12, 13}, 0}, {
        "IF YA WAS WANTIN' MY HELP WHY DIDN'T YA ASK.", {10, 12, 12, 12, 12, 
         12, 2, 12, 2, 12, 12, 13}, 1}, {
        "HOW DO YOU KNOW THIS.", {12, 12, 11, 15, 7, 13}, 1}, {
        "IS THAT A BEASTLY THING TO SAY.", {15, 4, 4, 1, 7, 10, 12, 13}, 0}, {
        "HEY WHERE'S THE FIRE SISTER.", {12, 12, 4, 7, 7, 13}, 1}, {
        "WHAT'S YOUR AIR READING.", {4, 15, 1, 12, 7, 13}, 1}, {
        "HAVE YOU HEARD THE TERMS OF THE SEVENTEEN POINT AGREEMENT.", {15, 11,
          15, 4, 7, 10, 4, 8, 1, 7, 13}, 0}, {
        "IS THAT AN OFFER.", {15, 4, 4, 7, 13}, 0}, {
        "YOU COULD LIFT ME IN YOUR BIG STRONG ARMS.", {11, 15, 15, 12, 10, 1, 
         12, 1, 7, 13}, 0}, {"THE BLAST.", {4, 7, 13}, 0}, {
        "YOU NEVER HEARD OF PHYSICS EINSTEIN.", {11, 2, 15, 10, 12, 12, 13}, 
         0}, {"CAN YOU DRIVE ME BACK NOW.", {12, 11, 15, 2, 2, 2, 13}, 0}, {
        "TWOMBLEY.", {12, 13}, 0}, {
        "AND WHAT IF I TRANQ HIM KELLY.", {3, 4, 10, 11, 15, 12, 12, 13}, 
         1}, {"WE CANNOT DEFEAT THIS -- PEACE.", {12, 12, 12, 12, 12, 13, 7, 
         13}, 0}, {"ARE YOU OKAY WADE.", {15, 11, 1, 7, 13}, 0}, {
        "HOW ABOUT SOME AMMO.", {12, 12, 12, 12, 13}, 1}, {
        "DOES THAT WORK.", {7, 4, 15, 13}, 0}, {
        "HOW THE HELL DID HE GET AWAY.", {12, 4, 7, 7, 11, 15, 2, 13}, 1}, {
        "EXCUSE ME SKIPPER--- WHAT ABOUT TIME....", {15, 12, 12, 13, 4, 12, 7,
          13}, 1}, {"SEE THAT PATCH OF SHIRT.", {15, 4, 7, 10, 12, 13}, 0}, {
        "DID YOU HAVE A PLEAANT FLIGHT.", {12, 11, 15, 4, 1, 7, 13}, 0}, {
        "DO YOU HAVE YOUR OWN CELL.", {15, 11, 15, 1, 7, 7, 13}, 0}, {
        "YOU SELL MUCH OUT HERE.", {11, 15, 12, 12, 2, 13}, 0}, {
        "WHAT WAS SHE DOING IN YOUR APARTMENT.", {4, 15, 12, 12, 10, 1, 7, 
         13}, 1}, {
        "YOU'LL GET PICKED UP.  RIGHT.", {11, 15, 15, 15, 9, 13}, 0}, {
        "WHAT IS NOT GOOD TO YOU.", {4, 15, 2, 1, 10, 11, 13}, 1}, {
        "DIDN'T THEY DUFFY.!", {12, 2, 12, 12, 13, 13}, 0}, {
        "NOW WHO ELSE.", {2, 11, 2, 13}, 1}, {
        "WHEN SHE WAS WILLING TO SACRIFICE US ALL.", {2, 12, 12, 12, 10, 15, 
         12, 7, 13}, 1}, {
        "YOU'VE GOT A COMEBACK FOR EVERYTHING DON'T YOU DANNY.", {11, 15, 12, 
         12, 12, 10, 12, 12, 2, 11, 12, 13}, 0}, {
        "GONNA KILL US ALL, IS THAT IT.", {12, 12, 12, 12, 7, 13, 15, 4, 11, 
         13}, 0}, {
        "NOW I'M WORKING THE DROP CAR.", {2, 11, 15, 15, 4, 7, 7, 13}, 0}, {
        "IS IT BEAUTIFUL.", {15, 11, 7, 13}, 0}, {
        "I'M ASSUMING THAT'S WHAT MADE HIM THE DEAD ONE.", {11, 15, 15, 4, 15,
          4, 12, 12, 4, 1, 8, 13}, 1}, {
        "PERMISSION TO LEAVE SIR.", {7, 10, 15, 7, 13}, 0}, {
        "WHERE IS HIS HOME LEX LUTHOR.", {15, 15, 11, 12, 12, 12, 13}, 1}, {
        "WHY THEY GOTTA MAKE MY NOSE SO BIG.", {2, 12, 15, 12, 15, 12, 12, 12,
          12, 13}, 1}, {
        "THAT MAKES IT ALL THE MORE DIFFICULT \.97\.97 HAVE YOU ANY OTHER \
RELATIVES MARY.", {4, 15, 11, 7, 4, 1, 7, 13, 13, 15, 11, 12, 12, 12, 12, 13},
          0}, {"AGRIPPA.", {12, 13}, 0}, {"THE DOLL.", {4, 7, 13}, 0}, {
        "REALLY THINK SO.", {12, 12, 12, 13}, 0}, {
        "DID YOU JUST ASK ME WHAT'S A NEGRO.", {12, 11, 2, 15, 7, 4, 15, 4, 7,
          13}, 1}, {
        "WHAT DO WE HAVE TO DO.", {4, 12, 12, 12, 10, 12, 13}, 1}, {
        "DID THE RANCHER FUCK YOU.", {12, 4, 7, 7, 11, 13}, 0}, {
        "JUST BECAUSE I DRESS WELL AND LIKE TO DANCE -- IS THERE SOMETHING \
ABOUT FLAMES.", {2, 10, 11, 15, 2, 3, 10, 10, 12, 13, 15, 12, 12, 12, 12, 13},
          0}, {"HOW'S OUR DEAL COMING ALONG.", {12, 12, 12, 12, 12, 13}, 1}, {
        "YOU HAVE ANY KIDS.", {11, 15, 12, 12, 13}, 0}, {
        "WHAT DO YOU FEAR.", {4, 12, 11, 7, 13}, 1}, {
        "CAN YOU MAKE IT THAT FAR.", {12, 11, 15, 11, 4, 2, 13}, 0}, {
        "WHAT DYA MEAN.", {4, 12, 7, 13}, 1}, {
        "HOW COULD IT BE A CHARADE.", {12, 12, 12, 15, 4, 7, 13}, 1}, {
        "BUT WHAT IS THE REAL ISSUE HERE.", {12, 4, 15, 4, 1, 7, 2, 13}, 1}, {
        "NOW WHY CAN'T I TELL THE STORY.", {2, 2, 12, 2, 11, 15, 4, 7, 13}, 
         1}, {"A PSYCHIATRIST.", {4, 7, 13}, 0}, {
        "HOW TERRIBLE CAN IT BE.", {12, 12, 12, 12, 15, 13}, 1}, {
        "STAKE YOU.", {15, 11, 13}, 0}, {
        "CAN YOU FIX IT.", {12, 11, 15, 11, 13}, 0}, {
        "MANTAN IT IS POSSIBLE THAT MY HYPHENATED SENTENCES ARE ENTIRELY TOO \
COMPLEX FOR ALL THE INTELLECT CONTAINED IN THAT DIMINUTIVE COCONUT.", {12, 12,
          15, 1, 4, 12, 12, 12, 15, 2, 2, 12, 10, 7, 4, 7, 15, 10, 4, 12, 12, 
         13}, 0}, {
        "THAT IT ALL SOUNDS MYSTERIOUS.", {4, 11, 7, 15, 1, 13}, 0}, {
        "I DON'T KNOW 14000 A KILO.", {11, 15, 2, 12, 8, 4, 7, 13}, 0}, {
        "YOU SURE YOU'VE LEFT NOTHING OUT.", {11, 15, 11, 15, 12, 12, 12, 13},
          0}, {"HAVE YOU PULLED YOURSELF TOGETHER.", {15, 11, 15, 12, 2, 13}, 
         0}, {"DON'T YOU REMEMBER.", {7, 2, 11, 15, 13}, 0}, {
        "BOYS.", {7, 13}, 0}, {
        "WHERE'D YOU GET THEM.", {15, 12, 11, 15, 7, 13}, 1}, {
        "WHAT IS THE POINT IN THAT.", {4, 15, 4, 1, 10, 4, 13}, 1}, {
        "OH GOD WHY.", {7, 7, 2, 13}, 1}, {"GOING NORTH.", {1, 12, 13}, 0}, {
        "YOU TWO ARE GONNA HELP ME TAME THE WILD BEAST.", {11, 8, 15, 12, 12, 
         12, 12, 12, 4, 1, 7, 13}, 0}, {
        "YOU ARE FUCKIN' DEAD YOU GO IN THERE TODAY.", {11, 15, 7, 13, 1, 11, 
         15, 10, 12, 12, 13}, 0}, {"OUT THE BACK.", {12, 4, 2, 13}, 0}, {
        "AND I AIM TO CURE YA OF YOUR WICKEDNESS.", {3, 11, 7, 10, 15, 12, 10,
          1, 7, 13}, 0}, {
        "AND I USED TO KNOW YOU PERSONAL WAY BACK WHEN.", {3, 11, 15, 10, 12, 
         11, 1, 7, 2, 2, 13}, 1}, {
        "IF YOU DON'T WANT MY FILM - I'LL CALL ANOTHER SHOW.", {10, 11, 15, 2,
          1, 7, 7, 13, 11, 15, 1, 12, 12, 13}, 1}, {
        "SHADOW GETS CRAZY-- IT'S NOT OUR JOB TO GET INVOLVED IN YOUR \
PERSONAL LIFE BUT WHEN IT INTERFERES WITH THE TRAINING HERE-- FROM BACK IN \
HOUSTON.", {12, 15, 12, 13, 11, 15, 12, 12, 12, 10, 15, 1, 10, 1, 1, 7, 12, 2,
          11, 15, 10, 4, 7, 2, 13, 10, 2, 10, 12, 13}, 1}, {
        "GREAT RUNNING INTO YOU, BUDDY.", {1, 15, 10, 11, 13, 12, 13}, 0}, {
        "I HAVEN'T FELT THIS GOOD IN A LONG TIME.", {11, 15, 2, 15, 7, 1, 10, 
         4, 7, 7, 13}, 0}, {"NERVES OF STEEL.", {7, 10, 12, 13}, 0}, {
        "I SHOULDN'T BE OVER HERE AT THIS HOUR.", {11, 15, 2, 15, 10, 2, 10, 
         12, 12, 13}, 0}, {
        "-- THE TRAIN FOR MARSEILLES LEAVES AT FIVE O'CLOCK.", {13, 4, 7, 10, 
         12, 15, 10, 8, 7, 13}, 0}, {
        "-- YOU SAID SO YOURSELF THE FIRM IS LARGE AND POWERFUL.", {13, 11, 
         15, 12, 12, 4, 12, 15, 12, 3, 12, 13}, 0}, {
        "THIS IS NOT MY USUAL FRIDAY NIGHT!", {12, 15, 12, 12, 12, 12, 12, 
         13}, 0}, {
        "I SENT IT TO MYSELF IN PARIS.", {11, 15, 11, 10, 12, 10, 12, 13}, 
         0}, {"YOU SAID IT CLARK.", {11, 15, 11, 7, 13}, 0}, {
        "I DON'T KNOW WHAT YOU'RE TALKING ABOUT MAN.", {11, 15, 2, 12, 4, 11, 
         15, 15, 10, 7, 13}, 1}, {
        "OUR RENDEZVOUS POINTS AND RADIO FREQS.", {12, 12, 12, 3, 12, 12, 13},
          0}, {"YOU STILL GOT A SHITLOAD OF PLOWING TO DO.", {11, 2, 15, 4, 
         12, 10, 12, 10, 12, 13}, 0}, {
        "HE TOLD ME THAT I WAS STUPID BECAUSE MY BOYFRIEND DIDN'T REALLY LOVE \
ME.", {11, 15, 12, 4, 11, 15, 1, 12, 12, 12, 12, 2, 12, 12, 12, 13}, 0}, {
        "BUT I...", {12, 12, 13, 13}, 0}, {
        "THIS SORT OF THING AIN'T MY BAG BABY.", {12, 12, 10, 12, 12, 2, 12, 
         12, 7, 13}, 0}, {
        "WE'RE MAKING A STATEMENT.", {12, 12, 12, 12, 12, 13}, 0}, {
        "I KNOW THIS.", {11, 15, 7, 13}, 0}, {
        "I THINK I SHOULD GO BACK.", {11, 15, 11, 15, 15, 2, 13}, 0}, {
        "NO QUESTION ABOUT IT.", {4, 12, 12, 12, 13}, 0}, {
        "HEY YOU HAVEN'T CHANGED YOUR CLOTHES!", {7, 11, 15, 2, 15, 1, 7, 13},
          0}, {"THE RESISTANCE THE ANGER IN YOUR VOICE.", {4, 7, 4, 7, 10, 1, 
         7, 13}, 0}, {"NO I'M OKAY FOR NOW.", {7, 11, 15, 1, 10, 2, 13}, 0}, {
        "NO ALL THE GOOD ONES ARE MARRIED.", {4, 7, 4, 1, 7, 15, 15, 13}, 
         0}, {"THE GOVERNMENT DOESN'T HAVE TO TELL PEOPLE TO DO IT.", {4, 12, 
         12, 2, 12, 10, 12, 12, 10, 12, 12, 13}, 0}, {
        "THAT'S COOL.", {4, 15, 12, 13}, 0}, {
        "SARAH LAWRENCE IS ON THE OTHER SIDE OF THE COUNTRY.", {12, 12, 15, 
         10, 4, 1, 12, 10, 4, 7, 13}, 0}, {
        "PLEASE ROSE BE A GOOD SPORT.", {15, 12, 15, 4, 1, 7, 13}, 0}, {
        "YOUR FACE WAS DARK AND YOUR HAIR WAS BACKLIT -- I COULD SEE A HALO \
OF FRIZZ -- YOU ASKED ME IF THINGS WERE OKAY BETWEEN NAOMI AND ME.", {1, 7, 
         15, 1, 3, 1, 7, 15, 12, 13, 11, 15, 15, 4, 7, 10, 12, 13, 11, 15, 12,
          10, 12, 15, 1, 12, 12, 3, 12, 13}, 0}, {
        "HER NOT BELIEVING ABOUT YOUR CONDITION..", {12, 12, 12, 12, 1, 7, 13,
          13}, 0}, {"WE SEE YOU NEXT HARVEST.", {12, 15, 11, 1, 7, 13}, 0}, {
        "THEY MAY LOOK GOOD BUT THEY WEIGH TWELVE POUNDS EACH THAT'S \
THIRTY-SIX POUNDS RIGHT THERE.", {12, 12, 12, 12, 12, 12, 15, 8, 12, 12, 4, 
         15, 8, 12, 12, 12, 13}, 0}, {
        "THIS IS ANTHONY ADAMS MR. HENRY.", {12, 15, 12, 12, 12, 12, 13}, 
         0}, {"NO. DADDY SAYS ROSE IS CALM AS LETTUCE.", {7, 13, 12, 12, 15, 
         15, 7, 1, 7, 13}, 0}, {
        "I'M SORRY IT'S JUST THAT..", {11, 15, 12, 12, 2, 4, 13, 13}, 0}, {
        "BUT THEN  --  --  THAT SILLY WAR..", {12, 12, 13, 13, 4, 12, 7, 13, 
         13}, 0}, {
        "SHE CALLED ME AN OLD LADY HERE TOO!", {12, 15, 1, 4, 1, 7, 2, 2, 13},
          0}, {"FIVE NIGHTS AGO HE FOUND THIS PARATROOPER CAUGHT IN A TREE \
WITH A BROKEN LEG.", {8, 7, 2, 11, 12, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13},
          0}, {"ALONE.", {2, 13}, 0}, {
        "I AVOIDED CAPTURE USING THE MAK'TAR STEALTH HAZE.", {11, 15, 12, 12, 
         4, 12, 13, 7, 7, 7, 13}, 0}, {
        "IT IS IT IS!", {11, 15, 11, 15, 13}, 0}, {
        "LEAVE THAT ALONE!", {15, 4, 2, 13}, 0}, {
        "I DON'T WANT TO TALK ABOUT HIM.", {11, 15, 2, 1, 10, 12, 12, 12, 13},
          0}, {"GOOD AFTERNOON MR. HARRIS.", {1, 7, 12, 12, 13}, 0}, {
        "JOHN I'D LIKE YOU TO MEET ONE OF THE BRIGHTEST LIGHTS OF THE BRITISH \
STAGE MRS. KENDAL.", {12, 11, 15, 10, 11, 10, 15, 8, 10, 4, 12, 12, 10, 4, 1, 
         7, 12, 12, 13}, 0}, {
        "DON'T KNOW IF I'LL STILL WANT IT.", {7, 2, 12, 10, 11, 15, 2, 1, 11, 
         13}, 0}, {"MADAM SENATOR...", {12, 12, 13}, 0}, {
        "I'LL GET HIM.", {11, 15, 15, 7, 13}, 0}, {
        "AT LEAST TALK TO HIM HEAR WHAT HE HAS TO SAY.", {10, 12, 12, 10, 12, 
         15, 4, 11, 15, 10, 12, 13}, 1}, {
        "LOUELLA PARSONS IS HERE.", {12, 12, 15, 2, 13}, 0}, {
        "THREE MEN AND A WOMEN.", {8, 12, 3, 4, 12, 13}, 0}, {
        "IT'S COSMETIC.", {11, 15, 7, 13}, 0}, {
        "AND YOU WILL GIVE ME OCCASION.", {3, 11, 15, 15, 12, 12, 13}, 0}, {
        "I'M HAPPY.", {11, 15, 12, 13}, 0}, {
        "LET ME OUT OF HERE!", {15, 12, 12, 10, 2, 13}, 0}, {
        "MAYBE HE DIDN'T KNOW EXACTLY WHAT HE WAS GONNA DO BUT HE HAD A \
PRETTY GOOD IDEA.", {2, 11, 15, 2, 12, 12, 4, 11, 15, 12, 12, 12, 12, 11, 15, 
         4, 2, 1, 7, 13}, 1}, {
        "AND BECAUSE HE'S MY FRIEND.", {3, 10, 11, 15, 12, 12, 13}, 0}, {
        "I DON'T KNOW WHY I SAID IT.", {11, 15, 2, 12, 2, 11, 15, 11, 13}, 
         1}, {"HOWE I HATE TO BRING IT UP BUT SHE'S GOT AN AWFUL TOOTHACHE \
WE'VE GOT TO CARRY HER TO THE DENTIST.", {12, 11, 15, 10, 15, 11, 9, 12, 12, 
         12, 4, 12, 12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 13}, 1}, {
        "WHENEVER PEOPLE SAY 'AW THAT DAMONE IS A LOUDMOUTH' -- AND THEY SAY \
THAT A LOT -- I SAY 'YOU JUST DON'T KNOW DAMONE.' WHEN SOMEONE SAYS YOU'RE AN \
IDIOT I TELL THEM 'DAMONE'S NOT AN IDIOT.", {12, 12, 12, 13, 12, 4, 12, 15, 4,
          7, 13, 13, 3, 7, 7, 4, 4, 7, 13, 11, 15, 13, 11, 2, 15, 2, 12, 12, 
         13, 13, 2, 12, 15, 11, 15, 4, 7, 11, 15, 12, 13, 12, 15, 12, 4, 12, 
         13}, 1}, {
        "GOOD THING HE DOESN'T ALWAYS KNOW WHAT HE'S GOT...", {1, 7, 11, 15, 
         2, 1, 7, 4, 11, 15, 12, 13, 13}, 1}, {
        "IT'S FOR SOMEBODY NAMED THOMPSON BUT IT SAYS 'CARE OF RAOUL DUKE'.", \
{11, 15, 10, 12, 12, 12, 12, 12, 12, 13, 12, 10, 12, 12, 13}, 0}, {
        "THEN TAKE IT FROM HIM.", {2, 15, 11, 10, 7, 13}, 0}, {
        "A WOW FINISH.", {4, 12, 7, 13}, 0}, {"EARS.", {7, 13}, 0}, {
        "TRADE YOUR EXCELLENCY.", {7, 1, 7, 13}, 0}, {
        "JUST ONE COMPADRE...", {2, 8, 7, 13}, 0}, {
        "I'LL TAKE EVERYTHING AT FACE VALUE.", {11, 15, 15, 15, 10, 12, 12, 
         13}, 0}, {
        "IT'S MUCH SAFER IN THERE SWEETY.", {11, 15, 12, 12, 10, 12, 12, 13}, 
         0}, {"WELL DO SOMETHING ABOUT IT.", {12, 12, 12, 12, 12, 13}, 0}, {
        "HOLD ON . . .", {15, 12, 13}, 0}, {
        "LET ME HAVE MANUAL CONTROL PLEASE.", {15, 12, 12, 12, 12, 12, 13}, 
         0}, {"MY AUTHOR.", {12, 12, 13}, 0}, {
        "NOW LISTEN BEFORE YOU DO SOMETHING YOU'LL REALLY REGRET YOU'D BETTER \
STOP AND THINK-- HERE ARE THE SLIPS FOR THE LAUNDRY AND THE CLEANING.", {2, 
         15, 10, 11, 15, 12, 11, 15, 12, 12, 11, 15, 12, 15, 3, 15, 13, 2, 15,
          4, 15, 10, 4, 7, 3, 4, 7, 13}, 0}, {
        "IF THAT'S THE WAY YOU WANT IT.", {10, 4, 15, 4, 7, 11, 15, 11, 13}, 
         0}, {"I SAW IT GOING DOWN.", {11, 15, 11, 12, 12, 13}, 0}, {
        "I'LL LAY YOU FIVE TO ONE YOU WON'T SLEEP.", {11, 15, 7, 11, 8, 10, 8,
          11, 15, 2, 7, 13}, 0}, {
        "THAT WON'T YOUR FAULT.", {4, 1, 2, 1, 7, 13}, 0}, {
        "I LIKED THE HORSE.", {11, 15, 4, 7, 13}, 0}, {
        "LET'S GET A PICTURE.", {7, 15, 4, 7, 13}, 0}, {
        "UHM..", {12, 13, 13}, 0}, {
        "THEN YOU ARE A FOOL -- A FOOL WHO HAS NEVER LOST A SON.", {2, 11, 15,
          4, 7, 13, 4, 7, 11, 15, 12, 12, 12, 12, 13}, 1}, {
        "NO ONE CAN STOP THEM.", {7, 8, 12, 15, 12, 13}, 0}, {
        "WELL IT SEEMS YOU ARE DETERMINED TO KEEP LASZLO HERE.", {12, 12, 15, 
         11, 15, 15, 10, 15, 12, 2, 13}, 0}, {
        "LIKE HE'S WILD.", {10, 11, 15, 12, 13}, 0}, {
        "HE'S NOT ARMY IT'S NOT OFFICIAL -- HE'S FORMER ARMY AND THE BEST \
I'VE EVER SEEN IN A ROOM.", {11, 15, 12, 12, 12, 12, 12, 13, 11, 15, 1, 7, 3, 
         4, 7, 11, 15, 2, 12, 10, 4, 7, 13}, 0}, {
        "NOTHING REAL OR SUPERNATURAL IS BUSTING THROUGH THIS LEAST NOTHING \
THE SIZE OF THE BEASTS.", {15, 7, 7, 1, 15, 12, 10, 12, 12, 12, 4, 7, 10, 4, 
         7, 13}, 0}, {"I WOULD HANG HIM!", {11, 15, 7, 7, 13}, 0}, {
        "I'M FEELING FINE THIS MORNING.", {11, 15, 15, 12, 12, 12, 13}, 0}, {
        "AND I HADN'T BEEN LIVING MY OWN LIFE.", {3, 11, 15, 2, 12, 12, 12, 
         12, 12, 13}, 0}, {
        "I JUST KNOW HOW YOU GET.", {11, 2, 15, 12, 11, 15, 13}, 1}, {
        "I MEAN IT'S NOT AS IF -- YOU'RE GREAT WITH THE ADVICE CLARK.", {11, 
         15, 11, 15, 2, 1, 10, 13, 11, 15, 1, 10, 4, 12, 12, 13}, 0}, {
        "SCREWIN' SOME POOR SLOB OUT OF HIS RETIREMENT.", {7, 13, 12, 12, 12, 
         12, 10, 11, 7, 13}, 0}, {
        "IT'S ALL WORKING OUT JUST LIKE WE PLANNED.", {11, 15, 7, 15, 12, 2, 
         10, 12, 12, 13}, 0}, {
        "THEY JUST STOOD THERE CONFUSED.", {12, 2, 15, 1, 1, 13}, 0}, {
        "COME ON STACY IT'S YOUR SECTION AND YOUR MAN.", {15, 12, 12, 12, 1, 
         7, 3, 1, 7, 13}, 0}, {"UH..", {12, 13, 13}, 0}, {
        "I HAVE NO LUGGAGE.", {11, 15, 7, 7, 13}, 0}, {
        "I -- I...", {11, 13, 7, 13, 13}, 0}, {
        "I TOLD YOU I'D GET IT.", {11, 15, 11, 11, 15, 15, 11, 13}, 0}, {
        "HAVE A DONUT.", {15, 4, 7, 13}, 0}, {
        "NOBODY WALKS AROUND LIKE THAT.", {7, 15, 10, 12, 4, 13}, 0}, {
        "WELL PERSONALLY MAJOR I WILL TAKE WHAT COMES.", {12, 2, 15, 11, 15, 
         15, 4, 15, 13}, 1}, {
        "YOU DID PICK A REAL STRANGE TIME TO GO AND BE BRAVE ALL ON YOUR \
OWN..", {11, 15, 12, 12, 12, 12, 12, 10, 12, 3, 15, 1, 7, 10, 1, 7, 13, 13}, 
         0}, {"CHARLES I MUST APOLOGIZE AGAIN FOR THE KRONOS MISHAP.", {12, 
         11, 15, 15, 2, 10, 4, 7, 7, 13}, 0}, {
        "I GAVE MY GRIEF TO JESUS CHRIST.", {11, 15, 7, 7, 10, 12, 12, 13}, 
         0}, {"NOW YOU MIGHT BE ONE OF THESE HOLLYWOOD TYPES CHANGE YOUR NAME \
AND ALL THAT BUT PEERLESS DOTHAN IS ON YOUR BIRTH CERTIFICATE.", {2, 11, 15, 
         15, 8, 10, 12, 12, 15, 12, 1, 7, 3, 7, 4, 12, 12, 12, 15, 12, 1, 7, 
         7, 13}, 0}, {
        "STOP SAYING YOU KNOW WHEN I SAY 'Y'KNOW.' I KNOW YOU KNOW.", {15, 12,
          11, 15, 2, 11, 15, 13, 12, 12, 13, 13, 11, 15, 11, 15, 13}, 1}, {
        "HE'S NOT A STAG HOUND.", {11, 15, 2, 4, 7, 7, 13}, 0}, {
        "SO IT'S ALL WORKED OUT PERFECTLY..", {12, 12, 7, 15, 12, 2, 13, 13}, 
         0}, {"SOUNDS DELIGHTFUL. ... MEANWHILE I'D LIKE TO PREPARE YOU FOR A \
COLONOSCOPY SO WE CAN TAKE A LOOK INSIDE.", {15, 12, 13, 13}, 0}, {
        "I ASKED IF WE COULD GIVE HIM ANYTHING ELSE.", {11, 15, 10, 12, 12, 
         15, 12, 12, 12, 13}, 0}, {"PAY'S GOOD THOUGH.", {7, 1, 7, 13}, 0}, {
        "DOESN'T MOVE.", {7, 2, 15, 13}, 0}, {
        "IT'S REALLY NICE TO TALK WITH YOU SAM.", {11, 15, 2, 1, 10, 12, 10, 
         11, 12, 13}, 0}, {
        "HOW YOU GOT ME LOCKED UP LIKE A DOG ON A...", {12, 11, 15, 7, 15, 9, 
         10, 4, 7, 10, 7, 13, 13}, 1}, {"TREVES.", {12, 13}, 0}, {
        "I DON'T KNOW HOW IT GOT THIS WAY..", {11, 15, 2, 12, 12, 12, 12, 12, 
         12, 13, 13}, 1}, {
        "IT SEEMED SHE WAS HARMING YOU.", {11, 15, 12, 12, 12, 11, 13}, 0}, {
        "OTHER PICTURES--I DON'T KNOW--IT'S NOTHING I WANT TO LOOK BACK ON.", \
{1, 7, 13, 11, 15, 2, 12, 13, 11, 15, 15, 11, 1, 10, 15, 2, 10, 13}, 0}, {
        "I'LL RISK IT.", {11, 15, 7, 11, 13}, 0}, {
        "I THINK THEY HAVE ANOTHER FELLA THERE TO KEEP IT OFF YOUR CHEST.", {
         11, 15, 12, 12, 12, 12, 12, 10, 15, 11, 7, 1, 7, 13}, 0}, {
        "I'LL GO OUT FOR A SMOKE.", {11, 15, 12, 12, 10, 4, 7, 13}, 0}, {
        "INDIA IS A NEWLY INDEPENDENT NATION.", {12, 15, 4, 2, 1, 7, 13}, 
         0}, {"I CAN'T BELIEVE WHAT A --!", {11, 12, 2, 15, 4, 4, 13, 13}, 
         1}, {"IT COULD BE PARASITES AN INFECTION..", {11, 15, 15, 12, 4, 7, 
         13, 13}, 0}, {
        "SAYS SHE CAN GET ME IN TO SEE THIS KILLER.", {12, 12, 12, 15, 7, 10, 
         10, 15, 7, 7, 13}, 0}, {"SEE YOU.", {15, 11, 13}, 0}, {
        "NO NO!", {7, 7, 13}, 0}, {
        "YOU CAN GO BACK WITH JACK.", {11, 15, 7, 2, 10, 7, 13}, 0}, {
        "WE WONDERED ABOUT THE DISCOLORATION SO HE RAN A SPECTRO.", {12, 15, 
         10, 4, 12, 12, 11, 15, 4, 7, 13}, 0}, {
        "OF COURSE YOU CAN'T!", {10, 12, 11, 12, 2, 13}, 0}, {
        "JUST HOPE.", {2, 7, 13}, 0}, {
        "LONGITUDE 109 -- LET'S GO.", {7, 8, 13, 12, 7, 13}, 0}, {
        "WELL I HAVEN'T HEARD ANYTHING ABOUT THE DISAPPEARANCE OR \
ANYTHING...", {2, 11, 15, 2, 15, 15, 10, 4, 7, 7, 7, 13}, 0}, {
        "TWENTY-FIVE YEARS.", {8, 7, 13}, 0}, {
        "LET ME SEE!", {15, 12, 15, 13}, 0}, {
        "WHY HE COULD OPERATE ON ME ANY OLD TIME AND I WOULDN'T EVEN BE \
SCARED.", {2, 11, 12, 12, 12, 12, 12, 12, 12, 3, 11, 15, 2, 2, 15, 12, 13}, 
         1}, {"THE PACE OF REFORM MUST MEET WITH THE DESIRES OF THE TIBETAN \
PEOPLE.", {4, 7, 10, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}, 0}, {
        "MY PLAN INVOLVES ALL FOUR OF US ACTING TOGETHER.", {12, 7, 15, 7, 8, 
         10, 12, 12, 2, 13}, 0}, {
        "ROSE, YOU'RE VERY SICK.", {7, 13, 11, 15, 2, 1, 13}, 0}, {
        "WHICH IS A WONDERFUL CROOK.", {4, 15, 4, 1, 7, 13}, 1}, {
        "I LOST A WORKER.", {11, 15, 4, 7, 13}, 0}, {
        "SHE SAYS HE COMES BACK IN DREAMS.", {12, 15, 11, 15, 2, 10, 7, 13}, 
         0}, {"THE DANGER.", {4, 7, 13}, 0}, {
        "ABOUT SIX MONTHS AGO SOME PARTS OF BODIES WERE FOUND DOWN BY THE \
RIVER.", {10, 8, 7, 2, 15, 7, 10, 7, 15, 15, 2, 10, 4, 7, 13}, 0}, {
        "THE PERSONALITY INVENTORIES WOULD TRIP HIM UP.", {4, 7, 7, 15, 7, 7, 
         7, 13}, 0}, {
        "IF FIRED UPON TELL OUR FIGHTERS THAT THEY ARE ORDERED TO ENGAGE.", {
         10, 15, 10, 12, 12, 12, 4, 12, 15, 15, 10, 15, 13}, 0}, {
        "IT WORKED!", {11, 15, 13}, 0}, {"JUST MY LUCK.", {2, 7, 7, 13}, 0}, {
        "LECTER DID IT TO AMUSE HIMSELF.", {12, 12, 12, 10, 15, 7, 13}, 0}, {
        "IT'S A STUPID TRADITION.", {11, 15, 4, 1, 7, 13}, 0}, {
        "I'LL GO OUTSIDE AND TAKE A LOOK IN THE GARAGE.", {11, 15, 7, 10, 3, 
         15, 4, 7, 10, 4, 7, 13}, 0}, {
        "SO MUCH FOR NUTSY FAGIN.", {12, 12, 10, 12, 12, 13}, 0}, {
        "SUPPOSE THAT YOU BEAR FIVE OR SIX CHILDREN WITH YOUR \
CHARACTERISTICS.", {15, 4, 11, 15, 8, 7, 8, 7, 10, 1, 7, 13}, 0}, {
        "IT DOES AND IT IS A BETTER LOOKIN' REASON THAN YOU JACK WINTHROP.", {
         11, 12, 3, 11, 15, 4, 1, 7, 13, 12, 12, 11, 12, 12, 13}, 0}, {
        "FUCK OFF FRAT BOY.", {12, 12, 12, 7, 13}, 0}, {
        "IT'S REALLY SOLID THIS TIME OF YEAR.", {11, 15, 1, 1, 7, 15, 10, 7, 
         13}, 0}, {
        "NO I READ IT ON THE MESSAGE.", {7, 11, 15, 11, 10, 4, 7, 13}, 0}, {
        "WELL SURE..", {12, 12, 13, 13}, 0}, {
        "GIVE MY BLESSING TO THE GIRL.", {15, 12, 12, 10, 4, 7, 13}, 0}, {
        "I FEEL ALL RIGHT TOO.", {11, 15, 7, 7, 7, 13}, 0}, {
        "PROBABLY HE MEANS NO HARM.", {12, 11, 15, 7, 7, 13}, 0}, {
        "SOMEDAY YOU'LL HAVE A SON JUST LIKE YOU JEREMIAH.", {12, 11, 15, 12, 
         12, 12, 2, 10, 11, 12, 13}, 0}, {
        "THESE ARE HIS PEAK HOURS.", {12, 15, 11, 7, 7, 13}, 0}, {
        "QUITE.", {12, 13}, 0}, {"GOOD THING.", {1, 7, 13}, 0}, {
        "HE KNEW WHERE HER ROOM WAS.", {11, 15, 12, 12, 12, 12, 13}, 1}, {
        "JOANNA GO FUCK YOURSELF!", {12, 12, 12, 12, 13}, 0}, {
        "NUMBNESS.", {7, 13}, 0}, {"NO I...", {7, 7, 13, 13}, 0}, {
        "I DO IT 'CAUSE IT WORKS-...", {11, 15, 11, 15, 11, 15, 13, 13}, 0}, {
        "JIM JONES Y'KNOW.", {12, 12, 12, 12, 13}, 0}, {
        "THERE'S NOTHING TO UNDERSTAND.", {7, 12, 10, 12, 13}, 0}, {
        "WHY IT DOES ME GOOD JUST TO SEE HIM SIT THERE ALL SOLEMN AND GO \
POKIN' IN HIS BAG LIKE HE'S GONNA CURE ME WHICH HE DID OF COURSE.", {2, 11, 
         15, 2, 1, 2, 10, 15, 12, 7, 7, 7, 1, 3, 7, 7, 13, 10, 11, 7, 10, 11, 
         15, 12, 12, 12, 12, 4, 11, 15, 10, 12, 13}, 1}, {
        "YOU KNOW THAT SOMETIMES IT'S HARD TO UNDERSTAND GOD'S GREAT PLAN.", {
         11, 15, 4, 2, 11, 15, 1, 10, 12, 12, 1, 7, 13}, 0}, {
        "HEY INSPECTOR I DON'T INTEND TO TAKE THE RAP FOR THIS.", {7, 7, 11, 
         15, 2, 15, 10, 15, 4, 7, 10, 7, 13}, 0}, {
        "YOU UNDERSTAND HOW I FEEL.", {11, 15, 7, 11, 15, 13}, 1}, {
        "HE DOES A LITTLE SPOT WHERE THE BUTTER HAD BEEN.", {11, 15, 4, 12, 
         12, 15, 4, 7, 15, 7, 13}, 1}, {
        "I CAN'T BELIEVE IT'S ALREADY STARTING TO GET DARK SO EARLY.", {11, 
         12, 2, 12, 12, 12, 12, 10, 15, 1, 7, 7, 13}, 0}, {
        "THERE'S NO FIRST ACT.", {7, 7, 12, 12, 13}, 0}, {
        "GOD PARDON SIN WAS THOU WITH ROSALINE!", {7, 7, 7, 15, 12, 10, 12, 
         13}, 0}, {"UNDERSTAND THAT.", {12, 4, 13}, 0}, {
        "LOOK DIFFERENT THAN YOU SOUNDED ON THE PHONE.", {8, 1, 10, 11, 15, 
         10, 4, 7, 13}, 0}, {
        "GEORGE WORK WITH ME I ALWAYS GET A LAUGH WITH THAT ONE.", {12, 15, 
         10, 7, 11, 15, 15, 4, 7, 10, 4, 8, 13}, 0}, {
        "I CAN'T DO THIS.", {11, 12, 2, 12, 12, 13}, 0}, {
        "ONLY BY A DIRECTOR OF THE FIRM.", {2, 10, 4, 7, 10, 4, 7, 13}, 0}, {
        "RICK'S WOULDN'T BE RICK'S WITHOUT THEM.", {12, 12, 2, 15, 12, 6, 12, 
         12, 13}, 0}, {
        "RICK'S GOT AN IMPORTANT ANNOUNCEMENT TO MAKE.", {12, 12, 4, 1, 7, 10,
          15, 13}, 0}, {
        "I SHOULD GO YOU ARE THE BOY ...", {11, 15, 15, 11, 15, 4, 7, 13}, 
         0}, {"THEY COULD CLEAN AROUND THE ARRANGEMENT.", {12, 12, 12, 10, 4, 
         7, 13}, 0}, {
        "REMEMBER LIKE I SAY I FOUND YOU IN THE ROAD..", {15, 10, 11, 15, 11, 
         15, 11, 10, 4, 7, 13, 13}, 0}, {
        "BUT LOVE ISN'T THE OPERATIVE WORD HERE PEACE IS!", {12, 12, 15, 2, 4,
          7, 7, 2, 15, 15, 13}, 0}, {
        "IT'S A PERSONAL THING.", {11, 15, 4, 1, 7, 13}, 0}, {
        "TEN'S STANDARD.", {8, 7, 13}, 0}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question"}, 
    "LogProbabilities" -> CompressedData["
1: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
fz26S5Q=
     "], "CountMatrix" -> {{167, 33, 0}, {83, 117, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwV0lsvFgAAgOFPmpuISlFik2idHNaUVarZqOYGyWJyVkP1WTVFq00HJB3+
hd9CF3ReSCJSraQDSY2ni+cHvNubWBMsuhASCAR66aOfxwwwyBOe8oznvOAl
r3jNEMOM8IZR3jLGO8aZ4D2TTPGBaT7yic984SszfGOW7/zgJ7+YY57fLPCH
Rf7yjyUCYkJYQSgrCWMV4USwmkiiWMNa1hHNejYQQywb2UQcm4kngUS2kMRW
kklhG9vZwU52sZtU0kgngz1kspd9ZLGfAxwkm0Mc5gg55JLHUY5xnHwKKKSI
ExRzkhJOUUoZ5ZymgkqqqKaGWuqo5wxnaaCRJs5xnv+zBGnmIpe4TAtXuEor
bVzjOjdo5ya3uM0dOuiki7t0c48e7vOAhzxiGf+nUHw=
       "], {204, 205, 206, 216, 
       236, 254, 261, 263, 264, 265, 266, 287, 288, 296, 306, 308, 313, 321, 
       323, 324, 330, 332, 333, 334, 335, 343, 347, 360, 369, 373, 380, 383, 
       384}, {}}, {{2, 3, 9, 11, 12, 13, 14, 15, 16, 26, 28, 29, 30, 33, 34, 
       38, 39, 41, 43, 52, 54, 55, 56, 60, 62, 63, 71, 72, 73, 76, 78, 82, 86,
        89, 91, 93, 94, 95, 96, 98, 99, 100, 102, 107, 108, 109, 114, 115, 
       117, 118, 120, 121, 123, 127, 129, 131, 134, 137, 138, 139, 140, 142, 
       143, 146, 151, 154, 156, 158, 161, 162, 163, 164, 166, 170, 171, 176, 
       185, 189, 190, 191, 194, 195, 200}, {1, 4, 5, 6, 7, 8, 10, 17, 18, 19, 
       20, 21, 22, 23, 24, 25, 27, 31, 32, 35, 36, 37, 40, 42, 44, 45, 46, 47,
        48, 49, 50, 51, 53, 57, 58, 59, 61, 64, 65, 66, 67, 68, 69, 70, 74, 
       75, 77, 79, 80, 81, 83, 84, 85, 87, 88, 90, 92, 97, 101, 103, 104, 105,
        106, 110, 111, 112, 113, 116, 119, 122, 124, 125, 126, 128, 130, 132, 
       133, 135, 136, 141, 144, 145, 147, 148, 149, 150, 152, 153, 155, 157, 
       159, 160, 165, 167, 168, 169, 172, 173, 174, 175, 177, 178, 179, 180, 
       181, 182, 183, 184, 186, 187, 188, 192, 193, 196, 197, 198, 199}, {}}},
     "ExtendedClasses" -> {"Not Question", "Question"}, "Weights" -> 
    SparseArray[Automatic, {400}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.0002780875, "SingleEvaluationTime" -> 
    0.0054564999999999995`2., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740158275742425*^9, 3.740159527510137*^9, 
  3.740159819982419*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"56daeab6-970f-4540-9c3d-5f354b7675a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"d28206d5-a1db-4b18-95a0-545724d10c77"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8869855653235188, 0.6757795894936992, 
   0.23694492347390503`}, {0.8848262355870498, 0.5344106476757106, 
   0.005734179482239837}}, {{1., 0.42, 0.}, {0.927742432085872, 
   0.8454016159152181, 0.605261077278872}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["167", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "167", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.668`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.835`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7422222222222222`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{167, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.668}], 
         Row[{"Recall = ", 0.835}], 
         Row[{"FScore = ", 0.7422222222222222}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["83", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "83", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.332`"}, "RowDefault"]}, {
          
           TemplateBox[{"\"Row fraction = \"", "0.415`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          83, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.332}], 
         Row[{"Row fraction = ", 0.415}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["33", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "33", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           TemplateBox[{"\"Column fraction = \"", "0.22`"}, "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.165`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          33, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.22}], 
         Row[{"Row fraction = ", 0.165}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["117", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "117", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           TemplateBox[{"\"Precision = \"", "0.78`"}, "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.585`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6685714285714285`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{117, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.78}], 
         Row[{"Recall = ", 0.585}], 
         Row[{"FScore = ", 0.6685714285714285}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "200", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.835`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{200, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.835}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "200", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.585`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{200, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.585}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "250", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.668`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{250, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.668}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "150", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Precision = \"", "0.78`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{150, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.78}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["200", TraditionalForm]}, {0.5, 
       FormBox["200", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["250", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["150", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7401582818924913`*^9, 3.74015953613031*^9, 
  3.7401599061844063`*^9},
 CellLabel->
  "Out[112]=",ExpressionUUID->"cdc81bd9-a871-4ad4-8cd2-04a7a030c728"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 3.7400883194708557`*^9}, {
  3.740158177371798*^9, 3.740158178411964*^9}, {3.740159552959792*^9, 
  3.74015955405449*^9}, {3.7401709864505367`*^9, 
  3.7401709868632593`*^9}},ExpressionUUID->"2288b0f8-e3ba-4450-b920-\
1b5299f6b207"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"createClasses", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"createClasses", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"createClasses", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "300"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"createClasses", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "300"}], "]"}], "]"}], "]"}]}]}], " ", 
      "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 3.74015855015483*^9}, {3.740159429774341*^9, 
   3.7401594638126287`*^9}, 3.740159505209405*^9, {3.7401595565268803`*^9, 
   3.740159576062914*^9}, {3.740170957481477*^9, 3.740170970433209*^9}},
 CellLabel->
  "In[140]:=",ExpressionUUID->"e8e6a9d9-f107-4823-9ebf-2bb0f0877576"],

Cell[BoxData[
 TemplateBox[{
  "Java","excptn",
   "\"A Java exception occurred: \
\\!\\(\\*RowBox[{\\\"\\\\\\\"java.lang.OutOfMemoryError: Java heap \
space\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.trees.LabeledScoredTreeFactory.newTreeNode(\
LabeledScoredTreeFactory.java:56)\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.parser.common.ParserUtils.xTree(ParserUtils.java:41)\\\\\\\\\
n\\\\\\\\tat \
edu.stanford.nlp.parser.lexparser.LexicalizedParser.parse(LexicalizedParser.\
java:313)\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.parser.common.ParserGrammar.parse(ParserGrammar.java:84)\\\\\
\\\\n\\\\\\\\tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown \
Source)\\\\\\\"\\\"}]\\).\"",2,140,20,30944156347447667626,"Local",
   "JLink`Java"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.740171626222301*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"606f3cee-4934-4088-9042-53ea0ceb1eeb"],

Cell[BoxData[
 TemplateBox[{
  "Table","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"MachineLearning`Models`GrammaticalParser`Private`i\\\", \
\\\",\\\", RowBox[{\\\"$Failed\\\", \\\"[\\\", \
RowBox[{\\\"MachineLearning`Models`GrammaticalParser`Private`numChildren\\\", \
\\\"[\\\", \\\"]\\\"}], \\\"]\\\"}]}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,140,21,30944156347447667626,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.740171626292522*^9},
 CellLabel->
  "During evaluation of \
In[140]:=",ExpressionUUID->"5808ba42-816f-43cd-b483-43b839a774c9"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Boolean\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Boolean\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["10000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 10000, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"], "f3" -> 
           Association["Type" -> "Boolean"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Boolean", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 3]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence", "Boolean"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f3" -> Association["Type" -> "Boolean", "Weight" -> 1], "f1" -> 
           Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQEAABdBvDDpRm+F2MMIlV5vNACoTiEWMIFEYQt5r3ljXpXVJziE5
rn2b+6nYtm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3b
tm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3b9l/O6/5+
ABCcesY=
              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f3" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8638625972092938175]], 
           MachineLearning`MLProcessor["ConformBooleanVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2181139535596031377, "Output" -> 
             Association[
              "f3" -> Association[
                "Type" -> "BooleanVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6345089180380480927, "Output" -> 
             Association[
              "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1], 
               "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1], 
               "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 631332860152842886]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 2682676190599947125]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 10000, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.2751}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2751}, 
                    "StandardDeviation" -> {0.4465646537736725}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2751}, 
                    "StandardDeviation" -> {0.4465646537736725}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.047873, "MaxTrainingMemory" -> 292848,
                     "DataMemory" -> 80152, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 7, 9, 19, 37, 59.607189`8.527873614598834}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                 "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                 5830460000005304866]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["Standardize", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                 10.197783592427275`, "StandardDeviation" -> 
                 3.9971902721809993`, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 3886868189269964860]], 
               MachineLearning`MLProcessor["Standardize", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Mean" -> {0.2751}, 
                 "StandardDeviation" -> {0.4465646537736725}, "Output" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 7098352295252712621]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
             "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7255900053155452923, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7649166098026585256, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 5208716758835946799, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxUnbuxBUlznFeACZSowQBG9HN6xgREUKIJFBhBCQLgJ11ifjl3sg4AEsC/
tefOq7u6HplZ//q///1//Z//99//+ec//uWff/75n//3P/7z3/6b/o//8Yz+
PPt6rr2u9tzz2b0M915tzHGes/s9Wgz97vvRz+6+9MMWQztP03++rnXua96z
l2HN9oz7Hlxkz1OG+Zy51z77GWusMux5y/DMPde67/WUofWnnznuPsY+14xh
ztnHucfU39nrvv4M/TnP7OeMOXdbezwthnmP0bpueJ6uZx0x9NVvXag9XFu/
/Qz6D11/qF36F1bXI8Vw+tB/z7GutYbMMfCfdVm9vmuP6xllGM961tGT6H2u
NmMYp6929HLPuG7d9Gc46z7XvvQ5+nXWs0cZRhtPH5ObO/fKxU+79Fi69j30
kGM+ZZh8i643cnXe0Ge47nWdsfs1rsHfyy9080sPfz1T77eNeiXXfC5d+ujr
nnbPe5fhOre+xb31+fa960/1qa+h/8Gbb1pZn0FLQP+yLrv603j5Mczn1p0N
fdVztELzp9ajf6b/0htY49n1gOvSAtQaarz666rFoH9t6KM/rNR1XfUFV+MD
aVE9eu160KwSLdCxltaI1u559L9i0DLv+oDXufSv9ydProe+jlZH0+fSP3/y
abWVmp5hTV1u7/9i0N9/Hi3H2ZYWRl1Di1Sr9zn6jpc+dG536Pm6nn5eXpP1
gHoR7e76Jlq2WzeYtzu0NFjBcy4tsefOn+r6R4/e7KO/tNfPate7uPTv6p9d
k7dYv9DtNhaiN4geJIa2pl7FuW/dNm/oM7SHlXbYObe25s6TN33aubccge54
/uwobeetnaCVqG2jr/i93SbHI3egzYPXmnfrMdxanc9ej/7UXlqlMTQtBd2s
dsejL55rNF7G4BPe7daCvO4fQ9OVscxraMXGcOQVhtbztffu++Qa2ufXkbPU
SpSjOa0Mcjhaz1pqciVX+zXog7AWHv1Q7m+WoeNA5QDa1Mp+vpfIK3purRUe
Uvs/C05O1JtZ61wLVK62fqEVN9n719TTtZ7n0JvQQpEz0Tdbcih5cj3GbhwD
cr5yOPV29Tb0TrbWkN7h1ov/DPto18iV2c/Kma8yaPHKIeDNzioPpzUytfvl
AJfWnt5/riGXr39NO0l+RG8sDlkG/bGFg9Wq06tfZdBqX037RH5DDievRP9A
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
uEazIAokaKt1H6/AZvhOZSpRPvXHpEDEAwoD7/zFMXDxL6GRSg/50FtVR30L
A63h0j8U1yeM/fmWhuaMhykln4FpeLuPYaiPRh1KHr2ppeL6KssRBXTwz6Pi
BC+PJJ9Wgv7eI6CTk9dHCG/1e+kFU86+6LRs3Y+9zBJNnYj5QbzV+Zzx3rSK
ajBt/b0nEXPoKZvP1fUUkFA4HODwDPnq/GkwInUpoelc1nlKNWDEVJwG2fW9
DrxzcIbJe8tHySDpgaVVpm7hOlbc3DedqKE/U89bIN3BxCvU972/9/s5KAzW
Q0PuOn/eIw/Ee2Q2zr7+N1W+qCtY50qHOWqqqh1j0tXsvs5fgrzGgxQzo/Sr
D40E3ejnHtSi/t4YdEdUX1+t/OsPuipLyjgiIm/vI1g3PHo1bqJ1W+/FG3ZT
9FVimz3f03uJYwB8inlr6VDBHS6ZrUb78izeDQbcyf9i46MKx3dU/AyPJpYY
T/vYGulEFSIDM2/S3vEwgb73Lu6Z9Z7yb4uwshYu8fVfnDiOXFDRcffx9cLT
kjitHsv5J540fB0SE3VfUiIa0ZKrQZe8f3EbZEbGtBDr81v45/EPQgCvdemG
+YkNVByGyh+N4jmx6zNmf+CHHWeyhVqDdW/2MOMQf2fQp8x2lz6fY9C48bO1
7vo6RxIi2hL8LM7q9/I43hnhLEQ7vmdjqfgTFiasBEHVp4/zZLeE7/iDn0TM
oUNLL4W/4tbnqaVIplG73YXuz2sVWsOeYLvruRV/s4nngj9Hx7EUtG+NQfbu
F90Bnl4xZ1NEVt/P5g4YiyKUgVZdH242dH+wLdI8qvgJaSDp5uH1ew7BQVGx
hshkzUl95aI+fJ6QK89+L2KYAOOF3XyVrsjY04IWWywh5S8jfWZBTXJzi4DS
2vGMNy2RsT+p64AJSGoGGZEqQMXR9WxWT9TXux/LC5j1TDSlLJRnx0FEHEBN
uvVzCLFjLTcJOVv/BAzf8D5rBxZ53y/tJflrtHHX0jkRD9T8iGzB/fb1jEEu
pRGQ57V4fwdUGZ09y1zIuHvFRytjywK1lx6yp2ZQRKKJaxY/44HHpwB+pdD1
3BLrNNLlY3t4fuZ9Sfat0Ul6A4GnvjfmmJiIlHve7p8gKkGF0vbgil3r+RNG
C2nmnd9y+UAR4EfY5Ve+k//Z+jgP8gY5JUVM4fNdsYjjETmzdVdeQVomHVoK
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
NBwbPwJNke4FYNc4uVDvlqQMic3jH+JD0Xk=
                    "], "Values" -> None,
                     "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy9XXuUllW9HsAZcMRhbgzIcFUxpQRDOyqiwLgMDy5QUCMUEGcOlw65QlPE
RC42LsEaNPAyB0iwkWIok8IIDIfxEqLoIcE8giJS2ICGYOIBkbB/+H2z1vOu
Zz2/vd+P/trr/b797svvftv77VH5vRHjW+Tk5GzulJOz4J19Hx9c0aPR2oMX
HmsovLJ75rlq6nkD9h/omvg/th+bB1sc7/CyVX8fVl3sft/aybsubXjopPLG
hW1b5BR170TXZ2392V26jnq1i3t86//qZSUbRu8vaXyw+9V9h9aUZ37v2Wf4
zrO+2lmOY/PZvpuabp05dvxpjZPufO/oqpyOmX4l8x+6bV2LssT8DG5sHrY/
hkd7fvva92/a9kHnRP+l37hv6cEfdZL7ZO25O/7xXq9Nzfsa9Gb/nz19uIz2
t3lVP7YPw5PtR+2b4Z09Iz4ZXnJGl+ffuSsvmN5C8W98gPPgM9KXlz9xHtYP
14v4YOtT8PHKGZvf+CuU/rGfF2+2Py8/Mvhav2u3zD19d3kpnQ/5kfGxWj/K
Ly8eFJ2xcVC+IL2M/mOPpVfe0IHSkY2L4yTofHOn8staFUu8sfErP1428Gsb
Orjpj60L9/36zroFI87ukMAj6qfeC8eO3XhZR8pfTO/kXP6n2pt7tXXji9G5
ze+lC0ZHoXaA0jNs391mVAyc9XBpYl8MH2f+YsP7VTnt6f6UnmXtzPLOLac1
nJZ5H+HI+EDJUUYXSA9KnjH5zfaP/1uL4zC9a+tCeYTzmR3khbu9/+CYbdv/
d14Ht12k9JRXXzB5H7oOth7kA7NvGT6sH+oNxX/9Vj52zi2/Lk2sn/EN2y+z
U2x+xrcMjqxVegHnZ3YAkyu2b1sX46v6pfO7PbqkrPGfByo2Tiw5LbEOk0ds
PrVvhBfT54reRr+/eu++K8P9Kus3fNv3tlS/3NEtz/H9LoPe2HLrEA4HpU/T
ymM1PtuP8uuMDr12ohpP2U9Mvyo70guX667Z239497bBcFT+T1o8eeWBlz5/
/h/nj127qMSNV8avofBlchPlLPq7jL6Y/n1u+5Sqe0a1p/C0/an92LzI/2af
M7q08Q+MmHnsy2ncvjI7GPUHo+tQ+bNvT7dLz7ijuHF2ZXWb/7u/hOqpfze9
Wsv0hpePWPwo2+3wsiM/yHvFL7+9cFF+IOMXez6pZkxFU9/mdaG9ZPDB98o2
v/RF0VNtMnSRbbx65b3aH7bM3w+dh42L+zS+t+ftrT6cX9u1UM6LfjDTtxVH
doxu6FqUoAO1H+w/rceCtff+T1LeKXx64ebtV1byjeffmxXPh4Z/73w7Dm5r
ceSsMhl3sNb8UiZPvfF8lP+h/IL/47qwX6idbHoxNF6NcZlQeyZUTjB968Wn
as0/QfmKcLVnlAO2HuvH9BWLOzL7hMEh1i63feH6lNxQ+SElnxl+bBzUyxfd
VrN8zIB8t/xn9Gf4sP+PTlrzypN7ihLzP/Le0LwzXzrZjQect/bpvr26fdFO
xk28/I75OS//sPX3275q1LNbiyWfrLhv6NmVp7eh+/Tin8UBcH0s3+Sl/z/V
vlp//e3cLlHrVHBV8v3iununfbqp0E2PsXTBxmP+Tlp/K7Zl69w5t8XkS/fl
N+5/pGRmZW5z3Bnt5SVPHXni6zeX0PHQzvK2TJ8zu9roV/lVDO4ZvVH70vkP
VCb9ARV39sLXxjG7zvgL7TyVx/PqJbZvg1us3MoWPWM/Zu9iv8HXNky4fnep
5Hf2POuM69eObJ8r12V6l+lf6zfy0u+3zXvk6HomN0Lh8/am628u+0P7xDgo
r+2ZrQ/jVwrfaeVs6Di2L+ZfXP7ctc/078LpQcVTkT5tHnvGPJnKP6jWG69T
cUXmH6j8ANs39p81fXn7ijWFCTs4Lf9aa3UY+UsOHxz5Ynh83gvnUD2H8t1+
N/7B9Sm7G/srv+xvNzXNWtSvmOId32f9zE9lctDrD3vxYv9/5dzDfyx5q1Ww
vsOW5d+RjmPXmZa+sGX04eVLhI83HqjsYQUftNd2PfPCkTO3ntw48u5x+3qO
K0jN56xfbB2itx/ji9ypt193+8jiYPlt9hPWxViL9WfWn/E7m5/VSyi5n7bF
9TO4sHiVknfKPzJ8WVwPx7X9svgbw7s9W95LrZ/pXeaHYx4L4afkLI731pDf
FB+8pETyLY6r6ohi/ZO0+aJ1FX89a8+xwuj3VVxZ6QHGry+csaiq/Zz8hP/J
4KT8VK/8Rfva8jShcQr83Zs3QDpWeQz8Hfkvbd6b2fssjsTw6a3Dxf9tfi8c
2H53NGwe/nSXXAlXex/5V9VNeteB/7P6HwUfr15U+Qt8xro473y0rvp4/Zva
D87H5Ea28+MMDqHnGMpL/zqj7qHmfCHSBcbFQ/HI6DA0jhsKH8SDqpNn+h31
P7OPjA689g7b348O7N618Y5knUq26CYUfvg71p0x+d/rvC8Xf9QvPH/M6NRa
JncYvJVdZnJfxUUQ/31mr1l9w/42if8TdRHEzlD+WLb8SWXnKLmB+UtcF8bJ
mL18ovIOLG6e6Afny3Df9ntovoXpV+/5KmtVPa3VfYXaVYyfsxUfSFt/6f09
VI8/0PTWFVsbWmaeb5n8/FMzLuB1mCYnTO975yn8/oz9c6qT8XyWJ7FnVf8V
aneqfTF/BPnV+nn9N3Y+LiN/yi+4YO/VJ8v9of9i45vfjvWVOJ/Kx+P5EaxL
YXDGdTJ6P9z7w1HTPzlZwq3vmu7VE4eVROeZ1fkpJtfUPCwPz/SDwdPkluHv
tc69+795jq7/y7YeYPhS+1XjIJ1n4jJT2nfM7di8z1+vyNv20aECmgdVemni
Das7bxpSJOGj4nN96reOqJ3dksLB8MTyeuhPsbxEqDwK9TOZnArVH6F1OqF6
i/0fynfsPW+9HaNnRo9e+GO/PjWvTeicWxBc56vwpurnUX+a/LG8/X07bh38
3V+2k3ys1uWNfzD/BONMOJ/33JTSS9714blts5eNXlheHs9hsTiHyvtOXjx4
4HkTijPjoX3F/G4vfX7zkXfrqo+elKAL4xsbx+ramDxh/G79ntwy7Zrc+qR8
Rvx44ySbys7fddeGU4PlkbXI1948eqi+RTgpeYTrwvOV3nlXTftg2YZxp1C5
hfRo84T6a4wvmZy0/CXyOauXVfoH426h9BBaj411B0p/MLph9iLKE5uH2S3e
fGOPvOXt6n/8eaLOiZ3TYetNe67O+5465x96vjDWX1ByRPVXekLlF1TdN86P
8jx2n2njpqHxbi9+vfmJ0HpS73ho/6v+oftmdJI2vuPVU97+tz+3/LRT72m2
Fy3/GOpHlKzJvWTVXK7HbTwVh842/Sq4MjpEOanwYvpnzOWzn/3d2HaJ8ZS8
iMV/rH+G+kKdP1BxFCbn0P70nn9h8WnlXyr5o+gJ6aFb5fZen/8kvr6C2WsY
Z8T9mH/A/D6Eq9o/4hfrvJl9au8xu1DB2+KW7Bwog3uGXo77S6FxD8W3Nh/z
Fywuzep8vHxq/XofmjfpjUdbUruL4Tltfb/xL/Kxei/UDvfaNwxPbF1p6wW8
/pB3PqMbvG+Q0ac3v6nggHToxY+6J8H8khOdX0f4mNxjfg+LIyAcvfcT2LyY
Bw6txwjNOzK+DZUfSl/GxjO8/WPpw+rtmd2OfMTgo/Jx7Pf19VWTlgwtc+uH
hfc9Nvdv875I+Ncsj+2FO+obPF+ErdnJjG6N7ll8JjbPkC26Nb5iclLNq+7b
9Y4Ta0+rOBDev5WtevGOV73yj3G7w++V9MoLswOYveWdx/CL9/cUVp51+kUf
cnvZa8eE2vkqvliz4LrpP8tJ1ifguEZ3Sr8a/Fj+HFuM99t9z156U/etKj8J
48i2b/P/Gby98RYVp/H6/ajPvXaOl67MHkK5xOaPlffWsnpqhl8vPBFPKo6K
Lfp/OK6tx3tfWGgckp3nmP3yx02lj+5Zz95T/Iv6ga0T9am3Xthbj3RwyqAz
l8xJysHQeHdauZ/2fcQPntf18h8+q3NbjP5Z3QZ73/CM8lfdp63ozVvXaa3d
u+Gtq8zQMdyzYy2rm8NzHbb/AfevXXH314oTcSW2XhW3D/WbmFxdWTN4yMi6
4vh7X4i9rujYq7/sd6vvxbo7pZeVvFT6Fe0ab530lHFPTty4sHXiPTwvxtb9
03H1bWtfTt7zbfk8r7zB/aNfY/3UOW+lVxkc0Y9g8Tz73eBtdgLGZ710j3hi
9efqvjOvfGT3FHjj6nYuEvcVmlf3+l1ePcrulfHqsbR6Ef1s+33uB69tzO95
bL2aJ3TdeF4E6c3wPGDeY+1Wbk/WE7OWxUFxfK+9rewrdp7T3rN7ExDP9nxs
XOklF95dSu+p9+pt5G+8x7+21ZbffnVqIa2nZnIY5RCeM2XrRDmA8SmmTy4v
X7a84IXChL9p/dh3V2LpP1TOsPlsPzs//+S2+uoi+d0Uxb+h8pLRs5Lb6n6B
2Nb2g+dwFN8i/NPG9/A9BQ/EOz4bXSs9ruo+2HcaQulYxVMYP7Pz4ljPn63z
UbF6yxufVfnvWH/Umwdh4xhfqfMWKi7F5rfzJWzd7P3Q71Ko823Kn2JwUvlE
NY619v0NpTdVa/FKfP+UX1xzxtXLW3C6F3kOFq/xxr+861f4vGL8eS2f7JWM
j3rlpIIr68fsJPSXMX5qeQIbf0DN3qo1ucl4k6qzV3kA9qz0FvqJaId5zx3h
M4Onyr9sKDo0/+MPdV2WzYN5c/zfG6c2vWj2LKP7JT1mfavngjZyn1694I23
e/EZqo+Unnj/rkPjOt2YpFd2P5Gaj/lp5k9578lR+1T2oOEb5dm7JTv79fn/
T9cjP4beB4nrY3lS44cH1y381bPrmuM4ti6kD1XXp/qFwlHpR7RzVXwOf2fr
ZvpBnbvyfv8Mfz86/83PPzm1UN5vhPc0Ysv0UWgdR2zdKduf2VmxfibSo53L
QvnK7gNh59RZ3ePR35TctWdpPtUXXvsP61oU3FA+sTiB/Y5xArsHWtEh4y+l
T8qf6V315fPJe97ZuCyvqeoADe7sfVwvy3PYePi9JW8cPa1fz+xyb/0AG4/V
yXrxHXo+MnR9sfrR3kO+VnHgWD8Ux0N8oN5kesTGt+89eeFl7zF8euNPbHzv
95gVPr33uIXygz3vrX7wW+98VkTtFq9/7J3X4O39rgvDS1PBihl1nzbbTebP
sPyRvbf4iQmv7qjLS9B52jwE40O8/zP2fnEvv3v9AK9eZPFd+9/u2QqNn8TC
u2zNwTtf39Hs93025J2591/RHBdAPw7taHYuQ8kZvH/L/rd4v5cP1XdjcB1K
zig5lfg+hciXevnd/sfvz8TiF/sb3rz1715/OvY71Qy+ti5vfjz0vjmkV3w/
2/yOcFJ11UqOZ+xK5/1nig7VOWqmz2PpA89bMnh6x7c4l9LvOI+qC2Jy5ren
LH38wlXh9crsPk1r0d/DdeB3qNn43jia97stjE+99KbuufHKL1a/yvjD3lf1
RN68G8JHxWuZ/lFxQ4xnxup1r7+v1ovvs/ua1TptXqvLW1g9tcWwz4oT8FTw
Z/URbP3MX8J74bx0aHxo9guj52zd73m4dvoDdw9qTeUU039o7yi6Z/C3fdrv
7B47xncq/oP7UfcKWntkdZ+Hao/lu+0qpHubR9X1KL3O6JzVtbBnq2eZPGrV
+te3JfOOsfZs2vhIaBwG9diJahkc2bntUPigXxRaz+Bdv1dfq+/VW/7O/Ccm
59l6Qu8BUvQfGpeJpU9r0Y41/Vfwwwl5t03MT6wPnzGu7v1uCv5ufktoXaH3
exDeugGLI+A6Wb7HxrF9K/2J92Cy8bz88PaVVa9d9cKfByi+VPSyad6Mw290
2TrAy1eKv716Qa3L8Pvc9ilV94xqH13vhXpU1S/guEofvPTWxUfmzf5ifWj8
VtEtsy9C72kIxYuSc7F05q3nRvyH7gPhl4nXHtdzsXnRk2rGVDT1LU3IA6xH
YOsxfsF4ktE327eyq2LzVPgei6N56croUslx9t0ML12w+e37HIrulN+p4iw4
ntn7+L0HbO08JdIlu4/V61dbfTjbn+LHiiM7Rjd01fd1evmcxTHYuKF6xPu9
YsuPx8phb3zRy6e4DsknUBep6FK1Kp+O+LK4ayZ/RM4ZIjxj/QfLn7J1es+/
q3qf0DpN7/w4X6h/yPg27f1GoedjrB5Y8WHCThbfg2Dzq3tdmb7G/sbviGf8
LkLacxCxeFDjsLyCfQ/UOz87/5L2XkVGt168Z6sNtYe8+kr1/8modYcu2thE
7Xw1jvceKqW/vfE3b95W2UEojzEP7Y1fKDsV16HOAWXuS3bSn9kN6rxobFyn
d+tdv+/WJk+uIzQPifUEiN/QuCujE9u3svdi7RCvv2/6B+mF3YOJ47N75Lz3
tnjtGFsf1vN5/Q02vsUjQ+MdaE8bnXn3g/OoeBaek130+Lx3p17Dv+/E6FHd
f234M/8y9PvHyEcsD6DuL0U7ks2P9Qp5kx8f+UCbfLlOrOdl50G8eSG2PgVv
rzxRdKzsbMvfxMalsE1b14Z5b6srZva4t74yE5+Y9vZ/vtHYKjgvEMpPCb10
PD6t6h2UXGH629Zp+RTveW/cB+p9pC/rh+c2cT7vd4zMfsB5jA+zlWfB1vv9
qFC+Zngzvafm9dqxbB5Fx6H17mwcxK/3XrTQ+2OwNTjad3oYXr3jsXiQ97sA
sXKS6T/Do9n3jI9MnnjtRLWe0H2EwlnpcRUnVOOi3cDsE5vH6GjQf68dNKeu
2V5C+azgwvQPoyMmZxT/2jyGdyafFV4RviOn97lz94gCGfcJvd9R+bWh5wrU
d4HTtl58s/PSTA6G8hnCg9HF5FkfNRRPau2eJ63csvXYPTyhclXFUQ4vW/X3
YdXF0eex2P8qXo7jhMo1L3wx7onzeOteWL7G+h9YMvMPDXUFwfSu6A39fmXn
e+MesfoztB43c5934D1aWG+J62X3/TO4Mr8xNI6Tbfmm8GXxe6tnxv4s3mtx
8xMlt2PlgldOq7ibdx2qvtDiFcsePja44i/x8Ir1l5BPVHxD0Q17j91nwOSR
un8L1+2VO948lPf7p7huVd9k9/MOq8+9N2dlsh4t9j5t9jvWK3nrVdBfY/AI
tUOt7XFL/ztWfkXH5dj5ulB5af1t/1gnzt67t/a/Bm9b1M59rp+do1L0if9j
HIT5EzjeuTMq23Wobh1cTxtK5973QuMadn4A96vq99PKf6ufVvoa9byiC6+f
4N1PrF+Pfrc3XpuRx8fzfJivYvMiHNV3gL11PmhHx8oBpcdC24y/fLxu6LoX
X1y69SP9vUXv99Cx9cpD1LssTxYrD2L7o95IW89v/5u8xnrI2DiX1+5j8rF/
9+8s7l/W7DervIyXrlnc1ejCe/8j8ytD7RCvH8zi32ycUD8+lM8YX4XGATNy
DOohQunOe6+t8ufY/yZni25pu+GZq9sl7j1i91CHygv8DkXa81rWqjrKUH3C
9JP9Hlq3FbovFn9h8gT3Zf/jeWNlT+Dv3QcOHX/xz1sn+nm/a2TP3z6ldNPs
3zePo/xf9p0Ar75i53u9eDp755ybdh5tk5gP8RH6nUq2Hu+9Wt7x2Lkpr37D
37Ge3av3Yume+Uvob7L+LP5k9f5sPbH50NC8iGpN/qrv73rp+0S/z/xZ5k8z
OcroT8nt4cM/2Pr8Yv89eCqexeocUR/gveNMPsfG4bz4CT2/by1+zwH3j/Ge
THwN/L5s05sah51rVXUxCv9euaXqYEP3id91Y/KN6W/Ud2wfXntL2YvZyk94
4ZPRv1/efNf4njmJ971xWTxvGEt/yg9ndrO3Dsorp0o2dyq/rJW+xwf5dOIN
qztvGlLUWNB6Q4eGGw8l6uetPbf4zZtyS5Ny1Qu/2Pt5cPwfHzp/wsPncPme
Vn956djuTTO9xc692X0msX6Ctaj/035XKbRl8WKVLwk9H4X3vLN9MP79VU3p
7h/mJe+TZfyP/3vlufVjeZqBN/5g4KLvtJT7tfwe+lHeunDbP37POBT/3vgH
+pHs/gXFj0pPxvJx6P15mE9Myz82ntLDCv6h8TK1XpUvTeuvYNzdG5djdKTm
UfeJee8nYHhg8Gd2oldueOU0i3OqeKjxJ36fIVT/xNqxrL4P6fVfGlDuXA==

                    "], "Version" -> {11.3, 0}, "ID" -> 6413031506679139115, 
                    "Output" -> 
                    Association[
                    "f1" -> 
                    Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3519824094447848605, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    1107852814282405113, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Spans" -> {
               Span[1, 6863], 
               Span[6864, 6864], 
               Span[6865, 6865]}, 
             "Wrappers" -> {SparseArray, Identity, Identity}, "Output" -> 
             Association["(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQEAABdBvDDpRm+F2MMIlV5vNACoTiEWMIFEYQt5r3ljXpXVJziE5
rn2b+6nYtm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3b
tm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3btm3b9l/O6/5+
ABCcesY=
                  "], "Type" -> "NumericalVector"]], 
             "Version" -> {11.3, 0}, "ID" -> 599417332904572119]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2194942009040854653]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             2391994714275353545, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4783494484448582239]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Not Question" -> 0.5, "Question" -> 0.5]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association["Weights" -> CompressedData["
1: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
TdoguHxQg4Z+F6HENgNfW8yGv+MvkXrRfeGO+zuoe34TuxR6g9+7WvQyVKVH
xfdo0MISds1vG816P40iHzRA12Vq4ragB8h72evgC7DgQV8w+0bkqaxOo4f+
waeFDhRg3Ex2GoLAeY9ahg6ZeV8SylEd/yok0DfXzrSzLE+I0CiR/mnPgXt7
EsH45Unc/mYNJKilo9stFVF1/ka86WsL6tt30sSC6SJ/PrXaqTjHcyHL1diI
/SzGsZNlX0T30XIwy1LTY6VvERgHda3s1vsyPPbpLax5OVFYENhbxqOWxkpk
tX/+60noce8AronXxoEfFosnUrvjmxZd+tZ+DHZuD6EZjj60KXsq6fuoiTp6
86m+Zwqt/fsEkk9J8cXLq6ipdsGjYsZOYdNKd/YGg9B34B0aeaEZqp7p4NsY
BVj5SyT+b8fq3WX18+kIS5CO2S24xmm4X647JfbvepYm/VdIB/rdhZbFSL9j
kyFh2C1hX9MxrG3sIa59EC/4diyCoZ/byHFLEQa2BQuLN3+DH03t8Lraihb+
twXUf5Sj6bpgnN69CqfW/+Povt3pv5Qy9E3cB0Z3PSl+9ljhy0Q3WDTGQeRc
cvz3gWxF9Sk6tbMrU4xXZtOP9iK19nxxq9O/nm/0Upqt8s0jYs4ulHyZI6S2
daOd8/aB85AE4e+8zqJFdIbE83yhdL7fBCj9EwB8b93Qyq7g+0v+UQNsHhiN
wVm5NE2rUlZrP82pp6xfD5D3uauTBkFRYxMtmpJG/Mz4+JynHRmdIHdLNh6Z
0YQ+l4aR7/r/8OdRa8xaGkOipRPWm7SD8Qw/KilNxo5ZurRgszVb6RBHGl86
scdFN+n+9j7ijEXHQKq9h+I94kTOb24MnkSf7iqLL/1Pol+EDnWyWAIeSz2w
W2139tAyTobngo+vg/v+pbj57F3aXbpYyLEsptQ0VUZGBdTr605a4WpED39e
p8K13eG3k60Q2MrE3ferIHuuFbPIb6XEirFU1x7IPj3SBtn1160kuxPTWbp1
sKRT0j+ebvxXyD8x6B/H+ovQ4oSfBv+mFQtchClemmDfyxeU0vag2GxNP4or
qHvCdcxYvV+IUpgLBRpWdOv5JAoeZQGu9ALnyJ2AIcyAXtgrifm/AsUXb2Mp
akQsDrC4IdSYH6M7V7NotcIu5r30OT6wKmDHCiuA4+PVF2uFo6+r0ebDA2n9
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

            "], "Biases" -> RawArray["Real32",{0.7264440655708313}]], 
         "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 6865,
            "$InputDimensions" -> {6865}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{6865}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQAAQAMA3Bp3aECbQSAxAolbaxQ4iVpFoLKHXkCgMIXfN5d1Q90lE
bFlE89rLqVqXY0xt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt
27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt27Zt
+zfP7VVM9/n9AK9fpNQ=
            "], "Type" -> "NumericalVector"], "Key" -> 
         "(f1f2f3)", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.4220108316045738, 0.13865813271798896`], "Accuracy" -> 
         PlusMinus[0.06846205166342316, 0.11188514060581631`], 
         "EvaluationTime" -> 0.000046425000000000004`, "TestSize" -> 1200, 
         "TrainingSize" -> 15, "TrainingTime" -> 0.08977833333333332, 
         "TrainingMemory" -> 7.358885333333333*^6, "ModelMemory" -> 209072., 
         "ExperimentCount" -> 2, "ModelUtility" -> 0.9602525078289749, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.316772855741874, 0.014515596551694517`], 
           PlusMinus[0.5931465653521251, 0.018510536074443407`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.05239774374425653, 0.0032521079764738056`], 
           PlusMinus[0.2760802691075741, 0.011691404205058126`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           0.01, "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 10000], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Vector[TypeSystem`AnyType, 2], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 126718857731932]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.9596857188086274`, 0.05643073182033348], "Accuracy" -> 
              PlusMinus[0.005857113363194886, 0.004718399781527288], 
              "EvaluationTime" -> 0.00010085000000000001`, "TestSize" -> 300, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.11439, 
              "TrainingMemory" -> 7358816, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.21911337621848087`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.9596857188086274`, 0.03990255313747729]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.005857113363194886, 0.0033364124818670697`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5877108196253501, 0.01896983121114877], "Accuracy" -> 
              PlusMinus[0.6417173339554264, 0.023397649764615603`], 
              "EvaluationTime" -> 0.00005370833333333333, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.237048, 
              "TrainingMemory" -> 13412248, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7301146676862308, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5877108196253501, 0.013413696287367513`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6417173339554264, 0.01654463681238752]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005370833333333333, "MeanCrossEntropy" -> 
             PlusMinus[0.5877108196253501, 0.01896983121114877], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 13412248, 
             "TrainingTime" -> 23.819190000000003`], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6352898055412624, 0.01890570837476181], "Accuracy" -> 
              PlusMinus[0.6029557828206106, 0.010848280712780944`], 
              "EvaluationTime" -> 0.000026189444444444446`, "TestSize" -> 
              1200, "TrainingSize" -> 15, "TrainingTime" -> 
              0.015697999999999997`, "TrainingMemory" -> 
              1.7097893333333333`*^6, "ModelMemory" -> 172672., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.6757778522591262, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.638288795122089, 0.026666467669362065`], 
                PlusMinus[0.6324031279110334, 0.026162374393728344`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6031413780244972, 0.015472174546504168`], 
                PlusMinus[0.602776414553792, 0.015210405334093586`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9579883891972325, 0.06688469276253942], "Accuracy" -> 
              PlusMinus[0.48743346314983793`, 0.02859631054369319], 
              "EvaluationTime" -> 0.000025866, "TestSize" -> 500, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.076874, 
              "TrainingMemory" -> 7767864, "ModelMemory" -> 172800, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.44460098284587135`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9579883891972325, 0.04729461980997041]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.48743346314983793`, 0.020220645102361823`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8446278466729408, 0.05678820787671979], "Accuracy" -> 
              PlusMinus[0.6021900384598233, 0.02805620701446776], 
              "EvaluationTime" -> 0.000023725, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.572374, 
              "TrainingMemory" -> 33115264, "ModelMemory" -> 173440, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5045294831746797, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8446278466729408, 0.04015532688105987]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6021900384598233, 0.019838734234303733`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7718717260927691, 0.07191046572937224], "Accuracy" -> 
              PlusMinus[0.6728919006982588, 0.026930293970623544`], 
              "EvaluationTime" -> 0.000014593333333333335`, "TestSize" -> 600,
               "TrainingSize" -> 1500, "TrainingTime" -> 5.435832, 
              "TrainingMemory" -> 165615200, "ModelMemory" -> 175488, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5492751875230865, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7718717260927691, 0.05084837795552194]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6728919006982588, 0.0190425934859751]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000014593333333333335`, "MeanCrossEntropy" -> 
             PlusMinus[0.7718717260927691, 0.07191046572937224], 
             "ModelMemory" -> 175488, "TrainingMemory" -> 165615200, 
             "TrainingTime" -> 36.254578], "Index" -> 2], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.4390175452533502`, 0.5331366778443056], "Accuracy" -> 
              PlusMinus[0.4210503350222283, 0.09089947821227143], 
              "EvaluationTime" -> 0.0012812433333333332`, "TestSize" -> 200, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.38091166666666665`, 
              "TrainingMemory" -> 7.232706666666666*^6, "ModelMemory" -> 
              3.483429333333333*^6, "ExperimentCount" -> 2, "ModelUtility" -> 
              0.13873288486306812`, "MeanCrossEntropyHistory" -> {
                PlusMinus[2.092831343531957, 0.19665017188263584`], 
                PlusMinus[3.110128289601555, 0.27380195790651957`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099009900990102, 0.04999512254661126], 
                PlusMinus[0.34158415841584144`, 0.047281198781485595`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1498267867665173`, 0.24877612148827774`], 
              "Accuracy" -> 
              PlusMinus[0.5792079207920797, 0.06993081195248246], 
              "EvaluationTime" -> 0.00138364, "TestSize" -> 100, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.735733, 
              "TrainingMemory" -> 22073360, "ModelMemory" -> 3649848, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2902407341613454, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1498267867665173`, 0.17591128250164956`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792079207920797, 0.049448551345481616`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6217726638521013, 0.09178244152011397], "Accuracy" -> 
              PlusMinus[0.6782178217821788, 0.06637035020526592], 
              "EvaluationTime" -> 0.00150575, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 2.316722, 
              "TrainingMemory" -> 69743600, "ModelMemory" -> 4038872, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.532562283438287, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6217726638521013, 0.06489998679273032]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6782178217821788, 0.046930924699869495`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00150575, "MeanCrossEntropy" -> 
             PlusMinus[0.6217726638521013, 0.09178244152011397], 
             "ModelMemory" -> 4038872, "TrainingMemory" -> 69743600, 
             "TrainingTime" -> 77.60497833333334], "Index" -> 3], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0069142469746208`, 0.013768817341738276`], 
              "Accuracy" -> 
              PlusMinus[0.0049504950495049506`, 0.00700105723947077], 
              "EvaluationTime" -> 0.00185609, "TestSize" -> 100, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.027973, 
              "TrainingMemory" -> 5896472, "ModelMemory" -> 252232, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3966544788986678, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0069142469746208`, 0.009736024111262067]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.0049504950495049506`, 0.004950495049504952]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4076820816121767`, 0.016332640177235482`], 
              "Accuracy" -> 
              PlusMinus[0.0049504950495049506`, 0.0035005286197353847`], 
              "EvaluationTime" -> 0.0017351833333333335`, "TestSize" -> 200, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.016826333333333332`, 
              "TrainingMemory" -> 1.3623653333333333`*^6, "ModelMemory" -> 
              252216., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.2861719417170446, "MeanCrossEntropyHistory" -> {
                PlusMinus[1.3958748109488344`, 0.014991351274527926`], 
                PlusMinus[1.420390474112574, 0.015552898256432414`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.0049504950495049506`, 0.004950495049504952], 
                PlusMinus[0.0049504950495049506`, 0.004950495049504952]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471805599441, 0.007931464032162798], "Accuracy" -> 
              PlusMinus[0.0049504950495049506`, 0.00700105723947077], 
              "EvaluationTime" -> 0.0011259500000000001`, "TestSize" -> 100, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.085981, 
              "TrainingMemory" -> 24859216, "ModelMemory" -> 252600, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6124645869496514, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471805599441, 0.005608392001879511]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.0049504950495049506`, 0.004950495049504952]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6871421645915398, 0.006862604189418797], "Accuracy" -> 
              PlusMinus[0.5451861224322693, 0.03510039641231978], 
              "EvaluationTime" -> 0.0010684450000000001`, "TestSize" -> 200, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.566304, 
              "TrainingMemory" -> 123834272, "ModelMemory" -> 260072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6219308378523204, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6871421645915398, 0.006862604189418797]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5451861224322693, 0.03510039641231978]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6173790842214556, 0.00788860160395793], "Accuracy" -> 
              PlusMinus[0.6906536131778911, 0.018086814292663674`], 
              "EvaluationTime" -> 0.00122361, "TestSize" -> 600, 
              "TrainingSize" -> 8000, "TrainingTime" -> 4.473715, 
              "TrainingMemory" -> 659787776, "ModelMemory" -> 315672, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6805455773437473, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6173790842214556, 0.00788860160395793]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6906536131778911, 0.018086814292663674`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00122361, "MeanCrossEntropy" -> 
             PlusMinus[0.6173790842214556, 0.00788860160395793], 
             "ModelMemory" -> 315672, "TrainingMemory" -> 659787776, 
             "TrainingTime" -> 5.620116750000001], "Index" -> 4], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.704849798106209, 0.02864853475177631], "Accuracy" -> 
              PlusMinus[0.5880192299062454, 0.04003822909492901], 
              "EvaluationTime" -> 0.00010302666666666667`, "TestSize" -> 300, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.024423, 
              "TrainingMemory" -> 11563280, "ModelMemory" -> 4018080, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5046684926319107, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.704849798106209, 0.020257573194039494`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5880192299062454, 0.028311303299724824`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.42215449314343106`, 0.029290475985208505`], 
              "Accuracy" -> 
              PlusMinus[0.15220647944664933`, 0.023588257341967192`], 
              "EvaluationTime" -> 0.00006806688888888888, "TestSize" -> 1100, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.008504333333333332, 
              "TrainingMemory" -> 2.607989333333333*^6, "ModelMemory" -> 
              996960., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.9556114327602836, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.3983057990755512, 0.0036974220990891047`], 
                PlusMinus[0.4566102747526156, 0.0044442428708889705`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.16931793748715623`, 0.0020282519080451608`], 
                PlusMinus[0.1222525478354248, 0.002683522875941606]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5856140585772721, 0.027888538732565207`], 
              "Accuracy" -> 
              PlusMinus[0.6560465509054935, 0.04747764377963665], 
              "EvaluationTime" -> 0.000140595, "TestSize" -> 200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.104681, 
              "TrainingMemory" -> 50909944, "ModelMemory" -> 16651896, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5149443305859227, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5856140585772721, 0.01972017485518054]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6560465509054935, 0.03357176387134038]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6441307410441415, 0.019683483873957224`], 
              "Accuracy" -> 
              PlusMinus[0.6210063425247143, 0.030441067741540533`], 
              "EvaluationTime" -> 0.0007716460000000001, "TestSize" -> 500, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.807302, 
              "TrainingMemory" -> 247291952, "ModelMemory" -> 82566912, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3820348757720943, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6441307410441415, 0.013918324924651207`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6210063425247143, 0.02152508542660237]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0007716460000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.6441307410441415, 0.019683483873957224`], 
             "ModelMemory" -> 82566912, "TrainingMemory" -> 247291952, 
             "TrainingTime" -> 5.406436333333332], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0059076566802898`, 0.1042249911603905], "Accuracy" -> 
              PlusMinus[0.6220644356559059, 0.025721726051975563`], 
              "EvaluationTime" -> 0.00004527833333333333, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.176691, 
              "TrainingMemory" -> 13403160, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4206137882799198, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0059076566802898`, 0.07369819801862008]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6220644356559059, 0.018188006915174602`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6273730070523942, 0.27308524396655126`], "Accuracy" -> 
              PlusMinus[0.09535949982420527, 0.09406057347192223], 
              "EvaluationTime" -> 0.00005341388888888889, "TestSize" -> 1200, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.11740866666666668`, 
              "TrainingMemory" -> 7.358805333333333*^6, "ModelMemory" -> 
              209072., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.6332443070011428, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4252402359017309, 0.036650715166619385`], 
                PlusMinus[0.9683138749695318, 0.04759963468585172]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.07743360198643634, 0.0041525141932356015`], 
                PlusMinus[0.2653888377636783, 0.012788882549928627`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[3.0872456224107947`, 0.37123810163749704`], 
              "Accuracy" -> 
              PlusMinus[0.6611180881358305, 0.027209037716115846`], 
              "EvaluationTime" -> 0.000046103333333333336`, "TestSize" -> 600,
               "TrainingSize" -> 300, "TrainingTime" -> 0.339887, 
              "TrainingMemory" -> 49631160, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.1366020074358312, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[3.0872456224107947`, 0.2625049791026949]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6611180881358305, 0.019239695078626044`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000046103333333333336`, "MeanCrossEntropy" -> 
             PlusMinus[3.0872456224107947`, 0.37123810163749704`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 49631160, 
             "TrainingTime" -> 11.506257666666668`], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.693740679788452, 0.0036329214601581025`], 
              "Accuracy" -> 
              PlusMinus[0.11178810188710821`, 0.08308279717423767], 
              "EvaluationTime" -> 0.00008348, "TestSize" -> 800, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.030341999999999997`, 
              "TrainingMemory" -> 4.204296*^6, "ModelMemory" -> 209072., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.6218670478052845, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6922476123552012, 0.0022877863988662525`], 
                PlusMinus[0.6983300289239817, 0.004010987526072992]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875], 
                PlusMinus[0.0049504950495049506`, 0.0035005286197353847`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6903646122624848, 0.0032464222976965416`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.000047413333333333336`, "TestSize" -> 600,
               "TrainingSize" -> 70, "TrainingTime" -> 0.053547, 
              "TrainingMemory" -> 11731096, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.624974873784412, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6903646122624848, 0.002295567221296437]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6804688158192961, 0.003786350604649722], "Accuracy" -> 
              PlusMinus[0.7576598681761051, 0.02088800856078498], 
              "EvaluationTime" -> 0.00004564500000000001, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.132262, 
              "TrainingMemory" -> 49631224, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6339544720380822, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6804688158192961, 0.002677354188497603]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7576598681761051, 0.014770052498813715`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6497747483879469, 0.007583603396836884], "Accuracy" -> 
              PlusMinus[0.7619291004557469, 0.020738515548679785`], 
              "EvaluationTime" -> 0.00003753333333333334, "TestSize" -> 600, 
              "TrainingSize" -> 1500, "TrainingTime" -> 1.082644, 
              "TrainingMemory" -> 247381096, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6630922523404422, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6497747483879469, 0.005362417387732697]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7619291004557469, 0.014664344976214128`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00003753333333333334, "MeanCrossEntropy" -> 
             PlusMinus[0.6497747483879469, 0.007583603396836884], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 247381096, 
             "TrainingTime" -> 7.247968666666666], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931470016891489, 0.0016190028349966734`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.001843714293820352], 
              "EvaluationTime" -> 0.00005223111111111112, "TestSize" -> 1200, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.024971999999999998`, 
              "TrainingMemory" -> 3.5441946666666665`*^6, "ModelMemory" -> 
              209072., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.62276064024822, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931463205767388, 0.002289612196120421], 
                PlusMinus[0.6931476828055667, 0.002289618932204452]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875], 
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931444889600662, 0.0032379878348064556`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.00004980166666666667, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.036961, 
              "TrainingMemory" -> 11731016, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6224722510421097, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931444889600662, 0.002289603155391191]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931315318370674, 0.0032378981526883844`], 
              "Accuracy" -> 
              PlusMinus[0.7576598681761051, 0.02088800856078498], 
              "EvaluationTime" -> 0.00009045166666666667, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.15304, 
              "TrainingMemory" -> 49630960, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6224838672164038, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931315318370674, 0.0022895397405573517`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7576598681761051, 0.014770052498813715`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009045166666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.6931315318370674, 0.0032378981526883844`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 49630960, 
             "TrainingTime" -> 5.126305333333335], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6550285279864587, 0.19721001823998688`], "Accuracy" -> 
              PlusMinus[0.13498950675301177`, 0.08308851159183454], 
              "EvaluationTime" -> 0.00018173666666666664`, "TestSize" -> 700, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.09911966666666668, 
              "TrainingMemory" -> 6.557805333333333*^6, "ModelMemory" -> 
              209072., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.6218640607557415, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6193792122363622, 0.0036542857931599905`], 
                PlusMinus[1.0137376514777725`, 0.011591726393114992`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875], 
                PlusMinus[0.0049504950495049506`, 0.004950495049504952]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6433495624853809, 0.008391426399647151], "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.00004669833333333334, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.112933, 
              "TrainingMemory" -> 13403256, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6695312841020752, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6433495624853809, 0.005933634511018316]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6248481088279504, 0.016055255188827677`], 
              "Accuracy" -> 
              PlusMinus[0.7588645020892837, 0.020896587953560204`], 
              "EvaluationTime" -> 0.00005570833333333333, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.411745, 
              "TrainingMemory" -> 49631088, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6876204454961329, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6248481088279504, 0.011352779817700552`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7588645020892837, 0.01477611904562354]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005570833333333333, "MeanCrossEntropy" -> 
             PlusMinus[0.6248481088279504, 0.016055255188827677`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 49631088, 
             "TrainingTime" -> 13.823953000000001`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4220108316045738, 0.13865813271798896`], "Accuracy" -> 
              PlusMinus[0.06846205166342316, 0.11188514060581631`], 
              "EvaluationTime" -> 0.000046425000000000004`, "TestSize" -> 
              1200, "TrainingSize" -> 15, "TrainingTime" -> 
              0.08977833333333332, "TrainingMemory" -> 7.358885333333333*^6, 
              "ModelMemory" -> 209072., "ExperimentCount" -> 2, 
              "ModelUtility" -> 0.9602525078289749, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.316772855741874, 0.014515596551694517`], 
                PlusMinus[0.5931465653521251, 0.018510536074443407`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.05239774374425653, 0.0032521079764738056`], 
                PlusMinus[0.2760802691075741, 0.011691404205058126`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6033636766725372, 0.032324817175636664`], 
              "Accuracy" -> 
              PlusMinus[0.6384715347402266, 0.02520643745458927], 
              "EvaluationTime" -> 0.000055016666666666665`, "TestSize" -> 600,
               "TrainingSize" -> 70, "TrainingTime" -> 0.173638, 
              "TrainingMemory" -> 13403320, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7081765125482669, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6033636766725372, 0.022857097425508066`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6384715347402266, 0.01782364285369465]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7542833594974224, 0.056296923906831414`], 
              "Accuracy" -> 
              PlusMinus[0.6462693052070282, 0.027645851737776332`], 
              "EvaluationTime" -> 0.00005766000000000001, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.417937, 
              "TrainingMemory" -> 49631160, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5641309014936704, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7542833594974224, 0.039807936654463555`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6462693052070282, 0.019548569235459543`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005766000000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.7542833594974224, 0.056296923906831414`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 49631160, 
             "TrainingTime" -> 14.021011666666666`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.1], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 3], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.4038498829447066`, 0.20846093054652517`], 
              "Accuracy" -> 
              PlusMinus[0.48019801980198035`, 0.07062136698709694], 
              "EvaluationTime" -> 0.00106907, "TestSize" -> 100, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.154866, 
              "TrainingMemory" -> 8231280, "ModelMemory" -> 450016, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.2956608483365728, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.4038498829447066`, 0.14740413760190585`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.48019801980198035`, 0.04993684749324002]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5601518602713793, 0.05619594558443534], "Accuracy" -> 
              PlusMinus[0.7327289112539852, 0.04456253102770858], 
              "EvaluationTime" -> 0.000623725, "TestSize" -> 200, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.303141, 
              "TrainingMemory" -> 66509800, "ModelMemory" -> 451248, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7543038969420774, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5601518602713793, 0.03973653419794445]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7327289112539852, 0.03151046787652866]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5099382953505737, 0.02442756739328653], "Accuracy" -> 
              PlusMinus[0.751395264504647, 0.02674233394089168], 
              "EvaluationTime" -> 0.000620934, "TestSize" -> 500, 
              "TrainingSize" -> 1500, "TrainingTime" -> 0.822546, 
              "TrainingMemory" -> 313611952, "ModelMemory" -> 452176, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.8370914208297211, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5099382953505737, 0.0172728985516843]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.751395264504647, 0.018909685674359675`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.4949088829237189, 0.016823629932724612`], 
              "Accuracy" -> 
              PlusMinus[0.7549190807026895, 0.017277867186711805`], 
              "EvaluationTime" -> 0.0011856083333333335`, "TestSize" -> 600, 
              "TrainingSize" -> 8000, "TrainingTime" -> 3.958172, 
              "TrainingMemory" -> 1758133576, "ModelMemory" -> 452448, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.8468147548007986, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.4949088829237189, 0.016823629932724612`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7549190807026895, 0.017277867186711805`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[4.601843917592324, 0.32721393308169816`], "Accuracy" -> 
              PlusMinus[0.19306930693069296`, 0.05543801677019926], 
              "EvaluationTime" -> 0.00105075, "TestSize" -> 100, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.165446, 
              "TrainingMemory" -> 3014136, "ModelMemory" -> 443680, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.09183328330280326, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[4.601843917592324, 0.23137519098078993`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.19306930693069296`, 0.039200597593741435`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00105075, "MeanCrossEntropy" -> 
             PlusMinus[4.601843917592324, 0.32721393308169816`], 
             "ModelMemory" -> 443680, "TrainingMemory" -> 3014136, 
             "TrainingTime" -> 16.699466], "Index" -> 11], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6928763191405616, 0.0032364132751397006`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.00004627333333333333, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.039766, 
              "TrainingMemory" -> 11731160, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6227132317650212, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6928763191405616, 0.0022884897735734456`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.691615261868796, 0.0032368127593337794`], 
              "Accuracy" -> 
              PlusMinus[0.7576598681761051, 0.02088800856078498], 
              "EvaluationTime" -> 0.00005124666666666667, "TestSize" -> 600, 
              "TrainingSize" -> 300, "TrainingTime" -> 0.19459, 
              "TrainingMemory" -> 49631024, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6238475197083653, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.691615261868796, 0.0022887722515560556`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7576598681761051, 0.014770052498813715`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6930607432864359, 0.0032374403598906037`], 
              "Accuracy" -> 
              PlusMinus[0.171063451860131, 0.003687428587640704], 
              "EvaluationTime" -> 0.00006663166666666667, "TestSize" -> 600, 
              "TrainingSize" -> 15, "TrainingTime" -> 0.030639, 
              "TrainingMemory" -> 3837496, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6225474847569469, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6930607432864359, 0.0022892160321656627`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.171063451860131, 0.002607405759461875]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006663166666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.6930607432864359, 0.0032374403598906037`], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 3837496, 
             "TrainingTime" -> 3.1036660000000005`], "Index" -> 12], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7047653296253066, 0.05125041354489611], "Accuracy" -> 
              PlusMinus[0.6168828731430706, 0.02677539128987848], 
              "EvaluationTime" -> 0.00004600666666666667, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.130585, 
              "TrainingMemory" -> 13403200, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6039958244881949, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7047653296253066, 0.03623951495621092]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6168828731430706, 0.018933060749996292`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00004600666666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.7047653296253066, 0.05125041354489611], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 13403200, 
             "TrainingTime" -> 13.189085], "Index" -> 13], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8703224131761872, 0.08390606219971972], "Accuracy" -> 
              PlusMinus[0.6250167340626973, 0.025391949628179335`], 
              "EvaluationTime" -> 0.00005599166666666667, "TestSize" -> 600, 
              "TrainingSize" -> 70, "TrainingTime" -> 0.245106, 
              "TrainingMemory" -> 13412488, "ModelMemory" -> 209072, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4868273634689283, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8703224131761872, 0.05933054556408205]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6250167340626973, 0.01795481976963284]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00005599166666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.8703224131761872, 0.08390606219971972], 
             "ModelMemory" -> 209072, "TrainingMemory" -> 13412488, 
             "TrainingTime" -> 24.755706], "Index" -> 14]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 14], 
        Association["ID" -> 126714562764636]], "MaxTrainingSize" -> 10000, 
      "LastReportingTime" -> 3.740153936893049`16.32546446637846*^9, 
      "PreprocessorEvaluationTime" -> 3.94189453125`4.*^-6, 
      "PreprocessorMemory" -> 564888, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 15, "TimeBudgets" -> 4.171664831881501, 
          "ElapsedTimes" -> 4.827071999999999, "ExperimentCounts" -> 21], 
         Association[
         "TrainingSizes" -> 70, "TimeBudgets" -> 5.214581039851883, 
          "ElapsedTimes" -> 6.052282, "ExperimentCounts" -> 14], 
         Association[
         "TrainingSizes" -> 300, "TimeBudgets" -> 6.518226299814846, 
          "ElapsedTimes" -> 7.463446, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 1500, "TimeBudgets" -> 8.14778287476855, 
          "ElapsedTimes" -> 10.631184, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 8000, "TimeBudgets" -> 10.1847285934607, 
          "ElapsedTimes" -> 10.176549, "ExperimentCounts" -> 2]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[126723152699228]], "ID" -> 
         126727447666524]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, "Values" -> {"I'M GOING HOME."}, 
           "ID" -> 4528839483062865292], "f2" -> 
         Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{11, 15, 1, 12, 13}}, "ID" -> 2561069794756905755], 
         "f3" -> Association[
          "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           5024803803011978992]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 68.292265, "MaxTrainingMemory" -> 2343463928, 
      "DataMemory" -> 3777456, "FunctionMemory" -> 1001376, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 9, 19, 39, 7.721856`7.640296685731602}, "Instant", 
        "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740159512816429*^9, 3.740159782434148*^9, 
  3.740171947775867*^9},
 CellLabel->
  "Out[140]=",ExpressionUUID->"3cc3eea0-8d0b-4f7d-91f0-d4e5ef96dfba"]
}, Open  ]],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.74017140520592*^9},ExpressionUUID->"57cab30a-2b88-4a46-9b94-4a8b098b6a50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl200", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"createClasses", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"createClasses", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740158251434836*^9, 3.740158267226678*^9}, {
  3.7401594789628983`*^9, 3.740159482899502*^9}, {3.740159582199562*^9, 
  3.740159585588765*^9}, {3.740172014814617*^9, 3.740172018709688*^9}},
 CellLabel->
  "In[141]:=",ExpressionUUID->"62f46b42-ed9a-43b6-b3ba-cec748b2d139"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7089999999999999636`4.898643519004583", "\[PlusMinus]", 
                    "0.0143709959823781919`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 400, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"], "f3" -> 
              Association["Type" -> "Boolean"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Boolean", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 3]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence", "Boolean"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f3" -> Association["Type" -> "Boolean", "Weight" -> 1], "f1" -> 
              Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2f3)" -> Association["Weight" -> CompressedData["

1:eJztxTEJgEAABdAvJhEnU3gZPG4XwdmEBrGFEQQHOwjvLW/YjmXvkpQ+adN4
rWedbdu2bdu2bdu2/c/zur8fzDND0A==
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association["Type" -> "Boolean", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8638625972092938175]], 
              MachineLearning`MLProcessor["ConformBooleanVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 2181139535596031377, "Output" -> A\
ssociation["f3" -> Association["Type" -> "BooleanVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["BooleanVectorToNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "BooleanVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6345089180380480927, "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    631332860152842886]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    2682676190599947125]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 400, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {0.2775}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.293546, "MaxTrainingMemory" -> 116768,
                     "DataMemory" -> 3448, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 7, 9, 16, 11, 48.862662`8.441552099376917}, 
                    "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                    5830460000005304866]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                    10.224338282763073`, "StandardDeviation" -> 
                    3.9951166871210613`, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 3886868189269964860]], 
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.2775}, 
                    "StandardDeviation" -> {0.4477652844962414}, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 7098352295252712621]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7255900053155452923, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7649166098026585256, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 5208716758835946799, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1: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
wUX8uBmXoPEYOdoxSRe9TyH3kppNT2jI5RrQvHIRz7TKmFFFHp98W18wUcCe
z+SN9m1G34ZVD7tFc11R67B3rtowA0G+8zRWl0SBHbqMfs+LcBUdnVIiOyPb
naf0J5KpVfPir/y8/NLbHlZwvCh2nw+lMxOl15YUP5fnGNM9VuLdQ3Nu/ZNP
k3C2/Rv3rtTbsH5mlwAiS9zXz7aXpcrVCBxK3M+4clt1LPLomea6uCfc2vEs
EY6SYurHoq5ti3ZMbiOZlJv+LuHy2QoigPscu+m6TRzyAvvh7ueDnkTqIPqA
MrPV7M8Q4Xj/MY2ddhXVW/bG0NS7Pfu5clNCYE+zuDwNKa7ca08e66BeXnq6
cievBT3WnDDPnXJv4Lg9Joxm79/ntTYxVM/PKu577a625dDreE7txgtuonAb
99DweOXidrNF2xsoe+og1MQrD0e9vYkW7gTXeeXDm3bBus6JZPqVey5MTE8B
SAJ55QRfwoOZPKOn3Pcj4ZLMuJ3g1sUrW/js3Q4gtvHo2m03XrI3Uw4blax5
5bJwXqqT9+LT9Zu2ca0IFswGm6N89dDFQWumuqqYcLlyP20NXlcFT7h27oVT
rzmYQ8e+sIJ3XT0q2lhT5I+jFyDlAocpQkldeUrK5QgSrqgAm5W6cu9Eavkz
aibr2qFJP01KuNoWba8f6TaEmOkzTPI67MVP+5713raD2QCRvN2kf/eanKWg
affBc+U2SHlr0osOMvjyyc3umHztbwXklbuA19MCLXZ4Xj3YregVrcjwepTu
PD1p25gaa5Ybtfve6APFydu1E317d99NeFkam7YfVY3lys01GERwJlcku175
m09mhtEFDkDd509vVtUdGSpP0Y1rejRFNHHPkiZ/vHqe5p/kG3ayRt/1lXvb
yPa9teOyZu4jjmZ5b9HMk+WhXNeK/OZjhuux6+aTm4eaVlofKUpWQqIDe0rL
vZdmrvja245grZy49DJO+i+D5xrXiviDnP5m9D2dcTOJwKhEnv6uVyoh29WZ
Fmvh+ZwZaTrnRYzmyl+5twyawVwV/bwGceVegXyiq35Ey9Gd/4kGOa+EuWUm
7a7cPlS9r0Vn69F3v0yMMu0Znh/cuLxaNIq2Bq/a2mJ88dO0P98V498rNE9+
3srzsDHN5rlVLj7bLCKYFkmgzQQX9wAk02ReIzZ7aH/1lUvagv17d2eeey68
ohhcnEi0hTttn5yJuP2Wrue+cSjoAw7aCKVau2bwyvUEb8gc/2HjXznufnnj
yMuTof595Y+5iGZXFcdrpF/zwpStpGqnByO783QatgPYW2sy8vmRQzqbqGsK
sbd8r/nyuJNfvEFhg1nIuxTMhm4vG9p61lJums9stqGStdNP7p0478MVG2Iv
bxRCdvcRsl95bz7/vTpgjs1mx7RD2zfcbVPDHvly/cvAECV1w+Yx7yamnrvX
N6d3Fax1gTf3+Sram/BmtjySOX+vrnebwDzW5txnyuMiGJqwF8L88JXrmZsI
X6L5+OKe9zTsnDWssh38XL82LIkTGTDzKGafm6+LO2O2PHkivdaXdm525G2/
NWFnW8CVD0tKAKo9eHC7y/+9nAKx7d6Eqz7y+zx+1is0YqI/pZD7G0fElAHr
kFDW+/ll4TMo34gKbdo/xu9Y9YK8zf3Xrw3vQg978W2S6TYrXXk1YF3eSBVc
z42z7KP2pxviNrDtjZffDvMtXnCv1m2XxZMrtyfEtJ6tkSbS73pt/sVTrMsr
T9rDMbzm0Jjn9vbk5QMYsp+phgzbUzPf+Zh8s13X9k7Cg7pvxS/qS7apnLh0
w5vy896uFsj1YCp9XLl20IPumXkeOz8vEOqPbAW12+Td32klC38TSbxIgJ4r
N34wFWx32vjypdGAbZe9sUpcUChXvu0Y85aPlVE87pVXO1geqeSxNtlyvaZK
TQBAl+wdq1dvXnvxpv7wIp1n+fp3zHME87cjQj3lPG3+sDlqRW+1SrlyLxF5
h5932+Nz7WRacdteZTHC8/7L/Xy3X9TrjUy4hqu5cn9qgBVV+7UM8NaVixBV
9mugUsb1R/4SxmObT31b+/rK5xxvpWxrq5yW59vfYXkDRvB2+7TMl87gNrwQ
ja2g43f+JpfMxYu3cdRaynmGbfDWKKqx9JUvf7ljBmzZH53zHHEx0Xssywxr
4rlt+9MEmEmjYJB3nj4+ukcNRjgE1194H+D9OYPlma8Z303ji22VSOjY9Vx8
myvSL+yuLbUEEzcvMW20NzH/eNrjBzdeubtaovwld9AurrzHxedmMu+xZ/rO
B2Ycv/1B4EQc7SSu3P5aQE+gGf4exvv5+AUMy9ePTS3xux0pN9iecefHSO/m
RSV7BhVR5dfQSz5Hby2B1kC91fvaiS2RyzvX9uT72wf3HK24TOLR0tnZSJuf
33Hdr2ubQHTZ+XnElqg8i9s48r7X+3R8rJlNNlq58bhk+/a2jLime/Fzyc+f
aBKRtXtN+8qtjBx/Z8Lz1K23v/JwGJH9KGY2r9+UlFqsj1+3mWEvVy53s7oa
2Qz7YK78lPi5C+mYzc9jpnyYeZO12LZY9/d5Uwk1roXWuJf2yrsH154O2zej
SnDlxhEVXm1HfbW+eOXS5CVl945YSzuMa/emuqwdWUpKe/Dqj/Gh15HK+xMn
IdcLGbHW+FmJOVM/oJc5V4lkjQzv1YOOxNzYkFjHDyy8ciO1ZXeaZVV/LuQ+
384DS0ueoPhpjGsPU7fmZPqM/oub54kfjbDXOHojqxp55eYVMTWLLbYsnIvP
/sqE2SI5vTm0cv2+csKdaJmyP3CknZiStwboj6PoDcuVb5OTsLwV1x4tDF05
IXUkDQTEaVYp5UYLhIr6CgB55HM4Ws3S19J5YgT5HNZlUMiWY6Z2f73yY0ek
FXLvXlhmufMHQrw5EvFL9Dq+z9/+hsnbJW4+0js0Vy6ttbau7ZpSK1fuROzw
86rlOZkHsDdnvZfmbJTtWZeJS2PTy7+7RuHg4uT2ltTyh1TsqPL3cvL53h2x
g8ngxl+QuvO0o1xH4VVYb5vNlEvXe4178yd+rOnKV48YPZpBjZJe+5Ej2zC0
bfhTzze+3ma6xCtvzmyz6/n58fbG1ag8mNK4ckMsQTSuhtpG/crjdiAYGjVI
8/R3PqaNvTDjT74cr4qPlBtf2Dc1OAUn64a2+XtVf/ojIc1Ohdee5cJesbRf
dMmIV0n5bu/PvHjju2acK5e2BIWd6zTsp7xy3XXx6qd3JmqeI38FqRiTWya1
XJb70r3aYG1wS/NNVl056tlWKaxSc2JSP9FeFwFED0hJO7EV4XgRPLDNsuWV
i/I24fgO+/rz817Ct2fQXxwT9K8+7XzwV1qQ236zU/+Cs/lGQV7FpZ2YJd1R
KyqWF7732rv3dkLFb15lZ5xcrFvJ90JL8YrYnU/8HotVQu9o2mhx7XzZti3b
6MK6v+pz5ZbuvScITZzhr165iVv9rMmS6EItKcdB2nEZPYX+0saVs/yY5jBi
Nqp+5VFSter5WMjwN9auvAV6xm8YvY1SV2552ksxJpQkGSXl8pu4/G2Z/9w6
gpd9lxzc20YehuuXT4Tj1hgNSnQvM+VWjfwhiWNr27i47dGMtqsTNKVnPHVs
v2k+BKPWIO/8T9CMKZp5NcCs2pU3KSJG1f3hJx67U25ziA0kx4ut5fpB2cB8
b4PEpf+R7/U3g7y21v3RBGzok8fvlRgDeO/NkP9/CxcBIQ==
                    "], 
                    "Values" -> None, "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    Block[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJy1WE1IVFEUfqHjT/NnOZmMUhNtkrFNLoYIW0yB6Yj0J02LlEITpmiiha6s
oU0EkTmLoowsUCQUSotEIt4ULQxsKFwUMUiFkIUFFUFUVps5sziPwzn3znN1
uPfdd+853/3Ozz0bjsT3dq4wDGN7gWG4+uqPPXrvT4FMN7Q5f1RXpi4ZZ0Zr
D6xJUd9hXDOfeBW64rWsa2pJzjzprbDMY2kGw5/HTvnYddT559wfNk9Xrhb/
r3sOJ6X2Lvc+aXPWteVbGYsrZR8+H3hw9HtvXySyavn0zuqjijteP3gj4fNW
WfkIUmpH8oL3+r9hD21f8b3jvybLeb5k12H7YD9Vu0EvWF/xd3fmhL9Un89Z
/aj74/Tj5s9f7Vk30OVk9VqMdb/YGfLk+Evdiyo/dP0ZSxwPdePOnmh9e5HT
zeqja6/0v63jL9uj+60454tfQ+fwu1szpRZ8lj5dbplwW88DXKV47psajHT0
8+t6ft41A/5y8jucC3ZReUwss35ExV0qn2I9MM7UPPgLjPG5wANpfsX3g/2Q
un9qfzjf7ZxqW5lxaOeHmtjt13/uuMT4Az8suKF4zfKcWS/1B3zvYnsUJYev
XfUJyNP9X5rGGx3i9RRPKL5zduB75u4JZC7uCfmgGxcLD68vCj5bMqW46+ZX
jMvi2+azD+eKyfvuijvDzTF3bjw/PdS67aY8D6jy/2Rmsuz+aEluDHFe1V4q
Xkp5lq+k4jfFM4w/zAe+LhycjVr9H+pSqj7UtYvLO1zegzxK+SnFs2vxZPXc
xQI6rgvzLdidb/1G2Y/1l/qr7vvWYgcTh6i6iKqTOV6CzL2D0PkUHhz/VeME
V5+p4i3lB16H62Cu7wG4c/Warn4cPtL8COOnQ899h1oXzLWO2onEm48m9V9d
wLGx+wGdz1XzrLR/JI2jOA6QfEDvbSneduUN6lzgGfee3hQaqWv0/CbvCSTu
A9ilL35XUBL6LFSew/viford8ZzzO7vrXwtOivUk9AHwPPYbCl/VvMitw/ZQ
fTDd/al9uDyA9bK8U5lzuX4g5f+6fKH+4/prynxH+R/XU6r5VVVK6wGKv3nr
MbZrYCRcQtY3WE/QY0dHMF31uNCiP1Wnce8M/B339+yyV9fPcb/sP5XBAvo=

                    "], "Version" -> {11.3, 0}, "ID" -> 6413031506679139115, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3519824094447848605, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    1107852814282405113, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
                  Span[1, 830], 
                  Span[831, 831], 
                  Span[832, 832]}, 
                "Wrappers" -> {SparseArray, Identity, Identity}, "Output" -> 
                Association[
                 "(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxTEJgEAABdAvJhEnU3gZPG4XwdmEBrGFEQQHOwjvLW/YjmXvkpQ+adN4
rWedbdu2bdu2bdu2/c/zur8fzDND0A==
                    "], "Type" -> 
                    "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
                599417332904572119]]}, "Invertibility" -> "Impossible", 
            "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 504074388080892407]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                1867570019887632781, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7443894421457286454]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> Association["Not Question" -> 0.5, "Question" -> 0.5]],
        "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["LogProbabilitiesFunction" -> LinearLayer[
           Association[
           "Type" -> "Linear", "Arrays" -> 
            Association["Weights" -> CompressedData["
1:eJw1V3tcztcffyqpKETlMt0eubRcyqWFvuckS41lXYa0NtJla+XX8pDLFCla
IVPuiS6YZ3NZCKPv5ygjkkSkJPUyYpZLlkv82G/v83r9/niq53m+55zP5/O+
nRznxQdFG2o0Gp3pvz+CwhdPWrAgfGlwV7yJCo8bMzoOXxr8+/Iy0mhelTxU
nLQ/klPtYTbqr1Rhb5nB3vj9Qn62ipi2x41c9ueyo9OF4loWRCEXu4nkK5Vs
3+dDeeLIdNLaNKv569L56f4JdOvCfSKXw2S+3YO73sqg2Nar1LnKlqd8eI10
YWeVXom7KC/MmQ4E+/PLS0ezl9cT2EZfDUu/U8xMndfS0o06ml5oKuo1c+mN
Q1/hPGcIuzn7F6ZVVikxr5xEt4AtNK1mA/thWRtbHm5NTwYbkPZOKqH+ofmb
WPEbPdu2poxN152hRvdMQp1FvzxUrn3Xn1D/+QnDKOQS42RpyTPsUskzu5yW
llsrhkMW0ng1ktKs3bmrOKn4TtzB2yuthLatiO0Onk1hhUspqTP19N9uW2S/
+Lxf1moKtM+lnGA79qj9NTvmMJ4Z9TPjqPHVmpPqhKoY+Tu6dpIIN7Bk6qnz
bLrShT+tSKHhRaqy0GoP7TqynyYEdhdhZQdlffZPU5TIQoVHWzUo2nhjfvdk
VypgGsWVDDn2jktOZg3PrZhXy0PV9qRGvJ47hH9p4sFz8vPpyHFn6vLCQZS/
fMBWhcwlrBUGjcrNJ/vV+i4Owv6LruJt5ny2ZeVvpP/ykDI63I3bmjxWgIfD
bB8x52Y0b2xLIuDm1RHIWlYO5ph11cMXyt2LKqtsXUDXPrcSnj4fsYS2c/J9
7le7ad2iZnXeziMUMb6SLSrjIrY5jIBr4szJrLX6gooz3N4mEp7/PtCFjA75
UfvbLOV1rcIuV2fQfbvvqGJRE1l+c5J6bcuimT/6EPrcPLVMgJO23FCgH8yM
nv+jFqZvJpejx1n3M3Po+h1L/sDuOcuoM+Tzv+wp5+ZXsF2d2GOW8MldSOAI
eOF/rpDp1j2m0XG9+EC1DwOn3V5OlLU3/5UtzyxcuZUMruylEYPKqDQtg9kF
VdO7bv+ol2sTJYcxz0J/I9a7ZJiwGdPCEqv7i5bW+7SuvxUtuZLH15qZ0KW8
LDpg8Vyt9mhj4O4fa07Q0yku8u/d0bvo/toC1tL7a6mpaFNrarvemzLNMph6
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

               "], "Biases" -> RawArray["Real32",{0.19115674495697021`}]], 
            "Parameters" -> 
            Association[
             "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 
              832, "$InputDimensions" -> {832}], "Inputs" -> 
            Association[
             "Input" -> NeuralNetworks`TensorT[{832}, NeuralNetworks`RealT]], 
            "Outputs" -> 
            Association[
             "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
           
           Association["Version" -> "11.3.5"]], "Processor" -> 
         MachineLearning`MLProcessor["FirstValues", 
           Association["Info" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAUAMAnJlGYQ7RKCYlWoraAwiBaM/wh1OawgEI0dpDcNVeMcztl
EVHnEX33OqttLfdraGzbtm3btm3btv3Tj7Qc6b6+H+pSHFw=
               "], "Type" -> 
              "NumericalVector"], "Key" -> "(f1f2f3)", "Invertibility" -> 
            "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "LogisticRegression", "Options" -> 
         Association[
          "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 1., "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association["Value" -> "LBFGS", "Options" -> Association[]], 
           MaxIterations -> 
           Association["Value" -> 30, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.614118173014006, 0.05141519382548088], "Accuracy" -> 
            PlusMinus[0.6463414634146336, 0.1077717371085514], 
            "EvaluationTime" -> 0.0000149, "TestSize" -> 40, "TrainingSize" -> 
            60, "TrainingTime" -> 0.052871, "TrainingMemory" -> 1587432, 
            "ModelMemory" -> 37240, "ExperimentCount" -> 1, "ModelUtility" -> 
            0.6917393730242389, "MeanCrossEntropyHistory" -> {
              PlusMinus[0.614118173014006, 0.036356032210018235`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.6463414634146336, 0.07620612612971057]}, 
            "Configuration" -> {
             "LogisticRegression", "L1Regularization" -> 0, 
              "L2Regularization" -> 1., "OptimizationMethod" -> Automatic, 
              MaxIterations -> 30}, "FinalTrainingSize" -> 400], 
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 178202630696649]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6870146135990522, 0.01960398948836083], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.0000261, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.018697, 
                 "TrainingMemory" -> 600704, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6251277481616853,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6870146135990522, 0.013862113905529737`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6693993832848402, 0.022281393431403684`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.000013325000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.022093, 
                 "TrainingMemory" -> 1356048, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6409724334266117,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6693993832848402, 0.01575532438963094]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000013325000000000002`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6693993832848402, 0.022281393431403684`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1356048, 
                "TrainingTime" -> 0.107069], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8900486491660474, 0.097762113526596], "Accuracy" -> 
                 PlusMinus[0.45005876293147196`, 0.07366539350591472], 
                 "EvaluationTime" -> 0.000012516666666666668`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.0075766666666666664`, "TrainingMemory" -> 
                 195861.3333333333, "ModelMemory" -> 32488., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 0.4748492443803536,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8256155695930784, 0.08416623342739597], 
                   PlusMinus[0.9744744617103884, 0.09634320115912236]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.4024390243902437, 0.07715223468995282]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9703704613747226, 0.19732274701258334`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000012224999999999999`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.017813, 
                 "TrainingMemory" -> 877912, "ModelMemory" -> 32616, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.42771676987798013`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9703704613747226, 0.13952825249495523`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.07790084880165644], 
                 "EvaluationTime" -> 0.000015375, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.200318, 
                 "TrainingMemory" -> 4449592, "ModelMemory" -> 33256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4181838886376063,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9909652934368359, 0.20944832834106417`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000015375, "MeanCrossEntropy" -> 
                PlusMinus[0.9909652934368359, 0.20944832834106417`], 
                "ModelMemory" -> 33256, "TrainingMemory" -> 4449592, 
                "TrainingTime" -> 0.2579741666666667], "Index" -> 2], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.9831052301834508, 0.14695736316119218`], 
                 "Accuracy" -> 
                 PlusMinus[0.5854527031917199, 0.05660919690222907], 
                 "EvaluationTime" -> 0.0009525999999999998, "TestSize" -> 80, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.04738966666666666, 
                 "TrainingMemory" -> 745026.6666666666, "ModelMemory" -> 
                 447104., "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.4265508031926865, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.9239027906160499, 0.19256161689087925`], 
                   PlusMinus[1.0402509117513454`, 0.18918714823140675`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444], 
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6684929650137739, 0.10983241284740038`], 
                 "Accuracy" -> 
                 PlusMinus[0.5975609756097557, 0.11016843689567841`], 
                 "EvaluationTime" -> 0.0008424, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.075356, 
                 "TrainingMemory" -> 2471504, "ModelMemory" -> 473384, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.62549464467201, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6684929650137739, 0.07766324391847729]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5975609756097557, 0.07790084880165644]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.782242546575857, 0.1440948112973481], "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.07845762192924444], 
                 "EvaluationTime" -> 0.000809625, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.317852, 
                 "TrainingMemory" -> 11530272, "ModelMemory" -> 518216, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5324801981558621,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.782242546575857, 0.1440948112973481]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000809625, "MeanCrossEntropy" -> 
                PlusMinus[0.782242546575857, 0.1440948112973481], 
                "ModelMemory" -> 518216, "TrainingMemory" -> 11530272, 
                "TrainingTime" -> 0.44470466666666675`], "Index" -> 3], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6969912772858453, 0.011167770262348994`], 
                 "Accuracy" -> 
                 PlusMinus[0.4877764677472049, 0.05712072069272695], 
                 "EvaluationTime" -> 0.00013925833333333333`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.012341333333333333`, "TrainingMemory" -> 236325.3333333333,
                  "ModelMemory" -> 110389.33333333333`, "ExperimentCount" -> 
                 2, "ModelUtility" -> 0.6177061704471231, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6987804360961366, 0.01673493701845681], 
                   PlusMinus[0.6956062614680996, 0.014724040495996129`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.47560975609756073`, 0.07882661924740107]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6943796219635396, 0.021306074971810893`], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000136775, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.013327, 
                 "TrainingMemory" -> 734024, "ModelMemory" -> 110400, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6182225114812014,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6943796219635396, 0.01506567009303646]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6695285647147997, 0.016794150789926635`], 
                 "Accuracy" -> 
                 PlusMinus[0.6707317073170727, 0.07505505492736586], 
                 "EvaluationTime" -> 0.00023022500000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 320, "TrainingTime" -> 0.029232, 
                 "TrainingMemory" -> 3364352, "ModelMemory" -> 114800, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6418830450657396,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6695285647147997, 0.016794150789926635`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6707317073170727, 0.07505505492736586]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00023022500000000003`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6695285647147997, 0.016794150789926635`], 
                "ModelMemory" -> 114800, "TrainingMemory" -> 3364352, 
                "TrainingTime" -> 0.04888133333333333], "Index" -> 4], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6706809259088216, 0.04581923399439435], 
                 "Accuracy" -> 
                 PlusMinus[0.4999999999999998, 0.05586884030282884], 
                 "EvaluationTime" -> 0.000018091666666666665`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.004745333333333332, "TrainingMemory" -> 229216., 
                 "ModelMemory" -> 97560., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.6353168439046083, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.681864802362421, 0.047407523570423674`], 
                   PlusMinus[0.6395981709181233, 0.07903343206175434]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4999999999999998, 0.07901047167031712], 
                   PlusMinus[0.4999999999999998, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6232230096974638, 0.05481194009075559], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.000022000000000000003`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.007065, 
                 "TrainingMemory" -> 1331352, "ModelMemory" -> 430824, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6810048328513942,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6232230096974638, 0.03875789452816406]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5980360778718854, 0.050917801192207825`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.00004882500000000001, "TestSize" -> 40,
                  "TrainingSize" -> 320, "TrainingTime" -> 0.044524, 
                 "TrainingMemory" -> 8005440, "ModelMemory" -> 2163760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6401889137107134,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5980360778718854, 0.050917801192207825`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00004882500000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.5980360778718854, 0.050917801192207825`], 
                "ModelMemory" -> 2163760, "TrainingMemory" -> 8005440, 
                "TrainingTime" -> 0.060400333333333334`], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.4699393329353883`, 0.3403664903166638], 
                 "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.0000169, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.05541, 
                 "TrainingMemory" -> 919048, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.2808318301048885,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.4699393329353883`, 0.2406754533915783]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8539205092579377, 0.20614413893915554`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000019925, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.053958, 
                 "TrainingMemory" -> 1587448, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4825149086371433,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8539205092579377, 0.1457659185457387]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000019925, "MeanCrossEntropy" -> 
                PlusMinus[0.8539205092579377, 0.20614413893915554`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587448, 
                "TrainingTime" -> 0.271242], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931402808957658, 0.019468354810628287`], 
                 "Accuracy" -> 
                 PlusMinus[0.5487804878048778, 0.11147767401569468`], 
                 "EvaluationTime" -> 0.000017825, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.0109, 
                 "TrainingMemory" -> 426904, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196583399374144,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931402808957658, 0.013766205705141005`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6928654062877444, 0.013758280934718845`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.000014675, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.021362, 
                 "TrainingMemory" -> 6447080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6209205123753709,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6928654062877444, 0.013758280934718845`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931134722249647, 0.019467226016634472`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.00001545, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.017153, 
                 "TrainingMemory" -> 1249080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196823757613998,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931134722249647, 0.013765407527253415`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00001545, "MeanCrossEntropy" -> 
                PlusMinus[0.6931134722249647, 0.019467226016634472`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1249080, 
                "TrainingTime" -> 0.079512], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6917718278486031, 0.053150641011307384`], 
                 "Accuracy" -> 
                 PlusMinus[0.5243902439024387, 0.11173768060565768`], 
                 "EvaluationTime" -> 0.000014275000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 10, "TrainingTime" -> 0.065649, 
                 "TrainingMemory" -> 919000, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6149226939087926,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6917718278486031, 0.037583178683507266`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5243902439024387, 0.07901047167031712]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.614118173014006, 0.05141519382548088], 
                 "Accuracy" -> 
                 PlusMinus[0.6463414634146336, 0.1077717371085514], 
                 "EvaluationTime" -> 0.0000149, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.052871, 
                 "TrainingMemory" -> 1587432, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6917393730242389,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.614118173014006, 0.036356032210018235`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6463414634146336, 0.07620612612971057]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000149, "MeanCrossEntropy" -> 
                PlusMinus[0.614118173014006, 0.05141519382548088], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587432, 
                "TrainingTime" -> 0.277133], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.256857008620053, 0.5962017585768732], "Accuracy" -> 
                 PlusMinus[0.45121951219512174`, 0.11095583300387822`], 
                 "EvaluationTime" -> 0.0000148, "TestSize" -> 40, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.034848, 
                 "TrainingMemory" -> 918896, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.18177828484850891`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.256857008620053, 0.4215783064450519]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45121951219512174`, 0.07845762192924442]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.3302359386688085`, 0.41376042395331447`], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.000021825000000000002`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.050481, 
                 "TrainingMemory" -> 1587192, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.30568051008889097`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.3302359386688085`, 0.29257280156400944`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000021825000000000002`, 
                "MeanCrossEntropy" -> 
                PlusMinus[1.3302359386688085`, 0.41376042395331447`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 1587192, 
                "TrainingTime" -> 0.23677199999999998`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931462551126191, 0.009734303709166375], 
                 "Accuracy" -> 
                 PlusMinus[0.5992095617999024, 0.0733577253566291], 
                 "EvaluationTime" -> 0.000014166666666666668`, "TestSize" -> 
                 80, "TrainingSize" -> 10, "TrainingTime" -> 0.010483, 
                 "TrainingMemory" -> 398037.3333333333, "ModelMemory" -> 
                 37240., "ExperimentCount" -> 2, "ModelUtility" -> 
                 0.6213885495577779, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931464905173004, 0.013766391370773663`], 
                   PlusMinus[0.6931460197084198, 0.013766377272709985`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5487804878048778, 0.07882661924740109], 
                   PlusMinus[0.6463414634146336, 0.07620612612971057]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931438084740744, 0.01946850383932111], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.10421257264851694`], 
                 "EvaluationTime" -> 0.00001335, "TestSize" -> 40, 
                 "TrainingSize" -> 60, "TrainingTime" -> 0.014555, 
                 "TrainingMemory" -> 1249000, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196551802368115,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931438084740744, 0.013766311084340292`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931189437717526, 0.013765569362545015`], 
                 "Accuracy" -> 
                 PlusMinus[0.6951219512195118, 0.07368941680466205], 
                 "EvaluationTime" -> 0.0000146, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.086558, 
                 "TrainingMemory" -> 6449080, "ModelMemory" -> 37240, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6206929824764315,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931189437717526, 0.013765569362545015`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6951219512195118, 0.07368941680466205]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000146, "MeanCrossEntropy" -> 
                PlusMinus[0.6931189437717526, 0.013765569362545015`], 
                "ModelMemory" -> 37240, "TrainingMemory" -> 6449080, 
                "TrainingTime" -> 0.1186805], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 60], "LearningRate" -> 
                Association["Value" -> 0.1], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6456775130058557, 0.08568835948193107], 
                 "Accuracy" -> 
                 PlusMinus[0.5731707317073168, 0.11095583300387825`], 
                 "EvaluationTime" -> 0.00016675000000000001`, "TestSize" -> 
                 40, "TrainingSize" -> 60, "TrainingTime" -> 0.103432, 
                 "TrainingMemory" -> 1300840, "ModelMemory" -> 163760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6516297811548131,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6456775130058557, 0.060590820058424054`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5731707317073168, 0.07845762192924444]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6157855875246737, 0.11537326026223872`], 
                 "Accuracy" -> 
                 PlusMinus[0.6219512195121948, 0.07715223468995287], 
                 "EvaluationTime" -> 0.000139975, "TestSize" -> 40, 
                 "TrainingSize" -> 320, "TrainingTime" -> 0.128644, 
                 "TrainingMemory" -> 4370216, "ModelMemory" -> 169840, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6760625991034054,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6157855875246737, 0.11537326026223872`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6219512195121948, 0.07715223468995287]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000139975, "MeanCrossEntropy" -> 
                PlusMinus[0.6157855875246737, 0.11537326026223872`], 
                "ModelMemory" -> 169840, "TrainingMemory" -> 4370216, 
                "TrainingTime" -> 0.26423700000000006`], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 178198335729353]], "MaxTrainingSize" -> 400, 
         "LastReportingTime" -> 3.740141512330669`16.325463023676384*^9, 
         "PreprocessorEvaluationTime" -> 4.4814453125`2.*^-6, 
         "PreprocessorMemory" -> 174200, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.6400000000000002, 
             "ElapsedTimes" -> 0.733886, "ExperimentCounts" -> 15], 
            Association[
            "TrainingSizes" -> 60, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             1.1450550000000002`, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 320, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             1.008427, "ExperimentCounts" -> 7]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 3], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[178206925663945]], "ID" -> 
            178211220631241]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, "Values" -> {"OKAY WADE."}, 
              "ID" -> 8454876219130345882], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{12, 12, 13}}, "ID" -> 4356659753071005787], "f3" -> 
            Association[
             "Type" -> "Boolean", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              5106358782184230910]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 4.239985, "MaxTrainingMemory" -> 
         15050064, "DataMemory" -> 150864, "FunctionMemory" -> 385072, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 9, 16, 11, 52.773925`8.474994370507925}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"YOU DUMB BITCH.", {11, 1, 7, 13}, 0}, {
        "AND YOU COULD STAND TO GET A LITTLE SMARTER AIN'T THAT RIGHT YOU \
DUMB BLONDE FUCK.", {3, 11, 15, 15, 10, 15, 4, 12, 12, 12, 2, 4, 12, 11, 1, 
         12, 12, 13}, 0}, {"AN ITALIAN RIGHT.", {4, 1, 7, 13}, 0}, {
        "MAJOR WHAT DO YOU THINK COULD HAVE DONE THIS.", {1, 4, 12, 11, 12, 
         12, 12, 15, 7, 13}, 1}, {"YOU SAW THIS.", {11, 15, 7, 13}, 0}, {
        "HOW CAN YOU BE HERE AND SAY THIS.", {12, 12, 11, 15, 2, 3, 15, 7, 
         13}, 1}, {"NATALIE WHO.", {12, 11, 13}, 1}, {
        "WHERE WILL MY TOYS BE.", {15, 15, 12, 12, 15, 13}, 1}, {
        "THE CAR OR DEBBIE.", {4, 7, 7, 12, 13}, 0}, {
        "THAT ' S WHO YOU WANT ME TO BEND MY RULES FOR.", {4, 13, 7, 11, 11, 
         15, 7, 10, 15, 12, 7, 10, 13}, 1}, {
        "I'VE NEVER GOTTEN A LETTER LIKE THIS HAVE YOU.", {11, 15, 2, 15, 4, 
         7, 10, 7, 15, 11, 13}, 0}, {
        "YOU DON'T THINK SO.", {11, 15, 2, 12, 12, 13}, 0}, {
        "I BELIEVE WE SHARE AN ART INSTRUCTOR YOU KNOW CHASTITY.", {11, 15, 1,
          7, 4, 7, 7, 11, 15, 7, 13}, 0}, {
        "CALL THAT FRESH.", {1, 4, 12, 13}, 0}, {
        "OH SHUT UP HUH.", {7, 12, 9, 12, 13}, 0}, {
        "THE POET.", {4, 7, 13}, 0}, {
        "WHY DOESN'T SHE JUST HANG UP AND CALL THE POLICE.", {2, 15, 2, 12, 2,
          15, 9, 3, 1, 4, 7, 13}, 1}, {
        "IF YOU NEED TO COME TO WHERE I LIVE OK.", {10, 11, 15, 10, 15, 10, 
         15, 11, 15, 5, 13}, 1}, {
        "WHO WILL YOU KILL.", {11, 15, 11, 15, 13}, 1}, {
        "WHO IS DEAD.", {11, 15, 12, 13}, 1}, {
        "YOU REMEMBER HIM FROM HIGH SCHOOL.", {11, 15, 12, 12, 12, 12, 13}, 
         0}, {"YOU HUNGRY OR THIRSTY OR BOTH.", {11, 1, 7, 12, 7, 4, 13}, 
         0}, {"HOW OFTEN DO YOU SEE MR. KRAMER AND HIS SON.", {12, 12, 12, 11,
          15, 12, 12, 3, 11, 7, 13}, 1}, {
        "WHO'S MR. JOCULARITY.", {11, 15, 12, 12, 13}, 1}, {
        "SO NOW WHERE WERE WE HERE.", {12, 12, 12, 15, 12, 2, 13}, 1}, {
        "CHARGE SET.", {1, 7, 13}, 0}, {
        "YOU SERVE MARTINIS DONCHA.", {11, 15, 7, 12, 13}, 0}, {
        "GOIN' DOVE HUNTIN'.", {12, 7, 7, 13, 13}, 0}, {
        "AND MADEMOISELLE.", {3, 12, 13}, 0}, {
        "IS IT THAT BAD.", {15, 11, 4, 12, 13}, 0}, {
        "THEY'RE TRYING TO UNNERVE US. WHY DID THEY DO THAT.", {12, 12, 12, 
         10, 12, 12, 13}, 1}, {
        "WHAT NUMBER DID YOU TEAR OUT.", {4, 7, 15, 11, 15, 12, 13}, 1}, {
        "JUST A LITTLE JOKE MISS FARMER. ...DID YOU REALLY SAY THAT.", {2, 4, 
         7, 7, 7, 7, 13, 13}, 0}, {
        "HI VIV.  CARLOS YOU KNOW MY ROOMMATE VIV. YOU SPENT IT ON DRUGS \
DIDN'T YOU.", {12, 12, 13}, 0}, {
        "WHAT HAVE YOU GOT TO DO.", {4, 12, 11, 15, 10, 12, 13}, 1}, {
        "DO YOU KNOW HER.", {15, 11, 15, 7, 13}, 0}, {
        "WHAT THE HELL IS A TREADSTONE.", {4, 4, 7, 15, 4, 7, 13}, 1}, {
        "PAPA.", {7, 13}, 0}, {"AS A PLUMBER.", {10, 4, 7, 13}, 0}, {
        "WHAT TEN THOUSAND POUNDS.", {4, 8, 12, 12, 13}, 1}, {
        "UP GET IT.", {7, 15, 11, 13}, 0}, {
        "ARE YOU DECLARING AN EMERGENCY.", {15, 11, 15, 4, 7, 13}, 0}, {
        "SHALL I REMAIN HERE IN OUR HOTEL ROOM HIDING OR SHALL I CARRY ON THE \
BEST I CAN.", {12, 11, 15, 2, 10, 12, 12, 12, 15, 7, 7, 11, 15, 10, 4, 7, 11, 
         15, 13}, 0}, {"WHATSAMATTER.", {7, 13}, 1}, {
        "WHAT WAS I GONNA SAY.", {4, 15, 11, 12, 12, 12, 13}, 1}, {
        "AND THOSE WERE THE GUYS WHO WENT ON THE EXERCISE WITH YOU.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}, 1}, {
        "I WANT THE MONEY ASSHOLE WHAT DO YOU THINK.", {11, 15, 4, 7, 12, 4, 
         12, 11, 15, 13}, 1}, {
        "I MEAN WHAT KIND OF PEOPLE DO WELL AT THIS STUFF.", {11, 15, 4, 12, 
         10, 12, 12, 12, 10, 12, 7, 13}, 1}, {
        "HOW ARE THEY TREATING YOU.", {12, 15, 7, 15, 11, 13}, 1}, {
        "WANNA STAY WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}, 0}, {
        "AT WHAT EXACTLY.", {10, 4, 7, 13}, 1}, {
        "DO YOU THINK IT'S DONE.", {15, 11, 15, 11, 15, 12, 13}, 0}, {
        "WHAT IS SO GODDAMN VALUABLE IN YOUR LIFE THAT YOU'RE WORRIED ABOUT \
LOSING.", {4, 15, 12, 12, 12, 10, 1, 7, 4, 11, 15, 1, 10, 15, 13}, 1}, {
        "PITTSBURGH.", {12, 13}, 0}, {
        "[WAS IT] &QUOT;MEIRSCHULTZ&QUOT;.", {13, 12, 12, 13, 12, 12, 13, 13},
          0}, {"I KNOW YOU'RE EXPECTING SOME KIND OF -- EXTRAVAGANT BEHAVIOR \
BUT BELIEVE ME -- DO YOU BELIEVE ME.", {11, 15, 11, 15, 15, 12, 12, 10, 13, 1,
          7, 12, 12, 12, 13, 12, 11, 15, 7, 13}, 0}, {
        "WHAT'S A LUNCH COST THESE DAYS.", {4, 15, 4, 7, 7, 7, 7, 13}, 1}, {
        "WHERE IS INNER SPACE.", {15, 15, 12, 12, 13}, 1}, {
        "WHY WON'T YOU CHECK OUT LV-426. ...BECAUSE JUST ONE OF THOSE THINGS \
MANAGED TO KILL MY ENTIRE CREW WITHIN TWELVE HOURS OF HATCHING...", {2, 12, 2,
          11, 15, 7, 7, 13, 13, 12, 2, 8, 10, 4, 7, 15, 10, 15, 12, 12, 12, 
         10, 8, 7, 10, 15, 13}, 1}, {
        "LOOK BUTTHEAD I'LL TREAT YOU SO NICE YOU'LL NEVER WANT TO LET ME GO \
OKAY.", {8, 7, 11, 15, 15, 11, 2, 1, 11, 15, 2, 1, 10, 12, 12, 12, 12, 13}, 
         0}, {"THAT OBVIOUS HUH.", {4, 1, 12, 13}, 0}, {
        "PERMISSION.", {7, 13}, 0}, {
        "OKAY MISS STARLING.", {1, 12, 12, 13}, 0}, {
        "WHAT'S DR. GILLMAN SAY.", {4, 15, 12, 12, 12, 13}, 1}, {
        "WHY DID THEY TURN BACK.", {2, 12, 12, 15, 2, 13}, 1}, {
        "WHAT'S SHE DOING.", {4, 15, 12, 12, 13}, 1}, {
        "HOW YOU DOING SAM.", {12, 11, 15, 12, 13}, 1}, {
        "WHY DO YOU EAT THAT STUFF.", {2, 12, 11, 15, 4, 7, 13}, 1}, {
        "WHAT EXACTLY DID HE CALL OUT.", {4, 12, 15, 11, 1, 12, 13}, 1}, {
        "SAY---YOU THINK THAT'S THE SAME GUY WHO WAS IN THE ACCIDENT WITH \
LUCY.", {7, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}, 1}, {
        "AND YOU SVEN AREN'T YOU AFRAID OF CROSSING THE RAINBOW BRIDGE TO \
ASGAARD.", {3, 11, 12, 15, 2, 11, 12, 10, 12, 4, 12, 12, 10, 12, 13}, 0}, {
        "NOT GREAT.", {2, 1, 13}, 0}, {
        "RUNNING OUT OF TIME ARE WE.", {15, 12, 10, 12, 15, 7, 13}, 0}, {
        "YOU'RE NOT USING THE SAME GUY WHO TRIED TO FIX IT.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}, 1}, {
        "TO YOU ... .", {10, 11, 13, 13}, 0}, {
        "DID YOU KNOW YOU SHOULDN'T LIGHT THREE CIGARETTES WITH A MATCH.", {
         12, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}, 0}, {
        "MY MY MY HOW DID THINGS TURN SO HOSTILE SO QUICKLY.", {12, 12, 12, 
         12, 12, 12, 12, 12, 12, 12, 12, 13}, 1}, {
        "NO BUT MY DOG HE'S A GOT MILLIONS OF THEM -- HAVE YOU GOT A \
LICENSE.", {4, 12, 12, 12, 11, 15, 4, 15, 12, 10, 12, 13, 12, 11, 15, 4, 7, 
         13}, 0}, {"THIS THIS HAPPENED.", {7, 7, 15, 13}, 0}, {
        "HOW DID YOU MANAGE IT.", {12, 12, 11, 15, 11, 13}, 1}, {
        "WHOSE JUSTICE.", {1, 7, 13}, 1}, {
        "DID THEY TELL YOU TO SLEEP WITH ME.", {12, 12, 12, 11, 10, 15, 10, 7,
          13}, 0}, {"MAX, WHAT IS IT.", {12, 13, 4, 15, 11, 13}, 1}, {
        "WILL YOU COME SEE HER WITH ME.", {15, 11, 15, 15, 7, 10, 7, 13}, 
         0}, {"HOW YOU FEELING ALL RIGHT.", {12, 11, 15, 7, 7, 13}, 1}, {
        "IS IT INEVITABLE THAT THE GAME PLAYS YOU.", {15, 11, 1, 4, 4, 7, 15, 
         11, 13}, 0}, {
        "YOU FOUND ANYONE IN YOURS.", {11, 15, 7, 10, 12, 13}, 0}, {
        "DON'T YOU WANT TO SEE WHAT DADDY DOES FOR A LIVING.", {7, 2, 11, 1, 
         10, 15, 4, 12, 15, 10, 4, 7, 13}, 1}, {
        "WELL COULD YOU LEND ME SOME MONEY TILL YOU HAVE ONE.", {12, 12, 11, 
         15, 2, 12, 12, 12, 11, 15, 8, 13}, 0}, {
        "I'M JUST HERE SHOOTING THIS BAND WHAT ABOUT YOU.", {11, 15, 2, 2, 15,
          7, 7, 4, 12, 11, 13}, 1}, {
        "IT'S YOUR BANK AS WELL AS MINE ISN'T IT.", {11, 15, 1, 12, 12, 12, 
         12, 12, 15, 2, 11, 13}, 0}, {
        "VASQUEZ HOW YOU DOING.", {12, 12, 11, 15, 13}, 1}, {
        "YOU DON'T LIKE ME.", {11, 15, 2, 10, 7, 13}, 0}, {
        "PHILIP SWANN.", {12, 12, 13}, 0}, {
        "THE POLICE ALWAYS DO DON'T THEY.", {4, 12, 12, 12, 12, 2, 12, 13}, 
         0}, {"PEOPLE ARE GONNA BE THINKING THE YOUNGER JAMES GANG.", {12, 15,
          12, 12, 15, 15, 4, 1, 12, 12, 13}, 0}, {
        "SO WHY ISN'T IT ALL BLOODY.", {12, 2, 15, 2, 11, 7, 7, 13}, 1}, {
        "IS THAT ALL THERE IS.", {15, 4, 7, 7, 15, 13}, 0}, {
        "THEN WE'LL GO DANCIN' OKAY.", {2, 12, 12, 12, 12, 12, 13}, 0}, {
        "YOU'RE NOT FROM L.A. HUH.", {11, 15, 2, 10, 12}, 0}, {
        "WHY DIDN'T YOU SAY SOMETHING.", {2, 12, 2, 11, 15, 7, 13}, 1}, {
        "WITH ID AND A GUN....", {10, 7, 3, 4, 7, 13}, 0}, {
        "WHAT IS HE -- MUSCLEMAN.", {4, 15, 11, 13, 12, 13}, 1}, {
        "WHAT'S WRONG DID YOU MISS ME.", {4, 15, 1, 7, 11, 15, 7, 13}, 1}, {
        "WHAT'S A TREE.", {4, 15, 4, 7, 13}, 1}, {
        "- WHERE THAT COME FROM.", {13, 7, 4, 15, 7, 13}, 1}, {
        "YOU'RE BACK AGAIN HUH.", {11, 15, 2, 2, 12, 13}, 0}, {
        "PROFESSIONALLY.", {2, 13}, 0}, {
        "ABOUT THE DUMPER DIDN'T HE TELL YOU THAT.", {10, 4, 7, 15, 2, 11, 15,
          11, 4, 13}, 0}, {
        "KEEPING YOURSELF OUT OF JAIL.", {12, 12, 12, 10, 12, 13}, 0}, {
        "WHAT ABOUT THE CAPTAIN.", {4, 12, 4, 7, 13}, 1}, {
        "WHAT IS IT THE STAIRS.", {4, 15, 11, 4, 7, 13}, 1}, {
        "WHAT OF THE REPORTS OF THE REBEL FLEET MASSING NEAR SULLUST.", {4, 
         10, 4, 7, 10, 4, 7, 7, 15, 10, 7, 13}, 1}, {
        "TWO YEARS AGO.", {8, 7, 2, 13}, 0}, {
        "PERHAPS A LITTLE REFRESHMENT FIRST.", {2, 4, 1, 12, 12, 13}, 0}, {
        "THEN WHAT CAN I DO FOR YOU.", {2, 4, 12, 11, 15, 10, 11, 13}, 1}, {
        "HAVE THEY QUESTIONED YOU YET SID.", {15, 12, 15, 11, 2, 12, 13}, 
         0}, {"WELL DOES MARCUS HAVE AN ALIBI.", {12, 12, 12, 12, 4, 12, 13}, 
         0}, {"WHO WOULD EVEN KNOW TO DO THIS.", {11, 15, 12, 12, 10, 12, 12, 
         13}, 1}, {"HE WAS HERE.", {11, 15, 2, 13}, 0}, {
        "KEEPING A STIFF UPPER LIP.", {15, 4, 1, 12, 7, 13}, 0}, {
        "YOU KNOW WHAT HAPPENED TO THE TOWER OF BABEL DON'T YOU.", {11, 15, 4,
          15, 10, 4, 7, 10, 12, 12, 2, 11, 13}, 1}, {
        "YOU MEAN BESIDES THE WARRANT OUT ON US FOR BLOWING UP OUR COMMANDING \
OFFICER.", {11, 15, 10, 4, 12, 12, 12, 12, 10, 12, 9, 12, 12, 7, 13}, 0}, {
        "HOW ABOUT YOU TWO HIT THE STRIP AND START KNOCKING SOME HEADS \
TOGETHER.", {12, 12, 11, 8, 12, 4, 7, 3, 12, 12, 12, 15, 2, 13}, 1}, {
        "HOW LONG AGO DID THIS GUY RETIRE.", {12, 12, 12, 12, 12, 12, 15, 13},
          1}, {"WHAT HAVE I DONE.", {4, 7, 11, 15, 13}, 1}, {
        "WILL YOU TAKE IT EASY.", {15, 11, 15, 11, 7, 13}, 0}, {
        "WHO THE FUCK ARE YOU DR. JOYCE BROTHERS.", {11, 4, 7, 15, 11, 12, 12,
          12, 13}, 1}, {"IT NEEDS BLOOD.", {11, 15, 7, 13}, 0}, {
        "WHAT HAPPENS WHEN HE DIES.", {4, 15, 2, 11, 15, 13}, 1}, {
        "YOU REALLY THINK YOU'LL BE ABLE TO FOOL A JURY WITH THIS BULLSHIT.", \
{11, 2, 15, 11, 7, 15, 1, 10, 7, 7, 7, 10, 7, 12, 13}, 0}, {
        "IF YA WAS WANTIN' MY HELP WHY DIDN'T YA ASK.", {10, 12, 12, 12, 12, 
         12, 2, 12, 2, 12, 12, 13}, 1}, {
        "HOW DO YOU KNOW THIS.", {12, 12, 11, 15, 7, 13}, 1}, {
        "IS THAT A BEASTLY THING TO SAY.", {15, 4, 4, 1, 7, 10, 12, 13}, 0}, {
        "HEY WHERE'S THE FIRE SISTER.", {12, 12, 4, 7, 7, 13}, 1}, {
        "WHAT'S YOUR AIR READING.", {4, 15, 1, 12, 7, 13}, 1}, {
        "HAVE YOU HEARD THE TERMS OF THE SEVENTEEN POINT AGREEMENT.", {15, 11,
          15, 4, 7, 10, 4, 8, 1, 7, 13}, 0}, {
        "IS THAT AN OFFER.", {15, 4, 4, 7, 13}, 0}, {
        "YOU COULD LIFT ME IN YOUR BIG STRONG ARMS.", {11, 15, 15, 12, 10, 1, 
         12, 1, 7, 13}, 0}, {"THE BLAST.", {4, 7, 13}, 0}, {
        "YOU NEVER HEARD OF PHYSICS EINSTEIN.", {11, 2, 15, 10, 12, 12, 13}, 
         0}, {"CAN YOU DRIVE ME BACK NOW.", {12, 11, 15, 2, 2, 2, 13}, 0}, {
        "TWOMBLEY.", {12, 13}, 0}, {
        "AND WHAT IF I TRANQ HIM KELLY.", {3, 4, 10, 11, 15, 12, 12, 13}, 
         1}, {"WE CANNOT DEFEAT THIS -- PEACE.", {12, 12, 12, 12, 12, 13, 7, 
         13}, 0}, {"ARE YOU OKAY WADE.", {15, 11, 1, 7, 13}, 0}, {
        "HOW ABOUT SOME AMMO.", {12, 12, 12, 12, 13}, 1}, {
        "DOES THAT WORK.", {7, 4, 15, 13}, 0}, {
        "HOW THE HELL DID HE GET AWAY.", {12, 4, 7, 7, 11, 15, 2, 13}, 1}, {
        "EXCUSE ME SKIPPER--- WHAT ABOUT TIME....", {15, 12, 12, 13, 4, 12, 7,
          13}, 1}, {"SEE THAT PATCH OF SHIRT.", {15, 4, 7, 10, 12, 13}, 0}, {
        "DID YOU HAVE A PLEAANT FLIGHT.", {12, 11, 15, 4, 1, 7, 13}, 0}, {
        "DO YOU HAVE YOUR OWN CELL.", {15, 11, 15, 1, 7, 7, 13}, 0}, {
        "YOU SELL MUCH OUT HERE.", {11, 15, 12, 12, 2, 13}, 0}, {
        "WHAT WAS SHE DOING IN YOUR APARTMENT.", {4, 15, 12, 12, 10, 1, 7, 
         13}, 1}, {
        "YOU'LL GET PICKED UP.  RIGHT.", {11, 15, 15, 15, 9, 13}, 0}, {
        "WHAT IS NOT GOOD TO YOU.", {4, 15, 2, 1, 10, 11, 13}, 1}, {
        "DIDN'T THEY DUFFY.!", {12, 2, 12, 12, 13, 13}, 0}, {
        "NOW WHO ELSE.", {2, 11, 2, 13}, 1}, {
        "WHEN SHE WAS WILLING TO SACRIFICE US ALL.", {2, 12, 12, 12, 10, 15, 
         12, 7, 13}, 1}, {
        "YOU'VE GOT A COMEBACK FOR EVERYTHING DON'T YOU DANNY.", {11, 15, 12, 
         12, 12, 10, 12, 12, 2, 11, 12, 13}, 0}, {
        "GONNA KILL US ALL, IS THAT IT.", {12, 12, 12, 12, 7, 13, 15, 4, 11, 
         13}, 0}, {
        "NOW I'M WORKING THE DROP CAR.", {2, 11, 15, 15, 4, 7, 7, 13}, 0}, {
        "IS IT BEAUTIFUL.", {15, 11, 7, 13}, 0}, {
        "I'M ASSUMING THAT'S WHAT MADE HIM THE DEAD ONE.", {11, 15, 15, 4, 15,
          4, 12, 12, 4, 1, 8, 13}, 1}, {
        "PERMISSION TO LEAVE SIR.", {7, 10, 15, 7, 13}, 0}, {
        "WHERE IS HIS HOME LEX LUTHOR.", {15, 15, 11, 12, 12, 12, 13}, 1}, {
        "WHY THEY GOTTA MAKE MY NOSE SO BIG.", {2, 12, 15, 12, 15, 12, 12, 12,
          12, 13}, 1}, {
        "THAT MAKES IT ALL THE MORE DIFFICULT \.97\.97 HAVE YOU ANY OTHER \
RELATIVES MARY.", {4, 15, 11, 7, 4, 1, 7, 13, 13, 15, 11, 12, 12, 12, 12, 13},
          0}, {"AGRIPPA.", {12, 13}, 0}, {"THE DOLL.", {4, 7, 13}, 0}, {
        "REALLY THINK SO.", {12, 12, 12, 13}, 0}, {
        "DID YOU JUST ASK ME WHAT'S A NEGRO.", {12, 11, 2, 15, 7, 4, 15, 4, 7,
          13}, 1}, {
        "WHAT DO WE HAVE TO DO.", {4, 12, 12, 12, 10, 12, 13}, 1}, {
        "DID THE RANCHER FUCK YOU.", {12, 4, 7, 7, 11, 13}, 0}, {
        "JUST BECAUSE I DRESS WELL AND LIKE TO DANCE -- IS THERE SOMETHING \
ABOUT FLAMES.", {2, 10, 11, 15, 2, 3, 10, 10, 12, 13, 15, 12, 12, 12, 12, 13},
          0}, {"HOW'S OUR DEAL COMING ALONG.", {12, 12, 12, 12, 12, 13}, 1}, {
        "YOU HAVE ANY KIDS.", {11, 15, 12, 12, 13}, 0}, {
        "WHAT DO YOU FEAR.", {4, 12, 11, 7, 13}, 1}, {
        "CAN YOU MAKE IT THAT FAR.", {12, 11, 15, 11, 4, 2, 13}, 0}, {
        "WHAT DYA MEAN.", {4, 12, 7, 13}, 1}, {
        "HOW COULD IT BE A CHARADE.", {12, 12, 12, 15, 4, 7, 13}, 1}, {
        "BUT WHAT IS THE REAL ISSUE HERE.", {12, 4, 15, 4, 1, 7, 2, 13}, 1}, {
        "NOW WHY CAN'T I TELL THE STORY.", {2, 2, 12, 2, 11, 15, 4, 7, 13}, 
         1}, {"A PSYCHIATRIST.", {4, 7, 13}, 0}, {
        "HOW TERRIBLE CAN IT BE.", {12, 12, 12, 12, 15, 13}, 1}, {
        "STAKE YOU.", {15, 11, 13}, 0}, {
        "CAN YOU FIX IT.", {12, 11, 15, 11, 13}, 0}, {
        "MANTAN IT IS POSSIBLE THAT MY HYPHENATED SENTENCES ARE ENTIRELY TOO \
COMPLEX FOR ALL THE INTELLECT CONTAINED IN THAT DIMINUTIVE COCONUT.", {12, 12,
          15, 1, 4, 12, 12, 12, 15, 2, 2, 12, 10, 7, 4, 7, 15, 10, 4, 12, 12, 
         13}, 0}, {
        "THAT IT ALL SOUNDS MYSTERIOUS.", {4, 11, 7, 15, 1, 13}, 0}, {
        "I DON'T KNOW 14000 A KILO.", {11, 15, 2, 12, 8, 4, 7, 13}, 0}, {
        "YOU SURE YOU'VE LEFT NOTHING OUT.", {11, 15, 11, 15, 12, 12, 12, 13},
          0}, {"HAVE YOU PULLED YOURSELF TOGETHER.", {15, 11, 15, 12, 2, 13}, 
         0}, {"DON'T YOU REMEMBER.", {7, 2, 11, 15, 13}, 0}, {
        "BOYS.", {7, 13}, 0}, {
        "WHERE'D YOU GET THEM.", {15, 12, 11, 15, 7, 13}, 1}, {
        "WHAT IS THE POINT IN THAT.", {4, 15, 4, 1, 10, 4, 13}, 1}, {
        "OH GOD WHY.", {7, 7, 2, 13}, 1}, {"GOING NORTH.", {1, 12, 13}, 0}, {
        "YOU TWO ARE GONNA HELP ME TAME THE WILD BEAST.", {11, 8, 15, 12, 12, 
         12, 12, 12, 4, 1, 7, 13}, 0}, {
        "BUT LOOK -- AN EMPTY TOMB.", {12, 12, 13, 4, 12, 7, 13}, 0}, {
        "DOESN'T THE DREAM MASTER WORK FOR YOU ANYMORE.", {7, 2, 4, 7, 7, 15, 
         10, 11, 2, 13}, 0}, {
        "WHILE YOU'RE WAITING FOR YOUR FRIEND WOULD YOU LIKE TO SEE SOME NEW \
FIGURES I HAVE DOWNSTAIRS.", {10, 11, 15, 12, 10, 1, 7, 15, 11, 10, 10, 15, 
         12, 12, 7, 11, 15, 7, 13}, 0}, {
        "WHERE THE FUCK ARE THEY GOING.", {15, 4, 7, 15, 7, 7, 13}, 1}, {
        "THAT'S THE KIND OF MONEY IT TAKES ISN'T IT.", {4, 15, 4, 7, 10, 7, 
         11, 15, 15, 2, 11, 13}, 0}, {
        "EVERYONE SAYS THIS IS A BIG ACCIDENT.", {7, 15, 12, 15, 4, 12, 12, 
         13}, 0}, {"IS IT YES.", {15, 11, 7, 13}, 0}, {
        "WHERE ARE THEY THEN.", {15, 15, 7, 2, 13}, 1}, {
        "NO ROSE JESUS NO -- DO YOU HAVE ANY CHILDREN WITH ANYONE.", {7, 15, 
         12, 7, 13, 12, 11, 15, 12, 7, 10, 7, 13}, 0}, {
        "DALUTAN! ...'SCUSE ME.", {12, 13, 13, 13, 15, 7, 13}, 0}, {
        "TIRING ISN'T IT.", {15, 15, 2, 11, 13}, 0}, {
        "THIS PACKAGE WHATEVER IT IS DO YOU GIVE IT TO THE CIA.  DO YOU \
REALLY THINK THEY DESERVE IT.", {12, 12, 12, 12, 15, 12, 11, 15, 11, 10, 4, 
         12, 13, 15, 11, 2, 15, 12, 12, 12, 13}, 1}, {
        "WHERE'D THEY COME FROM.", {15, 12, 12, 12, 12, 13}, 1}, {
        "IT'S PAY DAY AIN'T IT.", {11, 15, 7, 7, 7, 2, 11, 13}, 0}, {
        "WHERE ARE YOUR FOLKS.", {15, 15, 1, 7, 13}, 1}, {
        "HONEY'S DEAD.", {7, 7, 13}, 0}, {
        "YOU'RE POLISH.", {11, 15, 7, 13}, 0}, {
        "WHAT KIND OF FILES.", {4, 12, 10, 12, 13}, 1}, {
        "DO ME.", {12, 12, 13}, 0}, {
        "DON'T YOU KNOW WHAT CAEN'S FAMOUS FOR SARGE.", {7, 2, 11, 15, 4, 12, 
         12, 10, 12, 13}, 1}, {
        "HOW 'BOUT THIS ONE.", {12, 13, 12, 12, 8, 13}, 1}, {
        "WHAT'S THE OCCASION.", {4, 15, 4, 7, 13}, 1}, {
        "HE'S A GUEST IN MY HOUSE ISN'T HE.", {11, 15, 4, 7, 10, 12, 12, 15, 
         2, 11, 13}, 0}, {
        "YOU'RE NOT GONNA STAY FOR THE ICE CREAM.", {11, 15, 2, 12, 12, 12, 
         10, 4, 7, 7, 13}, 0}, {
        "BOY YOU GUYS ARE REALLY SOMETHING Y'KNOW.", {7, 11, 15, 15, 12, 12, 
         12, 12, 13}, 0}, {
        "WHAT ARE YOU WAITING FOR.", {4, 15, 11, 15, 10, 13}, 1}, {
        "WHAT BUSINESS IS YOU IN JACK.", {4, 12, 15, 11, 10, 12, 13}, 1}, {
        "YOU BURN YOU PINE YOU PERISH.", {11, 15, 11, 15, 11, 15, 13}, 0}, {
        "NOW HOW SMART IS THAT.", {2, 12, 12, 15, 4, 13}, 1}, {
        "EDDIE ARE YOU OKAY.", {12, 15, 11, 1, 13}, 0}, {
        "NOT YET -- GIVE YOU THE CLUE FOR THE BUST IF YOU SHOW ME SOME TRUST \
-- OH YOU'RE A RAPPER HUH.", {12, 12, 13, 15, 11, 4, 7, 10, 4, 7, 10, 11, 15, 
         12, 12, 12, 13, 7, 11, 15, 4, 7, 12, 13}, 1}, {
        "IS THAT A TRICK QUESTION.", {15, 4, 4, 7, 7, 13}, 0}, {
        "WHAT POINT IS THAT.", {4, 1, 15, 4, 13}, 1}, {
        "IT ISN'T RAPE THEN IS IT.", {11, 15, 2, 7, 2, 15, 11, 13}, 0}, {
        "ANY SORT OF ABUSE.", {12, 12, 10, 7, 13}, 0}, {
        "COOPER TRUST ROBBERY.", {12, 12, 12, 13}, 0}, {
        "YOU THINK FOR ONCE WE COULD TALK ABOUT SOMETHING BESIDES \
BASKETBALL.", {11, 15, 10, 2, 1, 12, 12, 12, 12, 10, 7, 13}, 0}, {
        "OR DO YOU THINK YOU CAN FIND THE AIRPORT BY YOURSELF.", {7, 7, 11, 
         15, 11, 12, 12, 4, 12, 12, 12, 13}, 0}, {
        "WHAT DO YOU REMEMBER ABOUT THAT -- DUMPER.", {4, 12, 11, 15, 10, 4, 
         13, 7, 13}, 1}, {
        "HAVE A SNIFF OF THIS WHY DON'T YOU.", {15, 4, 7, 10, 12, 2, 12, 2, 
         11, 13}, 1}, {"PIMPS.", {7, 13}, 0}, {
        "HOW OLD. ...WHAT.", {12, 12, 13, 13, 13}, 1}, {
        "YOU GOT SOMETHIN' AGAINST THE CAP'N.", {11, 15, 12, 12, 4, 7, 13}, 
         0}, {"WHY'D YOU DO THAT.", {2, 12, 11, 15, 4, 13}, 1}, {
        "YOU HAVE SOMETHING DR. WEIR.", {11, 15, 12, 12}, 0}, {
        "YOU THINK I'M SILLY DON'T YOU.", {11, 15, 11, 15, 1, 7, 2, 11, 13}, 
         0}, {"WHAT DO MY EYES SEE.", {4, 12, 12, 12, 15, 13}, 1}, {
        "BUT WHAT BECAME OF YOUR LAMB.", {12, 4, 15, 10, 1, 7, 13}, 1}, {
        "WHAT'S HERE.", {4, 15, 2, 13}, 1}, {
        "IS DETECTIVE GORDON GOING TO BE AT YOUR HOUSE.", {15, 12, 12, 12, 10,
          15, 10, 1, 12, 13}, 0}, {"WHAT HAPPENS HERE.", {4, 15, 2, 13}, 1}, {
        "WHY DON'T YOU HAVE MORE TIME.", {2, 12, 2, 11, 15, 1, 7, 13}, 1}, {
        "-- DO YOU WANNA CUP.", {13, 7, 11, 15, 12, 12, 13}, 0}, {
        "HUH...", {12, 13}, 0}, {
        "NOW DARLIN' WHAT HAS THE SOUTH GOT TO DO WITH THIS.", {12, 12, 4, 15,
          4, 1, 12, 10, 12, 10, 7, 13}, 1}, {
        "UH YEAH COOP I'M STILL HERE. ...DO YOU COPY.", {12, 12, 12, 11, 15, 
         2, 2, 13, 13}, 0}, {"SO...THE STATION IS EMPTY.", {12, 13}, 0}, {
        "HAVE THEY LOCATED MY DAUGHTER YET.", {15, 12, 12, 12, 12, 12, 13}, 
         0}, {"MAY I SPEAK FREELY.", {12, 11, 15, 2, 13}, 0}, {
        "JASON WHAT HAVE YOU GOTTEN US INTO.", {12, 4, 12, 11, 15, 12, 12, 
         13}, 1}, {"NIGHTCAP.", {7, 13}, 0}, {
        "WHAT HAPPEND TO YOU.", {4, 12, 10, 11, 13}, 1}, {
        "ON THE DAY OF THE MURDERS  WHAT DID THE DEFENDANT REQUEST.", {10, 4, 
         7, 10, 4, 7, 4, 15, 4, 7, 7, 13}, 1}, {
        "ARE YOU DEAF TOO.", {15, 11, 1, 7, 13}, 0}, {
        "HOW COME YOU TOOK SO MUCH INTEREST IN HER DR. DARLING.", {12, 12, 11,
          15, 12, 12, 7, 10, 12, 12, 12, 13}, 1}, {
        "THEN WHAT ARE YOU DOING HERE.", {2, 4, 15, 11, 15, 2, 13}, 1}, {
        "LONG ENOUGH FOR YOU TO PRETTY MUCH READ ME LIKE A BOOK RIGHT.", {12, 
         12, 10, 11, 10, 12, 12, 12, 12, 12, 12, 12, 12, 13}, 0}, {
        "SO WHAT DEAD-END STREET DID YOU AND SHAWNEE HIT.", {12, 4, 1, 12, 12,
          11, 3, 12, 12, 13}, 1}, {
        "WANT TO REGISTER PLEASE.", {1, 10, 12, 12, 13}, 0}, {
        "FLEA.", {7, 13}, 0}, {
        "IF SHE HAD WHAT REASON WOULD SHE HAVE FOR NOT CALLING YOU.", {10, 12,
          12, 4, 12, 12, 12, 12, 10, 12, 12, 11, 13}, 1}, {
        "YOU'RE GOING TO GET YOURSELF UP AND GO OUT.", {11, 15, 1, 10, 15, 1, 
         7, 3, 7, 7, 13}, 0}, {
        "ARE YOU TWO ALL RIGHT.", {15, 11, 8, 7, 7, 13}, 0}, {
        "WHAT SIR.", {4, 7, 13}, 1}, {
        "IS THAT A GOOD SIGN DOCTOR.", {15, 4, 4, 1, 7, 7, 13}, 0}, {
        "WHERE'S THE HANDLE.", {7, 4, 7, 13}, 1}, {
        "BUT WHAT ARE YOU DOING MIXED UP IN ALL THIS.", {12, 4, 15, 11, 15, 
         15, 9, 10, 7, 7, 13}, 1}, {
        "NOW...WHEN DO I GET A TASTE.", {2, 13, 13}, 1}, {
        "YOU WROTE IT DIDN'T YOU.", {11, 15, 11, 15, 2, 11, 13}, 0}, {
        "MARK ARE YOU OKAY.", {12, 15, 11, 1, 13}, 0}, {
        "IS IT TRUE THE MOST YOU'VE EVER MADE IN A PRIZEFIGHT IS FIVE HUNDRED \
DOLLARS.", {15, 11, 1, 4, 1, 11, 15, 2, 15, 10, 4, 12, 15, 8, 15, 12, 13}, 
         0}, {"HOW LONG THEY BEEN LIVIN' HERE.", {12, 12, 12, 12, 12, 2, 13}, 
         1}, {"DOES THAT SCARE YOU.", {7, 4, 15, 11, 13}, 0}, {
        "BAUMGARTNER SOUND IRISH TO YOU FUCK FACE.", {12, 12, 12, 10, 11, 15, 
         7, 13}, 0}, {
        "WHY DIDN'T YOU TELL US ALL THIS IN THE FIRST PLACE.", {2, 12, 2, 11, 
         15, 12, 7, 15, 10, 4, 12, 7, 13}, 1}, {
        "WE'RE IN.", {12, 12, 10, 13}, 0}, {
        "NO SIR-- PRIVATE JOHNSON ARE YOU UNHAPPY IN THE ARMY.", {7, 7, 13, 
         12, 12, 15, 11, 1, 10, 4, 7, 13}, 0}, {
        "YOU MEAN YOU'VE ACTUALLY BEGUN SOME.", {11, 15, 11, 15, 12, 12, 12, 
         13}, 0}, {
        "DON'T YOU REALIZE YOUR WORDS COULD BE CONSIDERED HERETICAL.", {7, 2, 
         11, 15, 1, 7, 15, 15, 15, 1, 13}, 0}, {
        "HOW DO I GET IN TOUCH WITH YOU.", {12, 12, 11, 15, 10, 7, 10, 11, 
         13}, 1}, {
        "IS YOUR FAMILY IN THE APPLE BUSINESS TOO.", {15, 1, 7, 10, 4, 12, 12,
          12, 13}, 0}, {"YOU'RE WHAT.!", {11, 15, 4, 13}, 1}, {
        "BUT IF THEY <U>DO</U>.", {12, 10, 12, 12, 12, 12, 13}, 0}, {
        "YES THEY DO, THEY DO, BUT I'LL MAKE MY DREAMS COME TRUE, YOU SEE.", {
         12, 12, 12, 13, 12, 12, 13, 12, 11, 15, 15, 7, 7, 15, 1, 13, 11, 15, 
         13}, 0}, {"YELLO.", {12, 13}, 0}, {
        "THAT REALLY HAPPENED.", {4, 1, 7, 13}, 0}, {
        "SHE'S ALIVE.", {12, 12, 13}, 0}, {
        "YOU WANT TO HAVE KIDS WITH HIM.", {11, 15, 10, 12, 12, 10, 12, 13}, 
         0}, {"WE FINISHED THE COURSE AND CAME HERE THEN HEARD AN EXPLOSION \
--  WHERE'S PIKE.", {12, 12, 4, 12, 3, 12, 2, 2, 15, 4, 12, 13, 15, 12, 13}, 
         1}, {"CAN I SEE YOUR SECURITY BADGES.", {12, 11, 15, 1, 7, 7, 13}, 
         0}, {"IS IT GASSED UP.", {15, 11, 15, 9, 13}, 0}, {
        "WHAT ABOUT A DRINK ON THE WAY HOME.", {4, 10, 4, 7, 10, 4, 12, 12, 
         13}, 1}, {
        "YOU WOKE ME UP TO TELL ME THAT.", {11, 15, 12, 9, 10, 12, 12, 4, 13},
          0}, {"OH YEAH HOW.", {7, 7, 7, 13}, 1}, {
        "DON'T YOU CARE WHAT THE PEOPLE WILL SAY.", {7, 2, 11, 12, 4, 4, 12, 
         15, 15, 13}, 1}, {
        "IN VIEW OF YOUR INDECISION WHY NOT RELY ON THEIR ADVICE AND JUDGMENT \
AS WELL AS MINE.", {10, 12, 10, 1, 7, 2, 12, 12, 12, 12, 12, 3, 12, 12, 12, 
         12, 12, 13}, 1}, {"YOU A SENIOR.", {11, 4, 1, 13}, 0}, {
        "HOW DO WE DO THIS THEN.", {12, 12, 12, 12, 12, 2, 13}, 1}, {
        "ALL IT TAKES IS ONE SECOND.", {7, 11, 15, 15, 8, 7, 13}, 0}, {
        "DID YOU CALL THE COPS.", {12, 11, 1, 4, 7, 13}, 0}, {
        "FOUR DOOR.", {8, 7, 13}, 0}, {
        "WHATTA YOU GET OUTTA THIS. ...I'M DOIN' IT FOR A FRIEND.", {12, 11, 
         15, 1, 7, 13, 13, 11, 15, 7, 13, 11, 10, 4, 7, 13}, 1}, {
        "SO ARE YOU LIKE GONNA POLISH OUR NOBS OR WHAT.", {12, 15, 11, 10, 12,
          12, 12, 12, 12, 7, 4, 13}, 1}, {"YES CAPTAIN.", {2, 7, 13}, 0}, {
        "THEY DON'T.", {12, 12, 2, 13}, 0}, {
        "I'M NOT SURE I HEAR A QUESTION IN THERE.", {11, 15, 2, 1, 11, 15, 4, 
         7, 10, 7, 13}, 0}, {
        "WHERE'D YOU GET IT.", {15, 12, 11, 15, 11, 13}, 1}, {
        "MAKING A LOT OF MONEY HUH.", {15, 4, 7, 10, 7, 12, 13}, 0}, {
        "MUFFY -- COFFEE.", {12, 13, 7, 13}, 0}, {
        "BUSY WHEN YOU WERE GONE LAST YEAR -- WHERE WERE YOU.", {1, 2, 11, 15,
          12, 12, 12, 13, 12, 15, 11, 13}, 1}, {
        "I'II GO....IS IT...BACK HERE.", {11, 13, 8, 7, 13}, 0}, {
        "THEN WHY CAN'T I GO IN THERE.", {2, 2, 12, 2, 11, 15, 10, 7, 13}, 
         1}, {"DID YOU MAKE THOSE INQUIRIES WE SPOKE ABOUT. ...AS I SAID IT'S \
ONLY A PHYSICAL PROBLEM...", {12, 11, 15, 4, 12, 12, 12, 12, 13, 13, 10, 11, 
         15, 11, 15, 12, 12, 12, 7, 13}, 0}, {
        "WE CHANGE THE SCAM.", {12, 12, 4, 7, 13}, 0}, {
        "YOU THINK MAGRUDER WANTS TO HANG BESIDE ME.", {11, 15, 12, 12, 10, 
         15, 10, 7, 13}, 0}, {"MR. PIZZA.", {12, 12, 13}, 0}, {
        "YOU DON'T KNOW ANY WAY YOU'LL TRUST ME.", {11, 15, 2, 12, 12, 12, 11,
          15, 7, 7, 13}, 0}, {
        "IT'S A ZOO BACK THERE -- IS THAT WHY YOU DID IT.", {11, 15, 4, 7, 2, 
         15, 13, 15, 4, 2, 11, 15, 11, 13}, 1}, {
        "CAN YOU CONFIRM VISUALLY OR JUST RADAR.", {12, 11, 15, 2, 7, 2, 7, 
         13}, 0}, {
        "IF HIS FRIENDS DON'T HELP HIM WHO IS GOING TO HELP HIM.", {10, 11, 7,
          15, 2, 15, 12, 11, 15, 12, 10, 15, 7, 13}, 1}, {
        "WHY DOES IT ALL MEAN SO MUCH TO YOU.", {2, 15, 11, 7, 7, 2, 12, 10, 
         11, 13}, 1}, {"THIS IS -- WHAT.", {12, 15, 13, 4, 13}, 1}, {
        "YOU STILL WANT TO GO TO ASGAARD.", {11, 2, 15, 10, 12, 10, 12, 13}, 
         0}, {"WHAT TIME ARE WE SUPPOSED TO GET TO THE HOTEL.", {4, 12, 15, 1,
          1, 10, 15, 10, 4, 7, 13}, 1}, {
        "ROSE WHO WERE THOSE SCOUNDRELS IN BIRMINGHAM.", {12, 11, 15, 4, 12, 
         10, 12, 13}, 1}, {
        "JUST WHAT ARE YOU UP TO.", {2, 4, 15, 11, 9, 10, 13}, 1}, {
        "LLOYD HONEY JUST COME HOME OKAY.", {12, 12, 2, 15, 12, 12, 13}, 0}, {
        "CONINUED WELL WHAT IS IT.", {12, 12, 4, 15, 11, 13}, 1}, {
        "HOW IS IT YOU COME TO BE HERE.", {12, 15, 11, 11, 15, 10, 15, 2, 13},
          1}, {"WILL YOU SHUT UP!.!!", {15, 11, 15, 9, 13, 13, 13}, 0}, {
        "WHAT ABOUT MARGO WEST.", {4, 12, 12, 12, 13}, 1}, {
        "YOU CAN SEE WHY IT'S SENSITIVE.", {11, 15, 15, 2, 11, 15, 12, 13}, 
         1}, {"DID YA WIN.", {12, 12, 12, 13}, 0}, {"BANK.", {12, 13}, 0}, {
        "DO YOU HAVE THE SUSPECT IN CUSTODY.", {15, 11, 15, 4, 1, 10, 7, 13}, 
         0}, {"WORK RELATED OR OTHERWISE.", {15, 12, 7, 12, 13}, 0}, {
        "SO THAT'S ALL YOU DO....", {12, 4, 15, 7, 11, 15, 13}, 0}, {
        "MORNING AFTER. ...I'M AT LEAST HALF A BUM.", {15, 7, 13, 13, 11, 15, 
         10, 12, 12, 12, 12, 13}, 0}, {
        "YOU DON'T WONDER THAT.", {11, 15, 2, 12, 4, 13}, 0}, {
        "WHAT MAKES YOU THINK YOU CAN ORDER ME AROUND.", {4, 15, 11, 15, 11, 
         12, 12, 12, 12, 13}, 1}, {
        "WHY ADD TO YOUR MISERY BY CONFESSING TO MURDER.", {2, 12, 10, 1, 7, 
         10, 15, 10, 7, 13}, 1}, {
        "WHY DIDN'T YOU CALL IN FOR BACKUP INSTEAD OF MAKIN' A GRANDSTAND \
PLAY.", {2, 12, 2, 11, 1, 10, 10, 7, 2, 10, 12, 4, 7, 7, 13}, 1}, {
        "AND WHEN THE OTHER RABBITS HEAR OF FIVER'S VISION DO THEY BELIEVE \
HIM.", {3, 2, 4, 1, 7, 15, 10, 12, 12, 12, 12, 12, 12, 13}, 1}, {
        "ME I'M KINDA AGGRAVATED. ...FINE. ...HOW'S THE TURTLE FOOD THIS \
WEEK.", {7, 8, 15, 12, 12, 13, 13, 13}, 1}, {
        "ON WHAT GROUNDS.", {10, 4, 7, 13}, 1}, {
        "HOW ABOUT THIS CHILD.", {12, 12, 12, 7, 13}, 1}, {
        "HOW CAN THEY KNOW ANY OF THAT.", {12, 12, 12, 12, 12, 10, 4, 13}, 
         1}, {"ANYWAY WHAT THE FUCK DO YOU CARE.", {2, 4, 4, 7, 7, 11, 12, 
         13}, 1}, {
        "WELL THAT'S WHAT YOU THINK ISN'T IT.", {12, 4, 15, 4, 11, 15, 15, 2, 
         11, 13}, 1}, {"ANYBODY SEE MY BOY.", {7, 15, 7, 7, 13}, 0}, {
        "MAY WE PROCEED WITH THE BUSINESS.", {12, 12, 12, 10, 4, 7, 13}, 0}, {
        "THAT BUGS YOU TOO.", {4, 7, 11, 2, 13}, 0}, {
        "WHERE THE FUCK ARE YOU GOING.", {15, 4, 7, 15, 11, 1, 13}, 1}, {
        "WHAT THE FUCK POSSESSED YOU.", {4, 4, 12, 15, 11, 13}, 1}, {
        "SHE IS NOT DEAD.", {12, 15, 12, 12, 13}, 0}, {
        "WHAT GAPS.", {4, 7, 13}, 1}, {
        "Y'KNOW TO MAKE IT SO LONG.", {12, 12, 10, 15, 11, 12, 12, 13}, 0}, {
        "YOU BELIEVE ME DON'T CHA.", {11, 15, 7, 7, 2, 12, 13}, 0}, {
        "YOU LIKE THE CAR.", {11, 10, 4, 7, 13}, 0}, {
        "ROSE ROSE.", {12, 12, 13}, 0}, {
        "WHAT DO YOU WANT TO DO WITH IT.", {4, 12, 11, 15, 10, 12, 10, 11, 
         13}, 1}, {
        "I DON'T KNOW YOU THINK EDDIE WILL GIVE ME HIS AUTOGRAPH.", {11, 15, 
         2, 12, 11, 15, 12, 15, 15, 7, 11, 7, 13}, 0}, {
        "WHAT TERRIBLE THING IN CAVE SPRINGS.", {4, 1, 7, 10, 12, 12, 13}, 
         1}, {"HOW'D IT GO IN THERE.", {12, 12, 12, 12, 10, 12, 13}, 1}, {
        "A MAN OR A MOUSE.", {4, 7, 7, 7, 7, 13}, 0}, {
        "IS SHE AROUND.", {15, 12, 12, 13}, 0}, {
        "JACK'S PRETTY TOUGH ON YOU ISN'T HE.", {7, 2, 1, 10, 11, 15, 2, 11, 
         13}, 0}, {
        "AND DO WE HAVE ANY OF THAT BREAKFAST TEA AROUND HERE.", {3, 12, 12, 
         12, 12, 10, 4, 7, 7, 10, 2, 13}, 0}, {
        "YOU MEAN RAY DUNBAR.", {11, 15, 12, 12, 13}, 0}, {
        "WHAT VARIABLES.", {4, 7, 13}, 1}, {
        "WHERE ARE MY GODDAMN BOOKS.", {15, 15, 7, 1, 7, 13}, 1}, {
        "OH -- WELL I THOUGHT HE ONCE MENTIONED -- WHY WOULD YOU SUPPOSE \
SO.", {7, 13, 7, 11, 15, 11, 2, 15, 13, 2, 12, 11, 15, 2, 13}, 1}, {
        "WHAT ARE YOU NUTS.", {4, 15, 11, 7, 13}, 1}, {
        "THAT THE BIG PLAN.", {4, 4, 12, 7, 13}, 0}, {
        "A LITTLE.", {4, 7, 13}, 0}, {
        "WHAT'S TO EAT.", {4, 15, 10, 15, 13}, 1}, {
        "THEY WILL SEND A NURSE SOMEONE WHO CAN TAKE CARE OF ALL OF THAT FOR \
YOU -- I JUST I JUST -- I JUST -- I'M JUST IN A FUCKING STATE I KNOW HE'S \
GOING AND IT'S LIKE I DON'T KNOW HOW -- JUST TELL ME <U>PRACTICAL</U> THINGS \
-- WHAT THE FUCK DO I DO WITH HIS BODY.", {12, 15, 15, 4, 7, 7, 11, 12, 15, 
         12, 10, 7, 10, 4, 10, 11, 13, 11, 2, 11, 2, 13, 11, 2, 13, 11, 15, 2,
          10, 4, 1, 7, 11, 15, 11, 15, 1, 3, 11, 15, 10, 11, 15, 2, 12, 12, 
         13, 2, 15, 7, 12, 12, 12, 12, 13, 4, 4, 7, 7, 11, 15, 10, 11, 7, 13},
          1}, {"YOU KNOW HOW LONG IT'S BEEN SINCE I WAS BEHIND THE WHEEL.", {
         11, 15, 12, 12, 12, 12, 10, 11, 15, 10, 4, 7, 13}, 1}, {
        "ANY OTHER VICES.", {12, 12, 7, 13}, 0}, {
        "WHAT BANK ARE YOU WITH.", {4, 12, 15, 11, 10, 13}, 1}, {
        "MAYBE WE'VE BEEN PRETTY DUMB-- NOT TOO HARD IS IT.", {2, 12, 12, 12, 
         2, 1, 13, 2, 2, 1, 15, 11, 13}, 0}, {
        "NO DID HE TELL YOU ABOUT IT.", {4, 12, 11, 15, 11, 10, 11, 13}, 0}, {
        "YOU WANNA GO HOME.", {11, 15, 12, 12, 12, 13}, 0}, {
        "ARE YOU SURE YOU EVEN PACKED IT.", {15, 11, 15, 11, 2, 15, 11, 13}, 
         0}, {"WHAT THE HELL ARE YOU DOIN' IN THERE. ...", {4, 4, 7, 15, 11, 
         7, 13, 10, 12, 13, 13}, 1}, {
        "DO YOU HAVE ANYTHING DEROGATORY TO SAY ABOUT THE CHAMPION.", {15, 11,
          15, 12, 12, 10, 12, 12, 4, 7, 13}, 0}, {
        "DON'T WANNA GET YOUR DADDY IN HOT WATER DO YOU.", {7, 2, 12, 12, 15, 
         1, 12, 10, 12, 12, 12, 11, 13}, 0}, {
        "WOULD THEY BURN.", {12, 12, 12, 13}, 0}, {
        "WHEN *DOESN'T* HE HAVE BRONCHITIS.", {2, 14, 15, 2, 14, 11, 15, 7, 
         13}, 1}, {"WHY THE CROSSOVER.", {2, 4, 7, 13}, 1}, {
        "CRYSTALLIZED. ...HOW'S THE CLIENT.", {12, 13, 13, 13}, 1}, {
        "SO WHAT ARE YOU SEEING.", {12, 4, 15, 11, 15, 13}, 1}, {
        "WHERE'RE YOU HIT.", {15, 7, 11, 15, 13}, 1}, {
        "YOU WANT TO GET INTO A FINGER POINTING CONTEST ABOUT CHARACTER.", {
         11, 15, 10, 15, 10, 4, 7, 15, 7, 10, 7, 13}, 0}, {
        "WHAT IS SHE DOING <U>NOW</U>.", {4, 15, 12, 12, 12, 12, 12, 13}, 
         1}, {"BUT ARE HURONS DOGS.  ...MAGUA'S WAY IS FALSE.", {12, 15, 12, 
         7, 13, 13, 12, 12, 15, 12, 13}, 0}, {
        "HAD THAT SHAKING THING WHATD'YACALL IT EPOXY.", {12, 4, 12, 7, 15, 
         13, 12, 12, 12, 13}, 1}, {
        "HAS THAT GIRL -- HAS THEA EVER TOLD YOU WHERE SHE COMES FROM.", {15, 
         4, 7, 13, 15, 12, 12, 15, 11, 15, 12, 15, 12, 13}, 1}, {
        "YOU WANNA KILL YOURSELF THAT IT YOU LOOKING TO COMMIT SOME KIND OF \
DIVINE SUICIDE.", {11, 15, 12, 12, 12, 4, 11, 11, 15, 10, 12, 12, 12, 10, 12, 
         12, 13}, 0}, {
        "WHY NOT JUST BUY YOUR BABY A NIGHT LIGHT.", {2, 2, 2, 15, 1, 7, 4, 
         12, 12, 13}, 1}, {
        "YOU BEEN ON PROZAC LONG.", {11, 15, 10, 12, 12, 13}, 0}, {
        "WAS GOD EXPECTING ME TO OFFER FORGIVENESS IN THE FACE OF EVERY \
OFFENSE NO MATTER HOW PAINFUL.", {12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 10, 
         12, 12, 7, 7, 12, 12, 13}, 1}, {
        "IF YOU DIDN'T KILL HIM THEN WHO DID.", {10, 11, 15, 2, 15, 7, 2, 11, 
         15, 13}, 1}, {"AND SHALLOW AS WELL.", {3, 1, 1, 7, 13}, 0}, {
        "WHERE IS ROB.", {15, 15, 12, 13}, 1}, {
        "SATISFIED WITH YOUR CABIN.", {1, 10, 1, 7, 13}, 0}, {
        "HOW HARD DO YOU THINK IT IS TO SELL ONE DRUG DEALER'S DRUGS TO \
ANOTHER DRUG DEALER.", {12, 12, 12, 11, 15, 11, 15, 10, 15, 8, 7, 7, 7, 10, 
         12, 7, 7, 13}, 1}, {
        "RODERICK I'M GONNA HAVE TO CITE YOU FOR A VIOLATION OF STATE LAW-- \
NO SHERIFF I'M JUST-- YOU TELLING ME WHAT TO DO RODERICK.", {12, 11, 15, 12, 
         12, 12, 10, 15, 11, 10, 4, 7, 10, 12, 12, 13, 7, 7, 11, 15, 2, 13, 
         11, 15, 7, 4, 10, 12, 12, 13}, 1}, {
        "SO THAT'S IT JUST FORGET ABOUT US.", {12, 4, 15, 11, 2, 15, 10, 12, 
         13}, 0}, {"SURE YOU'RE OKAY.", {1, 11, 15, 12, 13}, 0}, {
        "JUST TO LEAVE HER LIKE THAT.", {2, 10, 15, 12, 12, 4, 13}, 0}, {
        "WHAT DO HERBS HAVE TO DO WITH IT.", {4, 12, 12, 12, 10, 12, 10, 11, 
         13}, 1}, {"ARE YOU STILL WITH US.", {15, 11, 2, 10, 12, 13}, 0}, {
        "WHAT ABOUT.", {4, 12, 13}, 1}, {
        "WHY PICK ON HIM .", {2, 12, 12, 12, 13}, 1}, {
        "DID YOU KNOW THAT'S WRITTEN IN THE CONSTITUTION OF THE UNITED \
STATES.", {12, 11, 15, 4, 15, 12, 10, 4, 12, 10, 4, 12, 7, 13}, 0}, {
        "WHERE DO YOU WANT TO GO.", {15, 12, 11, 15, 10, 12, 13}, 1}, {
        "YOU'VE HEARD NOTHING ABOUT THE INCIDENT.", {11, 15, 15, 15, 10, 4, 7,
          13}, 0}, {
        "YOU THINK THEY SOLD ME OUT.", {11, 15, 12, 12, 12, 12, 13}, 0}, {
        "IF GOD HAD INTENDED MAN TO FLY HE WOULD HAVE GIVEN US WINGS.", {10, 
         7, 7, 15, 7, 10, 15, 11, 12, 12, 12, 12, 12, 13}, 0}, {
        "PRETTY RIDICULOUS ISN'T IT.", {2, 1, 15, 2, 11, 13}, 0}, {
        "DO YOU HAVE ANY WITNESSES OR FINGERPRINTS.", {15, 11, 15, 12, 12, 7, 
         7, 13}, 0}, {"HOW'S AUSTIN.", {12, 12, 13}, 1}, {
        "HE SQUEEZED MONEY OUT OF YOU.", {11, 15, 7, 7, 10, 11, 13}, 0}, {
        "SO YOU WERE NEVER A PROSTITUTE.", {12, 11, 15, 7, 4, 7, 13}, 0}, {
        "MAY I BE QUITE FRANK WITH YOU.", {12, 11, 15, 1, 7, 10, 11, 13}, 
         0}, {"WHAT ARE YOU TALKING ABOUT FELLA.", {4, 15, 11, 15, 10, 7, 13},
          1}, {"DO THEY HAVE PRESSURE.", {12, 12, 12, 7, 13}, 0}, {
        "TWO OF US DIED IN THE LAST TWO DAYS DOES THAT STRIKE YOU AS \
PARTICULARLY NORMAL.", {8, 10, 12, 15, 10, 4, 7, 8, 7, 15, 4, 15, 11, 1, 7, 7,
          13}, 0}, {
        "THE UH CYNTHIA BRANSON ESTATE WAS WORTH HOW MUCH.", {4, 12, 12, 12, 
         12, 12, 12, 12, 12, 13}, 1}, {
        "PERHAPS YOUR DEAR WIFE MIGHT CARE TO PROFIT FROM MY INSTRUCTION.", {
         2, 1, 7, 7, 12, 12, 10, 12, 12, 12, 12, 13}, 0}, {
        "SHOULD WE STAY HERE.", {15, 15, 12, 2, 13}, 0}, {
        "YEAH. ...LEELOO.", {2, 13, 13, 12, 13}, 0}, {
        "WHY DO YOU WANT TO GO BACK AFTER ALL THIS.", {2, 12, 11, 1, 10, 15, 
         2, 10, 7, 7, 13}, 1}, {
        "ARE YOU ON ONE OF THOSE CONFERENCE CALLS.", {15, 11, 10, 8, 10, 4, 
         12, 12, 13}, 0}, {
        "YOU MEAN SOMEBODY ASKED.", {11, 15, 12, 12, 13}, 0}, {
        "THE HOLIDAY INN.", {4, 7, 7, 13}, 0}, {
        "WHAT DO YOU WANT FROM ME COLETTE.", {4, 12, 11, 15, 10, 12, 12, 13}, 
         1}, {"WHAT'S THAT IDIOT DOING NEXT DOOR.", {4, 15, 4, 12, 12, 12, 7, 
         13}, 1}, {
        "NOW WHAT'S WRONG WITH NATURE HUH.", {2, 4, 15, 1, 10, 7, 12, 13}, 
         1}, {"WHAT WOULD YOU CALL IT.", {4, 15, 11, 1, 12, 13}, 1}, {
        "IF YOU FOUND THIS DEED WHY DIDN'T YOU JUST ASK EDDIE.", {10, 11, 15, 
         7, 15, 2, 12, 2, 11, 2, 15, 12, 13}, 1}, {
        "SHE TRIUMPHED OVER EVERYTHING WHAT ARE YOU BLUBBERING ABOUT.", {12, 
         15, 10, 15, 4, 15, 11, 15, 12, 13}, 1}, {
        "SO WHY'RE YOU EVEN CONSIDERING IT.", {12, 2, 7, 11, 2, 15, 11, 13}, 
         1}, {"WHERE DO YOU LIVE JACK.", {15, 12, 11, 15, 7, 13}, 1}, {
        "BUT DID THEY TEACH YOU THIS.", {12, 12, 12, 15, 11, 7, 13}, 0}, {
        "GOT OUT OF MY OTHER COMMITMENT. ...YOU WANNA WORK -- HERE.", {12, 12,
          10, 12, 12, 12, 13, 13, 11, 12, 12, 15, 13, 2, 13}, 0}, {
        "DO YOU LOVE THEM.", {15, 11, 15, 7, 13}, 0}, {
        "WHAT DO WE HAVE.", {4, 12, 12, 12, 13}, 1}, {
        "HE TOLD YOU HE WASN'T COMING RIGHT BACK CAUSE HE WANTED TO QUESTION \
NORMAN BATES' MOTHER RIGHT.", {11, 15, 11, 11, 15, 2, 15, 7, 2, 15, 11, 15, 
         10, 12, 12, 12, 12, 12, 13}, 0}, {
        "WHAT DO YOU LIKE BEST ABOUT YOUR DADDY.", {4, 12, 11, 10, 12, 12, 1, 
         7, 13}, 1}, {
        "YOU DON'T READ DO YOU.", {11, 15, 2, 15, 7, 11, 13}, 0}, {
        "DON'T TELL ME YOU DON'T KNOW HOW ALL THIS WORKS.", {7, 2, 15, 7, 11, 
         15, 2, 12, 12, 7, 7, 15, 13}, 1}, {
        "MAYBE I SHOULD JUST YA KNOW...TURN TO THE CAMERAS AND SAY DO YOU \
MIND IF WE JUST WORK SOMETHING OUT.", {2, 11, 15, 2, 15, 12, 13, 13}, 0}, {
        "AND I'VE GOT A TEST TOMORROW ON - WELL.", {3, 11, 15, 7, 4, 7, 7, 10,
          13, 7, 13}, 0}, {
        "YOU THINK GOD FORGIVES PEOPLE LIKE ME.", {11, 15, 7, 15, 7, 10, 7, 
         13}, 0}, {
        "WHAT DIRECTION DOES THE SYSTEM INDICATE.", {4, 12, 15, 4, 12, 12, 
         13}, 1}, {
        "ARE THEY ALL IN THE BUSINESS.", {15, 12, 7, 10, 4, 7, 13}, 0}, {
        "WHAT'S THE MATTER WITH BJORN.", {4, 15, 4, 7, 10, 7, 13}, 1}, {
        "BIG-ASS TITTIES.", {1, 7, 13}, 0}, {
        "WHY DO YOU ALWAYS ANSWER A QUESTION WITH A QUESTION.", {2, 12, 11, 1,
          7, 4, 7, 10, 4, 7, 13}, 1}, {
        "WHAT YOU GONNA PUT ME ON YOUR CHRISTMAS CARD LIST.", {4, 11, 12, 12, 
         12, 12, 12, 1, 12, 12, 7, 13}, 1}, {
        "WHO'S LACERDA, HE'S WAITING FOR US IN A ROOM ON THE TWELFTH FLOOR.", \
{11, 15, 12, 13, 11, 15, 12, 10, 12, 10, 4, 7, 10, 4, 1, 7, 13}, 1}, {
        "YOU HAVE NOT MET A MAN WORTHY OF YOUR ATTENTION.", {11, 15, 2, 7, 4, 
         7, 1, 10, 1, 7, 13}, 0}, {
        "HAVE YOU SEEN MY GLASSES.", {15, 11, 15, 12, 12, 13}, 0}, {
        "AND YOU STILL MAINTAIN -- WHAT.", {3, 11, 2, 15, 13, 4, 13}, 1}, {
        "SO HOW IS IT THAT YOU GUYS ARE FLUENT IN RUSSIAN.", {12, 12, 15, 11, 
         4, 11, 15, 15, 1, 10, 12, 13}, 1}, {
        "HAS MR. KESSLER SAID ANYTHING REGARDING THE ATTACK ON THE MOORS.", {
         15, 12, 12, 15, 12, 12, 4, 7, 10, 4, 7, 13}, 0}, {
        "ANGELA.", {12, 13}, 0}, {
        "WAS EVER BOOK CONTAINING SUCH VILE MATTER'S SO FAIRLY BOUND.", {12, 
         12, 12, 12, 12, 12, 12, 12, 12, 12, 13}, 0}, {
        "YOU HEAR ME PRIVATE.", {11, 15, 2, 12, 13}, 0}, {
        "DO YOU THINK THAT GUY'S CUTE.", {15, 11, 15, 4, 7, 15, 12, 13}, 0}, {
        "DON'T YOU GAMBLE.", {7, 2, 11, 15, 13}, 0}, {
        "WELL WE PAY FOR THE [.].", {12, 12, 7, 10, 4, 13, 13, 13, 13}, 0}, {
        "MA. DID HE EVER SAY THAT HE FIGURED OUT A WAY TO RECALL A LOST \
MEMORY YEARS AFTER HE BLACKED IT OUT FOR THE FIRST TIME.", {12, 13, 12, 11, 2,
          15, 4, 11, 15, 12, 12, 12, 10, 12, 12, 15, 7, 7, 10, 11, 15, 11, 12,
          10, 4, 12, 12, 13}, 0}, {
        "HOW REAL DOES IT FEEL.", {12, 12, 15, 11, 7, 13}, 1}, {
        "SINCE WHEN IS IT A CRIME TO HAVE A SCALE IN YOUR HOUSE.", {10, 2, 15,
          11, 4, 7, 10, 12, 12, 12, 10, 1, 12, 13}, 1}, {
        "YOU WANT A WAR.", {11, 15, 4, 7, 13}, 0}, {
        "WHO THE FUCK WAS HE ROCCO.", {11, 4, 7, 15, 11, 12, 13}, 1}, {
        "DO YOU WANT ATHOS ARRESTED YOUR MAJESTY.", {15, 11, 1, 7, 15, 1, 7, 
         13}, 0}, {"WHEREFORE STORM YOU SO.", {1, 7, 11, 2, 13}, 1}, {
        "YOU GONNA LEAVE SOME CASH BY THE BED WHEN YOU PASS THROUGH TOWN.", {
         11, 15, 7, 15, 12, 12, 12, 4, 12, 2, 11, 15, 10, 7, 13}, 1}, {
        "DR. RUTH.", {12, 12, 13}, 0}, {
        "FOR FIVE HUNDRED WHAT DO I GET.", {10, 8, 15, 4, 12, 11, 15, 13}, 
         1}, {"AFRAID OF THE HOSPITAL.", {1, 10, 4, 7, 13}, 0}, {
        "WHO CAN WE TRUST.", {11, 12, 12, 12, 13}, 1}, {
        "NON LOQUIS LATINUM.", {12, 12, 12, 13}, 0}, {
        "DID YOU HELP HIM OUT OF A BIND.", {12, 11, 15, 12, 12, 10, 4, 7, 13},
          0}, {"YOU KNOW HOW SOMETIMES YOU JUST BECOME THIS PERSONA.", {11, 
         15, 7, 2, 11, 2, 15, 7, 7, 13}, 1}, {
        "WASN'T THAT THE PROBLEM WITH YOU TWO.", {12, 2, 4, 4, 7, 10, 11, 8, 
         13}, 0}, {
        "YOU ARE FUCKIN' DEAD YOU GO IN THERE TODAY.", {11, 15, 7, 13, 1, 11, 
         15, 10, 12, 12, 13}, 0}, {"OUT THE BACK.", {12, 4, 2, 13}, 0}, {
        "AND I AIM TO CURE YA OF YOUR WICKEDNESS.", {3, 11, 7, 10, 15, 12, 10,
          1, 7, 13}, 0}, {
        "AND I USED TO KNOW YOU PERSONAL WAY BACK WHEN.", {3, 11, 15, 10, 12, 
         11, 1, 7, 2, 2, 13}, 1}, {
        "IF YOU DON'T WANT MY FILM - I'LL CALL ANOTHER SHOW.", {10, 11, 15, 2,
          1, 7, 7, 13, 11, 15, 1, 12, 12, 13}, 1}, {
        "SHADOW GETS CRAZY-- IT'S NOT OUR JOB TO GET INVOLVED IN YOUR \
PERSONAL LIFE BUT WHEN IT INTERFERES WITH THE TRAINING HERE-- FROM BACK IN \
HOUSTON.", {12, 15, 12, 13, 11, 15, 12, 12, 12, 10, 15, 1, 10, 1, 1, 7, 12, 2,
          11, 15, 10, 4, 7, 2, 13, 10, 2, 10, 12, 13}, 1}, {
        "GREAT RUNNING INTO YOU, BUDDY.", {1, 15, 10, 11, 13, 12, 13}, 0}, {
        "I HAVEN'T FELT THIS GOOD IN A LONG TIME.", {11, 15, 2, 15, 7, 1, 10, 
         4, 7, 7, 13}, 0}, {"NERVES OF STEEL.", {7, 10, 12, 13}, 0}, {
        "I SHOULDN'T BE OVER HERE AT THIS HOUR.", {11, 15, 2, 15, 10, 2, 10, 
         12, 12, 13}, 0}, {
        "-- THE TRAIN FOR MARSEILLES LEAVES AT FIVE O'CLOCK.", {13, 4, 7, 10, 
         12, 15, 10, 8, 7, 13}, 0}, {
        "-- YOU SAID SO YOURSELF THE FIRM IS LARGE AND POWERFUL.", {13, 11, 
         15, 12, 12, 4, 12, 15, 12, 3, 12, 13}, 0}, {
        "THIS IS NOT MY USUAL FRIDAY NIGHT!", {12, 15, 12, 12, 12, 12, 12, 
         13}, 0}, {
        "I SENT IT TO MYSELF IN PARIS.", {11, 15, 11, 10, 12, 10, 12, 13}, 
         0}, {"YOU SAID IT CLARK.", {11, 15, 11, 7, 13}, 0}, {
        "I DON'T KNOW WHAT YOU'RE TALKING ABOUT MAN.", {11, 15, 2, 12, 4, 11, 
         15, 15, 10, 7, 13}, 1}, {
        "OUR RENDEZVOUS POINTS AND RADIO FREQS.", {12, 12, 12, 3, 12, 12, 13},
          0}, {"YOU STILL GOT A SHITLOAD OF PLOWING TO DO.", {11, 2, 15, 4, 
         12, 10, 12, 10, 12, 13}, 0}, {
        "HE TOLD ME THAT I WAS STUPID BECAUSE MY BOYFRIEND DIDN'T REALLY LOVE \
ME.", {11, 15, 12, 4, 11, 15, 1, 12, 12, 12, 12, 2, 12, 12, 12, 13}, 0}, {
        "BUT I...", {12, 12, 13, 13}, 0}, {
        "THIS SORT OF THING AIN'T MY BAG BABY.", {12, 12, 10, 12, 12, 2, 12, 
         12, 7, 13}, 0}, {
        "WE'RE MAKING A STATEMENT.", {12, 12, 12, 12, 12, 13}, 0}, {
        "I KNOW THIS.", {11, 15, 7, 13}, 0}, {
        "I THINK I SHOULD GO BACK.", {11, 15, 11, 15, 15, 2, 13}, 0}, {
        "NO QUESTION ABOUT IT.", {4, 12, 12, 12, 13}, 0}, {
        "HEY YOU HAVEN'T CHANGED YOUR CLOTHES!", {7, 11, 15, 2, 15, 1, 7, 13},
          0}, {"THE RESISTANCE THE ANGER IN YOUR VOICE.", {4, 7, 4, 7, 10, 1, 
         7, 13}, 0}, {"NO I'M OKAY FOR NOW.", {7, 11, 15, 1, 10, 2, 13}, 0}, {
        "NO ALL THE GOOD ONES ARE MARRIED.", {4, 7, 4, 1, 7, 15, 15, 13}, 
         0}, {"THE GOVERNMENT DOESN'T HAVE TO TELL PEOPLE TO DO IT.", {4, 12, 
         12, 2, 12, 10, 12, 12, 10, 12, 12, 13}, 0}, {
        "THAT'S COOL.", {4, 15, 12, 13}, 0}, {
        "SARAH LAWRENCE IS ON THE OTHER SIDE OF THE COUNTRY.", {12, 12, 15, 
         10, 4, 1, 12, 10, 4, 7, 13}, 0}, {
        "PLEASE ROSE BE A GOOD SPORT.", {15, 12, 15, 4, 1, 7, 13}, 0}, {
        "YOUR FACE WAS DARK AND YOUR HAIR WAS BACKLIT -- I COULD SEE A HALO \
OF FRIZZ -- YOU ASKED ME IF THINGS WERE OKAY BETWEEN NAOMI AND ME.", {1, 7, 
         15, 1, 3, 1, 7, 15, 12, 13, 11, 15, 15, 4, 7, 10, 12, 13, 11, 15, 12,
          10, 12, 15, 1, 12, 12, 3, 12, 13}, 0}, {
        "HER NOT BELIEVING ABOUT YOUR CONDITION..", {12, 12, 12, 12, 1, 7, 13,
          13}, 0}, {"WE SEE YOU NEXT HARVEST.", {12, 15, 11, 1, 7, 13}, 0}, {
        "THEY MAY LOOK GOOD BUT THEY WEIGH TWELVE POUNDS EACH THAT'S \
THIRTY-SIX POUNDS RIGHT THERE.", {12, 12, 12, 12, 12, 12, 15, 8, 12, 12, 4, 
         15, 8, 12, 12, 12, 13}, 0}, {
        "THIS IS ANTHONY ADAMS MR. HENRY.", {12, 15, 12, 12, 12, 12, 13}, 
         0}, {"NO. DADDY SAYS ROSE IS CALM AS LETTUCE.", {7, 13, 12, 12, 15, 
         15, 7, 1, 7, 13}, 0}, {
        "I'M SORRY IT'S JUST THAT..", {11, 15, 12, 12, 2, 4, 13, 13}, 0}, {
        "BUT THEN  --  --  THAT SILLY WAR..", {12, 12, 13, 13, 4, 12, 7, 13, 
         13}, 0}, {
        "SHE CALLED ME AN OLD LADY HERE TOO!", {12, 15, 1, 4, 1, 7, 2, 2, 13},
          0}, {"FIVE NIGHTS AGO HE FOUND THIS PARATROOPER CAUGHT IN A TREE \
WITH A BROKEN LEG.", {8, 7, 2, 11, 12, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13},
          0}, {"ALONE.", {2, 13}, 0}, {
        "I AVOIDED CAPTURE USING THE MAK'TAR STEALTH HAZE.", {11, 15, 12, 12, 
         4, 12, 13, 7, 7, 7, 13}, 0}, {
        "IT IS IT IS!", {11, 15, 11, 15, 13}, 0}, {
        "LEAVE THAT ALONE!", {15, 4, 2, 13}, 0}, {
        "I DON'T WANT TO TALK ABOUT HIM.", {11, 15, 2, 1, 10, 12, 12, 12, 13},
          0}, {"GOOD AFTERNOON MR. HARRIS.", {1, 7, 12, 12, 13}, 0}, {
        "JOHN I'D LIKE YOU TO MEET ONE OF THE BRIGHTEST LIGHTS OF THE BRITISH \
STAGE MRS. KENDAL.", {12, 11, 15, 10, 11, 10, 15, 8, 10, 4, 12, 12, 10, 4, 1, 
         7, 12, 12, 13}, 0}, {
        "DON'T KNOW IF I'LL STILL WANT IT.", {7, 2, 12, 10, 11, 15, 2, 1, 11, 
         13}, 0}, {"MADAM SENATOR...", {12, 12, 13}, 0}, {
        "I'LL GET HIM.", {11, 15, 15, 7, 13}, 0}, {
        "AT LEAST TALK TO HIM HEAR WHAT HE HAS TO SAY.", {10, 12, 12, 10, 12, 
         15, 4, 11, 15, 10, 12, 13}, 1}, {
        "LOUELLA PARSONS IS HERE.", {12, 12, 15, 2, 13}, 0}, {
        "THREE MEN AND A WOMEN.", {8, 12, 3, 4, 12, 13}, 0}, {
        "IT'S COSMETIC.", {11, 15, 7, 13}, 0}, {
        "AND YOU WILL GIVE ME OCCASION.", {3, 11, 15, 15, 12, 12, 13}, 0}, {
        "I'M HAPPY.", {11, 15, 12, 13}, 0}, {
        "LET ME OUT OF HERE!", {15, 12, 12, 10, 2, 13}, 0}, {
        "MAYBE HE DIDN'T KNOW EXACTLY WHAT HE WAS GONNA DO BUT HE HAD A \
PRETTY GOOD IDEA.", {2, 11, 15, 2, 12, 12, 4, 11, 15, 12, 12, 12, 12, 11, 15, 
         4, 2, 1, 7, 13}, 1}, {
        "AND BECAUSE HE'S MY FRIEND.", {3, 10, 11, 15, 12, 12, 13}, 0}, {
        "I DON'T KNOW WHY I SAID IT.", {11, 15, 2, 12, 2, 11, 15, 11, 13}, 
         1}, {"HOWE I HATE TO BRING IT UP BUT SHE'S GOT AN AWFUL TOOTHACHE \
WE'VE GOT TO CARRY HER TO THE DENTIST.", {12, 11, 15, 10, 15, 11, 9, 12, 12, 
         12, 4, 12, 12, 12, 12, 12, 10, 12, 12, 10, 4, 7, 13}, 1}, {
        "WHENEVER PEOPLE SAY 'AW THAT DAMONE IS A LOUDMOUTH' -- AND THEY SAY \
THAT A LOT -- I SAY 'YOU JUST DON'T KNOW DAMONE.' WHEN SOMEONE SAYS YOU'RE AN \
IDIOT I TELL THEM 'DAMONE'S NOT AN IDIOT.", {12, 12, 12, 13, 12, 4, 12, 15, 4,
          7, 13, 13, 3, 7, 7, 4, 4, 7, 13, 11, 15, 13, 11, 2, 15, 2, 12, 12, 
         13, 13, 2, 12, 15, 11, 15, 4, 7, 11, 15, 12, 13, 12, 15, 12, 4, 12, 
         13}, 1}, {
        "GOOD THING HE DOESN'T ALWAYS KNOW WHAT HE'S GOT...", {1, 7, 11, 15, 
         2, 1, 7, 4, 11, 15, 12, 13, 13}, 1}, {
        "IT'S FOR SOMEBODY NAMED THOMPSON BUT IT SAYS 'CARE OF RAOUL DUKE'.", \
{11, 15, 10, 12, 12, 12, 12, 12, 12, 13, 12, 10, 12, 12, 13}, 0}, {
        "THEN TAKE IT FROM HIM.", {2, 15, 11, 10, 7, 13}, 0}, {
        "A WOW FINISH.", {4, 12, 7, 13}, 0}, {"EARS.", {7, 13}, 0}, {
        "TRADE YOUR EXCELLENCY.", {7, 1, 7, 13}, 0}, {
        "JUST ONE COMPADRE...", {2, 8, 7, 13}, 0}, {
        "I'LL TAKE EVERYTHING AT FACE VALUE.", {11, 15, 15, 15, 10, 12, 12, 
         13}, 0}, {
        "IT'S MUCH SAFER IN THERE SWEETY.", {11, 15, 12, 12, 10, 12, 12, 13}, 
         0}, {"WELL DO SOMETHING ABOUT IT.", {12, 12, 12, 12, 12, 13}, 0}, {
        "HOLD ON . . .", {15, 12, 13}, 0}, {
        "LET ME HAVE MANUAL CONTROL PLEASE.", {15, 12, 12, 12, 12, 12, 13}, 
         0}, {"MY AUTHOR.", {12, 12, 13}, 0}, {
        "NOW LISTEN BEFORE YOU DO SOMETHING YOU'LL REALLY REGRET YOU'D BETTER \
STOP AND THINK-- HERE ARE THE SLIPS FOR THE LAUNDRY AND THE CLEANING.", {2, 
         15, 10, 11, 15, 12, 11, 15, 12, 12, 11, 15, 12, 15, 3, 15, 13, 2, 15,
          4, 15, 10, 4, 7, 3, 4, 7, 13}, 0}, {
        "IF THAT'S THE WAY YOU WANT IT.", {10, 4, 15, 4, 7, 11, 15, 11, 13}, 
         0}, {"I SAW IT GOING DOWN.", {11, 15, 11, 12, 12, 13}, 0}, {
        "I'LL LAY YOU FIVE TO ONE YOU WON'T SLEEP.", {11, 15, 7, 11, 8, 10, 8,
          11, 15, 2, 7, 13}, 0}, {
        "THAT WON'T YOUR FAULT.", {4, 1, 2, 1, 7, 13}, 0}, {
        "I LIKED THE HORSE.", {11, 15, 4, 7, 13}, 0}, {
        "LET'S GET A PICTURE.", {7, 15, 4, 7, 13}, 0}, {
        "UHM..", {12, 13, 13}, 0}, {
        "THEN YOU ARE A FOOL -- A FOOL WHO HAS NEVER LOST A SON.", {2, 11, 15,
          4, 7, 13, 4, 7, 11, 15, 12, 12, 12, 12, 13}, 1}, {
        "NO ONE CAN STOP THEM.", {7, 8, 12, 15, 12, 13}, 0}, {
        "WELL IT SEEMS YOU ARE DETERMINED TO KEEP LASZLO HERE.", {12, 12, 15, 
         11, 15, 15, 10, 15, 12, 2, 13}, 0}, {
        "LIKE HE'S WILD.", {10, 11, 15, 12, 13}, 0}, {
        "HE'S NOT ARMY IT'S NOT OFFICIAL -- HE'S FORMER ARMY AND THE BEST \
I'VE EVER SEEN IN A ROOM.", {11, 15, 12, 12, 12, 12, 12, 13, 11, 15, 1, 7, 3, 
         4, 7, 11, 15, 2, 12, 10, 4, 7, 13}, 0}, {
        "NOTHING REAL OR SUPERNATURAL IS BUSTING THROUGH THIS LEAST NOTHING \
THE SIZE OF THE BEASTS.", {15, 7, 7, 1, 15, 12, 10, 12, 12, 12, 4, 7, 10, 4, 
         7, 13}, 0}, {"I WOULD HANG HIM!", {11, 15, 7, 7, 13}, 0}, {
        "I'M FEELING FINE THIS MORNING.", {11, 15, 15, 12, 12, 12, 13}, 0}, {
        "AND I HADN'T BEEN LIVING MY OWN LIFE.", {3, 11, 15, 2, 12, 12, 12, 
         12, 12, 13}, 0}, {
        "I JUST KNOW HOW YOU GET.", {11, 2, 15, 12, 11, 15, 13}, 1}, {
        "I MEAN IT'S NOT AS IF -- YOU'RE GREAT WITH THE ADVICE CLARK.", {11, 
         15, 11, 15, 2, 1, 10, 13, 11, 15, 1, 10, 4, 12, 12, 13}, 0}, {
        "SCREWIN' SOME POOR SLOB OUT OF HIS RETIREMENT.", {7, 13, 12, 12, 12, 
         12, 10, 11, 7, 13}, 0}, {
        "IT'S ALL WORKING OUT JUST LIKE WE PLANNED.", {11, 15, 7, 15, 12, 2, 
         10, 12, 12, 13}, 0}, {
        "THEY JUST STOOD THERE CONFUSED.", {12, 2, 15, 1, 1, 13}, 0}, {
        "COME ON STACY IT'S YOUR SECTION AND YOUR MAN.", {15, 12, 12, 12, 1, 
         7, 3, 1, 7, 13}, 0}, {"UH..", {12, 13, 13}, 0}, {
        "I HAVE NO LUGGAGE.", {11, 15, 7, 7, 13}, 0}, {
        "I -- I...", {11, 13, 7, 13, 13}, 0}, {
        "I TOLD YOU I'D GET IT.", {11, 15, 11, 11, 15, 15, 11, 13}, 0}, {
        "HAVE A DONUT.", {15, 4, 7, 13}, 0}, {
        "NOBODY WALKS AROUND LIKE THAT.", {7, 15, 10, 12, 4, 13}, 0}, {
        "WELL PERSONALLY MAJOR I WILL TAKE WHAT COMES.", {12, 2, 15, 11, 15, 
         15, 4, 15, 13}, 1}, {
        "YOU DID PICK A REAL STRANGE TIME TO GO AND BE BRAVE ALL ON YOUR \
OWN..", {11, 15, 12, 12, 12, 12, 12, 10, 12, 3, 15, 1, 7, 10, 1, 7, 13, 13}, 
         0}, {"CHARLES I MUST APOLOGIZE AGAIN FOR THE KRONOS MISHAP.", {12, 
         11, 15, 15, 2, 10, 4, 7, 7, 13}, 0}, {
        "I GAVE MY GRIEF TO JESUS CHRIST.", {11, 15, 7, 7, 10, 12, 12, 13}, 
         0}, {"NOW YOU MIGHT BE ONE OF THESE HOLLYWOOD TYPES CHANGE YOUR NAME \
AND ALL THAT BUT PEERLESS DOTHAN IS ON YOUR BIRTH CERTIFICATE.", {2, 11, 15, 
         15, 8, 10, 12, 12, 15, 12, 1, 7, 3, 7, 4, 12, 12, 12, 15, 12, 1, 7, 
         7, 13}, 0}, {
        "STOP SAYING YOU KNOW WHEN I SAY 'Y'KNOW.' I KNOW YOU KNOW.", {15, 12,
          11, 15, 2, 11, 15, 13, 12, 12, 13, 13, 11, 15, 11, 15, 13}, 1}, {
        "HE'S NOT A STAG HOUND.", {11, 15, 2, 4, 7, 7, 13}, 0}, {
        "SO IT'S ALL WORKED OUT PERFECTLY..", {12, 12, 7, 15, 12, 2, 13, 13}, 
         0}, {"SOUNDS DELIGHTFUL. ... MEANWHILE I'D LIKE TO PREPARE YOU FOR A \
COLONOSCOPY SO WE CAN TAKE A LOOK INSIDE.", {15, 12, 13, 13}, 0}, {
        "I ASKED IF WE COULD GIVE HIM ANYTHING ELSE.", {11, 15, 10, 12, 12, 
         15, 12, 12, 12, 13}, 0}, {"PAY'S GOOD THOUGH.", {7, 1, 7, 13}, 0}, {
        "DOESN'T MOVE.", {7, 2, 15, 13}, 0}, {
        "IT'S REALLY NICE TO TALK WITH YOU SAM.", {11, 15, 2, 1, 10, 12, 10, 
         11, 12, 13}, 0}, {
        "HOW YOU GOT ME LOCKED UP LIKE A DOG ON A...", {12, 11, 15, 7, 15, 9, 
         10, 4, 7, 10, 7, 13, 13}, 1}, {"TREVES.", {12, 13}, 0}, {
        "I DON'T KNOW HOW IT GOT THIS WAY..", {11, 15, 2, 12, 12, 12, 12, 12, 
         12, 13, 13}, 1}, {
        "IT SEEMED SHE WAS HARMING YOU.", {11, 15, 12, 12, 12, 11, 13}, 0}, {
        "OTHER PICTURES--I DON'T KNOW--IT'S NOTHING I WANT TO LOOK BACK ON.", \
{1, 7, 13, 11, 15, 2, 12, 13, 11, 15, 15, 11, 1, 10, 15, 2, 10, 13}, 0}, {
        "I'LL RISK IT.", {11, 15, 7, 11, 13}, 0}, {
        "I THINK THEY HAVE ANOTHER FELLA THERE TO KEEP IT OFF YOUR CHEST.", {
         11, 15, 12, 12, 12, 12, 12, 10, 15, 11, 7, 1, 7, 13}, 0}, {
        "I'LL GO OUT FOR A SMOKE.", {11, 15, 12, 12, 10, 4, 7, 13}, 0}, {
        "INDIA IS A NEWLY INDEPENDENT NATION.", {12, 15, 4, 2, 1, 7, 13}, 
         0}, {"I CAN'T BELIEVE WHAT A --!", {11, 12, 2, 15, 4, 4, 13, 13}, 
         1}, {"IT COULD BE PARASITES AN INFECTION..", {11, 15, 15, 12, 4, 7, 
         13, 13}, 0}, {
        "SAYS SHE CAN GET ME IN TO SEE THIS KILLER.", {12, 12, 12, 15, 7, 10, 
         10, 15, 7, 7, 13}, 0}, {"SEE YOU.", {15, 11, 13}, 0}, {
        "NO NO!", {7, 7, 13}, 0}, {
        "YOU CAN GO BACK WITH JACK.", {11, 15, 7, 2, 10, 7, 13}, 0}, {
        "WE WONDERED ABOUT THE DISCOLORATION SO HE RAN A SPECTRO.", {12, 15, 
         10, 4, 12, 12, 11, 15, 4, 7, 13}, 0}, {
        "OF COURSE YOU CAN'T!", {10, 12, 11, 12, 2, 13}, 0}, {
        "JUST HOPE.", {2, 7, 13}, 0}, {
        "LONGITUDE 109 -- LET'S GO.", {7, 8, 13, 12, 7, 13}, 0}, {
        "WELL I HAVEN'T HEARD ANYTHING ABOUT THE DISAPPEARANCE OR \
ANYTHING...", {2, 11, 15, 2, 15, 15, 10, 4, 7, 7, 7, 13}, 0}, {
        "TWENTY-FIVE YEARS.", {8, 7, 13}, 0}, {
        "LET ME SEE!", {15, 12, 15, 13}, 0}, {
        "WHY HE COULD OPERATE ON ME ANY OLD TIME AND I WOULDN'T EVEN BE \
SCARED.", {2, 11, 12, 12, 12, 12, 12, 12, 12, 3, 11, 15, 2, 2, 15, 12, 13}, 
         1}, {"THE PACE OF REFORM MUST MEET WITH THE DESIRES OF THE TIBETAN \
PEOPLE.", {4, 7, 10, 12, 12, 12, 10, 4, 7, 10, 4, 1, 7, 13}, 0}, {
        "MY PLAN INVOLVES ALL FOUR OF US ACTING TOGETHER.", {12, 7, 15, 7, 8, 
         10, 12, 12, 2, 13}, 0}, {
        "ROSE, YOU'RE VERY SICK.", {7, 13, 11, 15, 2, 1, 13}, 0}, {
        "WHICH IS A WONDERFUL CROOK.", {4, 15, 4, 1, 7, 13}, 1}, {
        "I LOST A WORKER.", {11, 15, 4, 7, 13}, 0}, {
        "SHE SAYS HE COMES BACK IN DREAMS.", {12, 15, 11, 15, 2, 10, 7, 13}, 
         0}, {"THE DANGER.", {4, 7, 13}, 0}, {
        "ABOUT SIX MONTHS AGO SOME PARTS OF BODIES WERE FOUND DOWN BY THE \
RIVER.", {10, 8, 7, 2, 15, 7, 10, 7, 15, 15, 2, 10, 4, 7, 13}, 0}, {
        "THE PERSONALITY INVENTORIES WOULD TRIP HIM UP.", {4, 7, 7, 15, 7, 7, 
         7, 13}, 0}, {
        "IF FIRED UPON TELL OUR FIGHTERS THAT THEY ARE ORDERED TO ENGAGE.", {
         10, 15, 10, 12, 12, 12, 4, 12, 15, 15, 10, 15, 13}, 0}, {
        "IT WORKED!", {11, 15, 13}, 0}, {"JUST MY LUCK.", {2, 7, 7, 13}, 0}, {
        "LECTER DID IT TO AMUSE HIMSELF.", {12, 12, 12, 10, 15, 7, 13}, 0}, {
        "IT'S A STUPID TRADITION.", {11, 15, 4, 1, 7, 13}, 0}, {
        "I'LL GO OUTSIDE AND TAKE A LOOK IN THE GARAGE.", {11, 15, 7, 10, 3, 
         15, 4, 7, 10, 4, 7, 13}, 0}, {
        "SO MUCH FOR NUTSY FAGIN.", {12, 12, 10, 12, 12, 13}, 0}, {
        "SUPPOSE THAT YOU BEAR FIVE OR SIX CHILDREN WITH YOUR \
CHARACTERISTICS.", {15, 4, 11, 15, 8, 7, 8, 7, 10, 1, 7, 13}, 0}, {
        "IT DOES AND IT IS A BETTER LOOKIN' REASON THAN YOU JACK WINTHROP.", {
         11, 12, 3, 11, 15, 4, 1, 7, 13, 12, 12, 11, 12, 12, 13}, 0}, {
        "FUCK OFF FRAT BOY.", {12, 12, 12, 7, 13}, 0}, {
        "IT'S REALLY SOLID THIS TIME OF YEAR.", {11, 15, 1, 1, 7, 15, 10, 7, 
         13}, 0}, {
        "NO I READ IT ON THE MESSAGE.", {7, 11, 15, 11, 10, 4, 7, 13}, 0}, {
        "WELL SURE..", {12, 12, 13, 13}, 0}, {
        "GIVE MY BLESSING TO THE GIRL.", {15, 12, 12, 10, 4, 7, 13}, 0}, {
        "I FEEL ALL RIGHT TOO.", {11, 15, 7, 7, 7, 13}, 0}, {
        "PROBABLY HE MEANS NO HARM.", {12, 11, 15, 7, 7, 13}, 0}, {
        "SOMEDAY YOU'LL HAVE A SON JUST LIKE YOU JEREMIAH.", {12, 11, 15, 12, 
         12, 12, 2, 10, 11, 12, 13}, 0}, {
        "THESE ARE HIS PEAK HOURS.", {12, 15, 11, 7, 7, 13}, 0}, {
        "QUITE.", {12, 13}, 0}, {"GOOD THING.", {1, 7, 13}, 0}, {
        "HE KNEW WHERE HER ROOM WAS.", {11, 15, 12, 12, 12, 12, 13}, 1}, {
        "JOANNA GO FUCK YOURSELF!", {12, 12, 12, 12, 13}, 0}, {
        "NUMBNESS.", {7, 13}, 0}, {"NO I...", {7, 7, 13, 13}, 0}, {
        "I DO IT 'CAUSE IT WORKS-...", {11, 15, 11, 15, 11, 15, 13, 13}, 0}, {
        "JIM JONES Y'KNOW.", {12, 12, 12, 12, 13}, 0}, {
        "THERE'S NOTHING TO UNDERSTAND.", {7, 12, 10, 12, 13}, 0}, {
        "WHY IT DOES ME GOOD JUST TO SEE HIM SIT THERE ALL SOLEMN AND GO \
POKIN' IN HIS BAG LIKE HE'S GONNA CURE ME WHICH HE DID OF COURSE.", {2, 11, 
         15, 2, 1, 2, 10, 15, 12, 7, 7, 7, 1, 3, 7, 7, 13, 10, 11, 7, 10, 11, 
         15, 12, 12, 12, 12, 4, 11, 15, 10, 12, 13}, 1}, {
        "YOU KNOW THAT SOMETIMES IT'S HARD TO UNDERSTAND GOD'S GREAT PLAN.", {
         11, 15, 4, 2, 11, 15, 1, 10, 12, 12, 1, 7, 13}, 0}, {
        "HEY INSPECTOR I DON'T INTEND TO TAKE THE RAP FOR THIS.", {7, 7, 11, 
         15, 2, 15, 10, 15, 4, 7, 10, 7, 13}, 0}, {
        "YOU UNDERSTAND HOW I FEEL.", {11, 15, 7, 11, 15, 13}, 1}, {
        "HE DOES A LITTLE SPOT WHERE THE BUTTER HAD BEEN.", {11, 15, 4, 12, 
         12, 15, 4, 7, 15, 7, 13}, 1}, {
        "I CAN'T BELIEVE IT'S ALREADY STARTING TO GET DARK SO EARLY.", {11, 
         12, 2, 12, 12, 12, 12, 10, 15, 1, 7, 7, 13}, 0}, {
        "THERE'S NO FIRST ACT.", {7, 7, 12, 12, 13}, 0}, {
        "GOD PARDON SIN WAS THOU WITH ROSALINE!", {7, 7, 7, 15, 12, 10, 12, 
         13}, 0}, {"UNDERSTAND THAT.", {12, 4, 13}, 0}, {
        "LOOK DIFFERENT THAN YOU SOUNDED ON THE PHONE.", {8, 1, 10, 11, 15, 
         10, 4, 7, 13}, 0}, {
        "GEORGE WORK WITH ME I ALWAYS GET A LAUGH WITH THAT ONE.", {12, 15, 
         10, 7, 11, 15, 15, 4, 7, 10, 4, 8, 13}, 0}, {
        "I CAN'T DO THIS.", {11, 12, 2, 12, 12, 13}, 0}, {
        "ONLY BY A DIRECTOR OF THE FIRM.", {2, 10, 4, 7, 10, 4, 7, 13}, 0}, {
        "RICK'S WOULDN'T BE RICK'S WITHOUT THEM.", {12, 12, 2, 15, 12, 6, 12, 
         12, 13}, 0}, {
        "RICK'S GOT AN IMPORTANT ANNOUNCEMENT TO MAKE.", {12, 12, 4, 1, 7, 10,
          15, 13}, 0}, {
        "I SHOULD GO YOU ARE THE BOY ...", {11, 15, 15, 11, 15, 4, 7, 13}, 
         0}, {"THEY COULD CLEAN AROUND THE ARRANGEMENT.", {12, 12, 12, 10, 4, 
         7, 13}, 0}, {
        "REMEMBER LIKE I SAY I FOUND YOU IN THE ROAD..", {15, 10, 11, 15, 11, 
         15, 11, 10, 4, 7, 13, 13}, 0}, {
        "BUT LOVE ISN'T THE OPERATIVE WORD HERE PEACE IS!", {12, 12, 15, 2, 4,
          7, 7, 2, 15, 15, 13}, 0}, {
        "IT'S A PERSONAL THING.", {11, 15, 4, 1, 7, 13}, 0}, {
        "TEN'S STANDARD.", {8, 7, 13}, 0}, {
        "AND DO NOT TRY TO UNDERSTAND THEM.", {3, 12, 12, 12, 10, 12, 12, 13},
          0}, {"IT'S NO TROUBLE.", {11, 15, 7, 7, 13}, 0}, {
        "A 'QUICK FIX'...", {4, 13, 1, 7, 13, 13}, 0}, {
        "GOOD NIGHT!", {1, 7, 13}, 0}, {
        "THEN GO A LITTLE FORWARD IN TIME.", {2, 7, 4, 1, 2, 10, 7, 13}, 0}, {
        "DAMN STRAIGHT!", {1, 7, 13}, 0}, {
        "HE'S DOING VERY WELL.", {11, 15, 15, 2, 2, 13}, 0}, {
        "EXCEPT BACK TO NOWHERESVILLE.", {10, 2, 10, 12, 13}, 1}, {
        "I'M GOING TO BOW OUT ON YOU.", {11, 15, 12, 10, 12, 12, 12, 11, 13}, 
         0}, {"-- SIT DOWN.", {13, 7, 7, 13}, 0}, {
        "COLE DRAGS DEBBIE INTO ONE OF THE THEATERS.", {12, 15, 12, 12, 8, 10,
          4, 7, 13}, 0}, {
        "THERE IS ONLY ONE BED.", {15, 15, 12, 8, 7, 13}, 0}, {
        "DON'T JERK ME AROUND.", {7, 2, 12, 12, 12, 13}, 0}, {
        "YOU REMEMBER IN SCHOOL WE TALKED ABOUT WORKING TOGETHER.", {11, 15, 
         10, 12, 12, 15, 10, 15, 2, 13}, 0}, {
        "YOU SAID AS LONG AS I DON'T ACT LIKE A FUCKIN' NUT IMPLYING THAT \
I'VE BEEN ACTING LIKE A FUCKIN' NUT.", {11, 15, 1, 7, 10, 11, 15, 2, 12, 12, 
         12, 12, 12, 12, 4, 11, 15, 12, 12, 10, 4, 7, 13, 12, 13}, 0}, {
        "SO HAVE DINNER WITH ME TONIGHT.", {12, 12, 12, 10, 12, 12, 13}, 0}, {
        "MAYBE I BETTER ASK AROUND SEE WHAT YOUR PALS THINK.", {2, 11, 15, 12,
          10, 15, 4, 1, 7, 7, 13}, 1}, {
        "QUIT ACTING ALL SQUEEZED OUT.", {12, 12, 7, 15, 12, 13}, 0}, {
        "WE'LL HAVE JUST ONE DRINK THEN WE'LL GO.", {12, 12, 12, 2, 8, 7, 2, 
         15, 12, 12, 13}, 0}, {
        "YOU AND EVERYBODY..", {11, 3, 7, 13, 13}, 0}, {
        "JUST NOT IN TIME FOR....", {2, 2, 10, 12, 10, 13}, 0}, {
        "CARLOS.", {12, 13}, 0}, {"THIS IS ADAM.", {12, 15, 12, 13}, 0}, {
        "I KNEW WHEN YOU CAME LOOKING FOR THE CHEMICALS.", {11, 15, 2, 11, 15,
          15, 10, 4, 7, 13}, 1}, {"MILLER COME IN...", {12, 12, 10, 13}, 0}, {
        "WHEN HE WAS KILLED.", {2, 11, 15, 15, 13}, 1}, {
        "WE GET MORE ACCIDENTS MORE ROBBERIES MORE RAPES MORE HOMICIDES MORE \
OF EVERYTHING WHEN THERE'S A FULL MOON.", {12, 15, 1, 7, 1, 7, 1, 7, 1, 7, 1, 
         10, 12, 2, 7, 15, 4, 1, 7, 13}, 1}, {
        "YOU SHOULD STICKAROUND SOMETIMES.", {11, 15, 15, 2, 13}, 0}, {
        "FOR ALL THOSE VACATION DAYS YOU GOT COMING.", {10, 7, 4, 12, 12, 11, 
         15, 15, 13}, 0}, {
        "I KNEW HOW PLANES FLEW BUT I WAS STILL A LITTLE NERVOUS.", {11, 15, 
         12, 12, 15, 12, 12, 12, 12, 12, 12, 12, 13}, 1}, {
        "SHE'S BEEN PREPARING ALL MORNING.", {12, 12, 12, 7, 7, 13}, 0}, {
        "I AM SURE THAT YOU ARE AWARE OF THE HORRIBLE ALLEGATIONS AGAINST JIM \
CUNNINGHAM.", {11, 15, 1, 4, 11, 15, 1, 10, 4, 1, 7, 10, 12, 12, 13}, 0}, {
        "HONOUR AND PROTECT ALL BLACKSMITHS.", {12, 3, 12, 7, 7, 13}, 0}, {
        "THEY'VE GOT A GATLING!", {12, 12, 12, 12, 12, 13}, 0}, {
        "WE MET ONCE OR TWICE.", {12, 7, 2, 7, 2, 13}, 0}, {
        "I'LL NEVER REACH THE HOUSE.", {11, 15, 2, 15, 4, 12, 13}, 0}, {
        "MUSIC!", {7, 13}, 0}, {"VECCHIO.", {12, 13}, 0}, {
        "NO WE GOT PRESSURE FROM CALIFORNIA STATE.", {4, 12, 12, 12, 12, 12, 
         12, 13}, 0}, {"I SAW HIM ON T.V.", {11, 15, 12, 10, 12}, 0}, {
        "THIS IS AN ISOLATED INCIDENT COUNSELOR UNLESS YOU CAN PROVE \
OTHERWISE.", {12, 15, 4, 1, 1, 7, 10, 11, 15, 15, 2, 13}, 0}, {
        "AFTER ALL I GOT STUCK WITH A RAILWAY TICKET.", {10, 7, 11, 15, 1, 10,
          4, 7, 7, 13}, 0}, {"I SMASHED MY CAB.", {11, 15, 12, 12, 13}, 0}, {
        "THAT'S WHAT WE CALL IN THE TRADE AUDITION FREE-FOR- ALLS AND MOST OF \
IT SUCKS.", {4, 15, 4, 12, 12, 10, 4, 7, 7, 7, 13, 7, 3, 1, 10, 11, 15, 13}, 
         1}, {"I'M ALSO GOOD ENOUGH TO GO PRO.", {11, 15, 2, 1, 7, 10, 12, 6, 
         13}, 0}, {
        "SHE'S STRUNG OUT NOW; YOU WON'T FIND HER.", {12, 12, 12, 2, 13, 11, 
         15, 2, 15, 7, 13}, 0}, {
        "COME BACK AND HAVE A BEER!", {15, 2, 3, 15, 4, 7, 13}, 0}, {
        "I WARNED YOU DIGNAN.", {11, 15, 11, 12, 13}, 0}, {
        "'CAUSE THAT'S THE WAY GUYS ARE -- THEY LAUGH WHEN YA TALK DIRTY.", {
         12, 4, 15, 4, 7, 15, 15, 13, 12, 12, 2, 12, 12, 12, 13}, 1}, {
        "I DOUBT YOU EVEN REMEMBER OUTPOST 1.0 -- YOU'D HAVE TO START \
PRACTICALLY FROM SCRATCH.", {11, 15, 11, 2, 15, 7, 8, 13, 11, 15, 12, 10, 12, 
         12, 12, 7, 13}, 0}, {
        "HE SAYS HE'S GOTTA TALK TO YOU TONIGHT.", {11, 15, 11, 15, 12, 12, 
         12, 10, 11, 2, 13}, 0}, {"PLEASE BABY...", {15, 7, 13}, 0}, {
        "I WAS HOPING TO STOP THERE FOR LUNCH.", {11, 15, 12, 10, 15, 12, 10, 
         12, 13}, 0}, {
        "BUT NOW HE HAS COME TO LEAD HIS NATION.", {12, 12, 11, 15, 12, 10, 
         12, 11, 7, 13}, 0}, {
        "YOU DON'T NEED TO BE NERVOUS AROUND ME THOUGH.", {11, 15, 2, 15, 10, 
         15, 12, 10, 12, 12, 13}, 0}, {
        "WELL SHE DOESN'T COMPLAIN MUCH.", {12, 12, 15, 2, 12, 12, 13}, 0}, {
        "I WISH YOU'D GIVE ME A LITTLE MORE OF A CHANCE.", {11, 15, 11, 15, 
         15, 7, 4, 12, 1, 10, 4, 7, 13}, 0}, {
        "'GUESS WE'LL FIND OUT WHAT ELSE WE HAVE TO TALK ABOUT.", {13, 12, 12,
          12, 12, 12, 4, 2, 15, 12, 10, 12, 12, 13}, 1}, {
        "BUDDY DEEDS.", {7, 7, 13}, 0}, {
        "I KNEW WHO POISONED ME IN THE MAZE.", {11, 15, 11, 15, 12, 10, 4, 7, 
         13}, 1}, {"THAT SURE IS A THOUGHT.", {4, 1, 15, 4, 7, 13}, 0}, {
        "WRITING.", {12, 13}, 0}, {
        "AND THAT'S NOT FUCKING GOOD ENOUGH.", {3, 4, 15, 12, 12, 12, 12, 13},
          0}, {"HE'S COMATOSE.", {11, 15, 12, 13}, 0}, {
        "YOU SAID IT WAS A STRANGE WORLD.", {11, 15, 11, 15, 4, 1, 7, 13}, 
         0}, {"VERY GOOD JOE.", {2, 1, 7, 13}, 0}, {
        "ST. PETERSBURG.", {12}, 0}, {
        "IN OTHER WORDS SCURVY.", {10, 1, 7, 7, 13}, 0}, {
        "BUT MAYBE SOMEDAY.", {12, 12, 12, 13}, 0}, {
        "IF YOU'LL EXCUSE ME JUST A MOMENT -- BARNARD THOMAS MANAGER OF THE \
HOTEL.", {10, 11, 15, 12, 12, 2, 4, 7, 13, 12, 12, 7, 10, 4, 7, 13}, 0}, {
        "I SAW FRANCE AND AFRICA HALF OF SOUTH AMERICA.", {11, 15, 12, 3, 12, 
         12, 10, 12, 12, 13}, 0}, {
        "HE WAS IN ON THE SAME JOB.", {11, 15, 10, 12, 4, 12, 7, 13}, 0}, {
        "YOU'RE THE ONE WHO KEPT SAYING RAM HIM.", {11, 15, 4, 8, 11, 15, 15, 
         12, 12, 13}, 1}, {
        "GET CHECKED IN CLEANED UP...", {15, 12, 10, 12, 7, 13}, 0}, {
        "REPAIRING THE ANTENNA IS A PRETTY DANGEROUS OPERATION.", {15, 4, 7, 
         15, 4, 2, 1, 7, 13}, 0}, {
        "DIRECTED BY LASER.", {15, 10, 7, 13}, 0}, {
        "THE BOURBON.", {4, 7, 13}, 0}, {
        "BE GRATEFUL FOR SMALL MERCIES.", {15, 12, 10, 12, 12, 13}, 0}, {
        "THE GREATEST FIND IN HISTORY..CAN YOU IMAGINE THE IMPLICATIONS.", {4,
          12, 12, 10, 12, 13, 13}, 0}, {
        "MR. HARRIS DOESN'T CHECK OUT UNTIL TOMORROW.", {12, 12, 15, 2, 15, 
         12, 12, 12, 13}, 0}, {
        "SHOW SOME PRIDE HAMILTON.", {15, 12, 12, 12, 13}, 1}, {
        "JUST REACH ON IN.", {2, 15, 12, 10, 13}, 0}, {
        "I KNOW IT MAN.", {11, 15, 11, 7, 13}, 0}, {
        "READ MY LIPS: ZIMMERMANN OR NOTHING.", {15, 7, 7, 13, 12, 7, 7, 13}, 
         0}, {"FIVE SEVEN EIGHT DOLLARS.", {8, 8, 8, 12, 13}, 0}, {
        "YOU SAY SHE WAS BEAT ON.", {11, 15, 12, 12, 7, 10, 13}, 0}, {
        "THE SEMESTER'S ALMOST OVER SO YOU BETTER HURRY.", {4, 7, 12, 10, 12, 
         11, 1, 7, 13}, 0}, {
        "BOBBIE AND PHOEBE ARE THROWING ME A SHOWER.", {12, 3, 12, 15, 15, 7, 
         7, 7, 13}, 1}, {
        "DAD I'M ABOUT TO HAVE A KID OF MY OWN HERE.", {7, 8, 15, 10, 10, 12, 
         12, 12, 10, 12, 12, 2, 13}, 0}, {
        "THEY'VE ONLY JUST BEGUN ...", {12, 12, 12, 2, 15, 13}, 0}, {
        "QUIT ACTING LIKE SOME RETARD OR I'LL CALL YOUR MOTHER AND TELL HER \
WHAT A NAUGHTY LITTLE SHIT YOU'VE BEEN.", {12, 12, 12, 12, 15, 7, 11, 15, 1, 
         1, 7, 3, 7, 7, 4, 4, 12, 12, 12, 11, 15, 12, 13}, 1}, {
        "NEWT TIME THEN CAN WALK RIGHT UP AND KNOCK.", {12, 12, 12, 12, 12, 
         12, 7, 3, 7, 13}, 0}, {
        "MY PLATELETS LOOK GOOD TOO.", {7, 7, 15, 1, 7, 13}, 0}, {
        "WHAT YOU ARE SAYING IS YOU DON'T KNOW WHAT THIS..THING..IS.", {4, 11,
          15, 15, 15, 11, 7, 2, 12, 4, 12, 13, 13}, 1}, {
        "TOO GOD DAMN MUCH HEART.", {2, 12, 12, 12, 7, 13}, 0}, {
        "I SEEM TO HAVE TOUCHED A NERVE.", {11, 15, 10, 12, 15, 4, 7, 13}, 
         0}, {"EVERYTHING ELSE IS CONVERSATION..", {15, 2, 15, 7, 13, 13}, 
         0}, {"WELL SIR...", {12, 7, 13}, 0}, {
        "THERE MUST HAVE BEEN SOMEBODY.", {12, 12, 12, 12, 12, 13}, 0}, {
        "I BOUGHT IT FOR HIM -- ALL THE STUFF HE WAS USING IT WAS IN HIS \
CONTRACT.", {11, 15, 11, 10, 7, 13, 7, 4, 7, 11, 15, 12, 12, 12, 10, 11, 7, 
         13}, 0}, {
        "MIS-TER KRAMER IT'S...  ...ALMOST FOUR NOW.", {12, 12, 12, 13, 13, 2,
          8, 2, 13}, 0}, {
        "I JUST GOT A MESSED UP STOMACH.", {11, 2, 15, 4, 15, 9, 7, 13}, 0}, {
        "BY THE WAY ROGER YOU WERE RIGHT ABOUT YOUR WIFE.", {10, 4, 12, 12, 
         11, 15, 12, 12, 1, 7, 13}, 0}, {
        "I TRUST RICK.", {11, 12, 12, 13}, 0}, {
        "I TOLD YOU ABOUT SAMMY - I DUNNO...", {11, 15, 11, 10, 7, 13, 11, 15,
          13, 13}, 0}, {"MOVING ON.", {15, 9, 13}, 0}, {
        "I DON'T KNOW ANYTHING.", {11, 15, 2, 12, 12, 13}, 0}, {
        "WELL THAT'S GREAT COMING FROM A GLORIFIED GRAVE ROBBER!", {12, 4, 15,
          1, 15, 10, 4, 1, 1, 7, 13}, 0}, {
        "MOMMY'S COMING BABY!", {12, 12, 7, 13}, 0}, {
        "GOOD-BYE ADAM.", {12, 12, 13}, 0}, {
        "YOU'RE A BEAUTIFUL GUY.", {11, 15, 4, 1, 7, 13}, 0}, {
        "THEY *ARE* AGAINST THE LAW.", {7, 14, 15, 14, 10, 4, 7, 13}, 0}, {
        "THAT'S WHY YOU'RE A GAMBLING MAN.", {4, 15, 2, 11, 15, 4, 7, 7, 13}, 
         1}, {"KID GLOVES.", {7, 7, 13}, 0}, {"D.C.", {12}, 0}, {
        "YEAH THEY'RE GOIN' -- THAT'S NATURE..", {2, 7, 7, 7, 13, 13, 4, 15, 
         7, 13, 13}, 0}, {"DIG 'EM UP!", {12, 12, 7, 13}, 0}, {
        "GOT PLENTY TO EAT.", {12, 12, 10, 12, 13}, 0}, {
        "LISTEN GET A HOLD OF OUR AVAILABLE SECURITIES AND HAVE THEM TURNED \
INTO CASH.", {15, 15, 4, 15, 10, 12, 12, 12, 3, 12, 12, 15, 10, 7, 13}, 0}, {
        "GET SHEEP OVER SIDE..", {15, 12, 10, 12, 13, 13}, 0}, {
        "YOU MUST GET TO AMERICA.", {11, 15, 15, 10, 12, 13}, 0}, {
        "BEING A FOREIGNER I WOULD LOVE TO LEARN.", {15, 4, 7, 11, 15, 7, 10, 
         12, 13}, 0}, {
        "I'VE GOT A MEETING TONIGHT.", {11, 15, 12, 12, 12, 12, 13}, 0}, {
        "I'VE GOT FIFTY BUCKS TO THROW AWAY.", {11, 15, 15, 8, 7, 10, 15, 2, 
         13}, 0}, {"ONE THOUSAND FEET.", {8, 12, 12, 13}, 0}, {
        "UNCLE 'TIS A SHAME.", {7, 11, 15, 4, 7, 13}, 0}, {
        "I JUST WANTED -- YOU SET ME UP.", {11, 2, 15, 13, 11, 15, 7, 7, 13}, 
         0}, {"EVEN RESPECTABILITY.", {12, 12, 13}, 0}, {
        "I JUST TURN MY BACK ON THAT KIND OF TALK AND LOOK AWAY.", {11, 2, 15,
          7, 2, 10, 4, 7, 10, 12, 3, 12, 2, 13}, 0}, {
        "I CAN'T EXPLAIN IT NOW.", {11, 12, 2, 15, 11, 2, 13}, 0}, {
        "PATRIS BENEFACTUM ET --  ...IT WAS MALCOLM'S FAVORITE.", {12, 12, 12,
          13, 13, 11, 15, 12, 12, 13}, 0}, {
        "THE IDEA THAT YOU COULD DIE SUDDENLY WITH NO OFFSPRING DISCONCERTING \
LET'S MATE COMMIT YOUR GENES TO PERPETUITY.", {4, 7, 4, 11, 15, 15, 2, 10, 7, 
         12, 12, 12, 12, 12, 1, 7, 10, 12, 13}, 0}, {
        "LESGO LESGO LESGO.", {12, 12, 12, 13}, 0}, {
        "THAT'S ALL I DO WILL.", {4, 15, 7, 11, 15, 15, 13}, 0}, {
        "I'D LIKE TO THINK OUR NEXT SECRETARY OF THE NAVY WOULD BE PREPARED \
FOR ANYTHING MR. HAYES.", {11, 15, 10, 10, 12, 12, 12, 12, 10, 4, 12, 12, 15, 
         12, 10, 12, 12}, 0}, {
        "AND SAY EVERYTHING WENT WONDERFULLY.", {3, 12, 12, 15, 2, 13}, 0}, {
        "BUT YOU DON'T LOOK VERY HAPPY.", {12, 11, 15, 2, 15, 2, 1, 13}, 0}, {
        "YOUR FATHER CAN BE IN NOME ALASKA TOMORROW.", {1, 7, 12, 15, 10, 12, 
         12, 12, 13}, 0}, {
        "SHE SUPERVISED WORKERS REMOVING CORTODIAZAPINE FROM GEL CAPS BY HAND \
AND REPLACING IT WITH POWDERED SUGAR.", {12, 15, 7, 15, 12, 12, 12, 12, 12, 
         12, 3, 12, 12, 10, 12, 7, 13}, 0}, {
        "I'LL CALL TOMORROW..", {11, 15, 1, 12, 13, 13}, 0}, {
        "I WAS ONLY FIVE...", {11, 15, 2, 8, 13}, 0}, {
        "THAT'S WHAT THEY'RE GOING TO ASK YOU.", {4, 15, 4, 12, 12, 12, 10, 
         12, 11, 13}, 1}, {
        "FROM THE FIRST MOMENT I SAW YOU I SAW YOUR BAD QUALITIES AND \
TREMBLED AT YOUR VIOLENCE; BUT I COULD NOT HELP LOVING YOU.", {10, 4, 12, 12, 
         11, 15, 11, 11, 15, 1, 1, 7, 3, 15, 10, 1, 7, 13, 12, 12, 12, 12, 12,
          12, 11, 13}, 0}, {
        "I'LL SEND YOU A POSTCARD.", {11, 15, 15, 11, 4, 7, 13}, 0}, {
        "WE CAN'T LOSE.", {12, 12, 2, 15, 13}, 0}, {
        "HE'S A BLACK GUY.", {11, 15, 4, 1, 7, 13}, 0}, {
        "YOU AREN'T TALKING ABOUT MONEY THEIR BEADY LITTLE EYES GO DEAD.", {
         11, 15, 2, 15, 12, 12, 12, 12, 12, 12, 12, 12, 13}, 0}, {
        "NOT IF YOU'RE OVER SIXTEEN.", {12, 10, 11, 15, 10, 8, 13}, 0}, {
        "YOU CAN'T CHANGE IT.", {11, 12, 2, 15, 11, 13}, 0}, {
        "SS'KYA'TA'.", {7, 13, 7, 13, 13}, 0}, {
        "YOUR MOTHER'S.", {1, 7, 13}, 0}, {
        "WE STAY OFF HARD LIQUOR CIGARETTES..", {12, 12, 12, 1, 7, 7, 13, 13},
          0}, {"I WANT TO SHOW YOU SOMETHING.", {11, 15, 10, 15, 11, 7, 13}, 
         1}, {"BRAD THE BARTENDER.", {12, 4, 7, 13}, 0}, {
        "LET'S SEE...", {7, 15, 13}, 0}, {
        "I AM GOING TO BE FAMOUS.", {11, 15, 1, 10, 15, 12, 13}, 0}, {
        "JESUS. ... INTERVIEW EVERY EMPLOYEE SUPPORT STAFF ASSOCIATES \
PARTNERS.", {12, 13, 13}, 0}, {
        "NOT EVEN WHEN I'S DRINKIN'.", {12, 12, 2, 11, 15, 12, 13}, 1}, {
        "EITHER BECAUSE HE'S SO GOOD AT WHAT HE DOES HE DOESN'T THINK HE \
NEEDS IT OR HE'S SO INSECURE HE CAN'T ADMIT IT.", {12, 12, 11, 15, 2, 1, 10, 
         4, 11, 15, 11, 15, 2, 1, 11, 15, 11, 7, 11, 15, 12, 12, 11, 12, 2, 
         15, 11, 13}, 1}, {
        "HE'S SATAN'S LAP DOG OR SOMETHING.", {11, 15, 12, 7, 7, 7, 12, 13}, 
         0}, {"I JUST WANTED SOME MAKE-UP.", {11, 2, 15, 12, 7, 13}, 0}, {
        "IT'S BROKEN.", {11, 15, 12, 13}, 0}, {
        "I'M TELLING MOM.", {11, 15, 15, 7, 13}, 0}, {
        "FUCKING DUMP.", {15, 7, 13}, 0}, {
        "TOM I'M THIS CLOSE TO COMING WITH YOU..", {12, 11, 15, 7, 15, 10, 15,
          10, 11, 13, 13}, 0}, {
        "I GOT MY MIND MADE UP AND I AIN'T GONNA BE MOVED ON THIS.", {11, 15, 
         12, 12, 12, 7, 3, 11, 15, 2, 12, 12, 15, 15, 10, 12, 13}, 0}, {
        "I DON'T THINK I'LL BE HAVING SEX EVER AGAIN.", {11, 15, 2, 12, 11, 
         15, 15, 12, 12, 12, 2, 13}, 0}, {
        "I *HELPED* YOU NOT TO THINK ABOUT WALLY.", {11, 14, 15, 14, 11, 2, 
         10, 12, 12, 12, 13}, 0}, {"JACK!", {7, 13}, 0}, {
        "SPIKE!", {15, 13}, 0}, {
        "THAT'S WHY YOU GOT SCARED WHEN MRS. CHRISTIAN HIRED ME.", {4, 15, 2, 
         11, 15, 1, 2, 12, 12, 15, 7, 13}, 1}, {
        "I'LL BE BACK NEXT THURSDAY WE'LL TALK THE WHOLE THING OVER THEN.", {
         11, 15, 15, 12, 12, 12, 12, 12, 12, 4, 1, 7, 10, 2, 13}, 1}, {
        "AND YOU WERE HUNGRY REMEMBER.", {3, 11, 15, 1, 7, 13}, 0}, {
        "GROUND DEFENSE.", {7, 7, 13}, 0}, {
        "IT COULD SAVE THE VOYAGE.", {11, 15, 15, 4, 7, 13}, 0}, {
        "IF SHE GETS OUT LEGALLY THEY CAN'T COME AFTER HER.", {10, 12, 15, 12,
          12, 12, 12, 2, 15, 10, 7, 13}, 0}, {
        "THERE WASN'T ANY PLANE.", {15, 12, 2, 12, 7, 13}, 0}, {
        "I'M TRYING TO PUT OUT A NEWSPAPER HERE.", {11, 15, 15, 10, 12, 12, 
         12, 12, 2, 13}, 0}, {
        "IT'S HARD TO BELIEVE...", {11, 15, 1, 10, 15, 13}, 0}, {
        "EXTRACT OF PINEAL!", {15, 10, 7, 13}, 0}, {
        "HEY HEY HEY.", {7, 7, 7, 13}, 0}, {
        "SHE SLAMMED EVERY DOOR ON HER WAY DOWNSTAIRS -- EXCEPT THAT ONE.", {
         12, 15, 12, 12, 12, 12, 12, 12, 13, 12, 4, 8, 13}, 0}, {
        "YOU DON'T HAVE ANY MORE VACATIONS TO SELL, ON ANTHRAX ISLAND.", {11, 
         15, 2, 12, 12, 1, 7, 10, 15, 13, 10, 12, 12, 13}, 0}, {
        "AS SOON AS YOU GET BACK WE'LL TALK.", {1, 12, 12, 11, 15, 2, 1, 7, 
         12, 13}, 0}, {
        "YOU USED ME, MR. CRAWFORD.", {11, 15, 7, 13, 12, 12, 13}, 0}, {
        "LET THEM TALK.", {15, 12, 12, 13}, 0}, {
        "I CAN'T BELIEVE SHE'S WITH THAT GUY NOW!", {11, 12, 2, 12, 12, 10, 4,
          7, 2, 13}, 0}, {"MY MORE THAN SISTER.", {12, 1, 10, 7, 13}, 0}, {
        "BRAD AND I ARE WATCHING THE HOUSE.", {12, 3, 11, 15, 15, 4, 12, 13}, 
         0}, {"YOU WERE RIGHT MR. DICKSON!", {11, 15, 7, 12, 12, 13}, 0}, {
        "I KNEW THEIR FATHERS AND MOTHERS BEFORE THEM.", {11, 15, 12, 12, 3, 
         12, 10, 12, 13}, 0}, {
        "YOU WOULD TAKE A PAIN \[CapitalIAcute]N THE ARSE FULL STOP.", {11, 
         15, 7, 4, 7, 7, 4, 7, 1, 7, 13}, 0}, {
        "IF YOU'RE GOING TO TALK NONSENSE I DON'T WANT TO TALK TO YOU AT \
ALL.", {10, 11, 15, 1, 10, 12, 7, 11, 15, 2, 1, 10, 12, 10, 11, 10, 7, 13}, 
         0}, {"I BETTER GO I'LL TALK TO YOU LATER.", {11, 15, 7, 11, 15, 12, 
         10, 11, 2, 13}, 0}, {
        "THEN WE SHALL STATE ANOTHER TIME AND ANOTHER PLACE.", {2, 12, 12, 12,
          12, 12, 3, 12, 12, 13}, 0}, {
        "HE *LOVED* IT!", {11, 14, 15, 14, 11, 13}, 0}, {
        "SEE WHAT YOU DON'T KNOW IS YOU'RE ALREADY IN THE LAST TWO MINUTES OF \
YOUR LIFE.", {15, 4, 11, 15, 2, 12, 15, 11, 15, 12, 10, 4, 7, 8, 7, 10, 1, 7, 
         13}, 1}, {
        "DAMN I HATE THIS JOHNNY I REALLY DO.", {1, 11, 15, 7, 7, 11, 15, 7, 
         13}, 0}, {"BEAUTIFUL MORNING.", {1, 7, 13}, 0}, {
        "SO WHY DON'T YOU TAKE A DEEP BREATH JAKE AND I'LL COUNT TO TEN.", {
         12, 2, 12, 2, 11, 15, 4, 1, 7, 7, 3, 11, 15, 12, 10, 8, 13}, 1}, {
        "NO NOT GRUNEMANN.", {4, 12, 12, 13}, 0}, {
        "IT WAS AT LEAST AS GOOD AS THE SKY.", {11, 15, 10, 12, 12, 12, 12, 4,
          7, 13}, 0}, {
        "I JUST HAD A PHONE CALL.", {11, 2, 15, 4, 7, 7, 13}, 0}, {
        "YOU HAVE TO DRESS FOR SUCCESS.", {11, 15, 10, 12, 10, 7, 13}, 0}, {
        "SCARY MOVIES ARE GREAT FOREPLAY.", {1, 7, 15, 1, 7, 13}, 0}, {
        "DIGNAN THOSE AREN'T RUNNING SHOES.", {12, 4, 15, 2, 15, 7, 13}, 0}, {
        "HE AND HIS WIFE BOTH SAID SHE HAD A FINE MORAL CHARACTER AND WAS \
WONDERFUL WITH CHILDREN.", {11, 3, 11, 7, 4, 15, 12, 12, 12, 12, 12, 12, 3, 
         12, 12, 10, 7, 13}, 0}, {
        "OKAY I PROMISE..", {1, 11, 15, 13, 13}, 0}, {
        "I DIDN'T MAKE IT THIS FAR BY ATTRACTING A LOT OF ATTENTION.", {11, 
         15, 2, 15, 11, 7, 2, 10, 15, 4, 7, 10, 7, 13}, 0}, {
        "WE SHOULDA BEEN THERE TO BACK YOU UP.", {12, 12, 12, 12, 10, 2, 11, 
         9, 13}, 0}, {
        "SOMEONE WAS AT THAT WINDOW.", {7, 15, 10, 4, 7, 13}, 0}, {
        "YOU'RE EVEN SUSPICIOUS OF HIM.", {11, 15, 2, 1, 10, 12, 13}, 0}, {
        "WE SHOULD KNOW SOMETHING FIRST THING IN THE MORNING.", {12, 15, 15, 
         12, 12, 12, 10, 4, 7, 13}, 0}, {
        "OKAY DOWN BOY.", {1, 7, 7, 13}, 0}, {
        "BIRD DOG TO SCARECROW.", {7, 7, 10, 12, 13}, 0}, {
        "WHICH ANYONE COULDA TAKEN OUT OF MY GEAR ON THE CHOPPER.", {4, 12, 
         12, 12, 12, 10, 12, 12, 10, 4, 7, 13}, 1}, {
        "SIMPSON.", {12, 13}, 0}, {
        "WHEN THEY WATCHED AT ALL.", {2, 12, 15, 10, 7, 13}, 1}, {
        "I SAW IT IN THE EYE.", {11, 15, 11, 10, 4, 7, 13}, 0}, {
        "I'M JUST PROCRASTINATING.", {11, 15, 2, 15, 13}, 0}, {
        "YOU WAKE UP EVERY NIGHT SHEETS SOAKING THE SAME NIGHTMARE OVER AND \
OVER..", {11, 15, 9, 12, 12, 12, 12, 4, 1, 7, 10, 3, 10, 13, 13}, 0}, {
        "THIRTY MINUTES OR LESS.", {8, 7, 7, 7, 13}, 0}, {
        "SOME SHADE OF GREY MY EYES DON'T SEE.", {12, 12, 10, 12, 12, 12, 12, 
         2, 15, 13}, 0}, {"IT'S OKAY HONEY.", {11, 15, 1, 7, 13}, 0}, {
        "BUT I'LL BE IN TOMORROW NIGHT WITH A BREATHTAKING BLONDE AND IT WILL \
MAKE ME VERY HAPPY IF SHE LOSES.", {12, 11, 15, 15, 10, 12, 12, 10, 4, 1, 7, 
         3, 11, 15, 15, 12, 12, 12, 10, 12, 15, 13}, 0}, {
        "I APPRECIATE YOUR HONESTY GEORGE.", {11, 15, 1, 7, 7, 13}, 0}, {
        "IT WAS SOMEONE ELSE.", {11, 15, 12, 12, 13}, 0}, {
        "YOU WORTHLESS BASTARD.", {11, 1, 7, 13}, 0}, {
        "I LEAVE YOU ALONE FOR THREE MINUTES AND YOU START WAVING THAT \
GODDAMN MARLIN SPIKE AROUND -- YELLING ABOUT REPTILES!", {11, 15, 11, 2, 10, 
         8, 7, 3, 11, 12, 12, 4, 12, 12, 12, 12, 13, 15, 12, 12, 13}, 0}, {
        "DELIGHTED I'M SURE.", {1, 11, 15, 7, 13}, 0}, {
        "I ALSO PLACE LAS CHOCOLATES ON THE PILLOW.", {11, 2, 15, 12, 12, 12, 
         4, 7, 13}, 0}, {"SO IT'S MR CLEAN.", {12, 12, 7, 12, 13}, 0}, {
        "YOU PEOPLE ARE CRAZY!", {11, 15, 15, 7, 13}, 0}, {
        "HE COULD HAVE KILLED ME A DOZEN TIMES.", {11, 15, 12, 12, 12, 12, 12,
          12, 13}, 0}, {"AHHHHHH.", {2, 13}, 0}, {"TUMESCENT!", {1, 13}, 0}, {
        "THE WOUND IS BLEEDING!", {4, 12, 15, 12, 13}, 0}, {
        "ONE-SEVEN-FOUR-NINE-FIVE NATOMA.", {1, 12, 13}, 0}, {
        "CHECK YOUR PARENTS' BLOOD TYPES.", {15, 1, 7, 7, 7, 13}, 0}, {
        "FELLOW...", {12, 13, 13}, 0}, {
        "LOOK YOU'RE A PLAYER...", {15, 11, 15, 4, 7, 13}, 0}, {
        "I'M NOT USED TO SUCH KINDNESS.", {11, 15, 12, 12, 10, 12, 12, 13}, 
         0}, {"THEN I SIT BACK AND I THINK I MEAN WHO'S TO SAY I'M NOT A DUMB \
BITCH.", {2, 11, 7, 2, 3, 11, 15, 11, 15, 11, 15, 10, 12, 11, 15, 2, 4, 1, 7, 
         13}, 1}, {"THANK YOU MRS. PHILLIPS.", {15, 11, 12, 12, 13}, 0}, {
        "WHEN YA DON'T DO WHAT YA ARE TOLD IT MAKES ME LOOK BAD KID. \
...FINE.", {2, 12, 12, 2, 12, 4, 12, 15, 7, 11, 15, 12, 12, 12, 7, 13, 13, 7, 
         13}, 1}, {"IT IS A LIVING THING.", {11, 15, 4, 15, 7, 13}, 0}, {
        "HUMID OR DRY.", {1, 7, 7, 13}, 0}, {
        "SOMEBODY'LL SEE.", {7, 7, 15, 13}, 0}, {"MR...", {12, 13, 13}, 0}, {
        "WE APPRECIATE IT.", {12, 12, 12, 13}, 0}, {
        "QUIET AND DRAMATIC.", {1, 3, 7, 13}, 0}, {
        "IF YOU FEEL DIFFERENTLY BOB YOU SHOULD SAY SO WHEN YOU'RE CALLED TO \
THE STAND.", {10, 11, 15, 2, 2, 11, 15, 15, 12, 2, 11, 15, 15, 10, 4, 7, 13}, 
         1}, {"THAT'S RIGHT HOMER.", {4, 15, 12, 12, 13}, 0}, {
        "I HAVE NO CHOICE.", {11, 15, 7, 7, 13}, 0}, {
        "TRY THE PAY PHONE.", {7, 4, 7, 7, 13}, 0}, {
        "BE QUIET YOU FAT FOOL.", {15, 12, 11, 15, 7, 13}, 0}, {
        "HIS ARMY STARVES.", {11, 7, 15, 13}, 0}, {
        "IT GOT ME OUTTA WOODSBORO.", {11, 15, 12, 12, 12, 13}, 0}, {
        "COME ON WILL.", {15, 12, 15, 13}, 0}, {
        "THE GENERAL IS HERE.", {4, 12, 15, 2, 13}, 0}, {
        "IT'S NOT THAT -- IT'S ONLY TEMPORARY.", {11, 15, 12, 4, 13, 11, 15, 
         12, 12, 13}, 0}, {"SHE'S A JERK.", {12, 4, 7, 13}, 0}, {
        "YOUR ORDERS MIGHT BE DIFFERENT FROM MINE.", {1, 7, 15, 15, 1, 10, 7, 
         13}, 0}, {"I HAVE LOVE ALL OVER.", {11, 15, 7, 7, 10, 13}, 0}, {
        "YEAH GAL I BEEN HERE BEFORE.", {2, 7, 11, 15, 2, 10, 13}, 0}, {
        "SOMEDAY SCOTT THIS WILL ALL BE YOURS.", {12, 12, 12, 15, 7, 15, 12, 
         13}, 0}, {
        "PROBLEM IS DON'T WANT TO HOLD A CONVENTIONAL SUB OFF-SHORE FOR \
TARGET PRACTICE.", {7, 15, 12, 2, 12, 10, 15, 4, 1, 7, 7, 10, 7, 7, 13}, 0}, {
        "I DON'T EVEN KNOW WHAT THIS IS.", {11, 15, 2, 12, 12, 4, 12, 15, 13},
          1}, {"BUT LOOKED LIKE A BUNCH OF THOSE BIG BOYS CHEWIN' EACH \
OTHER'S GONADS OFF.", {12, 12, 10, 4, 7, 10, 4, 12, 7, 12, 12, 12, 6, 12, 12, 
         13}, 0}, {
        "THEY WERE SWEETIES UNTIL A MONTH AGO.", {12, 15, 7, 10, 4, 7, 7, 13},
          0}, {"THE DOGS HAVE A SCENT.", {4, 7, 15, 4, 7, 13}, 0}, {
        "WELL NO NOT REALLY.", {12, 7, 12, 12, 13}, 0}, {
        "HE WAS THERE IN THE STORM...", {11, 15, 12, 10, 4, 7, 13}, 0}, {
        "THAT'S ALL YOU CARED ABOUT.", {4, 15, 7, 11, 15, 12, 13}, 0}, {
        "REMEMBER: DIGNAN I -- HAVE THE CAR RUNNING AT THE NORTH- WEST \
CHECKPOINT.", {7, 13, 12, 12, 13, 12, 4, 7, 15, 10, 4, 12, 13, 7, 7, 13}, 
         0}, {"NO PICTURES-- TWO YEARS.", {7, 7, 13, 8, 7, 13}, 0}, {
        "IT MIGHT BE A GOOD IDEA FOR YOU TO DISAPPEAR FROM CASABLANCA FOR A \
WHILE.", {11, 15, 15, 4, 1, 7, 10, 11, 10, 12, 12, 12, 10, 4, 7, 13}, 0}, {
        "YOU'RE READY FOR THE QUIZ.", {11, 15, 1, 10, 4, 7, 13}, 0}, {
        "MAKE MINE A BLOODY MARY.", {15, 12, 4, 12, 12, 13}, 0}, {
        "S'NOT BAD S'VERY GOOD BUT..", {12, 12, 12, 12, 12, 13, 13}, 0}, {
        "I MEAN I'M...", {11, 15, 11, 15, 13}, 0}, {
        "IF ARLYN PAGE IS LIVING WITH TOM GRUNEMANN -- WHAT THE HELL DO YOU \
THINK'S THE MATTER.", {10, 12, 12, 15, 15, 10, 12, 12, 13, 4, 4, 7, 7, 11, 15,
          4, 7, 13}, 1}, {"I FROM MINE.", {11, 15, 7, 13}, 0}, {
        "BUT YOU CAN'T PROVE IT!", {12, 11, 12, 2, 15, 11, 13}, 0}, {
        "HE IS COMING TO MEET YOU.", {11, 15, 12, 10, 15, 11, 13}, 0}, {
        "WE'RE FUCKED I KNOW -- LET'S GO TALK TO BILL..", {12, 12, 12, 11, 15,
          13, 12, 12, 12, 10, 12, 13, 13}, 0}, {
        "IT WON'T EVER BE OVER LIKE THIS.", {11, 15, 2, 2, 15, 10, 12, 12, 
         13}, 0}, {"WIDOW'S BENEFITS.", {7, 7, 13}, 0}, {
        "CHARLEY MY HUSBAND AND I ARE ...DIVORCED AND KIM THAT'S OUR DAUGHTER \
IS ABOUT BILLY'S AGE AND THE CHILDREN PLAY TOGETHER A LOT.", {12, 12, 12, 3, 
         11, 15, 13}, 0}, {
        "THEN I'LL MAKE THIS EASY FOR YOU.", {2, 11, 15, 15, 7, 1, 10, 11, 
         13}, 0}, {
        "BARNES TOOK A BULLET RIGHT THERE.", {12, 15, 4, 12, 12, 12, 13}, 
         0}, {"DON'T GIVE ME THAT BULLSHIT.", {7, 2, 15, 12, 4, 12, 13}, 0}, {
        "WE SHOULD LET HIM REST.", {12, 15, 15, 12, 12, 13}, 0}, {
        "I'M TAKING YOU BACK.", {11, 15, 15, 11, 2, 13}, 0}, {
        "I HAPPEN TO KNOW THAT HE GETS TEN PERCENT.", {11, 15, 10, 12, 4, 11, 
         15, 8, 7, 13}, 0}, {
        "THE WOMAN I GOT IT FROM IS NEVER GOING TO GIVE IT A SECOND \
THOUGHT.", {4, 7, 11, 15, 11, 10, 15, 12, 12, 10, 15, 11, 4, 1, 7, 13}, 0}, {
        "YEAH WE GOT THAT PART.", {12, 12, 12, 4, 12, 13}, 0}, {
        "LAY OFF OF THAT STUFF SON.", {7, 7, 10, 4, 7, 7, 13}, 0}, {
        "NO I THINK A WHISKEY.", {7, 11, 15, 4, 7, 13}, 0}, {
        "THE RANCHER WAS SO ANGRY HE SENT ME TO LIVE AT THE LUTHERAN \
ORPHANAGE IN BOZEMAN.", {4, 7, 15, 12, 12, 11, 1, 7, 10, 15, 10, 4, 1, 7, 10, 
         12, 13}, 0}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Question", "Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question"}, 
    "LogProbabilities" -> CompressedData["
1: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
/1ZnUfF/KMuRTg==
     "], "CountMatrix" -> {{414, 86, 0}, {205, 295, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwV02dwDwYAxuG/xIy9RwSx92ztTSTaWrE3CUpoaKxra1M1Y52ajRa1Wiv2
3vtw1tVedUa568QpwuPD8/v0fn3DYwZHx6cKBAJJ8pwXvOQ1b3hLCu8+jIIC
gVQEEUwa0pKO9GQghIxkIjNZyEo2spODnOQiN3nIS34KEEpBwihEYYoQTlGK
UZwSlKQUpSlDOcpTgYpUojJVqUFNalGbOtSlHvVpQEMa0ZgmNCWCZkQSRXM+
oQUtaUVr2hBNW9rTgY50ojNd6Eo3utOT3sQQSx/68Tn9GUAcAxlEPF+SwFCG
MZyRjGI0YxjLOMYzgUl8y2SmMJVpTGcGM0lkFrOZw1zmMZ/vWcBCFrGYJSwl
iWX8yHJWsJKfWcVq1rKO9WxgI5vYTDJb2Mo2trODnexiN3vYyz72c4CDHOIw
RzjGCU5yitOc4RznucBFrnCNG9zkFre5w13ucZ8HPOQRT/iDpzzjT/7ib/7h
X/7jOS95xf+85g1vSeEdgWD/IYhgUpOWdKQnAyFkJBNZyEo2spODnOQmD/nI
TygFCaMQhSlCOEUpRnFKUJJSlKYMZSlPRSpRmSpUpRof8THVqUFNalGbOtSl
HvVpQEMa0ZgmNCWCZkQSRXM+5TNa0JJWtCaatrSjAx3pRGe60Z0e9KQXvYkh
lj70pR8DiGMgg/iCeAYzhASGMozhjGAkX/E13zCK0YxhLOOYwEQm8x1TmcZ0
ZjCTRGYxmznMYz4LWMgiFrOEpfxAEsv4ieWsYCWrWM0a1rKOX/iV9WxgE8ls
ZRvb2cEu9rCXfeznAAc5xGGOcJRjHOcEpzjNGc5yjvNc4CKXuMwVfuMq17jO
DW5yi9vc4S73uM/vPOAhj3jMe+HCyyU=
       "], CompressedData["
1:eJwNxr1KAmAAAMCvH8c2oXBrLRqi8iGqpUiHghAhcilzEbVJNGoOaRNyCIKC
kBZpDnEwEAqN1hBaagxt6oaDm09nt48nQghJRjLmj+nJEOZYYJkVVlkjzgab
7LBPigOOyHJCngJFSpxS4ZwadRrccsc9z7Tp8kKPV97oM+CdDz4Z8sU3P/wy
IjIVwgxRZomxyBLrbJFglz0OyZCjQJkqZ1xwSY0rrrnhgSaPtHiiQ5cefYb8
Ay8kMdA=
       "], {}}, {CompressedData["
1:eJwt0TlLFgAAgOFPJUjMI5wUNb4iRSxcvEhRosgECZLowCOxEKXUsEtrKBHU
ygwikiKk+qJBoyKkUFAhl7TTEgkDD6olE5GioalnaHj+wPsGa5rKGsMCgcBb
wokgkijWEU0MscSRSBLJpBBkI6mkkU4GWeSQSx4FFFJEMbspoZQ9lLGfQ5RT
SRWHqaaGIxyllmMcp4FmTnKaM7TQynku0EY7HVziMlfopodrXKeX29yhj3vc
J8QDHtLPAE8ZYoRRxnjJOK+YYJLX/9u+4z0f+cQMn/nCPAss8oMlfrLMKr/4
w18CZoURTgRrWEs0McSxnngSSCKFDQTZxGZSSSOdLWwlk2xyyGUb+RRQSBHb
2cFOdlHMXvZxgIOUU0ElddTTQBMnaOYUZ2mhlXNcpI1OuujmKj3c4Ca36OMu
Ifp5xGOe8IxBnvOCIYYZYZQxJpjkDR+YYpoZZpljngUW+co3vrPMCqv85h/r
lWQG
       "], CompressedData["
1:eJwV0+lPCAAABfBskWszKefMlWmO3JuYzZVRIvcxc5+x0lwbwsg9c+ROC3PO
LdHUBzeb+2iJ8sFROYY5hjl/ffi99w+812hC4qCEcgEBAc1EWQdSngoEUZHK
VCeYGoQQSk1qUZs61KMBDWlCGE0JpzktaUUErWlDW9rRno5E0pkudKUb3elB
T3oRRW+iiSGWAcQxkMEMYSjDGcEoRjOeyUxlGtOJJ4FEZpHEHOazgEUks5il
LCOFFaxiNevZyCZS2cJWtrGDnaSRTgZ7OMAhDnOEYxznBCc5zRkyOUsW5zhP
NhfIIZeLXOIq17jODW5znwc8Jo98CnhKIUU85wUvecVriimhlDd84COf+MxX
vvGdH/zkF7/5w1/+EWhYFQiiEpWpQlWqEUwIodSkFrWpSz3q05DGhBFOc1oQ
QRva0o72dKATkXSlGz2Iog99iSaGfsTSnwHEMYjBDGUYIxnFGMYyjvFMYCKT
mMwUphLPDGZSdq4kZjOXeSxkEcksZgnLWE4KK1jJGtayjg1sZBObSWUr29nB
LtLYTToZ7GUf+znAQQ5xmCMc5TinOE0mWWSTQy4XucRlrnCVa1znBje5xR3u
co+HPCKPfJ5QwDMKKeIFxZRQyhve8o73fOATn/nCfwdalY4=
       "], {}}}, 
    "ExtendedClasses" -> {"Not Question", "Question"}, "Weights" -> 
    SparseArray[Automatic, {1000}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.000318898, "SingleEvaluationTime" -> 
    0.0083802500000000005`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740158275742425*^9, 3.740159527510137*^9, 
  3.740159819982419*^9, 3.7401721103688717`*^9},
 CellLabel->
  "Out[141]=",ExpressionUUID->"c184602a-b01f-44df-acf8-2315027aa312"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->
  "In[143]:=",ExpressionUUID->"35bdf15f-09a1-4d42-addf-77b85136d58a"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8871316247249047, 0.6764183255598819, 
   0.23820103843132506`}, {0.8873338032309442, 0.5319196946388716, 
   0.005609334705243632}}, {{1., 0.42, 0.}, {0.927072712319429, 
   0.8428709171696687, 0.5986785116793221}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["414", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "414", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6688206785137318`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.828`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7399463806970509`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{414, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.6688206785137318}], 
         Row[{"Recall = ", 0.828}], 
         Row[{"FScore = ", 0.7399463806970509}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["205", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "205", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.33117932148626816`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.41`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          205, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.33117932148626816`}], 
         Row[{"Row fraction = ", 0.41}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["86", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "86", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.22572178477690288`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.172`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          86, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.22572178477690288`}], 
         Row[{"Row fraction = ", 0.172}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["295", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "295", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7742782152230971`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.59`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6696935300794551`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{295, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.7742782152230971}], 
         Row[{"Recall = ", 0.59}], 
         Row[{"FScore = ", 0.6696935300794551}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.828`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.828}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.59`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.59}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "619", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6688206785137318`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{619, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.6688206785137318}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "381", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7742782152230971`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{381, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.7742782152230971}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["500", TraditionalForm]}, {0.5, 
       FormBox["500", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["619", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["381", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{
  3.7401582818924913`*^9, 3.74015953613031*^9, 3.7401599061844063`*^9, {
   3.7401721625052567`*^9, 3.740172167147621*^9}},
 CellLabel->
  "Out[143]=",ExpressionUUID->"034ae511-7fce-4269-88b6-bfae1686d8dd"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["4000 + 5W1H parameter", "Subsection",
 CellChangeTimes->{{3.740237907778067*^9, 
  3.740237925506658*^9}},ExpressionUUID->"2298f457-5436-4d6a-9745-\
8ff50e9c541e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl40003D", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"train3D", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "validationset"}]}], "]"}], 
  " "}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9, {3.740158180684637*^9, 3.740158202100059*^9}, {
   3.74015853866188*^9, 3.74015855015483*^9}, {3.740159429774341*^9, 
   3.7401594638126287`*^9}, 3.740159505209405*^9, {3.7401595565268803`*^9, 
   3.740159576062914*^9}, {3.740170957481477*^9, 3.740170970433209*^9}, {
   3.740236297157579*^9, 3.740236331539363*^9}, {3.740236409364395*^9, 
   3.7402364536380777`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"100815b3-0c1c-4255-a438-8e4d81573b71"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Numerical\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not a Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    
                    RowBox[{
                    "\"Text\"", ",", "\"NumericalSequence\"", ",", 
                    "\"Numerical\""}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not a Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["4000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 4000, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"], "f3" -> 
           Association["Type" -> "Numerical"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
           Association["Type" -> "Numerical", "Weight" -> 1]], "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 3]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], "f1" -> 
           Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAABcBnDKXKFv4OfwSJ2hTWMJCYQKXXGEGiNIHirrlunOvUJFn6
ZN+OdbjaYtu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu27X+e1/n5Lg/puSnu

              "], "Type" -> "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f3" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8638625972092938175]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1], 
               "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1], 
               "f3" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 8878490732860731487]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 7761057869153230768]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Imputer" -> (DimensionReducerFunction[
                   Association[
                   "ExampleNumber" -> 4000, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {1.57475}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.57475}, 
                    "StandardDeviation" -> {4.800667915769639}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.57475}, 
                    "StandardDeviation" -> {4.800667915769639}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.092573, "MaxTrainingMemory" -> 200720,
                     "DataMemory" -> 32888, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 7, 10, 14, 58, 3.544708`7.302155453753076}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                   PerformanceGoal -> "Quality"]& ), "Method" -> 
                 "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                 "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                 8173270132276539166]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["Standardize", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                 8.972251905053866, "StandardDeviation" -> 4.492166600917825, 
                 "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 2098501952737615792]], 
               MachineLearning`MLProcessor["Standardize", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Mean" -> {1.57475}, 
                 "StandardDeviation" -> {4.800667915769639}, "Output" -> 
                 Association[
                  "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Version" -> {11.3, 0}, "ID" -> 831145964257612050]]}, 
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1808528905651628212, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6568792965940910320, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3843928245291384872, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxUnTmybc2SlH+BITCBkpAwy74ZQpkhMYQSMENCKEbAyInP82yP9epR9bg3
7l5NrsxoPTz+7T/+z//8X//vv/3zz3/+l3/++ed//O///L///l/j//Pfb2ul
9VP2raeuenuvP0E9o4/V1lpj7b1q/wnKHr3cdk5b5Z7ZtwVznXLuurO3seec
Kehn93n77GOcM64FZe9Z6r23tl3naX+Cevftde/W+yxjtlssiEvdskoI9hmt
5S/iOuvskKy61p4piKed87a5RvyjNY4F/Yx92i5xuRp3GR9BLEudZfVdzxx5
qdbnWPXExW6JB+sWsFh19drKaLFoeY866ol/Wi4vHm/0E8QfarxeWfEPRo31
tGC1O+7Yu7caVy2+x5m11H5P/KLveGAvyY43qHqBMs6dx5fa/ZzeVp+zxU9H
qxbE29V1by/jtnU+gtL5rDVWPTZDfIWfYJ3YBG3W2A+t9Vp9jzXbOFystz5K
yxdc/a7a+o6Nssvp57cZ6oy/r3GfeU+PFy01BX3dEztoxf+bZ+4UtBN7o8dC
3cJSWnB6afG3LW7UVnwdC8aJ7RDPFR8/Vrf7C84W6xpvvUbsqVGrBeNuLhOr
Hx+wnXpS0OaI/9n8few+v/mIl0LY4z5sCt98rLNiy/USn+Ss+IMF8fV2G3Ou
uWtsurxU733FQSx31jgpNwWxN2c8Tbs7vkpd/uZ9jV1jk6w4mLF7r1e3lx27
PT5evF2LJ/ZTxSV2iYfhC04WJwVx+3tLi29W4rnyF3HpON439kqf8XT5izYG
J2PEoq04jH7c2GY7/vnkNfmOXt0Wd56sXyzKic9sQSzbqZPXX3H7WJuPoN8R
axEHZY7PweE4sT3i/eNtU8nEcUJLtTgxsRxj7rwHV49DG8c2/s3teal4rLJa
PDKnc+ayx2Hqsar7xLNeFvsniA8UB2NzbM+Ip/Bahe4J4em77TNDM/0EJVQb
u+SOue4KRVstOHFm4kFjCeMF4+xYECesxC7dcf3Fi1oQKzjv5iCu2I+fe4SC
nTtWtcXV4njlL+LFYsvftXqLIzRXCmKD8ql2CPlnP0HoDxR1aP3KoT1+qtAk
oZBix8V3bbEi5yMofLmQxBPEMlgQmj02Tbx4fKQ6d14KgxJWJ05U6PddUtDi
pUOR3hvyeBG/4J6hicN0hIJCMV7fY3PwYufGaoYa3St/UUuLF5+hZ8/kDS0o
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
Ik4dCdx1dNzghNC4YrYcx6O0FSESDTf4+j7OZyNEh7QsHe0MesQeXP0MQ6Rn
2L8nYROkChD1cffxzRCx1pUOz93vyfNEG2Fd0b+rekdc7zAmpumqfX9vKoie
QD3X3l/5g4TsMGImxoZLclf8ymzjjA/U5xObHXeuXp5Qsc+O4yLEKdwI8vn2
VxEsAHYjXkm7/pv3iqtO7jBdZKF1nOxz+vIrNvezzgeyxiIQ8uZejry0ZezU
Bv8HdG6fp0kFs94TdmPr/eXI8gl68dmiDkiFjmPLUzMOVLnWPReWIUgmrEfV
3W/8Svv2jC5w/d3DOW++7KBB6v3klkqG33uiIfvtj1mR9NE0OICFy0FZ3NMg
Aa1On+vpuBZzTNX01p+6roip5I8S7XnGL35HH5435GOi+Y0To8gS9rZNr47D
MOCOyO5m9VsOvIYrf9W/9vzOn19fOskRWy5cn6YoUboZeX7FX903MzsnuGHt
yr2+cbglmNkp1QSw+calY7J8Zhj3KnwU1zz6+dTYrhCZ6ziEYuC6Nqve3fkJ
lEx8iZb9RcZUcZPPJ0bNmjS1j5O+PeKLu0d9tr5fI749SuhUpRqXIv7EKpO0
Vyymv3GF15mNPySqylcPsFkDCaXWbDzzK/iF+ftEKK7XJaiLERdGwL6j6yYe
eeEGyzhQLep8fD6L/QGSLLBSx+8gBwFQtNrq+OAc1h2oHdZBdf5PyLnzRWn6
ACrOuSqeAls45N/zOaNNLtdMKbrqfgZpGfmz4yuQXXENJgM/7TkQvI6z6t2A
nHnn1H07I4CMUrG8eoXDdOvxvqgBxAmp8rpQZn1xg5pHz3Ppi0PwHTGppo93
VPzKXBur90oXs+OvZl+Qv1s/96D0gg4/I4FYz+Xc4zwqmaVGNOq7gN4zIL1T
o4xeh8/YnMXVc9IIq+8UD0ff7A45yyJYcbCKePrZ1n7ngxKPSharWkCcijvt
YL9ggQqPLYO8YJePWIro4Fd8Ri0xNq9EKa6OM42ZVOHoSdV7Im6o+Ek5NI/H
6HjSGYSJfcWOu+J0+WaaMytCqN84hAPqy2e39bVUPnlmohdvewothcc4TB63
+MATwxqd31pIpEzr3IIHrn1EmkklP24Lss26/75a9TPTvnMWPxddy0zVmAtI
Ya3+vWSbdIXGliZLxSN/BKL2+ZKlH9+4yYhuTpQ20SQ6LkUkG4N1O+fv91c8
K7zTGhB1f7wLDFW+Onh9nDvUfd/0564eq8//DrNNawg86+7zBOg704hCQ72f
+rvMUAyeZfspNCq+4jqdtoSueN0HPD0tWtuwhl6fz3PGeYBIhkF1PS+uA9LS
nQ/5Ubz1I+ghO6o0mubY7HjEBCxKEry+rhXfZQDEjIBqf/9ihUiFLvjb3++p
T96xe1dVro7zH/CcsNc49VY8KnmP5zmCAa74IqbNCH6bsZP7xkkkB1ECoYb8
VHELBP9gAyxVeMVtjHe0RTYIxz6O5sIyOo2nU18XSarUCRudmKPXjYBgtlcq
QhrVx8GtQ1/+PDX7Sf/d2/d70uNFW696KqNEk1nYkOssPQS30tbLBE4Nvo2O
e3U8nVOG3usJwc4ZVv+GT1z8U/i2bEcAwHlR6/fmjhcbVFIie+kkaJQqJqMz
gxFV3wWZGm+B+RiqyNG/l8dItmcgtVUHXWF3n+E9qBnr/mfCtVm5syR3PwH8
I5qt6IaGaXvHNeZxMTUF947HEkNJgIU9Cw8cGUzYeX5myK+1XilPvbA06WQv
VccRuVtxzL2tvKVvoNPBhMBO8aRzX/c/fX8k7Eu5du5nx6W1MWyS09f3deEM
0nHQpdXjrfPXBDnPaPRl3N7H50DLPYQ49935IeE1oKYrbEGvXcdl8Vpj8IQ1
PzpiwyRD9Caaidd1XSEUUrYlN1B44NBqnbYULZlvnb8G0jEDgx1B21Z8hDH6
+SZXtD0rHrST/GOlr9LvW8iZtP8MW5l3dJxgwElvJB30Pk7sP2F5qBo9/Z5P
KzT1JWOhq/PeK9xNbRcr7Fk4N+dn5n3FGzSqlRW/w120bs1gHr5x5Qt+EBUn
D7v+LulDy/aZzHjUviA7wdxPvgM2W+/VDSqUsccL6K37fweVAJXyRWRW/Llf
/VKETHTRb/yFicW7YI9q9y+uqEx4/vIWLP/4SUj3g76pOC2ISDoafax+joaS
ANRaW+m2dRxWG50dDqr3I+wcWZhWVdr5/XuYU73LCzLu914Z6EFfMNxaQJPf
OGcl81+c9ggTV1wrKfTWPY49dT8z2KHyqRzdV38XpKGwI0B8Nem/caiE8eBc
TiOp0q06QiFy9487/YzR8SONvCPijHvx1wIaVg/79uJf/1TcEDTiElPLv/KN
IUGLsscWYaW63pGMwuafYX6/hzFXN6yfdwrGL77rwGhL5/M02I2H7hv/HPFl
uc9M4Ou9Gpm0n7EyvOOl+I2beJx8VDRwt+KNcto6oivxXl7xRo+XlR1E4oup
q+vNSv/gUo9Ine4df+K4tY5w2GtfHvwJlfbQBtEVrjgxIrZAe1ABtZ7jg6wY
0lzk7H7HZ3q+ok2gDTlqfR5R76MoOdKNre90XNlz0EA1tkbV6SMM8SPPPGy1
ug/D7I4ePKuA5+7zDLNbLutjvQp/9e4ubDqiM716fmRcGCmz+A2TZ6z4Ow6+
IjDRfIdDJ9eef8X7wZtU8T2IdWJUXIsqf8gzYnBBCOvcey429P/finKG8lnv
VQgxtv2YjxcOVksCSHekuZJZc8Vfdwp6NpT3Ks9UcY/Yg6Qzvvf3smxQ0f44
ZeTHL67TxrX5irRo/10DgXD6mQzs/XefLekAAhVzvKofI/SCgipDwhaZvzh4
DG8eWlhVn8KYGE3qH0RFvu6zD2g9sSPasndXPJkCOAJvtb3fnzcrTzWhXV77
oHHQMntnHYmi1efJm1UvQLU+rn7/+RLFCZOw+1k8C3FFRHxQTgVan/8Thj6J
vzvz6jduA08ePOPqs9f3GycVPdB0vmR5FSecZyhKZuUqXGsEv0OxWMh5e+Gg
1PPU+Id8nL1SPd8ZMQszFvBZ0O6Kxwk1bOfnaj6O+PVWC8QGzs5XgT0gN/HR
WLCM/j2BjCvKtLjuVx//3oK5ySd2FP6WlHOyA+yOOwr/33hIqTJDPpy2vo5/
zobMmYYOAc6OKwPN5D5ns7rfOyNH75KlnGfpRRxRataYBr6DJqv7iewffpqW
hfyl4vFbNnbN4+r4FXI3iBtNoqe+X1aZM10IgOZROoFUcsPzJA4PV9bPXdcA
U/6WwOy9PvCzYH5GBJICYPV/uB0NgF1JkfjeccpCWjMq1VX1Av7F6azAl4JY
7Dgxe9L1n3Sv+Q5cFgEuwQAH+l19X2QWePNu3pbPwaqvSLaES4SqeIajVXEv
M17PZ3uHhLt+8U9FSMn0gRiudVI5zrmdIXpcO+q568kd0bCRRfWcTpyBBIZ7
RL/q/BEP+Cpmrou0/I1T6yPdyXhRB6p+nzKCGZdO4tP1DntUBoFAsNMaXdd7
x0larcKyefR7q7waXs07JkZ9H7ShmOqM9C7H07+36Iyo+EcJuu6zt8zlbCG0
XJX/zFfq3QLnGsb4xSMeZUb1QKP0cSBMPi8RLXrzk63j1xF5+ZDO9j7Pt4Rg
9oFb93sfUjQp7Mgna2VXfMU6mdJAMsp6P1HrpJNHXFzn0fE9SG1W2cbM/Vzw
Plb+rFZS57dxHZMZ0sMfMcT8xq2/8yUzrd8cJHK84AYr4Pzt7r/r3T4p4qxY
f/1+v4JrJ/EZq5k3ToWCxZVZFExm3U+kFFKNBoJ70C8VzxcPUhWfgd/vc1TO
u8Dvva8Re4wTUr753353Z/CsU/R5i0jx1vmAkiDuLvS5u5/LvYd6jcpHanSr
fZankTU0oj0BEFTcgB8zAGJABfaNk8ikIoE+glVaf9e3RSo/LPrmSx5UjoiM
5ZuxXNXxj2CFdCfnEUxjxwkLQSya/ez1/oAS4pmnboXWq/umEaw3eUFLfnLL
o+IjOAGSVUEm9XEMPuN+SFim9zWgLupjOLVqmMr3kPVMjUxHKFxUvwLP+QoX
XEMQNbvjALJB8apaK0/gzfKAm9JJg+o/Oh5Bee1qtXrfhxCJPs/Wy+uy+u9G
Y0mVsgX9XvcBP8H9irLe2fUCVIL02LyLW8Ho47zKzPrwXtTq/7hVsMsaNOTx
ZsfRcCJrFbv52h/vcJFtndxR9l7P78hX207PmDP296J76mBKJmC4Pj6e765h
xxh3v+q6ZuzBpJvbzCin4v6EDIGkM5Hjip+EmLk57Slq+zhntgZJ5m66Wuep
MeBxjcyle18Ae1RQplr0Ftd7qxcHjzVjeH72+4mDFcGqK9Offq+iEghXZsT/
OWwdnwWQcmGHFH6636VwgXp/9P/9d/8es5OIhHr26jldxIrlZ4c72nq5B2ro
8aWxnrGlrLjNaMQZhulBf6fkKyhAHmEx95w3qnX7C/fADKy+hLdPJXpJsJDN
Ok5f8lN46HlraO4Vh9kh3nmGVV51sdIukzjvGk3au+JpDVkAgAEaD7CIKOrP
v4D7wvFGVASynoFJvvet4gMvyUXsd1pVv/gTHyr9H/IrFadOf2Vx3pjpHP/i
K5ZAHvPxOw7HGKXXOGOu3dcVA6AV/pGZSt2HmL0zdh+QgN2vWG814tm7xMYp
uSOfHcmmDSbceSyySgaiyksCuR2PMEA061VUVc/GlE/FdkYKo/dBcm37epJp
jqyjFR+Rqv/cCBtT6X4c4YyE83FFqry+i1ztFgUUzMPiNyFTQAmRWNIRuPp5
4RRcUVehjVJ64Ef8fgx90kBrHLg4dM4VTRqyyHvH5ysxgNBkjlRxiGzGLdGV
6f1uhbgOBejP7D3PoinFZZzRxRlhiI7nAUYfl5ZQH0enbbwP30y/7gM5As7b
bqpto+MWoK+EbyTiKn5HhgWMwECi+pmLTe0c8Wbl4dz3GUTCNF3udZuSdDwS
BHS8EFv6/t9WNXYTd9DhtT7jrejDGriArvf74CnG0fl40sr9xc8Is7lwacvq
OILNl/uLZlBxSSby+hXgYt//DFRNGUHi7XgVV5jKAg15Z+MqI9+1zeOV1r+u
mhdHyPl5ZwKYW7U/EpGAJgSRBRXr74U/bszbY0P41HooPhCx8HjoXs6Oj+jv
Z3b+NO7UPY46zHpL4P5OEWNogT8zVg29TqIObyOKsMDIfT6kBUAiaOpwwerf
Rz/8CZQhnew37mN/QmyamZ7U+oywS80ZxWDLlKPiQMWkq8/0bqpO4bLyKmmw
AZ7dt9ThoYEesyF4qPq7tlCNKpRG/8rWcU03w3S9rL3qvidt3vkdA8i1Kj6l
u+YCxEYat4m3wjaW/Kgpbz3f593OcHRjgFL3GfYKFHALTASptOJ05ZIBUp8o
HYbDIDGcJG+/BkXdNzMcfaHo1p6NE8Cuwx6OSStBwDoOIZ8zl3TE8bPOM4bh
QHMBYfW8G5bAa3Mndvc+zoIm3+ITM9HSp9KYxF0ZUYGgJtXHQc90qYsMQ+f5
8XywrNqL7M11HEycPYgpgsaNe4nR2ovufXHcfZyYzAFC8bR6qh55Ygx4RuE4
ILat4yum5y+cpfModbg30GRqRs++4ofVP+7v1/6rF8JzyacXXmPxJXVgo06q
4wc+UvsXEYo4q5/5vFatD0ZSANCY68Ef9XHu1Cpp4uIE1vnc6/XmfTzz5ofG
o0BjMk6Gtrs6jnXGcAdwhJ5i/R60K/Ax0ix34zcCqcTTBieXQNb1GkV4GyjN
nGANFX9WhrBm2oGyfOPPCybnyXnP1mnEUIuYJ3UFFPvaRywtUCa02L0X3+8O
dU2XnH6V1OL+ns+LeYEYsoBzN9oqfkXS8Lbp+4b7OJc3IbxUifr3vT0jmuSS
X1x08UHOMObO/YuL32sOcsps4X7OaPZ9Lr7Ox7QnbpcKATJiFbdVRY/3es3O
K/75fANxlF03fy2SFujgNIVNLb/Pl5lxvNyAFQ2TV51nAJGQy4hqo3Bo0TrV
i9rD57tK7zdUXpXFDDpEh7fi4dGpGIAA19XHGWgxT5xYPeSr4xH3CFg47hsV
x7dijkVtkkxVxVluR9vF0Lz0Y3k4jEx4pBxOq+4nUqf16vQanZXXiet8bmog
mJVR5088gQoYdR34/7rPsQX5vNHbHfWJe/3ivPJYuVsl9447xRkNLVKF/Vwu
a0l6yrRfK+8Vz4wUDv+KEUXFyfJxpH6sdcVDP0OG99wjRtdzXkRDDFSod/vU
3u/JMDg0j+ZTc9R66H6hEqw0lJUYHYfYuqK0oFfTf9ep4EAbQqqX677NmAYB
ASKNjd9xEGW9+lc0Pfs5kimbe9y0jAe2Ok/5m1Vi5SUvPr604UJj4XnpaW11
PvFFtbKaXT2lV8z+htDGAjww1Fx1/+/XqVSGcMb24BuXbvt4PZi0biouq8D2
2jNT6+tVEaDnrlCDt14fVurwLa3nYOoqPjKZ+uw/Ee/s7w6YP3nYjLLz7OM/
kQCIPL9eWR1HnWvLeSclR7//jy31PHP+G9ZGxb34rB9icnvO/n28d/nMoYTO
Pn9zmZGXHJ/+7PfEVwdNoZ/wHIULEn9dauLrcdcc5wyx2+ia1wUDqlVxBIso
kq24XVwV98mEqzHC7jk6frFO4YjxzNbTPnUfIqfJn0Q7r39vL4PxsmJ+bkP/
XaoJKnRPRdPwG/fEMYboAir/Om59V11jRzylV0+wbcTZmfeMDbHjRm6n9rQh
dt9/XKHAdTSmwkmuOHwP5b89Sp3fvgFE/R2n17CJt/5Od/VvxGaivn5vdd/M
QHeUMHjIVXpH4hqN1PCYXVafJHF6zvEaPOJa9o1L00xPgxutfAbkKzZpm9VY
z/f+F8dUsJua1z0dj+GkSeAtXH+XUe+nFv3cpZWcu+PeDW0prDwowYrfUmI4
KQ5/o+8/L+RY2q2sD/2ekJnBDpOcAOzVezJyM32Vg2r99YvLf6JlrAf+1HUN
zzZ8DQYohXcSn4HonAYZR/llnDzCIseC4TNaV/Z8BeDMIXxOrTduyLVec6Iz
MMl+jhwlaB1mQbv+/f5S7NhevO6lk8OLzkK5Z4Yvm633R1bIWDuKaZLcivN6
pNjkPXyq/g3VIFrjUKlgg3WfCSrR0iAqFuhdxSn3m7rpSq+z7wPKinF2AKDn
3ucZ9tpJ/zlU99rfcSUCL7Ipn0/1jcVniI93ktyz35PPeo6QTbaMLMLo48hi
6C98voN4zXSctJcXB3i7dInV7sGaq50wUffjFx+oJVp8rqHuf0x00U4gDj+n
VvdHGQL7hVZlT6/fS60iibzihbR1XKZBViD7VOGTMfUiEDbifC7Fq7huJU0r
U9un8HLna0KHAhyg4Dx/cTqAVzQoV+sU6TX5u+CxZ1K/0fEVJysSSNmF3jih
ETAJj/Dz12uuFC/C6BHDSOncnBXfUzmxG51RL6i4RG2EbYffVPfBQr7HlU8R
t/X7fwSqBa9C/HOv+j2CrObx9x6BjqqXKfdagmgnyBZKjxE+2KwGE+eI1t7q
uHJhxJmHpUgdnwMABjeSvb/zVBzQUr6qKT2q3ownl2yDoiBsdj33EHtU3yZk
W/N6zLdIuyrjISifWj9hYpfliB87Kmidvzu90jrnAV94e3GQDIagMy3Dum8n
kq1q0Qt6Vp9NXKXJdZq7ZPFuTvwdshZrDyziqHXgiKQ1ugb42148cXGIJuVu
9LuuPk+t9icMQRze2jct2OdrJqOkGv18AdDcVUhl1Nu6/yMy+cm7dWm/9aMk
nIw34K89q3SbMbh00DUZnGXpHohfOtbgUO5R5e1B8+C+h6cDf1rxGRdOYBkq
NP0cuRF6YBhaqr+6Luo5Z0SaDR+Kf3cGIOLfSLLHo6rjpHb07JHEO984ZkYS
T/wXLIv1XICq9TelZXoQHUeqDF3VDS381Yk3FEcFrSowlo7r3sVuhTVP1ztH
eJGmtLejH5XPH5FwnbHyyR5R7w/Y7S7DeQiCFQ72jFPujeqZTb/m2rpu2uRU
91WMpZsh07gzAjyS6Jx9/5fZ2YECbHq0/34vE4j+rW+qcGLny40iDQEthDBf
cXWiL5ffwtP7kcYozEfsYlDA6jx1nVA+qL6q3Op50c5asZJ6Mqv6Xq8CW9v1
ojMTslnFjd7QySAEr5qPcFJAFrZBZs5Y31GkebCU4Qs4FnT8icMJ2a23l/SN
w/5QMt4j7VM6SAT8AX/dMoTb0uE/MxVXje5xGiy+YapZO2H05CDj6/w/7/LM
HqDJM0ovXQGB6IgbAJlbPFzxGckF8pYmMXX+Jh2HPdDE/uz36tSc3aNYw1eo
vzvowxFjQ3305jOKw8FE75eATq3/Z0x8zpkmBKnw+rufw+tn0q3dafHV8UcM
HCCsrsxd675p8b5MKS/pqjwtXgC3oky3pfG6yUyipG6gEgLDN75i5yqf2vWk
qh4hnRMM0ZHZ27bXdT3Jlq5Xnf7zIfziT4SHwv3a+j3H2SGaYdwYp5w6vsa2
KSZ5lN88NCzkEWehuHiUvtMZa95UcDdWcOElKACChivu4+BX3zvnPwkR3FN6
VbPiXi2Kd5dNuXRNxa/gob3PKCRbxUn6Iu9YBCSQFZcN40nhNp3ll3QGdwib
/xID9++8SXwRQoKMYuPz+z0b2AW2SB+08D+kSsAPXTY4fvHKzytFB8reZHe0
to6DDVtj0vi46n1TuqcXPyK09NR6+4mHnUK1GXOs74/JGGe2QwtBCvyN66zA
UyL7eiHr78rQETBkFpxp6vhnZF/hEbbYXl4Vpyk1iEpCspefJu8/Yu5xsggO
+ai4gY1dO/bDXa+BZwTwgb0lddo7vkjAnBkC3jVvMkWIMNtlajI+z+X73SHz
MymOoHAcBiq+v8IZqKGfRa6f4wjhFqvneO1tKn7DzH1Sa4g6DsMVX4ZlRCxC
zO/jzAiB2xPIl299PjQM48HuZl+9fuJIbXG4gsI/ut9ryD3C1r+i2V3rienc
jBkorS8H6vjNWzuylbAldf7GsmozKV1UxToOHLhlryJtWM+LZNjNXTUZ2Dj6
+A+1XCXbyXS89h1K0zE7zZZBSrfiIfAFZRtY1tZxDFCKEFuec92HtdKRVejG
L73iqro0MuOD8VwdP6Iwrynt0+/1geQl65cRpHj3wTAQo0tJXAo+/PtejcDZ
InQ1k+FtFceNxbI73u1xVfxwh4OMch+qD/bJ9kjikPDYn+TiHX+tGfd8FJ2X
siB4rojrxpG7rmtknjrS2Za//M5TcUuaUJJ8Fd9cPNudmlnRXHkgUpulwYg0
Y7+74tlpMyGfwbl3fBCKhWSIAVnHib98ckZKdZBxdf4Rq6RAbIizys/0DAYp
mDXYTXJ4FWcqKQkkmjoKDyxuM+L+Lj8Z++/3QGl6Fs8dsOM3LruxAqUyb/8v
Ztsz8gUz4v81b6IWsMOWamHRjKp1eBxftsBh7ESW6hvXub+MFmgHGIlXPFLS
8RhJNlLnQzN/RTAS37P7QhTecHGjDqbfdlScQjMElqQR0/4bv7aoWO4R1916
X7OJ7t7QEBIbTw5EOON1SnQqrIWOE0/ODDbFdx+HLmdmsESKZuVjnKdpTg9K
rNb/Pg5t5xmakISvvuvBATyAR3/zXP1d5IX2Ep5RMO/3eYDERNjAjLj0TNwd
A/K8JDrRtf5Hm2RFjZdOb/Hg6OWdLyVbSbIKdyqzVFTrqm+ubfXfJWVF1IS+
jtbWL/4EgGNWuXX9haOThrKXCHWsjh+XZi85R6Wn+2kERI38qAK9ugsVN8Vn
9a51cW79XCaxb2xcoAng1G/c2C0rPA7Bvvr99KiheojVUIrp3+e9iqkuVu24
O049yKsl37n6vikTb/1TevIYrRV/cBNJB0c5pc9nvQaK/BDvXELHn8jJRL7c
w6y4lBrcMN2Sfevfv+19A0sE7+cXDwptj0NS87hPjzSyrucZGmLlM+BCT5wO
bqCt9S/OYsDXa20t38Mz6tI2hy1Uo54rQVxBLU3dQ3qKfT7PmQbQqRE/eo6j
Y3ZFkP0JJq+vN3Ye42UebGfx1AzECTNTrI08bfXB8FlmdFwzj3t6PfxsUSkJ
km2f/X29o5cN1jME+/q+PmlFCJZ4GFcYXRW/Y7kSkQ9CIvV7nyAzAupJs327
vGrEpWm7h2399O95iZyRLictX/nb1Nw7Q631Mp6jj2N6BuhA7vnpPHBGeQhw
My33rb6L6WM2C7KsxHKq4mfU/WcqRijRigcHqPa+cJx/x4lOvQb/mc+pjyPX
BhRGHG1/dvF4VjxR1Zil+8fxYsHiPG97qPtXZuD6FFEvl5vVdZFkoEnKkvL5
1dFWJcB9DaYQ52fFaZRirCiEt8LDf2pHDUdIsD1ar7X/Yj/wCQBxICRR+Z77
K0ul+RIoUx8nBkvuPrOFu75r4NQMw/fob5d+IDTxpsZ4ZEheudlxBlOf+wsC
33y0TxzRLYntTcu+1m1NvSvQLKut2qHid7Rj9cBopZ0djy/bfgYAsa1+vsjJ
21tZ5xrqfGY4cBD9VsnSZwMGHt4DoCwGqPW9Q+newaxteVVqPbHfmzAQAzc4
7Pt88zNKdzgEtn4fVpKiOGpyEKp1b8bpSQtFvUXRoeOSMRs1fEfp55/R/NvS
Fdq5y1XeFfW1QbHQN2aM/Y2js0RBF613jL7PT6xjocpJ6q5+Dz+PlBMQxVQ2
NdU3YD4YnSkQndX8eiSpoYv6It+f8ssTj+DIEYTBVX5t4iu1ndyK4Hbdn9iP
JJVHJi388Blx7UEazt99+ruLvcAWeam3k3VUnJGYgtx6b8GqeFTG2QtovZav
UBBgT4bXUOwAURXfM30JZghQbFQ8qRUFFcP38p3HZaAgHZtchWf1f165NbhB
3ePWyRRnZX0Y3GOK1lyJftMTFWIMjea5aM+QOM/swZSo1iXKlsBIW4x4Zvn2
MoCCS3zAXS8WTFfHtaLoWIe+Vuu/EW50Yo2/UpFUnKCUgToW8TV+vwftjvTf
nip+67haZ4xw3Wf5QeCJZeJ0B150lJ6/hYr8TsyC+eTU/mVLXpmhzbhv1PcF
hh975xgxb90HuCMawJwW6Ju5WsfHq8CDg02GuOK4exT7Ts2l63d8ikwUy2yz
e/l9i8fC06s+9+bDsmNgJWvzWjFNrfMf8Sg2j5ZDHP3cB+DAOnzUOkGrf6+f
k7Fi1rPZv1/oHeRjEGOffk+4595HmJX0UWr/MqvKm2NaTLK47vOMkIatFiBh
9PtDUgVN9ory0/odB1iRHs5Ir7v6hJlHhrCYb7j0Zq2RsFl4G08UhLeOs3y+
NSxuAgF13+64U157hH9BVSsOBoJNR0VrNB4pEEV93flygGud/OyOoB60A8x+
ykeJB3U+YOJve3pK33iEAO+X5R5n3YoH9ahFpsTctl+cGumpyN6juFFxq4wu
vxtIaqjiDCKUZxBCn92vzgdtK7yP6DKWbjYp+h0P14KjB1r5UjSx5OtYXWwg
R8VP2geaCjdt0y+/ILS1Eb1+gmlP6T9TDeQpYhD7qcNW4aXj7gDyNZKf3MW3
jdLR55cgvrb3Xv99y6/RGqrs0/3JsGSkDovVyX70+e8oFXn67n5/F6EqxhQy
ItZd373WF+ajL/Jl799fMSkDrVRd1jofq1KeQGdUvLtvEA837MoB1I9+9Y0f
W5BO0cUCrdwrHtriBt1tC6o8AWAqMjNaADz16vdnLO8tzyBUPacLtEgP4zFP
t7pWPHMgCAQ839I5OUHV9NP2iOB93rC6n/RA08VmFLGKR/y22BVZyet//Tpp
/BPXFWDMp3FcUQO3lWeQtm19n3mOrHzScPp3vz8k9ihmE/qMRHrHs0Ab/MR0
sO7DFTAfCM18ZfS/8WyjnwcmIYCjrusdJh4mkvggR/nfaWyH5KKcjr1bH4fu
mXVYTXmVz+YZ3ofBPyfVDFAqjjyTmT+HtlHrTHgfBHlV2RwL6vekxO+cJlHJ
3/fF2fMFzMlWZ/UZ4L0+7wEBMHn1XfmtHi08IknM9EP695zXbp8fSl3jSxdg
Y7S19vCcqg9gpHmDv2pBjuPcf/FkXVekuq7Ot7PZ0Deh1a6hXNfFQCuYfUPh
o9fDxU+T0antYv/hRZcUR5+WvNonWvvjZ01OAT2isPCrN195GFlcRPxKryzF
gEzQucTgpv5uBjUkKUa8mft6qfOCGhptElyq7wViJ17K0Y05+72VDWMT22ZY
hdZ9UGRFv4KHD15gxa+4wcXsmx5Mxx0oGEDtmKu/98cwQLvhyY2oOcjKzFw5
dWWgXPt+modROYxofOOdotMRoBbVxKvxeJQBoOjSNAUK7+MkOzgj7H8aR1bc
sD9wGGpKd9U1n50YFIqVy7Kf1DpsVqnEplgbE9dZcWtkRAUy96/9lNPKIIt1
ZGm/ax7qdhJbnoFUGZlWnHQqABd6+n784mYLpiojsknP+YuHosj8LgIcHYdV
h3XyV0rnP5K+htgjZpir82qdFm0b2pQ67n3fmNWNOHalmdf37Qi2XUaB8HBV
HxhNnOLKikvX3fgxr8kjfWVxdPzyLs2rhUJCon95nBWfLzeVOzbhxT7OHUll
DmkM6fp9oMV6ZFyANV+602d0A6MWlQlb6aed7xzFzIGgyvW7//qiHKupCR36
4hUnzw4qSlTjKD1qcVTBO9CoGC5WfGX6aBryPO17KA6sEv06t7X2qZRLoRLF
HLB0J8STT0o3wP37/COdT77q0Ywq/9/MI+3tR5Rlzt91Yafbq+/XIqrvD/gi
sAwdfvigjiOP2SjUNXvnwwGvguBOwP19/H4PAE1IVYN0dX3BSlHHNCNLTgl1
f5yKkUm+Mclax5llEMVUd5TeC8b4iTqyx6326PoRtBoQk8YiemvV3ZlpyK+g
iJdlreJBUT1UWf/j8KFT9ZIRJ9L7ep+vMbXyhOfYE7DdVfEQ+OJvohr81h0c
5YC4NrnjkR71N76/IDEQpsduu3f8BRxfKz4S3zwH5xItxhv9+RKkMBW3oWqR
Kb5W4QxfoUScwz2O69uo4wM8wS2kU+aMKx4Sn6Glvn3prSWu3rhWiveqI3yB
r15KCLCfvf6seICoITbHd+CpuHwMM8gpnNXfFjewMaMwyN5WnQ+YjQqUHHYq
9Y6DUADzaI8+Z13XGbZnlCRwur/fkV4WnRHIQAywrZ/Lhc6QGUmoA6vjOCZQ
BZbo5seZQBAID5UXi2Ov+8yn4zIuUpJjElR8j+6Q6ean7Nj7OPxFPLM0fO/i
MUUFWVebnjaM4F7no1Wp2a8BJwM4O25OzBQpqdys89HLR30MZQZQuOKEBuZO
1srA+KnnAg6x4WnEeX323wX84VGA8uobqOPwCtSY1Jf6+RGI36T5Pm/QDJC7
npdCmrFtcCx74ZqQqchbsWfZIynafzeIdBuMHt/R7zOMksroCsPvGvV8zVNp
zm1PyNz9/mjLkWiI28gs3TN1jl8tImpGwH3flnc7ybAWZvFPUX+uaDlFDuqT
bG4d51N16j05gX7fDAMYHszQke/+7swCwOZ1/z7LaD8Xk5e4vd9ReL3r/jwo
9/hoqvj5+65NiaUsW3DOlecbWunZQYg5+ZozXm/PgDWbRZRgS8WZ6d7enkxt
6r699GGwSGXkVfotn7jeF7VPPfXWmVTgxxlN9uYp1/XCrrz7zZb/rusyTaJK
Fn3liOt94xHiB4w6IsTzrVsvL7EGxvn6qx71fn7iBKH1fT83/Ki69Yp1ISgY
Zmck+37xcCu1p8EIvvdtfwW4vVufdfQpfSFxFPgXJ2XJrONkzL4ZIScjqO86
jg80sZDvB7ftimtgKXToLJ7b7/gaY25q7MV+10ueS+PZUolT1seHP8SYeeUw
nj6OTqrmHHbPqr7Q2xycbztGx/p3vY92SqQGkib07+ntYCfCcFEq/cYBcFBN
GPXGELTiUtYtwoU2pLvekysmzgYOiqbCV6Oz3SG7PIE5lL7K9Q4FJAT0M+7R
z2vkLLG5YQKKF5xRR5yq1vstHRXPLAYDBQLlPH7xPdhfc4oDvWF0/MKzuFds
VKt+IZcL1wWbFuDIdnT8RTsBnFDjqPMnWxdBrFiH93qlpc7T8o4c/Cr/UCo2
Z/oPW2Dmvc/uVoGoutv398pPxL3epHV5Zuyrzj/8/bSbrVClcxV1swg4Wv3O
npOKAwDx7qZCU3w3cdIivM2wX55+vopJGYu2Gvb86rgukfTKo+v1LUanUXt+
Qif7HZ9fS9DmJoKlu+X5jRABh3bYKL8hMsOS4SMYO1tVHx+qVI9GKXBd/Z4j
0lPL4ilBeKTe8wcWQitDf+upfJVlneFyHBM4Hq86T7AcSqIDsKr9caD8LtR1
BCituS9OOww7jUbUqniH3R2XZ5scXVFj2yoeccC3rwb5tFecPZG0Eptm7/2U
Idaj8QBXHCGairPD2qJpHTngPo6J3gDgtYlv9dxjsr4xaw2qs+pTyj7mIpL0
dI1qfz9CNDKKYpoxC7dvBYMxvePVShmz7gPOk086Dlp38d2uI05BTyxH5Xij
jqOajTG4sqp1jBNf0V++DAILZ+IemtdjRGLz1Rz/orYI3eIc0U1qXf28ZDNj
wU2r+6r6iHq+dsjISBH+Ze/49NgJJuLU9H2z3s4nJl3bj1/JQIfEMwQsZe77
W0dDeVxvS/CMysq9dRyc3uSZyPDq+xAtKWi/Gfru3cchov65zZqj1BbrfhL7
oy8wUtus+o7ssR6upocav77HVzg1ZPqw1Pt++hrv53VOI4Jcf5eVndSRUhQe
U8WnlO6zNlN1JrVU5wNeSDQFctDDrvsDlPBIYtcVk5K6DwCb12sSgiQ5+/hx
d9cCCLK235+pxyN3VCe2b5ElyqcRrz95bD/f+YQuAEz9EHqo43+OqORD5gDw
rfVfZz/Aaw0sg8Z6rz6J6qTRrkUFLFn3bWUhREaPMVh/p4Y9oGy299n+EeIv
UOKILNS21/lYrEIU4wzQc+pI+u46nzAX2AR1fLJ5wCYmIdH1r7jbhqQuWz1G
P9/QduWrpgJb6S2IwyIcGaHpY9wd1/V7vqTIf3+XGyLKs+HPVbiUKwIkMg6J
Joh3x9MBuAn5uanffp1c8ktZjxrL9e2niQ+FFHA+hlx91ybpDNnoufpYa/2B
gdQOfV2EZs3x9Si2yPXFKecs3OBlYILXJzfR26p1GDHPtelJsPjZ/8UHXBOo
AArkXvEV9S5+KTBhVW+GGMabIg3uu/SdsFSJyazQH1f7NLFTJImwURv4PJb5
O84lT4BKPUaSuIoTBlJiQb+Mzk/QJGNdjHPyKULq/Q+HHbLVKNe39HT8jhiV
3vp9dx5yGr3uBD94M85+D83MNXgMjwzbfnG6kz6JUAz2ek9g1nwp0bSY193v
w/W6IKLjakFU/mlmFJ0xRYYxfL0nWm5GTRByJ02niuvvq9vXCseg/+7KWOz1
XJyz36srDu9hQVolqy44YavOCKl/DXcqfrwiw2DjQCv1dw1lTd52+oSjeFX4
tDaVdwaW2r7iOotX4KUzqgPfeNwm0uZhnl68j/S4sJw3ZD6anLPjqmHOgHig
pTel5qU5jappbz5+v1fX+JO0VJ7ia0QDWE90kNZRwtffTVtjpbULVV/9EGZF
GStFRHH97rMWpFI6OsB78dON/6zEy2zmwjWq41sDUrvaYmQ0HX/oV0wjzJAL
Kx4yrS7EkZyn46SW0dojuXD1+09GMRQw/xmFS1GIf42kIkc1+z7oGIClSbx0
3Op62XwTaYzQ0q9uzWOVBuhsKVTr/MmqUU/SUCOy/H1PIlavHuS8p5V0VPwV
SrePhTw/O05ayKDr9ZJeFSf6M18b6W3U3DxOxK+seHapUfuI7wpgVpuMANTZ
f5eKGFBh6LOdbyi8dSVwSsHZqi8nCzT/sCbhF9S+f+2R9pbWU6YZv7hONqG3
iE+Xfwpo7VfxMU59/RyDyj+cK+2c+bve/PzMLhkYR90f+D12oHJc3KL6/akf
pcudeWL5uYsfYSlIsEgm1nM5M/8YlNXhOfc+zogEnCwUqHrr4wR0yuWc80Pp
iohjUl/BvOv47hWPUJmz1LGYtS+LR+P+ZO52db8CiZg6i5k2sGffN1NE2J9o
um2dx2qDc0GIIXpYKR0HfNxiXb23Xs3FfwQ8MMxIS1kfnxaEpsWK/HSt50Ys
BtcjUt5H6dtorsI9RLKcbWd9p9cIVA7uVJ/t2uvvDh4rpnVP7M62/j2htwiQ
Sf9Lr0zasCJavAU61+t2TDnxviL0Y+jbcd+igZXxw9nnH/ZU0CMcF0o/QXxl
Phtec/uGXFF3SKtxI8DV+xfu74EniA77/PrG9CN0p/xVSUCfz7sMgKznpvbx
o31E1Wpiidccgffa8TL+9avOwvNIvXfIhScKaGfh28XfeRz/JUtxXW8Ap7yK
GaD3nB1Y4orhqKXn4QHwi1+ZIsFmzbPfH/lt2urpz4x+f8CogXVT5PkMvvFn
i0qX1ptDVl4dlSXI8YDrrq3XK9BU7SlowvHrU3lriMpsgQXNtf/i8PpWVxTR
wjkjNgFpH+FUPa0j57XFQSdFpQL7Pa8nWTu7M/J+v+9dOsTcCaVNr+H7PfpY
HhPC+DvM7reEBxRJF339va9XPF6g4Buz8VoYJZLsaUJE/Kz6+fqnmn4r6AKJ
X8UNnGbAKk/gL9+4cSv1lc/xnxRnHUeeN+dE1i5dmvQyTV6kVvEfq/PcI/Jv
NHMGkFPXC/OrMQElJeWu85fBwrXQ3Pm801UvBIzlbdPeIslS5xPNFmhVbYmz
dOTALB8CCjgJsqyn44b+/AY+2yxrpqfiQakPoLuIdtR5HiltzndJ3ErHQMbD
ijp2v6/y3zcOd8t2bOhxs/WsOKNxFfcMR7X2lxHjOs0T/PRROhLMnOwV0+YS
o/OOaxg9Ge6ozWt/H6+nmWYLsa7SQ9MJfPkwVxqwhZcWfx/8Z0s4QqWt+B1j
rs0e7mrqPK8Vvs24YjRc/KMr2PzYp9j8P0vc7DgdFeBSQsmlVyNOpBc2F22y
/AeNrhFST24U3OwqT6ZLEvVYU7p7Kx7lK7+J/vXEw770Km0LHq9u29Bf7POZ
kfE4kkjtv3pkvLRQpi0RQn+2jkcDRQY0s8l943dcsHy6Oyfsvm8htPFxOCH8
9v5e1DjaGGeG6d0HyEAyC9ydkfL6xU/9u33LAlv83Cs8GpXN8zKNqp/8zgTS
Nk5Lo/a1kfbYdYRFQFWvzofaRGz0jGdn4RbEbfzk1ePWNH5xDZd4iXES6PUE
EATOyZ5niR0dx7+4omMKGd/HMRLzNhrGjuJxfD2v5nr7D6P09OJN79JoRUOe
1vsmtaXYoVh/8mV843qMNAg2DS81ScUJ2MQAwXZeOsl0SOPCR2PvuRvPeYVb
ncr7YsTQff7J7NL6pdZao+fmM7SRXC30RffzzX71WSglHFElqfhDidnlfvaj
Vfg9Wh0j9t0RTL6Kp6P4TQ8gGBkaxPV3keivUALVSb/rPd+9KHNILImKA5eA
GxM5IGtV8dgkAfrp2szu67L8mfvrbXvHzanjAAIQm2xV+v2fqSEmqPN8lQu+
cXqhMQHgH/KbFwTQYXZrsvXTVVN1I3enKthg/vr3L8XryTZ5Fl6dncod51wM
EwOJWXGLD5mZXcOu+PU+dTPIiSJEX6rW7ckDx15uGhJ3wYqf6SirjCjC9vNV
gKpJoNkIx9T1IrJT5YhC+bX1e75iQPvOVTmO1Hmaa6D0II5J4UfHZ1pCWyQo
uq81U1ggJ73SRKPjtyRHlh+Yxt7HoT1MdEiffJYOP2nYM2odlFO2X790xgP5
UlqjGnVf3TfHyVmxH2/d+r3xlswtpgNX4QN9PFSW4kdAXrHyE1AA7G7T1Xyv
dX8AgEaYXHwkCufDiMDnxqnvINb4xaNe9oMMTzJ7X8VrjszaFvaEZ3KVPhXo
TRR9yFQhOdQ6EGsiLf2N+KFJdcc5Nh/JAWmsPRW3lr92Q5wLjz7OSQPbeFli
elc+c8f3awbxIuOs+yOecnz/yv723w1IF4IXl+ap9+pW3X62M7IvERTo40CG
noht0PndF0rLCTwYsiqczG/8iLOkPQS+td/n0DHMKojJGElXnLkPE2M1CsZ4
/d0XPCE7tDKWT6sNMaI6L+ERxfsb953DOHrhkaK3jt/BZGk3Xs3nve7XiJFx
hQbRUevzHberM3ABC/7q3y82egvu+x/vEn2Dqmk2w/HvO8W/RZqkXieP7vcN
AZ6Sqg88nYaKE0NT0OoIWCd+canhFfAVeHTFx/2CTz9pI4XaOs9oVkH0od81
LzXZdGrI1yyy+MuJv1g0xdks/8eosumghAIJel33GZT8CoVP77v4R+JWkcMX
w4Gy+op3ps2v3TtBiVqH77SYZZrYu6t8GWxGg9DdiL3kZwGs92rFnDKSC5Kw
/u5WVLavULk/70b1f3jyGo0o8z7VWq+HOkQgI3ijRqz93kLy27u0ds1E+zi0
mT8b6Zkx6m8diEXlyjyBLGiff/SJzlhEQK7U+mnCES3J9aIWa7+4vUt3JARZ
1pR+6RUwg9s8Yu9U+jyE/dcrYUER+en+W9CxBlQZr65+fwy7mWKgnEPdVV9u
kaKA8MzCe5bfNJu2HWuKj89rFVjx+UquyGSDyfzFH67BlEPVdHfFH4NKJr8W
516f2Ypqg+xx1J6FQxZHeb25yykV67tb0QV9zeDYw1R+bmh4JDV5YOH2yn/I
8BO88wye45cvQcduSULj4NX1LJ7FFUAAANDT+A3TIFkt60ayTP13U9U/L+Qg
wPKOI6nFB3yLYnTFQ3xN5/Lem98BRqhtNTWGdlOF+rvGFNQ8rItgbk/HY5FJ
/nuLdkDHkWqxW6Fhev4CU3zm5bXTzq3PR4Udh1z6xLN8E6K/yUIGeESycvbv
YxWwxdPLPHR23LeNd2Lsdp19/jGr2AO0phhV8ZH5ER8t8jClNyiOZhhe5I3p
Uu+D9eJtnBvyls6SOHOWsV5kStfv/PMoTkPJ07GbffwI+uBt2TQaP0B8P768
WHmkPOq6YjqpjtYmf0pHC4uPuNITiWYNqa3j5FNAf/ZowM1f/M6E0F59dn23
pMAkCwACMUu3jtNCI1trHnfWuqdzuGEtXnap1gkUZ/dmiTzo81ReHTE6Yw7d
v9E6JyTB7hBJbRq81ep+Kr4Mey1v/683WBFlxhV1473jrzu4zhD5hNXnCWqz
RyP8iUHSN06J+o7n/ZbVtc4TS1ML74ij8tPf3a1+8YjVxdatbzyonRGurA5I
r2+pKV+QElxN5beK+mXkNN6BRL+f2BTEKrb0xMvvgLGRYYFlOsZ/Z8d15ViV
hPO/Kt+GJ7NJUgZ6YtxYcY0hmhOWqB+O0WLE3eF5YVONy0VlRiDmbiO96nXJ
vhCXU/Syvfw9NdPf/uwI1HrVfrFeNjwZqfjSH784AqKuI0zV6PuD5U8ty341
zt93ZDqCNM+63pf3PR9l/XVG3kUhUfygMKxXgONSqqv3zTQV44zH5nZ1vgeg
wYYgABsD+u9949CHCfUsE6+n8Vc6mxCCRkRooHfHuT7CFlMtPIvfKq7fnjHY
rYO5V/wMA+vJyvL0HARr2qoT9zXkvdlxpZkxBkWt0lnKtBXrFfpKhr3177HM
GcJEa2DW/pgx3YMXJCnei19P2SMUpvHq+N59nKjbbpHNs/kVHuY5MhAi8EMc
o3hAKf7vGJxoFT6ly4ciwLIQv+GVStgq7lPHu47b4vP7/YgHxh4Jpk/l3X+X
bavS4o7UcL23TxTFVvgOKZDr+NQSKe3EDuHuPCRmXiNiHnckhDsehUh3YqRY
rb+r6iIm+uwRsKt6H2rHUusDgx6ffZzPa5jyWgtQI77iXP0ggWGakKErfkd4
CS4iCme/OBwtqDpmY/EBZflP7Eyl9M+vLqM5hM+lK0o3o+oyZkAjXH/Um73x
pQ9ycfhriPO/eWW69VtAo8GsXH0c8m9axukM7r/jpPmsNapv1PmYDuGTx7JF
p672zVccOzJL/MR7fheN913v720DVD7GSDwCnyt1bc+vAWTuoPkhZ/ej70Nw
SHSR8A4NeCqOO0BSacUtstZbgPFoOtKDGtvW6wAvuZWWGfh+92EesKkDpkH3
Ccqm4tAEKxahoYPXfVgyLn4ftD6hlytuQ8pI1G5+1D5FbIJY1qtlP3u+/zCD
gMTORFwJ2/EQIvcjIJmz+qJokna/d/G31P3ioY6Dh1ytFy0eghZ4JfXs6pM8
MS0mBhbZodK/cqeolBKcID9TejJR9Z0pmB6NnZrnjshL67YjA/KU2Ss+Xzjq
Coum9uvY1ENkUaEhm/3d90doiLvGsIzvrHVJL43KKXIPm8O56vdkqUAQ0ig+
a/6Y8n+4ZStv9urzDIiOFCwQyypdppHWEQLPnWdf/D7eI566fD5mR1v9XWvG
jnUzIElr7hDxqdf/DpVylY5oJJ9nvMbdewVgxfExKDNLNWf1aTmCjOTld0xO
ar4WYpPG4RbI0FZ9J3F5SZpRU+VQv9cDc8+A50OkrTij0S3qP5ykr46rX5jB
ZeBUPrAjKo0sSNw6JIp6T7KDHdw9M79a9XcHfN3BB+86IgdZ8UOZjjfgwzj2
eh9eUDUbE/lt9X+G50rT/IzG82exezoebZsr8gBH6V6OiOrIWU7qqE/pr1qq
OYnNSJN4bev40Zymm2BWsRcPd2yvEXI4cp+v8e73n6mlDD1OjXPv+2DUA+DJ
7QLtu48fxaT9dR47qm8WLQotP2oepkJXXdcdhPh6B9n6bRU/M+5BWzQa6+Pf
QTqsKJHT56z7SYhxvg4vqDSz3rcAxPboJH3ei6vfh8yCozI8peL7L25rJmUT
NeyzrvdNFLCxrsDz6/48YcKCKGOLle+qOF8i8uoHUuhZ52l6ekedj0hV8dMH
3xBcHyanHHe++4s4i4IgRdndHf37K52Z1BxBh1X8Drw0PRiifd/7QIOTIVPk
1eWcR8fNnPag0Qw574qbh2kY0U7bjj6+1OmJ71jWplpPUHfeLgARCdq/FV9B
dL7+RT7LiutQGWiBFD7lz8iKCZklLZeNdlBdb/aoOxLoUA11n0NDi57DkWpn
9nEyQYvaO12RPp9UsTc+Ijz41ed/nJkfGT3Skfsdx32IQCc65b7q757h5xir
mp3XvJWEACAJsXD/uHRN8yIwGPn8XzD9tR5GKAISbI9+3ur7AMIyYdCPqCqN
ug+U+fz+1lk5ai5m9Pvqfgeh/5Tfn7ieMUmI/K9R1+vWnNF8esgnn/V7kHlp
MqcySsGz43foUHH1mr3e2r/Dxo95yCh8y4BiP195xRHj9XqvIAhCYzV33Qsf
KP68GkVn+h+1n/I3oWGX+aS9ps6ToaUBuCmb9ebs+GOoFe4Q6n/d/xGR/Xhk
7WYYfRyHvkM62WISWfEIRtBsJTFSPOvInXI+AkaI88rs+BV1yFdZ+zw6bglT
s1rqJRffeAQ2vPiR1izcsvjk1AQfaDA86v5M/RR7mpzgLD6p+cEeJK+NHBjq
6bhxE1V/wgh3f3cAp9GToha9l17xy4OVvCv51PZ1/swSthFrkmi71XO8FRgq
feLV+93Xiyag+xQm+V7zrEFdJrjP43Uc6e+FZnJ0mBF2nr2v19zuer1lVjx6
Kw6Ba/awv9IrdRw4J5Yb6eqM1eepYA56MJJ01bcJw8eMZAWhvwrPZhymwgOs
tz0U3ptoSCjtIUk9rYcz0pTw/Yy4+x39vfjexisRMDN9qPitWXm/lqDb7PXt
SZsz/qdKnsrHDNak63a3yBhdHVcs8wmX/Z/1fcHi6QJfEWVtXL09fL3ELf9t
TFvxO1cGZPGklVrxFTGZJ/a63NO+cZh9+EZ900heVZz8xgxGcqVT3HHodqkF
DOJz/H5/x/HB1D9kv4pD7UMsvLoOtQ68zQj3gIiF8VjHzWjtgzMGxqPivui8
opwQSk9J3JLEW4ulT+erL7OSEIxBzlZ+soBGyJCxAR4mzHVdVBufvMhcFXpf
O2xdTxRhob9K5038iAEShNPtY+24EaQBjsyj8MD2BGCDTzHB/G7r/DCDBWpT
Ucq0gnzjZ1SKKTZ5pvPbD5F9RvWViKhvfOvfa2LvKwimCA9+45g3T+Q2Ivbc
5xNXErA1eMNZvk7aU1rQmzxCkVT5GH5RFJYMsPan+nUA8Pr+B/h4tLnr+aZv
HGG7/TWsrXiyvyv4WDyb/v0MnPiIu9VdfaERa2TlNkGxTGO+8Rkbtftlez6F
qxmhFsX+FL5y1nxthK9kMovIDFzTcdKLuDvn+67W+YD26MUbvoBL1H0mEMuQ
Nm3jzy2p33+2Co1bO5WBd623FoCZm7OlUu/3Uy/HvP6Mc2rXccl1iYsrxAIK
qDhlHdgr89ie31GQp5AErJil8fjFNWE0x+BPn8qvYE+oGN4hfpy9zieq23K8
3pxnx1OCUcBCoj/7e9HPuux/QQ6O/q419+80FIhb9n4kh4zfd8hzRo0Vlxwg
Vc/oYVd+ywDV4kY1cWU/rLiUCaM66Lt+vhC0+oxH8ue7cBTjNTKkMB+nz64j
JAcUyDRueCZW/mY29/mXo6BjvlHrPGO8maYyuNYnnd8rbpZFtIHgSM8XBmRD
eigwpKildZ5oDnpbcSIapf8c8q9MWC91Mw2o6yWaryO6Z+Xo/ZRG1rzTEZHf
1byAcYSW0IXIGau3u+Kk1GETgisvXud4XUXDxvyUKZ894/tcyJwbHEJdwDpX
/pnkgKhYHLBH+QjAopyBsJo/eBnr/pgK32AiqgOFWMXRCj7bjW9+b7xfdJkJ
VINR6Jn2/b/CetwIXtgAah3AR+K0c0gOpZtbxwGdqLVoHJdvO58PU159Sglr
rzNnXGnd7Y2RRvEuMXbJexwjzLk5fn9XmXLEW2vGbbjjBtTQjaaqNe9jz0Td
0lCXflXpQDLOwxNjP4vcU3r+Fhi9FU9zBG/yi0+AKfuyW/Xv9/G5Diz4ah8W
svR7eAiR1dlKt2pEoJzPAoD96QZ+49ompkdebMPy+r0lJyo0M145lYdEQDBq
FSPNs1qvkP3liLH3NtvruKTE20z86e78jRDYGQmdz64q7ajfZ/aU8R6K3N7r
g7eG3vLnjYBH679Lysd8gvGWJLfO8wkHKNCpx0yuj2MISHt4+2IxO/5ES3eP
L83T353yynAs8J/Z+w66zRPfOOIJe+nqi98pExyb1dKqeHivu/mAoVzlV6zR
g8e4Ui9Xn5MtgJ5XMEafpbr8RF4pN7TLR3PO0L7iQToQuTRf3iq/Qrz3J8iW
4xBWnQLDxZgk+rv6Fd/rpQwJ36nXeK7m0YjHqImShO+p+j/XkS625itDgtK1
Fg+w8U7Kx/Kv4jC8dNAU6pgWHSd7AGCIr9fryRWjtS2afeFT9vG/Fd9KAdXf
L+JutPow8ShAfN9npmgGCXA0TxyuOh5mPVp18pqO70GO0CewclTei4BH5k5D
TA1fdeUV34eAUWMVtPVx8iESTYWnKj/3xO9Yr5mgbsWXieV7nM9jF+GYHbdV
m72PUCSOjhMwvWP6DRFe8Qz9V6CJOAi13wWF5pJ2a8zq9x8hBPuB29Y0Et1/
8WUjH+Y/s/z1xG1sxHsMQAsPbxWTOoSBRG+h3+dUljYY0npkozquu/nSktav
z3ZhjNLXYAMFpPOLE06wmml/11zeXR9hMJkBaN53XBVFWzmt+sLhDADubYtK
z3gywet4vFb2lNjtMwXwecPbkNu0iPffDbw3PDhs0t7HIeg05vT+qZpXv4Kw
39sEYq96/L4vTI1YKy2WB73PXumoA1+gofZ8XCP0PIM/1KdsfdERrwYgZSjT
IEQqjt4UZNl+Rqmw4lG1fpJ1W77rPlAxxtL32Am+13mu1yrdigukuer+RAnQ
bCCsqt/9QSKNaTYNrc/96N8/3CufaHbgwR2/ONz4jMndb65hBCehOaJRx7nk
G4+zj0mETu3sfhHxJfeTck5I76vjcKRYsQ8IfK/nUMOGWlvMJ2v+i+MQHCHB
SQop1WeAm0GwIOsp16/na1B06IH6C8rTq+Jh1Ue8ll51fadkWLQgV7waCC1V
PHUXNyyrYvf/1SCES9/a9CmcBi+YE0sJfmrHg98rDrQNwmEAxOyw49wUjRTt
VKPuj3kDjqg1OxPi+v0RJrqJMcRG1480NjJuTpl7FQ+UVGQeb2x3719epwCz
EMuCVHJf3NQIVtxXsYfo+NRz91PbLOMD9WZ9X7T9JV1PdLQ++XnHr4w7M0qJ
XWLFzRh5cO7RZFz9e4usphAvh19/T+Jin4V+PkgT1e9xfCDjziej4HpvI72k
cfMkxd5r/pIFFDBzyxC2fCpHRK2j0PXi7Oq7dsFrT678SQjW7PfBBd8BbPKH
PX6/v2JsErJUJkMVD1gCvGIPzXJ1XJ8RvE9bYs6O32zXcMJ1NkflP3E3Z+wh
8cK9+sXZAewB+mTCXXHj4hHmNfGCUfeBR5XLXwrjs/QoqHLSJdZ9iAfKUfcf
zeHzFxFrCbhU/ZKp480dQyJHhrvjDI60xHn69NzWbARQWA96ouVfv/gdgguJ
pM/HV8cJL32kV7tHo7/i1OUihX2E2dm/t8AEWJ/pZO1fPk1MNEJazKn6/n/V
m3g5w+TX/DEZKRLDqaBaxWM1g6JkbPaIHDmqbxA3pCjw84BdpaMYbnV2pM8p
7fFj+cYJUW+vM7xsp/KlGfYR7boVwESt23OPYwabQV277uOxz9A4o5ieJ/m9
D3GPGEBcg7zHU/d/6nbrHO8xPy3+znidKyOCvYWp0sfJ8CPQPYCuyvOtbGS4
HjUoM7+n49SosbTc8PJ5JxyNSsYQ4J2U1nVddke0lbQLSxfLu6EbQlcpr0nl
nxo25LAYVwP49v1UMViLHXH89ilfIAMhmq3b0z6qYFEsbqE6zmAFR8dvXyel
oDSa6/j6WmcMvKNOUHlXlG+VgZaCsfVcewIuhVysKUJ7t+LzFROwbhBsrOeO
Tkh2SGbE7OvqOFCTRBakq/DP6dbZpjz2OyOIioMiOBPtcIP2ioMqfqrWJ9Xf
c/Xv5QM+JNymrXERzFl8pncsS/bf/Y+AaPLwI7Onp+PJyg3YeCtUfkutCXEK
THYPsuQb/6wndj9bA8p81Zuq4hlfKq/pKl1cW6V2hFmQYVn3qTRnzOqkTd6S
p+NJNKB+7enlH2QSA5qA3Yoidvb7EGHrI+UsLmftF4EY6IbTCZA71n1g3gZw
irbk/q+On3SfFTBw8dvv9xpRCGOEga5eHx75RByTJKWl6wKGGjPET3F0gcRW
PqPK8SUhL7Opq/fN/7ztgrQzpYcdl7U/4eRot1Qea/c9M0rX3NCwqngGS9Hn
3Ag9f88fme7iERsEHJWsig/gqBHcGfWvOg7NYMhfIxAYtTp/n1EoiDe4auMH
2NbsSS4CTOz+JMmktCGXJ3oWvlQxf8Ba8RnW16n1E9bPzo+i86Sn0XHfukIu
dst1/2GlKOrcNDC0l/rvQtqqP8ebuffxg/TcX1OIs/D84uEayeD0+Wve7Swn
LOGjPtoaD0OZSC+cUXKav/W8TkRNYiMjCl81VzJbMI0x+Y35fJ1PHOzppDk8
vEzFWTasaPxYaI4+zqSOGt1a6XDtXya2qcw+r8kIl6TjnGf42aI5naOPn+r/
zHwWabvupywN1sYWDxuwdZxlNvxaNDFqv8CdBF2YViyajBUfAc5/EmGtyqt4
9COY1ijwUbxbRx9fxyL0pgmP2ngYawtUUJpJmV1VfIWS8KxXF6vWYbT6QA00
UxmDjY6TDeHlohS+av2nZed9Zt5ETKWfy2f9x8yLiarZ6i8OP3cjDHhH+/2E
PxyBCxiEl38x8xr5B4zXERfLp+NaeVbCkcFKfV8hqao/pSdn+X9F1vsJfmhl
ulR9DCKBEyGYXhqeacVXhvoUr0MWrP3os8yfUWSPwObxL/5Z6haS+x5+xujj
BBFpjm8fPPr+Y0fxDpHrmCp/j7MIeZ9hw0Vbv86fHkSUM/E3P4+41gcEpoNY
LjlYnnl9HCyIm2IxB6rSOZfGpttq3B4N4f792l8PFSSju/gmFAXvOBQBq+YC
vnF2kdS+ZByyzToOnZQtCRZdwdJlHWmZ3DoVkXPqfGMFWBDG7adCnt1fpXe8
x/xnIlWXPxcxSu1qAKI721Id58gi/Lpr//R/RtBRe3rACpvr93s2XwalGq0K
w4oH7wSoSOugv6/o1hl83hmvlf871ORcYelaTPbyDxpgBQgVM1QjyMuOHzFF
jcH32XMTe0cQiBAQZl1Xx/1t1XgcBEf/PkpKWyDFUu7zF7+j0nIkp+33R8WR
JHzPDln1r1EzAv/x0rdKbwrgwat1hzYzf/M+HS4QFr457y3tuDaGmtk87lm/
36dp4yxZTNR6YoQTslH0CchQVpx/AN3R+FkU74ZQ00MK/5Pj3CmF6z6Y44K9
6ebBpNV1zTT17DO20P3q3xvI+7Ioys3uV69o0ejjbPFv7N9n54rRY3gH/RyB
Yt/mlslN53uo6ZsSdAZ6vfd9Xhl88WebofPW37UWwuxv26sQV98LY5jhVY84
fM/3IRVpRb9p+lG6bRSOsNCp/Z5HkH0dj4gHXNWMNHfFaVldUWvaKK7Wcwfv
hbCLZsnT+K6IX3njvv/Z+/ioK2oLU6sffliQbc2TFO4s/ixXCRn+FQLkoi5b
cTI/I5T2GS5wxyHQH8qZkev7fhdPqtiwHW6tyMoTmDV+UtgYtBueV77xbDlU
HKs/V93zmqDgLc5KMzXX93q5GSF2AokwkT46fkYQPAADFM+947hAhnjp11Xe
rqTRGyX6ZZ9/+jjxLF1RyUMU2Sp+x8/vPEIk3FYfx+bnbK7sGrWOPXukjY9o
Rsb69RsnECwvIZEW46SK25ePLXQcb0SdjwnjlmnsFopiHwe/SCIOgkJDrOKS
DF143L6nv5cnGolkOzK0LT9l1Jq86Oi7iortFwfIYvYXQc6q08OUcaN59FFa
qr97poNxRVUAcr/uzxVv27wVFyxax+G69GjxY1qX8hPnR2XNeNfn6jfqJIRb
hnHCdqOer6fxqgwbxx21b6ofkKggMDOKqt9DygeYQGi3/YLFU/1qulJo+MUv
4GHzJvPze/3iUx6mFxIGVd2fdBA/f4Hv5L397o+KyrbiH5kN13OU6UTqnzPc
XT71BD/s95iwJHm7vgDOu2IafCuRu++hmuXu4Bbs168P8PJK6Lf7iFfpfY34
SEWz/gA77jkgd4TIye9xVS/ekL844hu0SOmAUlScdHw8UqigX0//PqNHQzN2
cL/7z9ApuEdEx6vnzk84cYwKqNacnVerKdLyhabV1ajrRZXXRYVbCaC54ucW
qimZeUlSXRf8XhCwstWr5x0PPwmeTkdYcrP6bE/YdyNWCrDl3/VWJxeiBtoj
I4jvfirLMNj3EgL0FA4kWDXydGkNLfvzN24dwzi+edi0H5MU2GuZ/vwTyeiK
HzGopi2B//LNJ8nwUGlKu9ow9ay/e2zxZcgAPpr8FY8sZ5g7xpt3/d0DmPDI
fANF4qnjH2/iSXL/CRu14oTupIGYsrDlFUfLtcYQpm4eFnPQLV4Oh62p8TYz
qQfghhahb6Tup0a+28sCTYe7zkfpQOLTJJmgc/8+0xrV6+fvPjWfnfFQZiQ5
XwjcUcchlKntRpJMPr91/CZgEQK8FafOH/1oj5uXum3v6yJZQarbYmiovHc8
6d6dsnsv/CfZZ5gGIy7U8nl3/M477cuwsBz1vPDE1Ym6skyxKq7XAb9BfYBR
Yp3PiBbpeBX999LNAO0FlNCunRmf1PWi0GNPr0iGlw7YjGa23uKdp184VXFD
Q4Rzo9Gn7+fEdZZdPCOPpn4f/S7NNFIe993nY87NUsGoO7zbihtsjiiHSWW/
68kMp8M8CQ+F1nbdB2Uad87xaoOO+rtMn9Mg/LwA0Ubo+JNRVGAWc/Z7yIUs
KpY++VX1VChHBtFH2Nfj6viTugKaFvG49KnEFXvjNfbbS/9BwwQ/3ZiClczW
3yn+mja8WpTNwPd6SUHMJxoBnxvrkXVciUK6Ti5ben3uy52Kz5CUz2MfJxYA
TFrPmNFuFc9oyT/eg69ZHU+nwcMkEz7798BwaAFbGGO1/phUAgJI6/GwVh1H
AxJdDsTnuYpfIy6DfcvQaxYO5BMHsbsBPQMuu4+OYzOC6aRBU+uhGTXtEt3M
68dTnpGoDhd6Jpf+1qehtB13oE2YAbO+rz2ACKSfgy5o4am4gBCjPlX7dLC+
88QZoBPGW9z09tL/ofC7peLYY/RcfGEYTNaWkGOENbbVv18vDjtY3dadFk+j
/YzNwl58DTMHA2TXtSNFzdFxAHY9SuC3u58jP4/gXXGMjtXnc6XPYjabQXut
n3v2XlM/ucOoOfuMOC2d/Khdn5VXzxC/OK2sNArPfm/jnxKxhbgk13e333HR
lO/oFaxaBzC3n/iNStWu0c8Xj+zMLGQnD1nfKYm7cBTAQOn2bx2/0yHcsrQe
9d3FJe+z79h7ZoQgv/EFvkoP7c7v+7uQFV2xTyH3fPbz0niWF4ayavLZcWSN
l9oHAVnPcVHoNI1zsLvm7/rFQcplVUTX77+LxavLv62IDtTx34aHVvgRqbS6
D0+KQ1L2Oho1HzE406V7InGWtmbFLdfeHGBwaqIVT1pr9Em6pvRdU9kNcgpQ
j97JPo4UBM07DlXn2DvOVxiiMzpRdV2xZb8idm7QW31mccwhwCutzvvbV+Tk
Z3RyR8bO1G6vuL37oGODZFr16UQQD8BOm3s1/4s4M2MZOJYtHvcVjzbMkfz3
1f/o+IonAPwCQMZRcWxGTkCc0O7S24Gf0xW70sofW78/+oDXS1jivdr7I0eJ
DWJww6pqP47E+W7ELZXreB1HnsABhtxCzKgqHqiEkWX6UvUciViumHGtEb3z
o+NKaPKFtsJrOzv+WRlsbmf0cvr4RCJSI/ms2w9oUsd+ESg6xLN8vVHm8Ax9
BtKH0qURP/HxoPRgOPt9iIkRLiAw6rz6uduaTs3sM/ly7Re4AFjBMHDEL/p9
8C2iruiSrO7Pf+JJSsAZVNOj7/M0NueVkrZy5z+AOfoa3xlG6efPF7dP8NI9
fYpHDGQQcUifEApI7V8kw1DtdtcA2FnnY5pIGfEIM7b3nYDBFs8HCibqyIpb
+XHNNe1bryzWpFukC3dwn6ePrwFGzgHOEAmhzmcFRhfXRSvEvDtuluj2oxSU
7q6Gw5k+Uaw2t63jaZtEZYvewLU6TmUZlQB6p/Go3DNmbr1pPaJXnc+DDchz
43li+1bP0bsf7EmYc+VTELPJK+CUjY1x+UNFuQCtAfkvNKyO6wMchHST7z8d
h9lH2AsGtHhb4Aa2d1/jxb3lW7+LA2qHAy1Tq/oIDCk2g8yP7GT1+7hu4Mie
L8xq/osfMVtGk675e2A8pGjx2uJtsVU8lpFw4Jn9P338iBHgT9kqq5/JLHYG
9096Se1W58nbAYE28nOeXcUplMTG9ZOjNe4iZJ84FsayfJa+n7jNl03iikxd
HUfyponhT1PVu35xtERkSc/h6t+n2aeAfF6n3IoDykUkwxf/1P6IIBWPuNdu
7bp/8cOb6Zs+9LbOjgfiA7QMaNXnL6XYX4G2J1zyip+xbR/m3mHcVtwQzT+y
XG6dJ788haQL3x2g4gZcyYfjy7f3cfKKEtGkvrT6fVCAZn0DVDqe3/FtsxS/
DJmv8bsPZkQatYAdZ/nJQll9NhdQN6hFmeY3ji3/RNyPjGjNVadWzRknB4Oe
xr3P9AIdJiSw2fUp3H+c3mEcdbnqOBQyQtKFOztLZ34m295iT2HAtCo/BJCM
EQ5G5d1+solDx3A9i4NCXa9ma5qR1oH2W0cbfORPR4zDrtKx55qClQd7+/lY
m9+HtaVlr8qgCbD39eJncQWwiLKSqOP4UoyPP8tYVGHPf3HzKug4vb46f6Sj
KNJpZIzCsYhT3QWAhrpZffyF5m8pRD1Zxev0hhuDnjEBONfvfYu4Q3y6SYJv
/d0pkynEXhEcLvwSqcihyopWAlxPXa8MMPkPgsRVfDG1S3ofyU0JTXc8AiSw
OXfK47oPMGZwG1us3ra+3ueJ15rhiXlO5XUUnSJguWPOXaXLMTP0iSr9FXvL
yltU8jR3OHxpktb3EiqzeTCKPV5+H3/BtVASyzv9i5MYQNWB6N+KlzotgZNt
GSeW33wc6MfGvMVf2/rTcaCm6H7oTzz3Ly4Ric6izLvPn9fc/kpwLICZveJ3
/FBB69Me6uNwV/YMwcm383ccuL4LuZvxYfF5X2f2aAHDVp6l5wz5HElM9NrY
URwVV1fGy83QsHj6es4kfpB41JVX7YPo+eB+Zl1HpgYdN9c3R3UZW9/nOKZ5
v9NxLl4qoOXSgqFTsYGY1fmocmf8o6Fu7lonlYgvhFHBP7Y+T3XrFUAK2ErX
NaEUAppTHLzO1ccxjOFYmP79r+5WM0kZz+A6SXVVnFSC3gmNgX3v9+HzuS/v
1asGUDxQmE9PI0prSES1/hCWlmbMr9HzqudiHjliWHeMn79YumMWgTtsCq9S
xTFpmJsgMd2loyX+QvGf6OKWDkAwh8BvuwmHtnfHoxap7RRnnaOuF/DrVZSf
8WWq8wnMWXN4WFb2vt7Pa6O2H0HuX6V7MyNkPNknSvNX+YHOKz4lWnsEX7bO
Pwn+3tl59gj99Pt5xxyXQBJr0b36KlQ4TWDRzkjR9HdEk5PQPjf56ykdgBmW
qiH1xslqlp+IcQ/2dfpRt2qizhOH3dQpvhtn+QrNzH5xiY4MyLpPDodH/5pC
Mo2VyisImxJqISu/B91XcT0PKosw9L9+KSiEB3nG23aVvoq4aYSuROCKe90H
ShpXtHWoHhx932Jy6YPD9B1X3zfrY15EhJrmdzMqNwKACxojCmsdB4BF8Nj/
zYWnvn+oCHd4A7PvzxMEYCbdk1pD3Qe9yf3V0GSQ8PR5kuV2Z2hd770ueepq
eGZBn8S366/XtjJwImJKvU9h6MtRJAa0E3+/B2vHW/wUlVj7/fs098gkxfvz
i4sj7iHzGuFMk39YFVemxJKPKug4+/dRylV9jxRce8Upy5riZbnt/md8T9iD
YwmZqDy/+BlXrDUyQKnz1J1B5wrPvXU2SG6QUbTYYh8ctT4MA3Oi0CS3tqd8
1cXv6MuNt16sPmSIuFtaT1eaVvV7poxsFLbszJ33gnW4qgg8rr34p+JGqivk
ZaP/uv8m5kbO4w60pN4rtqIR71KvXK3vFBWqGSPnDTl7Pn38afAlEDH4WpdA
0xCf0pAnala/N34yhp1xe599//Ut8Y6gubJAVHyGab2b80jMno4/rxvu9aY8
dXyf582OXVbcvnvcpO5XD8WrzmCm4yviEhHt2Aqvy3MHpQ7cID41tW+ihKYt
ZGKPGTU7rsg3KXLZvW+GIaVQISIC8lznOfkYziBK+FtufRzPWqkgLULMrHgc
mbVjTdiKZ4drQy2CisEVTZOt40Q97AhjBORScXo4mjl0bO5eJ0coASMUP5Pw
ypcAy/Sb3CTkzH7umQtHTBdloPSl9bm2V1glhehRfachdSBOlV7LtvV3Gr1Z
S4nHM4qHpT24onkcP+1ROAoeU7T1YdZeOb1/caN9QDXsoL6fcg8A3+cKqqTf
/4dek2LLl7n3HEqpREbbzTYArf6AFqOqdwVUPHruCWzNQtUaeaffXHFmz49b
vRue97oXhyzwTCT3vXheEH57SHjhH1zd558R4joi/OER1b7spYoErvRai/Hu
uLJCbhGxitrfzbbgnPLCnFvp84tLPxTZn5V+L79acU0Phs2vo0wdPxrLkXNi
0Fk8o5lxQUxVaFSA8lZc8nCFQXKP6/d3I3rJBidffvm/R75eRXi+oNmj1kmN
Y6ga1A8ou1rPZ0AP7guHydaD5TZwRP7NqQLw1Hker354RJWAmju+XhF+9jPs
5vo43jL7S8TnCzfIjlDWpWcEd1O+ABPbbZf8ShYYx9b5h5ke8g4D9c5zYLJe
RB85xb3nMgo8Tz1G1Bzk6u8aucUIh9nOLL6eeODMW7o2Z+knT5nz8VqgxYS2
1oEZ2rI+KmXlq/gaM9LIk0cB/hGlwoq/qjPqCSPQWp9nxtH8uqLE87sPsljK
xBS7oztScVKZXmbg9K1w7LHJHiOty89VmDpWXJv3CRD8Dvu24lrAR9rMbHhr
f5k63N6nEQ+bno+gAGKlnAy23e6Oj0wrR5z2rp4L+MNHsObe3q3nVqgnJGvw
qv/p2c5sC4b2+VgtNBWfIdzGGBjvpK4XRwReZRiLrc43SM6TBIeMIB/Y79sd
wb8brErGtGbHgeoIHhDR7b59+DhPxkHAj2evA4H8xhlnGab2ewI+Rw9RT2Rz
ThW/QnXMP4DS7N9HkvEkKYYx2OuYsQUpMKbWyset48YNOjMz7/nv93Gdtf1+
6uau69mA0/a+XlnEu/ZB4gMB1o3Xnr3menO9chfQud6U6qvIS+DNIsZDO6Pu
A/qtwpIBCpnaOk60yOB5ArUtn9xXxFYuE8PFWX5zkVq8MiiIS0XjTO5gR7dY
AsfpZ1Tc2iIBGtGt/P2emy5PqTNIqN/xr+ivBSfONKiPA5MScbOMNysfII6E
s7iOWKWV/m1oXnGAZQUKnXt0/LO28Gww17JiVlzdBah0SmfureNe5thnvo6q
dRzMRNM4lar9cOs42TGVkR73XvvLbVrmdc7o4SzcOPj3rml8ZA9vvXQm1KBs
0a/T/6/18I4ZAYVXJIbzd5/jm2PyQ/Og+fuRq8XNM2q5Zvul+let8hrwDlL+
LDy2jGXhoyIFWXkRKZpDuRCvtVE+Jj7TXc23pUUPS1xxSp+fbOl28+fveemf
eIlMdO5/f9f1X0wFX0Xm/rvWKUpCfJnMFfs4ZGSe9L1D66znAkP4RNLlhnbq
5xXHG3OKpewp/+hJn27f05NVix79HBWi119T95UtNw4DAXRLEpXI/W/MfUsP
kD/mjA/cVqsVSIQKWpHWGHnNX9xyqhGuIh2j+ESBH3uy9oC1Wz9QewFvF0Y7
Y9d679jRqo9s8XumuB2PztgRUaOj+GjiclIVFj7scX7HebcAJG7gsrq/IAUe
QZyi7ZubRCLXgvFY4s7Gubk6NOb9/451W8WlHNyWNXvbD1f8iaIeTS5D37rv
FiAkJLoyBD3ujgNSW4GPGNnXcXBkvHQRMji2vi8PYh+DyYhyF4/mjn4cFyHZ
PiGC2XHSutpDIIJPvy+/p1IHOra6nx6+Puye3CUVEdDMXxzwWlIXbxxU+o4r
zgPrCHOlrtsKBWaEF3Yg2lTc4hMGDSWp3nfsifCCdCV/G9Ks9xfLbssoOdl/
19FzS4OQDyOlht7HgR4w9XUgXupzxZV1M10t+PS6PjxksUzN4UPbq+8F1Nje
9uSDwvnFIQHA6PicNF7ULMZMBUA9IsJPx5/Alu7r1cncK36t1+TXlXiKF3+/
4tq/NwnxnsvS0XE67Ozb6So1XjSa36kygj+8vvMxH0xX0FPazwkqo7frt5qA
OZcfFgBUGuoSWQS/msfRbkUeR34dgdxUXF4EGkHW0Uin4kZLk8yht77noWws
DOePMBg4nP3FzwDFsjBRV6u8hUjvjNRXmn9jddyzpzRGcz0b5zk5mzFnUWSZ
79X5aOTJPu+Y236/K0rql15SOMbbFyeOTPH4bVF2PBa5xCSBY3uOibwZm6bg
zc7i8YkjEKDzbi/Qp+Jx6Abu5eB4fOcz71e8/UhTv/LGmDByE8ADA72p3xth
gkj579Aytf7PIPiQ7AJYLB0AcVcuXjt3XoOKG9mqXMI73v+Lz7C+75j6Nb5l
vtoAIxoQyVgrzkc7mmJq9e2/OMyNbHOFsnF98Ui85cVexYMQNeuwtysC7r7v
AdrAtEVlfvZzayaz4gRNfqL3Cz5YGsFbnCQkSX/xFUG13/OGcL2X3lHIbxS0
QlRnvFfHscQamj1hLM0+PulrS7f+VewbKx49rzuic1EjqzhNIPlWhvhn7SN6
A/geGBn+vtaljH7Zn1LN1Rt6Km4T1Xcer+zm3XGiNHvEJ81h9oqrFCErdZpR
ySqOO2uw8NrdPH2cRU98hVOVSusvPkIVu5MI6rfMjg8AzKzNnB6Ojl/Jo2ZY
Pd1XJw+5RRc9ZfPR30scMAQYuvXtTw1LqHfutVH9la6IngxNxj14m9/qWnlR
2O30fRRP14cnYe2gHRc+7G+LWX0cfCQtggAvuv+52IOADFqzIBJGxYldL/Pl
ELK+eBzFoW2IdDb+hFSilUC6N5/WP7lZ4KA2PFhXEcvpOEwfnVF89tIxvqNf
GVEZBp1n6fmY9usPWGp8+1nrp8TNcBIKArm81kOVQiig2jn56RWf5KfcfoK0
xftLI/kFyZyv7m6d//XqKQD/GjL0cxIF64iQTFO90Z8fhKtQX4/UFE/HnxSW
vmW7ild456ZGqg9mZJQOZGQMYtm2svKV3lc6R8QPJrmlp/W1br4wr988Wd9r
6zisB0sbT0kYDxUfhHy0UTIXqPXK0HmLNypvDFq6f3GbMZozhiI7vo7TJ6HC
fAdDWPOUNV++G0yEd7b6gSsuebSM+bav8l0Sl+HG4AFfrZ8T2snwf3cAQN2P
XRKR6UTOqCvM/l7gkD2ZoYxg9Pdyg1+x9maK0++jLkmE2DbWXt0fg5jS98Ay
NU7p+0hLgY8m6bfjm4ODJIPmGEJSxOnnEDwNNAU8R6ZS1x9jwkYdmw1Wbomb
jUAQIGts0ZTfOo5CcLz6WnutD+QrWDDOqCqQ8T467kwnLcMtpmEVT34+g7nX
9KrPDwCyQPKQImufeoifKAnwLU6i0XfFT7i4X1lLtrPn1HEdoTYHFqrI+9tP
03Kw4WDOEs5YW8cj5w/ROSD+rop7k1B6Y2E2xhe/Uze6CFv3f2zsu3LNWAu4
4KzzoQih1S45wnB6Og5GQqdRX+7q65+HgQgbglnziyNeY0mMj+rmVai45ldk
fV5xyrpudp1b7qK4X8XzItOX/qxJq5f5ruv5pq8AJRE+/uLo1JoG8eurfOOJ
bQGALAEH4rn1eyl84KhgzCJB1XXWpcI0V9iv/ezrnAk2LJ3sZKu8F7pdi03B
4dEtvmfgmmcEdYwfV+lW4R5FvzjCQGfjCR/SeCRSAXftv3+4U/ycUAjO9w1f
sz8fzB2M8OAs2udJb0GjTqMsbvAVB81FZ82vXlcfX0F4YIwG5vydz0QQgu1C
Gnq+82Fmp3NGfGuVzszDt4Wiu/d1xTnpL+5aUczLjHkr/J64GTJJhyc8x7rv
MS699r/Ku3zVk2h7DE1jdX7P+r3m6dqnpsgoLfV56V7WYvOf4+jnUxbFCsv2
Pkfl82gFMrjBaGHzxtf9gh560nlNPvu3j1PHMCzbUvOHGVBxRm5b5Jl9w/nF
46cTvc/FsKHi5i7L4jP8tr96MzM6LU0u6tvTftZ+kem1Mk4iXfn5A7f9hJh6
a/cc9ZyTRnrRUdTLz74vhNagdFdUPY+avxj5cw/d4icvKzwqTrZC9av1u2rf
eWKdSz6BkYEWcp1nkmyYbiX/Kj3tvzgFd9LNVJgqruEUfjcfp62eK2KCx7Xj
vypWSk/geVM9KBRD+dnrsxdLs4vOihbsX59KnGHpQY4tI7mz465zRvJP/Ls6
jgycBY6hc1+HdyrLWM67WXg/ckRv7wACTsJXcaMsFJqUHuO7jzpdp471biHu
51Z6bvIQkTF6P3fH5RsU0WQLle9RcAh33DAFhbOvpzjtV44TXH/rd4WYCxuK
gLaXv7PM0tVCfDWIGtcXxwwiqoG2d/X5PGoTrJMFctP7kaTwikvfFu3xvZ7/
F12nRNnvcGsrPoM89Tahej2j40CniOWaoueo+yhf0g9CRDzO7/gT3/N8L3Q4
yRUPcNVTtEXHoz+vrKbhJzeRM3T8BNM9zYDBPet8FKAwPWiiAXZUPKAUBgNP
OoN1HXSkDVLUH2Qh6ntTsMGY4xvt1UfSOr3CKNnoJM/SH3jYNduR6MogQG6j
4+v1ImN1cox+PrEmaNnucdEofdRoNWQzsR+u1sV6gukGX/Hte+O3o9hGTAn9
EYSgfpeyGjiLEogrUe+R+HSVIpy7f8dhvMSBCgLOb+w4NIPZaiS351++Stzt
eWfhWpFErSoemLmtGTKs9BxQIBQ6aW38bn/hdaXx8EUh2cus+3wonnEah3qX
mPXnk1LG3tMD398rkzxpJATsWv1SBL4VIJVWaZrQFY8g+quoZyx8fXFvhn7m
S3aqOLR1JFTSjr3qOihN4xT9GBGctZ4AJRBwvTLtPaufxvsybzvQFnzWVtfn
dw3s7SsCtSgzFX+ya+EeGXBX/hMfPhV/CE3GUhWXPnBKj3lZ6ec/YcVFIQra
DwG+4nmJPHWRfO779cp32ATyHqz6XSazEUqPdkbnw2SEHqKk+lgq2LovhA2M
egmmEeWdHV+wAE/kk4/Sp32S/LB6txrHwbrjzoa2Wnp09b54cQNbSoOx++qJ
Uyp9AADiSlzxM1ZxeRygO4+OG4bGO0cJ3PcrGyyvUyKCGjF/8aBcD4jjOGj2
cxUUFdAEYv9V/dI0RGGjXppK4x9UyKTV0vt/NV0r7uXHkZsgS0f/3oeQTJTZ
/LOj7/uvigLaIt02x3/rgAbug8tH7wsirOLQS9H2U3cWftimiQknz8Uj3vo9
iizhHXhOpIPres6Zke6Ke8VdfT9yd+bcK7VZ8AsV94x43bWKV+F5nlcwiUHX
Zo8vfyiSc9Klc3ubMHflJzScgW4IOEZu46k49YfIY6fCq/to+yA49WgWfXhF
Cly03g3gDVivveN0w+PeQnii9E/0/Q/KHC6c8vFvPotWA/TiPQZCrj5MkJ0A
BNLNTSPrqvhBrRAaiXFI+dFb+FMXhx1tDt/HYaZi9GgQqzPR8fQBaNIAzj31
e/egy/eQVDKH/OJIRcxL5Xz1vmfcGpeLGefPa//ikc3YrPRfXeAi6Dz/frFJ
y1b1LMHv6woZ5KVQ9/HveExFlMts4+44CudlZVZaVV4RMSNjFwvmQICsuB7O
iJMLqZan4x5L2gBHAGr9uxDJsuEcaTBVXhGxBipbLoZJ0dZxu4LK8g7AvY4P
Rn5nIWdLMPq+HHq5a49ZcETZK369NCia1twh6rodmQhEH8sCe3d8Ko3o8D3p
xdX1PwMGi5z92trn8fnrjUnRjiNCJBWfugJKwrXNr07U27siLUI8svG0ERzd
stgDpcvxKj40UU2nwi3dO85miBNOVADOyocPT4lUR1tubxw1xr43jswDaHDp
sYTJn3kfFW5to9lxPqR3THxkF3X8CCg7vDf2Lj2KJwBVYFEeF0DYdZ5RaJhR
RVRpjFofqIIhIoTU9ttA+/PmN4t/VNanq783jU8Il7R1+roZ9FqpEEpjYvkX
jxh47tcVgtn9xQ3l7ORHgHYVlzqQedviVTe+uFHjwg99XVoqfgc3cyZh+/Yd
pPgjs8Y9NrOVx8YsWPLlhYU92r94rFiPFGbH2fGQKd4+fRjnf3HQsCMW3Qra
wi0EEYuYMUMIWtf5xT3IK65DttY6f77jEpERc4M5+vMGckHwBpI9Z8fTkKW9
jYXR57kiRXUGlEirva7belXR05z2IvwdH33VQ87pGOCz6mIOExFjcaGxD56K
4yLcSNDP/HypIJP5o20YZBAntf4Hd04uC16Dd9t/cXkY0MIe/6KOG6YCptym
p/OLU0DhPIkLU3qVkIjS+997FI7o3uePQGAtJ7d/N45U/ByZacchu/CQ1LbW
CNwVT+Luvijq9cHF9lXx3lafj3LPPjipPBUe4EE6iweehxSCuM5HPkrpf8TF
p/PSMyCHi4AU1vpZ+7ViQSsnfOdAjit+xxbzxV/M8pERJ4DCXFV3+qm+Ir7V
BnoOCHHO7hOeQcbyJVHF/PLWOg6ZO3eZ3ZTts44Ts6V4WGmzPrUfvV0qi9gd
la6zPz+zg0XFJRlixWmaGiQ8MzJq9Xnd4S12PvGJ6PsYsjZvDDCEUXhsEuTx
gkMqRx99+jgHcu+pLXdFMrPjvyTgjHMmPaXVcVzOReuBz/XW509kUrUPikAn
4ei42h0kF+6xeGFPalbYONtCVHn/4sH/r8BVPc+Vv+ldaeigkyESV95yRlJE
cmhezI624qDtuP1IZqwzK/67XFrbdyR/C68lc1gpR9SimsgdB+Z77fhCV63n
AQoGNEdOLzmq7w1HVt8BcXQUryedMWxhfnrBotX1MUmG99CLzZTtL/7IS6mt
WiRaR0t8JnsjQDz+O85v518xxSC8q3Cq+BmkmdU1AMQ6f29FZkKBiHQecmYo
E4IZF8Dy5Xlinq03o98DMVTX0zaLzm49m40DYZYazdGwoA0cr45TU2O6BKh5
9+9S6af/rn9sMNfxlWEKuBU5hP58min6qIi3V/8uHMcRcucTWkN/Pj434fbx
O+v1OW5hdI3/5JzrONQ/wy8dkSepfRxPCt0TwcnOX/ltXIaCHFaN3+XPDv5G
lO2Jv5lu8Ky4TPV8VwLM47vjRuR+HCXLs9bzK7q+v4PDCULRr4rHbJgENl5Y
4bo1FFdsJTSWt9ZXxMSLd/Ud9DA7vIrHzGAEGgvienTcvF/jH0u0+x7yId7P
Cg+YpbovV7ZFxIAtKOeqB/GVcOU1j5+n8cY2C93xiORcR+MA423odXzv+ei+
Lq0g6BMsY5IGdV/IOmbb8QIAjt8dl5cwSdGUKL6k8ShKKR0wnuBXPW9EvnR7
dyd6tN8rdz6siDh73AF9VxwBYM9AkaZSrZOkLqAQLj2nMD8rboHAx4lQdc/7
pIUzHACofbtfxSFRD9rKXKm2ft4Y5TGQoNXife143CBSNNzJ4DsuiQp85ojU
fcdx/GJOQU613scUvTb+9Pqvwg+Is12IAE14H33+0kbd5CN8jaovrte4lUfi
FoHu0XHZB/PQ9dKWKq7fp5GkPDq6riFwb3WHak2jpz//W2bPcJaonM1+X0hJ
oTYQcDBeXh23lmHUwSsWjwYicQUvuKUmufs5mVvcBsi+GLRX/zanzEQP8Iuj
Tx0fIAjKZERUtfAe4uTopaxQm8XHfwJL3uNTQ6q5/HOfUM7OqAwTeur17Vpx
+wum5LeGFm75iTDuER2wIyisOn/iOU8wetpsd98vUAkiQBRo5lU4VZimQ5P8
iczBb6PZO66RyqaALUf5F9BqiriEAumSptX1B/bSQlU3p4h64+xX5G1yLKC8
ytujFa+juEL/7d+b1swC0ZbsNQ/xyQz3jpHvHa7p0XENV70tFVrPDW9pspEz
ukX8QzoeT1OzGSjW73uB2I6k+Pgl9RxqL0chwYwfIruPo0OFgPEm7rXvQ9Qp
9TEL9mCAKg5jC5dOyvcpP9a00g0klPbAnrVu3PFtPTJin5rFdT6IfTCdzj9m
VhVXqqVufe1gO84kO1qenErX6uPga6AkxKKo9EBMkQdHQqJYT1ixHdfLjoQ9
beijjzORguBk+BWWfqP52XZGi8gE0qbRcR1ryjQ7GETlpZhoxHJI7ujldvwI
QfeOb57UblX8yFT8d/g0Jvq+gPGTYZMMPk/xUJ4IoDzJtAngPH0dYqgeY3jJ
eK/PAJV7GII6iKN0V9gsQNxdccz24NVzeMaOOIiFOJfUfTxfvEd0zMZTfsQ0
uiLr6z4M3j11/Tm636/TyLxar1tcF1Of/tGB6+fKlm48tSLXWHjyzHvipRF6
37n1fQzxj/jJb4sxkDg6/ru5r46u0V7lddqGPHXcR4p3tb8YPxqWDZ1aL1rd
L8Q2ezLVS8V//a5k+DjQsrSn9HbA6ilwR2keAXX2cSIBB58wAj7q4yjztzA/
4hxW10ev60zLYsaSoo5vkg836Q0nprJ3/Ij2DQsDzdqOvxWqh5qWUz/nVmF8
7LhxyZQrHuuNWI6+xksVJ7sK8zuy1PdzxRcDZuFk5HOV7hNZCbDHX/4XCY7S
TwadgG7cY3evZKjvTZKk+7A0gs++nlO3RYtvi4lHr2MAqWHow7zvez8n0EYR
iY248urraWG4I0kUt4C+nnydGXzJaYz563fpICmbogr+lF82LVYEFUsEKHLp
D5BldktIe+kzlA4h0J1iJ6M37LWqHwPwchVMwrIBVJz9y37Fm81TML74WJE3
07Qo3yXx/Qyt9oahL32/Byo2eYXJWFRwKj6pXw+bNmR0vb/Rhx3cs0Kc6DxW
ikChxJ3XU6q8i88RR6Bl8UY77s/PCNBjkMXspD6vQSIP0w0g3FPXZ+jVmB+D
qT5Xn49h9ymhi2hA6WMkHolku/xvu+rfaxmxoMwMYYsv/LyzHvq/MvpvLi/L
wHzRyYZ+6+PbrQmNKWqPu/RVyN7Gk8dY7LLn1fGP+O0BVmP+9Rwcv2IFiKev
MBpvYw1L63gPe31Vf/g5Q3O8w7Pej+4ranBuM26hdOqKx4e4OXPXz+zAvV5J
/Y7g68BB7t6/0gyRFv12FgSxq7+XnoAK17T66n35LdhIMnmFEXAqniHiHkNA
a3R97x2Yz4j+FcpOx+Fmoyzuxf6uAzrPEZoTUunq88TAjmemaf7T+BMjtewv
8ai7S0fuiX6NxOtOFVQ8xNArzhgTToI/5cugjxZ1tIeW+f31z1HRXvyxEd/R
eabeGGSfzuv5+Xc8EdMG+FBL4aDW9US0WnE/IUndfTOmj9vSVwqSuvtaD3IU
aObIC9vzXD1C5juY36K1ruIo76EycoJU/VScI17cKKksNe6UGhOepO4xg4/a
B+nyU3KFboTm6fdFZQSewzj8fgo/LEWKi/welcPju1+L047lRD/tLF10PDFj
6pFmUoTc3zhof37XMNZlhFDx0Kn29Dujsdzxa3tdLmIVW+8vd4KZeagWxFl8
qEcbJBrwK3e/9ENYHEe3lw05ofKtzyck0xnNXJPn+rzKnUgeOxYyJ1fFdexM
WZxW6zGmxeIWx0UPn77Of3fvTgB8Kfpe+QOQ1oyxBgUKffqOZzCr6p/5qo5T
D0n5C1xe+5oOW3Z4QH22UfW9aFZTY/pPeaTOkythRLKN/e7i9URxwBMedRUG
XnU+44kAwQzX7v6OD7EPZQqE6R2r83n9hH6HsO+pSyqeLni4R2DOV39ehwM4
BGfx957Webrk1OtGCBVd35mgjFcQCip4VH0kztcNVC6Mnfo8Bi58beS6Rul2
5rULSOME+FjffT/xNHT9IGfP8iX5xQFXJWrEibFT/+JareR8qVmG8FDxGaQw
Vj+pqtmfp+5heTaF3boejFi8BDxaSt86Q5wwploauZqA1xd/stqzRT96voZR
ACu0BxXdPk1Pai+/lFvW9c2tJs6N8Bb9reIdiOv3+qX2z64v4iAJgED4ZbvK
X9ioP3uYST2lnMqv0gYwYNQryUznL578g6kTc8tRul7Er+M4gW73EFGr9cFg
LXCY3w0brZ9gVKLPxieUXUnxYSnJxtvqCjtvaxzmTApFEI5G+VdHh49hxgvV
LSf74miqV/rZjl/nuV6Yxit9LImseIhhMyrMltv+XurYdnGN3L18q2PmfacR
fGBJ9H1ZenX2PykrWv5RcUJiZxoTU79nVJwjXqBHWdDv/vyZ28X2LfJzq+NW
qissbnD+p+O4X95eoKTGdZClIc3kd2s9nf29d6ylqTazjdr6OIR1V5qdIzJ2
f/HAhQjxxPSs+zwLGTXNrmEo2vPulVpPl5PzmS5dx9HTyWPc3rtaT6CFVHd3
0GP76vP80621P1jj+roBLFIrNR3z41fH71cUKuCpxjstXf63JuF8W3qMTzTj
9XPvV0q/8qJgIY+wMpL8Vr7H0Eb1taLbOXoOuyJEi9+HBUpzteLRB1PWv5os
/fnYEV9hUlJBrzgeLPu8qKqSsOj4XOlSRaSldH2J8nufAbEh/buvZZUlwEPK
kJd67TtmZ0d4iDvnwO3q4/wRErzeZgD9eVA9Y/xfXk0DvM/HEu3SAJ1hk/zF
kVUIK0f6+O7+lW43oN+mvSIB2jp+GYDsRECxhK+ORxdrC7mHambF47TiXTn1
FkbHtbCN5Pbw5o8+jowpa+txpGaoeFrJBE+1EBpvHDXGEY4UJ5yr30d4d94U
NEpjBFvxSfdpS+/QoK5+Lyai1QzLghtSf97M1F5xcIn73kcIO3k7RQSZTV1P
naTXdXfGXn3rOC4TB1RMztKx9O5vkRvc84YcfT5Un6Q/IY8/3TdYmYzvYcxD
6vf7CE24Bet6xKu3zmfiiUcFRgI9+zk36o7WcAyTxt3H0WfAJjLAejp/XrHK
AF4KVPNeX3xGnDZChIAuFdeFR4CB4Dbs77j57h3pvEcDs+J39im0jSPS8RX3
a9I/OeRmf/3kGRHpkcEtQYH6XbHrXMneCUC3j4yLDCcW8W9G0Xd/nuwWG5Xf
gn+1b6PJ3xKS+F6htVc8LdwjG6px8VXxSZ08DGPNttnxFfQT+avwP+p8gsM+
ZIg63NV3et+hPQYYkUP4u7/I+yqq33qOPiQ5qDgHrfG6OYMt13kigeOjrtDF
y9/wF9/vtFuO/ZWvqO8d+mIkxtI2Pfp6SpRgjC7LzCp/Tw1CD+cZI7ytdUpT
LoREaCp5t1465BycIdD0jDxknT/85XrimKG10sf/PbK8BTJVRZ9dHSd8hvl6
W2T/nrdMXwijetuvGD1UPEgqyJ9ohR/9vdiQI5xmEut7x89MiWOrDuHYx48h
raUsmi1bn+eK4foYUWkp/MkM6Dn7SIZR+xcf0NBPpJmP1ucRDzcyeqIMa7aO
B5MdnWF/cf/FXwcSrSjclVqfVZ7UagxpsdSvvr+oLXAbPDOmNn3H5bwhNsS0
e//i73eaYV5Xv3e87aKEnObJ08+VXimsAUbftZWu7AzWQz4gvwY+qvPRZt6j
sKqBufd7NGPYMt+x51F9rcQzhfp9sbLymB2fcSLeX1nKuTq+4lV1Rtvr6utM
OpHCYagi7lDHU/UN7Vgoxf4867c9+pDbp2uUcpbcxODKQGGwnvPIIVP1vJCF
z74+UFYc3ZEl11X7vrgXDPWdrEXpcs9wz+N4c8L7l58m1fnfmgbb5cE7n75f
8fNGCp+kLJ65dVxSivREZbd8umnqxHaVQ40/9nq1ssSvQOFH404DhyDgpLEe
zcm/3wv8p1XCICfwxi9ucjijiLO1vy0VdbPQwwO0zPrPjksvyVu8jlWr4mgZ
QdF5h2t+Mfd4JD7BObNI+ttfxDWvLYRsHp6rj7NGlG3IuEeJoeO0DWYSyMD4
/uIRzWOMGgpq6YCppo6IvsPRxeet4rc8ZlcSolv95aUTIRWYXA9+iyJaxWmu
3CObqelknc+r12k/hYT7zp/SO6IAIcpUThV/Yl3nluwxkql4pnYr0hLEzvvz
BChDbb1ipzA6To8plwCo4arzCSAp3fBwSP/yRgh+eiBe3nQb/vJk8biCUCM9
gQXqfEiw0JdBthuNbxeH1bDvwVOVT8qMwQWArU0GOqKuw5X6R/KgPC2dE/HQ
PaRGULB9/mByUEQh4/+qvXp+mIIrrY/0evZ6r3mep2d/hz5Uc0Nx430uCxLp
0j2LTgGhCustsZ5Rv8uMSLuV+QAJh7rOtyHc76XeAFdW6eNFV9Hsi+8qytjo
z8sbN/wPq2LNcbBh2bAk4z0s53Xd6J/sMA5brM/3+ryhrOfKn6wTW8efwK/s
GYR26zkJlUVFFgOFre/LEzYRsyxaG9X/n6/m1ssUu4i79XFWav0z1SkG718c
XstmB7lJo7uOj+z8BGtrf7v7eqomMcgiC3oWLtTqj3VGrWKnZzhHxwndAZyh
jxS+ghXWE+cyellX6yQn/ppgyLqMRv/ikX0+InpwJp2tuJ6Z1+KObWQ/n0ga
0Hu4X+fo/SJEKyPStygvPeEMMwK6QelkiPjFjyhmBDB89bqE/xnw7AtA73UM
Z41q4AI+MVRZFc8eiF6zx6e3juNxAC794+vX/oKW8cTl/NlitfT3Xg8S7SC5
QFJP968SpwtPDsa2X+81RcoY0kA7Qyb15z3gdjYqSVvpr04rjxn/Fenyu+aS
kHLj9cHFKlx9Xyg7PdGl1f95SudnJmWQKcG5xfD9L36GFpfU91Tbnh0n7pRc
+4TieDq+MJlScxMNrd91QrFsUdM7qHfU+cDcYgqmazf6eaCwircFnp6qZO/4
Sm3NCOf3vFW+YRBBysrI2xrV1+cKPC2DHNOreg5Rg8JUxUg+2led+4idTlH7
KyhG6S8lPpQ1OizHVXMBcTyZK5ZGJjR9Pr/HSTnG2Xhp5v7FiYhK5ePk3H1F
ED9b2+BVoOde++aA9fM+YssCWI+OcwxElxopr+s6Z/6tYRnZ4+86QwYZCWnf
UJKt4xgUj0ikRWLor78dzUVzZS6cmRPWec4jAnJ7/A336j/M2GiE5Ku6fDr/
dGqqLhJq0xPZn6d8CJf5Gip93/t7ECSgNu2IUFacSsvCLVOwbP/FoeuoKRm6
9TrJnIhxyBGdpDH7+Yy3BbK73XArPJJV1oQWV/4mNFN1CkUeHJTfOWkTlO4o
ELuFw6r0y48wtCrOqy4gLHlK6XVM1tGWeMYieSX/rn9m01CzFlEa41vHkY42
jHLojr/5UfCmM5zCFQpd5f9Hirv9FRWEJq3v3bM1ay7pFpbOkjg/M7Tj+NFU
HZpUz+D6Mv9Uu1WchkoAvxtWauVXkNkRQ15hWtYcZ8YyMJ3OESWjPv9hkq/F
DJQHeFFxZgOmL/frCVfnP2KGCvYlZS7eBOLA85Z+M27Q9V7gi3kLpcMj6NeK
k26ICTBcf+kPUL0yoU33IypY9b2IO15KaD/T8q3jv0NBAcoPt71/F/M5EzBZ
O7PxikOhGfKwYNRqqvME5L28i9QFR/FEMm4y1JMVUUivPOeIyQWQBk0jzuIV
1zt9fe5A5Pp+UfoFw46K8l34jSkluZhTSNn1jM6Kj0hGIFjecVKvOLQNcGzs
ibp+pwhGqSlaV3COfXx1q/IU/eaXFdd1CD9ETa5/fhVPX1x7hmYPznjhlGDz
6Ev+0gtT9ubB0YnTxKM/oIsy+n187C6S0xV2Vu1fhwzLzAzlT8ehPk8P3+wN
HECGV+fJJNUtiIYfmYCKZ1JtrASYXX7NWLtsiEMatin9F38y9CBROFtn1SqJ
0/t7L9RYe9cdRygfBMv/bLrre8nb0hT2m/ZVc8w4UoS0FFzzUfh58mXUu7l6
QE6Ur9YrxgTOvYef2+skoVmzuDPacB7tih+BlCNUQqDXPhulaDDU+D9spf8J
y0DRJYCVCVTVx7/llPIp+jT9XBkfGAlZJt8l+i/urssottNM4q568NQcV/bR
sORn8n2eBg8MC45tzTsmyX/CylvcPIGtK46rHcgoRuJR79dppj+1vHeXr/tR
vy+1WaBugYKWzgNglERgRJDCGtXHn3EU0THWI6318AXCR1YfWObo8xnnK8wn
YcYSquPH9oI1VZygis9ro79eTfEr2gtVL5xBNJ3xurSbVl5xqtPuLPAmN8+q
6wmr8P62ePDVPnIGcCdZ0A45at7kjySYuYSz4SmdFolDgOa1ItZ++lu6nnQQ
mSW5ExUnA8JYdI0ItvZzCGSJaRrTga8/AKZIWBRBgJjoXZ+PQWUMo4KyqDxW
r47Z32uHNQoPHMMizbFJbNW+Ub8Lxz/NaiX7UXgD8RG4r8dcWVvnQ5t3t8gZ
kXz14/m6202bxYwmcsWZyy42jDPEwIorWU14tRuYIVwdxyUmv6uS6zzhDOwN
ctXFP46+noT1A2liwPB87wUaFGCo7I3OdF03+aXUeUQ97errDEi33m75EdPZ
ikdEGBbDnG2rPv+Z7kNoYMnT+3mIZ+t4pYVo8NXvCg/Ks34qr4s3rePm5Uf8
pZx6VZ/BrCzzY9AvSVV9XktCNhZg+lU6EsAqGl0293Rq+zx110a8xbjLnH09
WU3SA2WKd7evqLjkgV/GbyUe3QdAn1E9/JYTuP5R+0tUqGL9C8OL093xdOdZ
ggVHWtcn8rbJn2FCjr4vK4n7Gb4yY7y/4zBbh2kIbnxrPGcuzAuS0U3eyxcy
6oHarqDp+tPf59MbMLBBLHkqb1dNGgCetn9T6I4rRWORgtBevgbzNanh1soO
RK1acTNuimTXeNHXHb9iyYAgSgfr7rgRC4QhUnzpviqIkRBibUUlst7r+D3N
qJuRY+g6SO+NaWkw8lHJrjhNUDMDeO/z/uJPhg5MyUE3Kw+08htII8LQkqq+
4qvVxpSGEUj7xXMpc9thZM3COr+6Xga3Fr1yunhh4m6gjRqPtnBukbs00IZn
f2CV6vpIOGwW0jQDxT4+fbZ7Q24dUYL+i0cdzSUGF2gdD3FTBIbtM2bhd8ev
CDnfr8zi88VnrIx04mf7BnrJ03HRQcUoqn1HFwlTw5Td7rX6OG4xKpYJhDS9
45yFzmghk6es4+ui+Y8S8W/XrHXDqhcDrcOAb539ewMBh3m1sW41jxa3jGhK
wLd2fyZqNBesj23+7n7UZR7j93C729uHesbDdkdW8kXb3r8LMp+OP/zgNUu3
cEZxHbRFaylEkY47RZmhvvL3XGlqkPwdKYPPfl8iUZqdIg2a/l0mCdeVtyVM
7vpe1gIw5cpfCLCOw93t8b2y91c/ynK9B/1I/GZ9z6HesKsfZ+Z59/vlqbnz
AmkVl/6hOKkRpFh8zZ6LwXEyvXV3Viy5/+IuLvheRGjW9z7qf10RAWMnWD4y
5DdVIeSEfi9y82qnPdbzv3jacCqo75Xl6TPK4NOteuM35iYi6YJQv0uX2Ox1
4y/r0yqYyj/FAeejoai66eNc6RdnA6PTe1ZctbeZG4KSXt/nsURswNyKt77+
N3kDWz4kqfr673pmF4qu/YibY/W9o3kbS1QKRlfnLUavkxWrsYTnpL5XLs9r
cQbUvPf3msLt2Smwyst/J9pZqm3KqSuUhIqzUdVHfu0Qqr8dGz6MA41oD3Cd
D7VFJl8OSKS2v5cEYTQRITVKf2YGm4qavtOfXP2cxKdJiRE3CyPgjpvDcU3y
W87Z8eRikAY0DEtHAnD33F7XB3yowtG9onPE+uzuJgp1nU87828rP+6gYfu+
/BJH3TQ2G7rQ1c/k3zTiFWHgOIrH6oYauOoQPJE0rPuS+nBlwgu61vcXsoX4
g0UlOrh/cSAYtlxxKL+7D3nTvrMBn89rkVHXDTJhhXIwI5S9VfyXGgSA5Ym8
O2+/45n4kGU94q83O37EkgefjOjz0XGqPMRpyKX1HOQ1cLI34oA1z31ip8SU
bYdqU/FUnLJZTCugptcXRwqzjXAVPLrfqBdCRNPwQeHRvyvE8QVWbBCzVR4Y
1CevpBF3z72Pr/xR/zORnq3zKa69vW9mLRS+6r7MmF1yEwOu6PrrntlUdMnj
KPL08bE4EHX007ipVjyM1AtGA326j88D9CBpaL7wFC/AUSw/FDGRhopHb4C8
aVCq2CCb+3mwJsR/ms/nvX1x+STTN2Id99P3i+rhPDPzNuCsvl/Etw/uQeDS
V+lFiJsZBGFFqLDmes+r9ohWGAuSyhspMFxQf8kYRvfbTVtt7fRyJShPx2lT
hcWX2qbed7nzFYgD3sdderwTvex+whn6ncDT9bvm4wYIAHBmD+3Pqw+Dgb1f
54SKR90yUlFsAyrfJqyp08LT2qr1dNxI2sBG/nOWDyZRd2QN8u5UGkoncEZx
wusSAYLR9WmWd6Mp5Mdt3P17wf59B5Y1itbseFJEjYIVMem/OHmlWPau8LNq
H4d41M8CdiavVfvjK/y0AFkOz0ofn4FtFIk5GYzGpTzRXnZvZqbaR52nHiCU
hbHrMbofC3blFltp0pCq8zxzilESPkx1+zhMSmIufEc5ta5PKMor4H/vXvXV
NXvD8c1kGqCt4hLfV1LvoC1T34v2u7KkbunM9edZnh+vRZNFv57zO32SOxy/
+c2zpHR7SM3wJ7N8ezNIAYOkekAhuvrMRJOuK7Mp9MKr5umKzYOkYUQhfq/d
7LjXX3MSi6DxYOA/at0jdNbfQ7N1PI3yKFtortf3UhwZqXgYwRQPwnQ2w4KH
dBLcfv3e54VPL30wzYX6vRDuDDbw3sy86vlJvhpZH6ly6T+L63aj4MbM/O7z
x69RRENe//bDum4QNZAC5OkB4/eOg6Uxs4MtL346MPoRo7g9YgaNG8SVeKJU
DY2xRt/HbNYRuSJUcfT5QxuZVGhQoAiNjtNjt/nSfe38GXB2i/LljO9f1ekP
Q4JprQQeO+Z3HNRN5XEwOqWLaEQQHBWuAnBVvUeAfbygIWR1fCsv5fG0gj9Y
4EJP1RGAU/wr9VKzWdXnX6DGFtcA0JvZ8SMnY8fbG38r7rJdaW0cq/PPkPU0
pcHBeAhtFY8JR/Z+vYL+XSOpgH17xh9gr7jmqlbPC7+o9daAmd7UwIqxmfdx
VDq09qjrtH4y6Zz4qtjwAOSqP8CyjxvKuiPSs9U+Avyv6JcV6N7XPpsSHLUq
ZMan76NBwhYd1yPK8dU/Se/Zeqr/l+FGxbVIFB2/H6GjfVWcmxfsPNG1q/G0
M3aHuOu8yo7iDc1oHkLxzYBXS09mpgG0R/vnivJ3Hf/3QuzJwbGMvjxKQ0Rl
bytlKb513EDSxPZeQVrV77344xqCI6LsPa9R2OwcDNXZtKLqOt8ZpXhk5bKr
9hcJKJB82Hw8f/s4cHi34aE3pudu5AERyqnw7ZGv/YtreHuxYtg2e+4Asv2k
cY5J8uEV+T1HKv/GpLp7X8uDLj25Qpwu3appTAzat8eZeTv6+UdR0tOMUcjR
OBYsFj2PgI+up+s+Dn+RjQGg1RSr66wkiFrdzDNW9RFdNuL/r6fU6vx2xUrt
nn9awMWzRnRQS+3cNV4V4o6/vvJb3OhLh1YcoTTTU+Pt7TsOn4CNzt/YWgfP
nHVDyiGFjL1f66efawdHqKA+UXXBCsbb1Fgfu/Ux5EjRPNVnBUKpOl1Nx30k
wuYhJf/FiUwpx+i8wZjdFX90NoxUYRq2Ph+OVyD6FHNRFZ+Ke7hX6Ix78vG/
ODD0FoudeFv3dTv2aDps8XdDJaw4ERIdCf02xuIVfy3OvTe4ytUvNa20hP7y
zDOa7P297lc07WgE9xxnvSIqYTUTvOrfS/iPVA7ZEalQfe8ZvwrQ9j1A9DrP
M8bDJh6RPqt8Q1OL8csEJg0yoOKBsNJwX+PTo+NQSSSEkYa9rXjc4lQBonfk
/tb6ZvYid9/kPjzy6jwNt6Q4xi9mY/W7yJmMUOhvI/u+zkSy9hhhgR9u/fyb
6uAXP6/Ufa0n/nUEJYlbwsXV97L5Sv5h+nM3ztNuZON94MTC4Om48Hp7D3vj
WrV9yJeecQMhl1zxI24cHAaVCLWekAOlzm9hiULN03FCibriMtnGz68ojgRB
qUtfPuniwXtw1LFD9/mH132lKjYd7M/PJAmGCCAA8+rPczvX0HnhEqPjwDcW
aHyX1f3Ytf6Q2vh/3sw6T+U1dmU2Z/ZjHYc2oAYzeUXUuq2dFnZ3sGvNm56Y
Gpoh8enmC711PHs7o5eXW5S4pDHz08ejA/C6VxxmauxpNsaurOM6b/YFJJTq
J6/QVgJ+1kKc1b/CRbM+e3azYP29p+u9UyvKinH5qc9rSOykI9GWRuW3eKR0
Tvc4ydyoyX9xfXCuhewu4hNScem9BZj9UfsNLR18QuPgcrDr44v77mhDwJsc
9xdnU/OrdC/jmr955aLqZ3CBsnWldV/x6DkqwHgQVF/dkJEdt0a5eVzpBaXL
EDiPLhXV/dHxGQfbiByfsz8vmzddQwoPi63iLk+Uc7gAXH0fs/HaL5JJlM4G
XZ4jgsVXiEmF53zjuUBHegdbfx40AtIYobFxxd65+Q6c7ggm/uErABZiA4gJ
R/V4r+P80kk4DHWZsUHfR2QDXovRhCLtXPH77VUBdss4VsV/l3fcL9OdeE9/
7xM1ytMVGa3PqVmGipn5eCbi5xcPwtSaGyLPXzybF+C7zGZd/TwEYxmglkHC
dddx4Ks5Qx3K33Pr8ySxIA1ThkUAquLhR+lUK54qz8RBSapHzmekaV3xAR1L
GHhGJqfjB02LaLdQFOvrz+E8rApCPHP0/bJ+Yb9fil8tqI4HKERnle5mv9eS
B6QPLRdpUx0H3h34YUQXufrJQXRjr50IG3uvY0hQZrAWCAV76V9Jo+JJn9Xg
aV2LP35pck8I49X3N3QkGtC3+qh44tkJkpogbO52yIrnQSAVfUXtc3T891xt
8f85zsb5aG080etH+EpHreKD5NPSfjBGvjt+RZvkPgNW3Pv+xp3IWwcuA8Vc
cWuOxHQELvEdH0GRSECok+VTydZEz+Yg5mGqXeuD7niMJ4MemaWPoccpNTTl
55tZ+p/Elo9QfV09DeW74wQZpVHyt3n1995IBdijqKWVn0NTSfaSOs9ot1Zc
q4jQVfxMy/9LeouxyhgTfqHmBeLQ9gREYO7Pv36LDSGAfbpJKsl6T1WeeR+M
+7TU6ntxTGPpsV5Mbx1/ZBFD0+RNVnmpuFYX3/KIqf/Vv7xNpNA7u5TIdNXx
pd5GKdnVnuqvyuIJHAT5bDuaV8fjihfukYSvjxOZQMIrOivlX4DLRTIYjIJq
WeH/l2wu/JSTd4RJVcd/z5XZm0VMP77iK3R2ECtwudXnqbmnQUAscxWvHP2d
D8XvMDGlKl48c24gPKBHs43V3ys9IPAaBavt7PNUIP4SC0703GBHPScxBQR+
AHjaqn5JHCg3VxtVvM4HbeEK0TRiP7Vu8LFacYrG1jjuPn+brI7jjE1W9cdW
sOVGbqgsrJz68/e790a7gTDrX1zOTsXIyOb348fRcWWrzdPcofgFK8XqFg/A
TSld6yftefPBZNV7+06aeiVtjpEq8EJdzwd8gz6nmrz7MAqZdFVMcUybvuME
nrn0MjAzznp+6LNdeToRHo/vONCiQEO6FuyqK+5tRq7hB9o8dC3233v3W8zi
eE3MqOLWnrCPgZev8cUjy2atAgWpfQfcQp0JpwBHUPlVfKBIfp1RZHj6OVmw
UceZrFHSX8dBUjoJ5wDht9+ohtAAnNXIiAp9x8MKjWMhDaha//Xycatese1V
uAJxwJDXbBlH5aq4ZAh9F+iDX03FITIic3UT2fqrC8JDwNiIyWx6rxXnurSS
178mhH9xWLAgcTRk99KRXm9vacZ8GRix8kndEWgUCgb0Qo+OAwNHc12fqnA+
jCXnO5UBRzY9+QfhE8JX
                    "], "Values" -> None, 
                    "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJzFXXvQ11WZR1HiBbm9vC+XV1ikVXRXF8usKcldtSUrL4ial5RpBKPVRRy0
3GwwiV1dV7IlHWyUGsTSMG/tiJhrghdyVUJ0mjXZ0nHLFSrlkpcxEd1/el5m
Pt/5zOfznPN96a8zv9/3ds5znudznvPczsSZF578hT369eu38MB+/TZ/YuNR
c0+f8NB1U88+aenQiQ+NvvA7C7dc9Be9vw/77XELLp/3ftnGe9R9+N4D+k++
+eI/9Mj7ol38+sFv3HBqz0NT9nnvd/Nv6qH3P/OpNz+w59/tZ/cn7lfjZ99B
Oir6Yf+z9Jzz1l17HHXGGPqdp6YM/uzMnvGNfs/6zJA9P/7j8b1tjDfue+Gk
ox/tGDuu8b4fvvPHF2/5VvN/d96xxfn5wbU3TnjimrH0PvUdHAebt1Mnb//N
a0M43RX/sf/V9xk/xjyo96v3uPIa/YzvqufUdeQzfI5dZ/OL9MD3nbnhd1d0
TRtpj5e9T+HDpgdOPOb2Q8ak+T3ei9/deOCD7590576yHzguxJUsvqn5ZHRU
fJbFHcUP8T2Xv1k/FD+WylH8jzio+rVz7YRFK/9nNH1fzG/guepP4DPjsyyf
l+Kg4ms2Thc3kR9Wf+S5/a85bl+7X+58s//je3Fd8X2MD/vp4lEWv5Uclc4H
tkwfwHaPQV/+5LqZI9I45Y7b7S+7z/1OFg+z/cD/S/F46YvPPzJj0xi5fkR7
5PynZxw/cFTvb6bPqe+iPLjPof6ZxR98Tulb6n1M71X478pDdv/ktmzcim+C
fjjvwY+160SsA8jfrn6b3T9h6/Kzkmfsr9JfcVxKXtbfs+C0ZVu75ThwH5qV
m1iHavfFpfqVux9jv7Gfteum2w8X3xS9suPDNuwiiDvMXuLKJxvXh8bM3zju
gs40nyn9z8WnUrrXtogbOC/MTtNWf8Oehe9heMb0YYVv2yad/fDxR3Wl50f1
pxZfsvicfS/KUandoBQP2P9KD6ylrxpH4Dh7v9r3KHqwfYq7j3fp2zX7gg93
PNHka7Ye47rE5iG77tfex+jA7CLqfa5ep3CE8VPpfgzpj+Ou3S8y/T67rj31
lSU7f7Nv0x7de93kj2y/S/GQ2dmU/Twrd2GnP/nO45c8882mXculQ1vr/Ljh
1+8/bOVo6U9RdCydH7XvQH+L6z9gdmC1nrjjyPpt1DrEvuvqhwo3auWnlu+Y
/TGLA/i8wqW4b/COz6/64r277MNDV175s/P36O7VH0vlGflPjSerx+P9WRxW
30e8Z+vI8o6Zs44+pYnnyJ9t6a+qv+p7yh/i7j/cfi7dcdE+/Z8dWfweZhc7
77gH1vR7fJStLzL5R79lls4u/7vjz8ZJZO1brr9E8QHD37hf2ROyfhOF3wpf
3H1X2/tHtR7iPt2d92w/Yn6VnxH/r13flL5Rax9W34v3u/qUGi+bz/gOs7so
PlD7V7Vv2F1trX7n7sf+3C2uk248Ext/2Mlcu3ct3yv/d/z+6C1fu+2n07ul
H3xd57arblvVWW2XYPyAfsQsLjNcRfnOyhHas0pxMPa3jO+RD0LO7r72gwMX
XjJc4gNbF5EOjK7Iz0o+Ff+rfa3SL9T/TP9AOsy5t+frz69rzje+n/m9lfyc
+vMf3fjr87m9wsU7Ny4q4n7c/YXrVyuNsy2VT9Vif3C8gW/zfv6rW+f/sqth
p0F9L+w5Wfor+XHphe9nehDT/5VdxNXX1HXUk4Ku6B9i+6as3XXy3CkTuwdo
+cH/nxy8fK8X9hxD6ezu25TdwcVDd9/gxiNGG/R35VP5HRn/sfjleB7XQeW3
y8ZNRPuV1X+7dOCZnWn8DHxw/Ymzjz3puZuGdaTxC+8rHSdrEa/ZvpzhnDsP
uI5m9XJFL/QTZOmc3R8o/GP9UHjI9nNKnrLrK8Mt9tyCrW+tXXvFGJtepfZC
9R7UA3EdVnR31ye2n4n1KPht1KYR/3Lwp0bb81Iah+iOpxdfTT2xNO+FzUu8
L5t/FO2MldfdccTwEQ2cdfMv3P6X2gMUveI64iD699h9WdxSz5XGWWHeCPJd
7F8UHRDnlX061he233P1UNdf9/fjX9oxvXOwpLtr9671C6H8uHyIOJLVS0v9
MG3FxWdbhvOxfraFB6XxcejnjPbWQcMnDpjV+dAVc7/6b+fPa/qTlL6u5Kav
7Jzx3vs+Pu1X3540ukF3RR83PofxK9rR1DhDftz4L3xf4DLzl2T3a6x/Lj1Y
Hl+Wnuz7pfqve93FY9aP1z98yks7e4ak9ZXSeGsVV1hLn6zfsRYfsi3jT+xX
/A75zNqtFV8oewKzt6r3Rf8i/iQ7P4s/uOq7+542ytZTsnKl9oFZ/55qlZ/W
zQMr1TcV3bE/bpxc263Sp4Ifgp6T/2PD8n+6lufJKHuF6w9qS88qxSW2vqt1
t4EjBHfVc67/yR134JLaj5TKn2sHdvHUxQlX/3fnDVt3/7N51ay9jlw4qDU7
t/peNi4qG18bfMvozejYVjxz2/Yj1UYcYikeBX1ZvRQXd7LyVitPON9MfynF
ob6yV5fyVa0clfaf7Z9xfYj3ID5nccud776iM8ODUj8Rth2f27B53vymHlJq
/2XfZetk1o7i+nGQDzBfKPSwrL9JfRf91Oz5tuPE234u6//I8m+0Km9X8SM+
x+zm2TihbD4S66/KD1TvVferfS7au+L/gdPOvXXS27vqmeB6y/Ybqt/sPlcu
1P6ydh0p9QPHuGrl1sWt+M30hb6SfyavjXg2qOcUz7nxntl5c/U8HF92vhi/
ufsgbNHuoezFrh7F6l8w+WnLHxP3uftelp/p8mHbcclt74fc9025a/G49y0d
0XiO5XcrPG/LjhDt9v02X3LXPzTzo9x10a23WItPbhv9zOZnMvxTcZNZnMv6
edT/b89Y9umdizqL+5NtQ/5749mTchrjj/XN9W8z+cQ29JtSecDrvfmjZtx+
Ld0RN/tKriLeUvlDVXxh9JPloZbSqa39clv9UftVXO/dOFslZxFffszxV5zz
5gND0+MstRcgf8T/WT9LyI/b39fmrDlx1VX90340t16nizNZf7iL1yhnSm/G
cbW1Tir9ti25rMWp0no1bv3VbH9cu1U23wbtUqofbJ+WtWegXzIr36X5mFk/
AbNnKPyM39k4sFVXr7jzX58dQa8re0LbcZyqjgr7DsYNqPXcnR/Uh9h+m+1D
S/PR1P1sf439y9pXWP5mzAtb5xhdVL1TjJ9hdA18zNbvxvedfMAj1w89d3iD
bxi9P3fosuU/Hj+yQf/S+EhssR6+a5cs9ZcrPmBxQW6LfNDX8VpsXailQ+11
pdcpPnb1t9L411K705rLjjr4la5uar+K/127ZK29memPWXtm1LnJ4jTDYfa9
UnslPufa+Uv9WSzfVJ3zoeQT513JVWmd8Ggjfji+7+p9rn32jg3vzNzQvz+9
7n6P4UXt+LO4UFt3RPF/X/l1aunTlv3JjSNsO54a+RVxYuyEW++98/amno/9
yOYrKH+Umn8XH7N6XnZe2HMMt9z8ClceGR8GLiz8yDnr/nJasy5MKT605ed1
21q/abZl/g3mj6ytF531u7t6SbSRh4z2E/Uexf+YL5vdv2btG7X4WooHbt4U
5nufPvuK7kvmdUk6Mv+v2hfjdcwvbWt9yvKvwmdX7uJ51G/wfKYsfzGcbiuf
UeVz1O4v2W/cxyh6I79m+1V6nlFfyfXVXUu++cy8oTaelq7rtf4lxk8qfoH1
N+tXxLbtOgEop4pvmPwEf7r9Y/E0rFV0Y/MW9c+z67RLt+CDbH1+xe+Mv1T9
sb7O0/3YJ6Yf9pPRw+V9rl1e/X/k5We+9fKhfN+d9avW7kuZ3uT64ZgdOuSA
+b1K+12qr6r7XX8dvqc0r9WVg7bkL8sPtetn6bnN7ndDThCn3DxoNX6kgzp/
RNkJa+1hLp+zeEElT+xc87bjgBSfZM+VLbWvsO8pfHDngflJ3HOAcJys/h6r
m6HkwW2z57LjPLn171AfcuePxWVE6+a3s+eDP0Lvcu1PjC9Vf0vfG/TGdUjl
ayr/T7THrBj7hXfWNP2raj/ynW0bd8x+dE/63VK9APMKFb6r+Ae176ndr7n8
lrVjKXkszdNxx9d2nj2bt8hrya6nrp3ftbO55+C6/VT0aMuvxXAoy2eIL27/
Xpq+dcFTB3U35qGv7TSqv1k/D5tfJrdxX1v6PcMLxmfZc5ujjbr/8Vud58Jw
UsWfK3qzdYLpQy5O4Xg67n7wve89NtCWK0X33n6Kup5uPQU27+59OF7M+0R9
zdX7lZ1I0Se+s+ONQ6689mV9XhO2r551/h+2bx5E19vafHk2brbfZ3yJ/Of6
XUr9e0F3VpchWoyXZHzu0sddlxleYpwO6ncsXk7h8V7nHLH34W93NujP1n9X
r2m7vjebh8CJLH/juNa9ted/beoaYM8v0pfVUVF8mbXbIU6zfRzjg7iu6jBm
5YvFLarxZe0MWf7AfmTno7TF/obcoDyW1rVi33Xt5IhHLK7NPQ8T38/6cdBN
x126beFIeZ87z8o/jPezPPSYB5QLVQcG34/rnJqvUv0X5yt7/i/L42H0VXkc
bJxtxSUj35bixLM7e1Zc8Nje1Xkartyz61l9TsmJGzfO9iHxO/Q3lz7ZvKts
3DVrVbx96bp66eZFqzsfGNJ4LvRF184ZdVUZ3kar9o+Mfm59G2Wny9rhsn4E
9t3a+MHQexgOIX1K1/XseHtxT+TdZ+3lbeWduXYwNX72f5yzlqWvuk/Vr3DH
1dd2tWgnzhnwZMesYcXPl/oXGe5hvQr2fmZ/ZN8b333XktUjRtp0dfVvVe/c
xa0sv5fyi6rbWCq/aKdw/XYYf1JrZw2+we//fsXTA264rqsxbpRL1HvYOWqj
v/HMET23NOsLuXoTvhfXYab/1+IT8ovaB7N5ZHzA4olwHQzcUXzingPq4rJ6
juWxt13vK9r3PXnZgtm3DafzUdoyOc/qV7Xjy9Iva8/K9gvjI9m6rPQe5Etm
T0Y/N9ufKhxn8T2MftE/pecgX7Ttr3Tvc/WE0nhl9JvW6nPZ76I9QNkxsH/o
p3H1HzX/8b3A4d2FD+59WX3AxZnsvJbGuzD5dscfeTml8qNwK5574fUb+520
tRnXrOoIr9826L39to9I04Xhsvu/O6/snFJ3PVHxqHOP/e3m5Vt2+aUYjqrf
bc2vSx9mn2R16xS9lLwpPzqec+b6W2r5Dvsf3w09sLSOAbZuvCXSsbbeAWvV
vlX5fRTds/1m+y03X0bhCtO7GnG6f+JTNs54T+jXKo7k1vNmHPT4u0PS/WZ8
wfw22fhmta65fFSqH5XWeWXjY/tx9lw2PyrkF9dPlf8Uv194fNXaT27papxr
X0o3JW+MTtH/bPyRuu+qG+4+68KnB8h45NJxYxvxzDhuZd9qi0/RPqO+49aX
U/+rPBalt6jvlervpXRmuMPyD2rtg23Hk816ZGH/S68ZJc+lUHIR/Kz8gQ39
ltSxy8YtMz2/ll5nnX3NG1f+orvxXeyfii9FuuC67vIfs08ye5+7rmbzlfG9
2bg77M+n/3Pl6AtO2rX+ZeOimF6g9Liep19aufLf+6e/4+b5Kb+wqn+M6wHa
/9i4s35KJTdxHeOys+fRxfOl9gTWhl5S+74sPm9cdtj+sxb65zQoPsn2G/0S
7PmQA3WeT/b7wZ9ZnI1+lO6T2feYXbKWv/A97v7QtUciDrDxZsfhxhUq/szq
Va79Afl+zt8sXtizvLM6D5zxR229EOQzhrdu/qmbb5e1xyi5K5XbWvmZPHfK
xO4BOo+V4ZJLr9I6bYwe7nkx2G+sj1qaX4n+9b6Se9Qv2X1R3znohfqj6w/b
3fs89r86P72U391+4D6gtP4Nnr+j5sG1j+PvccOv33/YSl7/LvQotp907Wdt
z0e00S88fwvPHXL9Zq6eUTuewH1WJwnpitdr895ZW+t3re0Hq6/M9CiVTx3x
CizuuhZ/3OtsXCyeHK+rfSfaTRpxXYCLSn5duqj8LRU35eIUw1mkTza/vhR/
lF5d6geJ3+65udiinSvbsvPsQ36wP7fd13/W1NdG2vRV8xrrXrQxj6gnu/WT
Su0q8dyDd50w6cn9dtkFQo5UPkW0oTeWxjMx3Mrif9yv8sRrcb6v/CyqjflA
e2nQT8XTqvVX/Y/jZfkWDL9r5Qf1/bbiN928GfU84xOVp+WuH/i/6w9l9GJ5
43EdcSH8L1m9l8UBuvlpWTljdKv1V0ZdHdxPYBvjcvf1Wb9Klu8Zn8y6ZPuR
U+/fx36Pih9XfjfXTufifW29tmgjbpPtY9n66urDzB6U5V/WL7Xufu3mL69f
fD8/f8rFbbfFfSvDA5evmR3KHYcbp6ra4I8ZN7w7c8nEUVK///zvjzhq2qtN
+crW3XTHydYh9r6Ib8rmHWbPL8y2Yffu7SfEM6r1FPdNsW4xepbuc5AepetK
LR+oeYj5jTrd8R63nhKL62X0QLuF6hcbp/oerpsK31j91PjOjMuuP2HohGbd
GxxHVu9S+I/vY/KV3Qe1LZdttazfpftHtIMyPnHXIbd19WDEK4XTtXXOWL9c
Px/OQ8fli2aceNDWNdn5wf0Fjrfrvv89YdH9W9bU4qLb9uaTtoTXyj7B8Ckr
F24e34NHP/zotP0HS32nlo5KH2PrJ8N7Zvdi9MV6fKW4o+ZD+bX6Kn+PyT9+
rzRfgl13/cbq/Wy+GO649WLoPlacR4vxddE/zKNX+0x3v8q+l+UD1/6axU/V
nzivuPS7Kv9S8U/WvpTd1zI7RtT5UjhciuNZfVjZTcIexeposrpArM6lwvHs
OLJxnVHXtBR32HXMa3LlGPU0ZU/EdQvr+2XHEb+VvTHmn30n/FfKXsTie1Gv
LM1fV3LI6pkiPbLrXlbPV/ozix9i9TPx+ew4WJ0M1OddXCqN1wk7KYvrz65j
7vqmxsXyApHubcUPol8ncLh2XcqOl11X40QcUHaYWnphq86FxP4jTrh2TlyP
2PkvLr2/sfbh73cf2cwHULiBv1Wd6dL46ZDPtueNjTP6mT3Pi70/m8/A4vXY
ddZm8yKYX4utM1m7fC1+lOaDu3RldR9c/HDttfi/O64PLf/SxS8ft7fUd9h1
/M3sdy5/sPmptR+UrpfqPuyXojvbT2XrwLrjLK1Hhr/bXv/cOIas/1LVRVX0
GPvcC8MGru6w1y2mz6j5YfmxtW3b+pPLT2ycSC+0m+E+NvCC+XXcdcqNG8br
pX4OjGNRfhXXPufOJ7N3or6h9tlZeVPrmZIfhgMq/3H9qz+6asm4YWm8U/Oi
niv1Oyg9FfdJtTjA8saRz1S/2f7d1d/jPrW+xf2sHmoWx9zzxNrKW8r+n30+
WxcFx4vnpGHbVpxKVr5q7QyIlxG3wdaTWrzAccX1Q69/4s0vDtpLjlvllar5
ceni5vtl5cxtGT9hnYFSv0/peanqfVjvjc0PrntuPCTjP4anbp41Pqf0NIU/
bp1sdf6COpeYtZjP3Vb8qsKfUjwozW907TlZ+0bWn1RLx+B/hjulceul6z/m
L7vzzOhcamfM9tuV+6x/ovS82N01XsRVF1eYPwPfx/x0tXjhjpetH8w+OuKd
IV865Ke78pfZOonnVpXWISjFmVJcycaVYb2F2vq7bY3D5edSfGZxca49i+m9
tXWklJ7h0smti8LoyeyEqGe7eUNxHe1AzI/b8eIDT2z8v+GU3mrdqK2Ho/g0
3r/+ngWnLdva3ZpfV8lvfIfVFWV1S922lm7IJzgeV18ppWft+e3RMrsK2vmi
zfq7suepu/XSg25x/hEbP9rD0N7e1r6A0cXV+1TcmXt/lk+UfLDfLL9D8TnK
XeCKqzdk8z1Zq/Te6Afag9x1xl1f0X8R86XyEnrpOecHc26e0inH6+7Hs23W
f63+z+IxW1dL47XR7nvsgUv/6ubbR6bzcd3+tqXnsn2Kuz5k45/Z+on9Zf3P
rgtZ+16Wj7L5G9n9P4vrVHaCbL1Fpg/F98IuxuqvMH7I0tnVfzCeFseNreqP
ygNSfK/msbaN9y0945S1N/6keb6M6wfEel9xPbsutu2vUXZIhtdMDq59derU
P65o1sMvlftSuXK/0za/qH4rXHLl5tDnN+09f96QRp0ojGdn73XrS7F9dBbf
+6pl8jD44v++7/tX6/Og3H1ldv+m8MjNW2S4j3LL8hwUP5XGQ2bnW52Tzt6H
9Zvc7yn9rzSPmM1TW/oNrhPuusz2Ryyeg/WndJ+G592qugjsO7V2Hnye7edd
PyrjI9SH0V6tcNRdj7L+oVK5detssTg7Zldz80/bkjuXrln/bdzPzr3KxuvE
77bOOyjFb5W35dL3lc13fOuIjzXr+WT5XMkjrnssj7MtOrnzmV2favNCEFey
fJfFDWUXyNJN9YOtDyw/qhb/Sudf8bcrP2x/U5pfwL6XteMhLrjxqll/r9qP
rPn2uR89fWonxdtS+a/dF7K8ubbkNvtc9ryA4B/Gf7V6bak/HO0mTN5L5w+f
Z63C07bsEL3r2J/yRJi8xm+3Xmdf2cPi92Njz7rlHw8fnh6v20a8S6l/ltV/
iLhz175Y2rp83pY+4NIJ6wjW8q/6/rbzth1998+a+K3056wcK7+nqp9Uy79K
DtuuX8fwNc5xVHl8at7ccxjwfldfVG3Wr/H154b9YvoPedxYVv/C+hG18TRM
f/pz2U93F84puuJ8KztB1v+X7Wfp/Lj3MbsIG6eSGzwvPmufR/xUdGTrFaMv
xi0hH7j4xPLc2Dqv4h1c+rj5HqX8wejmxr0wfFH1r9x+u/X1Su1xrI16IKpO
hPqusjeX4l4pbmfrXDN7OvYjq8+o+5VcqnjO6K9bl1rRozSvRD1f+hwbR9t6
JeuPqjeF9Fs07qJhZ/z14Mb8Kr5g+O3SielX7H78X8VhZXHG3W8xfSSLl4rP
lRy/d/j2nf98TDNuNsuniu+iTtvtm359z+O/fLdRfxifV3nGpbjD/DWleI11
7l16KTtLKZ4oucD3Z/VPRm8W7/fVKQesmf69EWk6q3oorlxk7Y/KXuzu06L/
Lp3jvahXqrg0/F+di1R6fl3WLsru27Ki/wVzPtCsy8DoHr9V/LXia9YfF4dx
/+POy/rVr8we+dnBjXlW43DzWZRdSuGJ2h+49pvS/qNd2n1PVs9h+7usvuHi
kCsn2XzguA/jt9zzfN33u+N17ZJ97S8IPlHrqsJNJUfsPa5+qs5pzc4Hs+O4
+zasa+LyN8sTWPri84/M2MRxmp2j6vIn5gGq+VV1Ixjd3HoZrv25Vn8uxf0s
LmN8aPwf/lz3O0rvYfbIUnuDkmf8Thbf/x/yD2t9
                    "], 
                    "Version" -> {11.3, 0}, "ID" -> 7914070120903112767, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 2, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 884775526023742407, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 2, "Version" -> {11.3, 0}, "ID" -> 
                    4422581646867123738, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1], "f3" -> 
               Association["Type" -> "NumericalVector", "Weight" -> 1]], 
             "Spans" -> {
               Span[1, 10114], 
               Span[10115, 10116], 
               Span[10117, 10117]}, 
             "Wrappers" -> {SparseArray, Identity, Identity}, "Output" -> 
             Association["(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAABcBnDKXKFv4OfwSJ2hTWMJCYQKXXGEGiNIHirrlunOvUJFn6
ZN+OdbjaYtu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu27X+e1/n5Lg/puSnu

                  "], "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
             "ID" -> 5946029764627680100]]}, "Invertibility" -> "Impossible", 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 2472221187450073527]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not a Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             1589389040996761228, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8120213736258895844]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "Not a Question" -> 0.4955022488755622, "Question" -> 
        0.5044977511244377]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> Association["Trees" -> {
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 1800, 9866, 
            4158, 6865, 10117, 7463, 10115, 10115, 10116, 5940, 4528}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.04620031267404556, 9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, 
            0.5376577377319336, -0.3576050102710724, -0.06636073440313339}], 
          "LeafValues" -> 
          RawArray[
            "Real32",{-0.014285714365541935`, -0.019999999552965164`, \
-0.0028571428265422583`, -0.014285714365541935`, 0.014285714365541935`, 
            0.006666666828095913, 
            0.014285714365541935`, -0.008571428246796131, \
-0.011111111380159855`, 
            0.015294117853045464`, -0.007263427134603262, \
-0.00800000037997961, 0.014285714365541935`, 
            0.009999999776482582, -0.019402984529733658`, \
-0.01272727269679308, 
            0.006666666828095913, -0.0033333334140479565`, \
-0.016923077404499054`, 
            0.015789473429322243`, -0.005454545374959707, \
-0.015368420630693436`, 0.019732441753149033`, 0.014285714365541935`, 
            0.013749999925494194`, 0.019999999552965164`, 
            0.01148936152458191, -0.019699811935424805`, 
            0.0033962263260036707`, 0.019999999552965164`, 
            0.005517241545021534, -0.008571428246796131, 
            0.015254237689077854`, 0., -0.019999999552965164`, 
            0.00947368424385786, 0.019999999552965164`, 0.019999999552965164`,
             0.0028571428265422583`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {22, -12}, {33, 
            13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24, 32}, {-1, 
            29}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {36,
             30}, {-30, -31}, {38, 
            34}, {-23, -33}, {-5, -34}, {-32, -35}, {-20, -36}, {-24, -37}, \
{-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 1800, 9866, 
            4158, 6876, 10117, 10116, 7463, 10115, 5571, 10116, 10116}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.3709371089935303, 9.999999682655225*^-21, 
            0.3568291664123535, -0.044668592512607574`, -0.4498637914657593, \
-9.999999682655225*^-21, 0.5376577377319336, 0.181747168302536}], 
          "LeafValues" -> 
          RawArray[
            "Real32",{-0.014143581502139568`, -0.01980198733508587, \
-0.01987103931605816, -0.014143581502139568`, 0.014143581502139568`, 
            0.0066000730730593204`, 
            0.019817307591438293`, -0.008485870435833931, \
-0.011000340804457664`, 
            0.015142064541578293`, -0.007190887816250324, \
-0.007920126430690289, 0.014143581502139568`, 
            0.009900248609483242, -0.01921076886355877, \
-0.012600511312484741`, 
            0.0066000730730593204`, -0.0033000092953443527`, \
-0.01675505004823208, 
            0.01563255675137043, -0.005400040186941624, \
-0.015215639024972916`, 0.019537026062607765`, 0.014143581502139568`, 
            0.013613144867122173`, 0.01980198733508587, 
            0.011374845169484615`, -0.019504712894558907`, 
            0.003362273331731558, 0.01980198733508587, 
            0.005462110508233309, -0.00854293443262577, 0.015102576464414597`,
             0.008616483770310879, 0., 
            0.009379158727824688, -0.0098862424492836, 0.01980198733508587, 
            0.014119388535618782`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {38, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24, 32}, {-1, 
            29}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {37,
             30}, {-30, -31}, {36, 
            33}, {-23, -33}, {-32, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-24, -38}, {-7, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 1800, 6865, 
            9866, 4158, 10115, 10117, 7463, 10115, 10115, 10116, 6876, 
            10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -9.999999682655225*^-21, \
-9.999999682655225*^-21, 0.4169449508190155, 
            9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, 
            0.5376577377319336, -0.38233935832977295`, 0.3788796663284302}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.015000144019722939`, -0.01960979774594307, 
            0.0029239775612950325`, -0.014004269614815712`, 
            0.014004269614815712`, 0.006534288637340069, 
            0.019629647955298424`, -0.008401470258831978, \
-0.010891336016356945`, 
            0.011495312675833702`, -0.007210674695670605, \
-0.007841299287974834, 0.014004269614815712`, 
            0.009801974520087242, -0.019023984670639038`, \
-0.01247600931674242, 
            0.006534288637340069, -0.0032670365180820227`, \
-0.016591031104326248`, 
            0.015479099936783314`, -0.005346158053725958, \
-0.015066126361489296`, 0.019347254186868668`, 0.014004269614815712`, 
            0.013478908687829971`, 0.01960979774594307, 
            0.011262200772762299`, -0.019315237179398537`, 
            0.0033286800608038902`, -0.008391371928155422, 
            0.01960979774594307, 0.006312416400760412, 0.0022239491809159517`,
             0.014954137615859509`, 0., -0.01967548206448555, 
            0.009285987354815006, 0.01960979774594307, 
            0.013972647488117218`, -0.0028376213740557432`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {38, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24, 33}, {32, 
            30}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {39,
             35}, {37, 
            31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-24, -38}, {-7, -39}, {-3, -40}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 1800, 9866, 
            4158, 6876, 10117, 4717, 7463, 10115, 5571, 10116, 10116}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.3709371089935303, 
            9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.044668592512607574`, -0.4498637914657593, -9.999999682655225*^-21, 
            0.5376577377319336, 0.181747168302536}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.013954068534076214`, -0.019423186779022217`, \
-0.01955494098365307, -0.01386768277734518, 0.01386768277734518, 
            0.006469296291470528, 
            0.019447334110736847`, -0.008318202570080757, \
-0.010784049518406391`, 
            0.014881403185427189`, -0.007049280218780041, \
-0.007763492409139872, 0.01386768277734518, 
            0.009705140255391598, -0.018842406570911407`, \
-0.012353693135082722`, 
            0.006469296291470528, -0.003234409261494875, \
-0.016430867835879326`, 
            0.015328975394368172`, -0.005292889196425676, \
-0.014919769018888474`, 0.019162893295288086`, 0.01386768277734518, 
            0.01334720104932785, 0.019423186779022217`, 
            0.011151377111673355`, -0.01913115195930004, 
            0.0032954395283013582`, 0.0194587130099535, 0.005353117361664772, 
            0.008582773618400097, 
            0.014808802865445614`, -0.008439077995717525, 0., 
            0.00919413473457098, -0.009677940048277378, 0.019435903057456017`,
             0.013828910887241364`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {38, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24, 32}, {-1, 
            29}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {37,
             30}, {-30, -31}, {36, 
            33}, {-23, -33}, {-32, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-24, -38}, {-7, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 1800, 6865, 
            9866, 4158, 10115, 10117, 7463, 10115, 10115, 5940, 10116, 5571}],
           "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -9.999999682655225*^-21, \
-9.999999682655225*^-21, 0.4169449508190155, 
            9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, -0.3576050102710724, 
            0.5376577377319336, -9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.014852343127131462`, -0.019241923466324806`, \
-0.002786854049190879, -0.013733728788793087`, 0.013733728788793087`, 
            0.00640508346259594, 
            0.013672818429768085`, -0.00823603942990303, \
-0.010678429156541824`, 
            0.011300078593194485`, -0.00706917280331254, -0.00768668670207262,
             0.013733728788793087`, 
            0.00960970763117075, -0.018665824085474014`, \
-0.012233493849635124`, 
            0.00640508346259594, -0.0032021249644458294`, \
-0.016274411231279373`, 
            0.01518206112086773, -0.005240222904831171, \
-0.014776451513171196`, 0.018983719870448112`, 0.013733728788793087`, 
            0.013217938132584095`, 0.019241923466324806`, 
            0.011042318306863308`, -0.018952233716845512`, 
            0.0032625480089336634`, -0.008240397088229656, 
            0.01924159564077854, 0.006196374073624611, 0.0022031874395906925`,
             0.014666466042399406`, 0., -0.01935097761452198, 
            0.009103569202125072, 0.019279658794403076`, 
            0.019241806119680405`, 0.002956481883302331}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24, 33}, {32, 
            30}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {39,
             35}, {38, 
            31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-24, -39}, {-3, -40}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 1800, 9866, 
            4158, 6876, 10117, 10115, 7463, 10115, 5571, 10116, 10116}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.3709371089935303, 9.999999682655225*^-21, 
            0.25424861907958984`, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, 0.5376577377319336, 
            0.181747168302536}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.013769924640655518`, -0.019065791741013527`, \
-0.019248487427830696`, -0.01360231637954712, 0.01360231637954712, 
            0.006341633852571249, 
            0.01910247839987278, -0.008154957555234432, \
-0.010574431158602238`, 
            0.014630206860601902`, -0.006911141332238913, \
-0.0076108588837087154`, 0.01360231637954712, 
            
            0.009515641257166862, -0.018494034186005592`, \
-0.01211534719914198, 
            0.006341633852571249, -0.003170179668813944, \
-0.016121525317430496`, 
            0.015038246288895607`, -0.005188150331377983, \
-0.014636065810918808`, 0.018809523433446884`, 0.01360231637954712, 
            0.013091041706502438`, 0.019065791741013527`, 
            0.010934976860880852`, -0.018778273835778236`, 
            0.0032300022430717945`, 0.019134318456053734`, 
            0.005246592685580254, -0.008385692723095417, 
            0.014527017250657082`, 0.00860612466931343, 0., 
            0.009014260023832321, -0.009490255266427994, 
            0.019090132787823677`, 0.013542532920837402`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {38, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24, 32}, {-1, 
            29}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {37,
             30}, {-30, -31}, {36, 
            33}, {-23, -33}, {-32, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-24, -38}, {-7, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 4528, 6540, 1800, 6865, 
            4951, 9866, 10115, 10117, 7463, 10115, 10115, 5940, 10116}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -9.999999682655225*^-21, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
            9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, -0.3576050102710724, 
            0.3788796663284302}], "LeafValues" -> 
          RawArray["Real32",{-0.014708371832966805`, -0.018894582986831665`, 
            0.0029960342217236757`, -0.01347336359322071, 0.01347336359322071,
             0.006278934422880411, 
            0.01339250523597002, -0.008074932731688023, -0.01047201082110405, 
            0.011110774241387844`, -0.0069311149418354034`, \
-0.00753598939627409, 0.01347336359322071, 
            0.0094229057431221, -0.01832684688270092, -0.011999191716313362`, 
            0.006278934422880411, 0.01586398296058178, -0.0159720741212368, 
            0.014897414483129978`, -0.005136661231517792, \
-0.014498511329293251`, 0.018640102818608284`, 0.01949775032699108, 
            0.012966434471309185`, 0.018894582986831665`, 
            0.006254843436181545, -0.018609074875712395`, 
            0.0031977964099496603`, -0.008045386523008347, 
            0.01676689088344574, 0.0061326599679887295`, 0.002183114644140005,
             0.01439035777002573, 0., -0.019058741629123688`, 
            0.008926176466047764, 
            0.01894395798444748, -0.002770425518974662}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24, 33}, {32, 
            30}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {38,
             35}, {-24, 
            31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 1800, 4158, 
            10115, 6876, 10116, 10117, 7463, 10115, 5571, 6876, 10115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.15434935688972473`, \
-0.3709371089935303, 0.3568291664123535, 
            9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, -0.38233935832977295`, 
            0.06050436943769455}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.013590910471975803`, -0.01872810162603855, \
-0.01896311715245247, -0.013346786610782146`, 0.013346786610782146`, 
            0.0062169721350073814`, 
            0.01878054067492485, -0.007995941676199436, \
-0.010371122509241104`, 
            0.014387903735041618`, -0.00677633797749877, \
-0.007462058216333389, 0.013346786610782146`, 
            0.009331469424068928, -0.01816408336162567, \
-0.011884963139891624`, 
            0.0062169721350073814`, -0.0032489346340298653`, \
-0.015825936570763588`, 
            0.01475946418941021, -0.005085746757686138, \
-0.014363688416779041`, 0.018475273624062538`, 0.01880577765405178, 
            0.012844042852520943`, 0.01872810162603855, 
            0.010742693208158016`, -0.018444446846842766`, 
            0.003165928414091468, -0.006073633674532175, 
            0.008336497470736504, -0.008301625028252602, 0.00858693104237318, 
            0.014256391674280167`, 0., 
            0.008839288726449013, -0.00929412804543972, 0.013260182924568653`,
             0.019007356837391853`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24, 33}, {-1, 
            29}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {38,
             30}, {-30, -31}, {36, 
            32}, {-32, -33}, {-23, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-7, -38}, {-24, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 10115, 6540, 1800, 6865,
             4951, 9866, 10115, 10117, 7463, 10115, 10115, 5940, 10116}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -0.0883902981877327, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
            9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, -0.3576050102710724, 
            0.3788796663284302}], "LeafValues" -> 
          RawArray["Real32",{-0.014566374011337757`, -0.018566161394119263`, 
            0.00304198544472456, -0.013222510926425457`, 
            0.013222510926425457`, 0.006155733484774828, 
            0.013130265288054943`, -0.007917961105704308, \
-0.010271728038787842`, 
            0.010927077382802963`, -0.006796369794756174, \
-0.007389047183096409, 0.013222510926425457`, 
            0.009241299703717232, -0.01800556853413582, \
-0.011772606521844864`, 0.006155733484774828, 
            0.0014803169760853052`, -0.01568298600614071, 
            0.014624293893575668`, -0.005035398993641138, \
-0.014231503941118717`, 0.018314851447939873`, 0.019222285598516464`, 
            0.012723795138299465`, 0.018566161394119263`, 
            0.011662349104881287`, -0.018284212797880173`, 
            0.003134391503408551, -0.007879305630922318, 0.01654059812426567, 
            0.005997755564749241, 0.0021643261425197124`, 0.01412502583116293,
             0., -0.01878088153898716, 0.008753569796681404, 
            0.018621603026986122`, -0.002738792449235916}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24, 33}, {32, 
            30}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {38,
             35}, {-24, 
            31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 5571, 9086, 4158, 2726, 4528, 6540, 4158, 10115,
             1800, 6876, 10116, 10117, 7463, 10115, 5571, 10116, 10115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.2361728549003601, -0.09210039675235748, -0.049278780817985535`, \
-0.10510517656803131`, -9.999999682655225*^-21, -0.08429481089115143, \
-9.999999682655225*^-21, -0.15434935688972473`, -9.999999682655225*^-21, \
-0.3709371089935303, 0.3568291664123535, 
            9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, 0.181747168302536, 
            0.06050436943769455}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.01341680996119976, -0.01840858906507492, \
-0.018691500648856163`, -0.013100460171699524`, 0.013100460171699524`, 
            0.0060952045023441315`, 
            0.018475458025932312`, -0.007840970531105995, \
-0.010173785500228405`, 
            0.01415396947413683, -0.006644744426012039, -0.007316935807466507,
             0.013100460171699524`, 
            0.00915236584842205, -0.01785114035010338, -0.011662065051496029`,
             0.0060952045023441315`, 
            0.015539078041911125`, -0.015543113462626934`, 
            0.014491806738078594`, -0.004985607694834471, \
-0.01410186942666769, 0.018558191135525703`, 0.018158670514822006`, 
            0.01260562427341938, 0.01840858906507492, 
            0.00601761182770133, -0.018128203228116035`, \
-0.006058325059711933, 0.008177929557859898, 
            0.0031031835824251175`, -0.008204123936593533, 
            0.008551359176635742, 0.013996172696352005`, 0., 
            0.00866898987442255, -0.009103657677769661, 0.01298864558339119, 
            0.01881810650229454}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            22, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {23, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {-1, 28}, {24, 
            33}, {-8, -25}, {-4, 30}, {-18, -27}, {-21, -28}, {38, 
            29}, {-29, -30}, {-26, -31}, {36, 
            32}, {-32, -33}, {-24, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-7, -38}, {-23, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 2936, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 1800, 6865, 
            4951, 9866, 10115, 10117, 7463, 10115, 10115, 10116, 10116}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.25578245520591736`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
            9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, 0.181747168302536, 
            0.3788796663284302}], "LeafValues" -> 
          RawArray["Real32",{-0.014428176917135715`, -0.018255215138196945`, 
            0.0030864193104207516`, -0.012980562634766102`, 
            0.012980562634766102`, 0.006035374011844397, 
            0.018320318311452866`, -0.007764947600662708, \
-0.010077257640659809`, 
            0.011621398851275444`, -0.006645732559263706, \
-0.007245705928653479, 0.012980562634766102`, 
            0.009064636193215847, -0.017700644209980965`, \
-0.011553287506103516`, 
            0.006035374011844397, -0.003415509592741728, -0.01540620531886816,
             0.014361911453306675`, -0.004936366342008114, \
-0.013974696397781372`, 0.018006566911935806`, 0.018959030508995056`, 
            0.012489466927945614`, 0.018255215138196945`, 
            0.010471059940755367`, -0.01797625608742237, 
            0.0030723006930202246`, -0.007717537228018045, 
            0.016322484239935875`, 0.005866200663149357, 0.002146026585251093,
             0.013869749382138252`, 0., -0.01851644366979599, 
            0.008585525676608086, 
            0.012870700098574162`, -0.0027083889581263065`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24, 33}, {32, 
            30}, {-8, -25}, {-4, 28}, {-18, -27}, {-21, -28}, {-26, -29}, {38,
             35}, {-24, 
            31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 5015, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 5571, 9086, 4158, 2726, 10115, 6540, 4158, 
            10115, 1800, 6876, 4717, 10117, 7463, 10115, 5571, 5940, 10115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.2361728549003601, -0.09210039675235748, -0.049278780817985535`, \
-0.10510517656803131`, -0.0883902981877327, -0.08429481089115143, \
-9.999999682655225*^-21, -0.15434935688972473`, -9.999999682655225*^-21, \
-0.3709371089935303, -9.999999682655225*^-21, 
            9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, -0.3576050102710724, 
            0.06050436943769455}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.013247406110167503`, -0.01810588128864765, \
-0.018432745710015297`, -0.012862751260399818`, 0.012862751260399818`, 
            0.005976229906082153, 
            0.012734152376651764`, -0.00768987275660038, \
-0.009982106275856495, 
            0.01544094830751419, -0.006494414061307907, -0.007175341714173555,
             0.012862751260399818`, 
            0.008978082798421383, -0.017553936690092087`, \
-0.011446218006312847`, 0.005976229906082153, 
            0.0013031529961153865`, -0.015272160060703754`, 
            0.014234521426260471`, -0.004887665156275034, \
-0.01384990569204092, 0.01832140050828457, 0.017858387902379036`, 
            0.012375259771943092`, 0.01810588128864765, 
            0.01137834507972002, -0.01782822050154209, -0.006042129825800657, 
            0.008023444563150406, 0.0030417367815971375`, 
            0.008515389636158943, -0.00811044406145811, 0.013745673932135105`,
             0., 0.008503149263560772, -0.008918531239032745, 
            0.018181724473834038`, 0.018635667860507965`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            22, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {23, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 20}, {-16, 26}, {
            25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {-1, 28}, {24, 
            33}, {-8, -25}, {-4, 30}, {-18, -27}, {-21, -28}, {38, 
            29}, {-29, -30}, {-26, -31}, {36, 
            32}, {-32, -33}, {-24, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-7, -38}, {-23, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 9086, 5571, 4158, 4528, 2726, 6540, 1800, 6865, 
            4951, 9866, 10115, 10117, 7463, 10115, 10115, 6876, 5571}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-9.999999682655225*^-21, -0.10510517656803131`, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
            9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, -0.38233935832977295`, \
-9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.014293634332716465`, -0.017960436642169952`, \
-0.0026640782598406076`, -0.012746958993375301`, 0.012746958993375301`, 
            0.005917761009186506, 
            0.018038218840956688`, -0.007615725975483656, \
-0.009888296946883202, 
            0.010873805731534958`, -0.006545932963490486, \
-0.007105824537575245, 0.012746958993375301`, 
            0.008892679587006569, -0.017410874366760254`, \
-0.011340810917317867`, 0.005917761009186506, 
            0.015230881981551647`, -0.015140877105295658`, 
            0.014109551906585693`, -0.0048394957557320595`, \
-0.013727417215704918`, 0.017713988199830055`, 0.018707243725657463`, 
            0.012262942269444466`, 0.005789309274405241, 
            0.017960436642169952`, -0.017683951184153557`, 
            0.003011490684002638, -0.007582999765872955, 
            0.016112100332975388`, 0.005737863481044769, 0.002128200139850378,
             0.01362387090921402, 0., -0.018249180167913437`, 
            0.008421837352216244, 0.012613948434591293`, 
            0.0031134786549955606`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {22, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 20}, {-16, 25}, {
            26, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24, 33}, {32, 
            30}, {-8, -25}, {-18, -26}, {-4, 28}, {-21, -28}, {-27, -29}, {38,
             35}, {-24, 
            31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 2936, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 6865, 8207, 5571, 9086, 4158, 2706, 9866, 4158, 10115, 6540,
             2726, 6876, 10116, 10117, 7463, 10115, 5571, 5940, 10115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.25578245520591736`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.2361728549003601, -0.09210039675235748, -0.049278780817985535`, \
-0.09446139633655548, -0.082140251994133, -9.999999682655225*^-21, \
-0.15434935688972473`, -0.08429481089115143, -0.10510517656803131`, \
-0.3709371089935303, 0.3568291664123535, 
            9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, -0.3576050102710724, 
            0.06050436943769455}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.013082494027912617`, -0.017818739637732506`, \
-0.01818019337952137, 0.01934228651225567, 0.0126331252977252, 
            0.005859954282641411, 
            0.0124954953789711, -0.007542488165199757, -0.009795796126127243, 
            0.011625846847891808`, -0.006463053170591593, \
-0.007037138566374779, 0.0126331252977252, 
            0.008808397687971592, -0.01727132499217987, \
-0.011237017810344696`, 
            0.005859954282641411, -0.0035757271107286215`, \
-0.015012260526418686`, 
            0.01398692186921835, -0.0047918506897985935`, \
-0.013607155531644821`, 0.01809477061033249, 0.01757322996854782, 
            0.012152457609772682`, 
            0.0102107934653759, -0.0126331252977252, -0.0060250828973948956`, 
            0.007872862741351128, -0.017543310299515724`, 
            0.003296834882348776, -0.008054581470787525, 0.008527781814336777,
             0.013504263944923878`, 0., 
            0.008341564796864986, -0.008752599358558655, 
            0.017898667603731155`, 0.018459714949131012`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            22, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {23, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 20}, {-16, 25}, {
            26, -19}, {-9, 35}, {21, 29}, {-17, -22}, {-1, 27}, {24, 
            33}, {-8, -25}, {-18, -26}, {-4, 30}, {38, 
            28}, {-28, -29}, {-21, -30}, {-27, -31}, {36, 
            32}, {-32, -33}, {-24, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-7, -38}, {-23, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 5015, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 6865, 
            6865, 5571, 9086, 5571, 1275, 6876, 4158, 10115, 9866, 2726, 6865,
             4951, 9866, 10115, 10117, 7463, 10115, 10115, 10116, 10116}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.10249967873096466`, -0.09210039675235748, \
-0.18917298316955566`, -0.15292909741401672`, -0.4231659770011902, \
-0.049278780817985535`, -0.0883902981877327, -0.082140251994133, \
-0.10510517656803131`, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
            9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, 0.181747168302536, 
            0.3788796663284302}], "LeafValues" -> 
          RawArray["Real32",{-0.014162610284984112`, -0.017680654302239418`, 
            0.0031723291613161564`, 0.01916373521089554, 
            0.012521187774837017`, 0.0058027999475598335`, 
            0.01777035742998123, -0.007470142096281052, -0.00970456749200821, 
            0.015402736142277718`, -0.006314618047326803, \
-0.0069692679680883884`, 0.012521187774837017`, 
            0.008725211024284363, -0.01713516004383564, \
-0.011134792119264603`, 0.006384776905179024, 
            0.0011327022220939398`, -0.014886217191815376`, 
            0.013866555877029896`, 0.0020372061990201473`, 
            0.01743597909808159, 
            0.018466243520379066`, -0.016533298417925835`, \
-0.013681904412806034`, 0.012043753638863564`, 
            0.011106501333415508`, -0.012521187774837017`, 
            0.003264258150011301, -0.007428816985338926, 
            0.015909019857645035`, 0.005612621549516916, 
            0.0021108323708176613`, 0.013386784121394157`, 
            0., -0.018009310588240623`, 0.008262310177087784, 
            0.012365980073809624`, -0.002652288181707263}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 16}, {
            22, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {21, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 20}, {-16, 26}, {
            27, -19}, {-9, 36}, {24, 23}, {25, 33}, {32, 
            30}, {-21, -24}, {-17, -25}, {-8, -26}, {-18, -27}, {-4, 
            28}, {-28, -29}, {38, 35}, {-23, 
            31}, {-31, -32}, {-1, -33}, {-22, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876, 
            4351, 5940, 6540, 6865, 5571, 1322, 4717, 5571, 7463, 3858, 10116,
             6865, 6865, 5762, 9708, 6865, 9086, 9866, 1557, 6876, 4158, 2706,
             10116, 8451, 4528, 5571, 6876, 6876, 10115, 10117, 8627, 7463, 
            10115, 6865, 5571, 8946, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.03883035480976105, -0.02756432257592678, \
-0.09327687323093414, -0.03938329964876175, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.1931752860546112, \
-0.017286919057369232`, -0.03808106482028961, -9.999999682655225*^-21, \
-0.044189415872097015`, -0.119712695479393, -0.08778919279575348, \
-0.08452989161014557, 
            0.7201182246208191, -0.5883604288101196, -0.029438268393278122`, \
-0.039696916937828064`, -0.0641283318400383, -0.016207579523324966`, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-0.3715690076351166, -0.049278780817985535`, -0.09446139633655548, 
            9.999999682655225*^-21, -0.05083892494440079, \
-0.07542958855628967, -9.999999682655225*^-21, -0.3709371089935303, \
-0.31862738728523254`, 0.25424861907958984`, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 
            0.5477944016456604, -0.08063556253910065, \
-9.999999682655225*^-21, -9.999999682655225*^-21, 0.07496753334999084}], 
          "LeafValues" -> 
          RawArray[
            "Real32",{-0.0021327820140868425`, -0.017546048387885094`, \
-0.017944926396012306`, -0.011750801466405392`, 0.01241108775138855, 
            0.017604157328605652`, -0.012251262553036213`, 
            0.006768656428903341, -0.007398666813969612, 
            0.014162122271955013`, -0.007965453900396824, \
-0.006902195978909731, 0.01241108775138855, 
            0.008643095381557941, -0.01700226031243801, 
            0.012038270011544228`, -0.01103409193456173, \
-0.0036264837253838778`, -0.014140142127871513`, 
            0.00940503366291523, -0.0012158820172771811`, \
-0.015896765515208244`, -0.0036644861102104187`, -0.014762664213776588`, 
            0.01730211079120636, -0.009234005585312843, 
            0.0063495817594230175`, -0.01908024027943611, 
            0.011936773546040058`, 
            0.010036869905889034`, -0.005674608051776886, \
-0.009431217797100544, 0.012590145692229271`, 
            0.0037672268226742744`, -0.007965859957039356, \
-0.003121471032500267, 0.0084935138002038, 
            0.013271363452076912`, -0.017249571159482002`, 0., 
            0.008594795130193233, 
            0.01956390030682087, -0.008577176369726658, \
-0.018037158995866776`, 0.012217162176966667`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 7}, {
            23, 20}, {9, 18}, {-2, 11}, {44, 10}, {-10, -11}, {24, -12}, {39, 
            13}, {-13, 14}, {-14, -15}, {27, 25}, {34, 17}, {-17, 29}, {30, 
            19}, {-19, -20}, {21, 31}, {43, 22}, {-22, -23}, {32, -24}, {28, 
            37}, {41, 26}, {-26, -27}, {40, 
            35}, {-9, -29}, {-18, -30}, {-8, -31}, {-21, 38}, {
            33, -33}, {-4, -34}, {42, 
            36}, {-28, -36}, {-35, -37}, {-25, -38}, {-32, -39}, {-5, -40}, \
{-1, -41}, {-16, -42}, {-3, -43}, {-7, -44}, {-6, -45}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 2936, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 9201,
             6865, 6865, 6865, 8207, 5571, 9086, 10115, 4158, 9866, 4158, 
            10115, 6540, 2726, 6865, 10117, 7463, 10115, 10115, 10115, 10116, 
            10115}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.25578245520591736`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, -0.5883604288101196, -0.029438268393278122`, \
-9.999999682655225*^-21, -0.2361728549003601, -0.09210039675235748, \
-0.3419531583786011, -0.049278780817985535`, -0.082140251994133, \
-9.999999682655225*^-21, -0.15434935688972473`, -0.08429481089115143, \
-0.10510517656803131`, -0.04620031267404556, 
            9.999999682655225*^-21, -0.044668592512607574`, 
            0.20791196823120117`, -0.4498637914657593, 0.024014312773942947`, 
            0.3788796663284302, 0.06050436943769455}], "LeafValues" -> 
          RawArray["Real32",{-0.012902201153337955`, -0.017414800822734833`, 
            0.0031890342943370342`, 0.018954157829284668`, 
            0.012302772141993046`, 0.005841437727212906, 
            0.01245778426527977, -0.0073280478827655315`, \
-0.00950564257800579, 
            0.011642292141914368`, -0.006287344265729189, \
-0.006835910025984049, 0.012302772141993046`, 
            0.008562025614082813, -0.01687251217663288, 0.011040447279810905`,
             0.005913959350436926, -0.011760230176150799`, 
            0.0127828698605299, -0.014641514047980309`, 
            0.013670035637915134`, -0.004483151715248823, \
-0.013262145221233368`, 0.017827874049544334`, 
            0.017171503975987434`, -0.008330132812261581, 
            0.011831468902528286`, -0.012400423176586628`, \
-0.006065474823117256, 0.00766751728951931, -0.01715189963579178, 
            0.0032038541976362467`, -0.007254910655319691, 
            0.013157935813069344`, 0., -0.017780477181077003`, 
            0.008095252327620983, 0.0177724938839674, -0.002625477034598589, 
            0.01827143505215645}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 16}, {
            23, 8}, {-2, 11}, {9, 20}, {37, 10}, {-10, -11}, {24, -12}, {34, 
            13}, {-13, 14}, {-14, -15}, {32, 17}, {-6, 21}, {25, 
            18}, {-18, -19}, {27, -20}, {-9, 36}, {22, 30}, {-17, -23}, {-1, 
            28}, {26, 33}, {-16, -26}, {-8, -27}, {-4, 31}, {39, 
            29}, {-29, -30}, {-22, -31}, {-28, -32}, {38, 
            35}, {-25, -34}, {-5, -35}, {-33, -36}, {-21, -37}, {-7, -38}, \
{-3, -39}, {-24, -40}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 9201,
             6865, 6865, 8207, 6865, 9086, 5571, 10115, 4158, 9866, 4158, 
            10115, 6540, 2726, 6876, 10116, 10117, 7463, 10115, 5571, 6876, 
            10115}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.5883604288101196, -0.09210039675235748, -0.2361728549003601, \
-0.3419531583786011, -0.049278780817985535`, -0.082140251994133, \
-9.999999682655225*^-21, -0.15434935688972473`, -0.08429481089115143, \
-0.10510517656803131`, -0.3709371089935303, 0.3568291664123535, 
            9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, -0.38233935832977295`, 
            0.06050436943769455}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.012785838916897774`, -0.017286790534853935`, \
-0.017720285803079605`, 0.018786363303661346`, 0.012196186929941177`, 
            0.005784491077065468, 
            0.017400335520505905`, -0.00725826621055603, \
-0.009418318048119545, 
            0.010875113308429718`, -0.006251349579542875, \
-0.0067703924141824245`, 0.012196186929941177`, 
            0.008481978438794613, -0.016745802015066147`, 
            0.010936531238257885`, 
            0.00585619593039155, -0.011639055795967579`, 
            0.012667229399085045`, -0.014522690325975418`, \
-0.004439324606209993, -0.013150048442184925`, 0.013555364683270454`, 
            0.01704404689371586, 0.01768961362540722, -0.008245371282100677, 
            0.011727789416909218`, -0.012292280793190002`, \
-0.006004239432513714, 0.007594515569508076, -0.017024271190166473`, 
            0.0031722330022603273`, -0.007897657342255116, 
            0.008477787487208843, 0.013046440668404102`, 0., 
            0.008019059896469116, -0.00840629544109106, 0.012004736810922623`,
             0.018121976405382156`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 16}, {
            24, 8}, {-2, 11}, {9, 22}, {38, 10}, {-10, -11}, {23, -12}, {35, 
            13}, {-13, 14}, {-14, -15}, {32, 17}, {-6, 20}, {25, 
            18}, {-18, -19}, {27, -20}, {21, 30}, {-17, -22}, {-9, 36}, {26, 
            34}, {-1, 28}, {-16, -26}, {-8, -27}, {-4, 31}, {39, 
            29}, {-29, -30}, {-21, -31}, {-28, -32}, {37, 
            33}, {-33, -34}, {-24, -35}, {-5, -36}, {-23, -37}, {-3, -38}, \
{-7, -39}, {-25, -40}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876, 
            4351, 5940, 6540, 6865, 5571, 1322, 4717, 5571, 7463, 3858, 10116,
             6865, 6865, 5762, 9708, 6865, 9086, 9866, 1557, 6876, 4158, 4528,
             10116, 4528, 5571, 8451, 6865, 6876, 10117, 8627, 7463, 10115, 
            10115, 6865, 8946, 10116, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.03883035480976105, -0.02756432257592678, \
-0.09327687323093414, -0.03938329964876175, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.1931752860546112, \
-0.017286919057369232`, -0.03808106482028961, -9.999999682655225*^-21, \
-0.044189415872097015`, -0.119712695479393, -0.08778919279575348, \
-0.08452989161014557, 
            0.7201182246208191, -0.5883604288101196, -0.029438268393278122`, \
-0.039696916937828064`, -0.0641283318400383, -0.016207579523324966`, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-0.3715690076351166, -0.049278780817985535`, -9.999999682655225*^-21, 
            9.999999682655225*^-21, -0.07542958855628967, \
-9.999999682655225*^-21, -0.05083892494440079, -0.04620031267404556, \
-0.31862738728523254`, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 0.20791196823120117`, 
            0.5477944016456604, -0.08063556253910065, -9.999999682655225*^-21,
             0.3788796663284302, 0.07496753334999084}], "LeafValues" -> 
          RawArray["Real32",{-0.0020979985129088163`, -0.017161907628178596`, 
            0.0032283375039696693`, -0.011664513498544693`, 
            0.012091279961168766`, 
            0.017244169488549232`, -0.011919994838535786`, 
            0.006810763850808144, -0.0071893068961799145`, 
            0.013991443440318108`, -0.007769240066409111, \
-0.006705631501972675, 0.012091279961168766`, 
            0.008402932435274124, -0.0166220273822546, 
            0.011821823194622993`, -0.010910703800618649`, 
            0.01471131294965744, -0.01385435089468956, 
            0.009218773804605007, -0.001004536752589047, \
-0.01557023823261261, -0.003432072000578046, -0.014406113885343075`, 
            0.016919629648327827`, -0.009174729697406292, 
            0.00621377769857645, -0.01882859505712986, 0.011625689454376698`, 
            0.0053603556007146835`, -0.0055015054531395435`, 
            0.012415732257068157`, 
            0.00365822552703321, -0.009054766967892647, \
-0.007108165416866541, -0.0031917509622871876`, 
            0.012936815619468689`, -0.016871046274900436`, 
            0., -0.017562029883265495`, 0.008554928936064243, 
            0.01939167082309723, -0.017687736079096794`, \
-0.0025998239871114492`, 0.011852378025650978`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 7}, {
            23, 20}, {9, 18}, {-2, 11}, {44, 10}, {-10, -11}, {24, -12}, {38, 
            13}, {-13, 14}, {-14, -15}, {27, 25}, {34, 17}, {-17, 29}, {30, 
            19}, {-19, -20}, {21, 33}, {42, 22}, {-22, -23}, {31, -24}, {28, 
            36}, {41, 26}, {-26, -27}, {40, 
            35}, {-9, -29}, {-18, -30}, {-8, -31}, {32, -32}, {-4, -33}, {-21,
             37}, {43, 
            39}, {-28, -36}, {-25, -37}, {-34, -38}, {-5, -39}, {-35, -40}, \
{-1, -41}, {-16, -42}, {-7, -43}, {-3, -44}, {-6, -45}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 9201,
             6865, 10116, 6865, 5571, 1275, 9086, 5571, 6876, 10115, 4158, 
            10116, 9866, 2726, 4951, 9866, 6876, 10115, 4717, 10117, 7463, 
            5571, 10115}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.23562836647033691`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, 
            0.7201182246208191, -0.5883604288101196, -0.10249967873096466`, \
-0.15292909741401672`, -0.09210039675235748, -0.18917298316955566`, \
-0.4231659770011902, -0.3419531583786011, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.082140251994133, \
-0.10510517656803131`, -0.36605125665664673`, -9.999999682655225*^-21, \
-0.3709371089935303, 0.4169449508190155, -9.999999682655225*^-21, 
            9.999999682655225*^-21, -0.044668592512607574`, \
-9.999999682655225*^-21, 0.024014312773942947`}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.013886711560189724`, -0.01704004406929016, \
-0.017505614086985588`, 0.01858980394899845, 0.011988001875579357`, 
            0.005820650607347488, 
            0.012085399590432644`, -0.007121153641492128, 
            0.006740648299455643, 
            0.010696318000555038`, -0.006830982863903046, \
-0.006641611456871033, 0.011988001875579357`, 
            0.008324863389134407, -0.016501085832715034`, 
            0.010793609544634819`, 0.006656662095338106, -0.01156606711447239,
             0.012483292259275913`, -0.014291711151599884`, \
-0.013733819127082825`, 0.009131445549428463, 
            0.0024386777076870203`, -0.01592458039522171, 
            0.016798146069049835`, 
            0.01806492730975151, -0.013204206712543964`, \
-0.008196871727705002, 
            0.011525123380124569`, -0.005448315292596817, \
-0.012175648473203182`, 0.0031137894839048386`, 0.015418152324855328`, 
            0.005322372540831566, 0.008439309895038605, 
            0.0020309321116656065`, -0.007813266478478909, 
            0.012829003855586052`, 0., -0.008239725604653358, 
            0.01738904044032097}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 16}, {
            25, 8}, {-2, 11}, {9, 20}, {40, 10}, {-10, -11}, {24, -12}, {38, 
            13}, {-13, 14}, {-14, -15}, {34, 17}, {-6, 22}, {27, 
            18}, {-18, -19}, {30, -20}, {29, 21}, {-21, -22}, {26, 
            23}, {-23, -24}, {28, 37}, {35, 
            32}, {-17, -27}, {-16, -28}, {-8, -29}, {-9, -30}, {-4, 
            31}, {-31, -32}, {-26, 33}, {-33, -34}, {39, 
            36}, {-1, -36}, {-35, -37}, {-25, -38}, {-5, -39}, {-3, -40}, \
{-7, -41}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
           "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876, 
            4351, 5940, 6540, 6865, 5571, 1322, 4717, 5571, 7463, 3858, 10116,
             6865, 6865, 5762, 9708, 6865, 9086, 9866, 1557, 6876, 4158, 4528,
             10116, 8451, 4528, 5571, 6865, 6876, 10117, 8627, 7463, 10115, 
            6865, 10115, 8946, 5571, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.03883035480976105, -0.02756432257592678, \
-0.09327687323093414, -0.03938329964876175, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.1931752860546112, \
-0.017286919057369232`, -0.03808106482028961, -9.999999682655225*^-21, \
-0.044189415872097015`, -0.119712695479393, -0.08778919279575348, \
-0.08452989161014557, 
            0.7201182246208191, -0.5883604288101196, -0.029438268393278122`, \
-0.039696916937828064`, -0.0641283318400383, -0.016207579523324966`, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-0.3715690076351166, -0.049278780817985535`, -9.999999682655225*^-21, 
            9.999999682655225*^-21, -0.05083892494440079, \
-0.07542958855628967, -9.999999682655225*^-21, -0.04620031267404556, \
-0.31862738728523254`, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 0.20791196823120117`, -0.08063556253910065, 
            0.5477944016456604, -9.999999682655225*^-21, \
-9.999999682655225*^-21, 0.07496753334999084}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.001979284454137087, -0.01692109741270542, \
-0.002561488188803196, -0.011563465930521488`, 0.01188630424439907, 
            0.017023731023073196`, -0.011685874313116074`, 
            0.006671426352113485, -0.0070537906140089035`, 
            0.013770106248557568`, -0.007627731189131737, \
-0.006578319706022739, 0.01188630424439907, 
            0.008247751742601395, -0.016382882371544838`, 
            0.011604700237512589`, -0.010802105069160461`, 
            0.014507152140140533`, -0.01361546479165554, 
            0.009045273065567017, -0.0009010070352815092, \
-0.01533492747694254, -0.0032847849652171135`, -0.014179414138197899`, 
            0.016679497435688972`, -0.009096750058233738, 
            0.006121586076915264, -0.018602631986141205`, 0.0114260483533144, 
            0.005249117035418749, -0.005395702552050352, -0.00884179025888443,
             0.012273282743990421`, 
            0.003587117185816169, -0.006987189408391714, \
-0.003140542656183243, 0.012722951360046864`, -0.016637954860925674`, 
            0., -0.01733880676329136, 0.01919376291334629, 
            0.008432725444436073, -0.017436347901821136`, 
            0.0032499658409506083`, 0.01161416620016098}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 7}, {
            23, 20}, {9, 18}, {-2, 11}, {44, 10}, {-10, -11}, {24, -12}, {38, 
            13}, {-13, 14}, {-14, -15}, {27, 25}, {34, 17}, {-17, 29}, {30, 
            19}, {-19, -20}, {21, 31}, {42, 22}, {-22, -23}, {32, -24}, {28, 
            36}, {40, 26}, {-26, -27}, {41, 
            35}, {-9, -29}, {-18, -30}, {-8, -31}, {-21, 37}, {
            33, -33}, {-4, -34}, {43, 
            39}, {-28, -36}, {-25, -37}, {-32, -38}, {-5, -39}, {-35, -40}, \
{-16, -41}, {-1, -42}, {-7, -43}, {-3, -44}, {-6, -45}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 9201,
             6865, 10116, 6865, 5571, 1275, 6876, 5571, 9086, 10115, 4158, 
            10116, 9866, 4158, 10115, 2726, 6876, 10116, 10117, 7463, 5571, 
            10116, 10115}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.23562836647033691`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, 
            0.7201182246208191, -0.5883604288101196, -0.10249967873096466`, \
-0.15292909741401672`, -0.4231659770011902, -0.2361728549003601, \
-0.09210039675235748, -0.3419531583786011, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.082140251994133, \
-9.999999682655225*^-21, -0.15434935688972473`, -0.10510517656803131`, \
-0.3709371089935303, 0.3568291664123535, 
            9.999999682655225*^-21, -0.044668592512607574`, \
-9.999999682655225*^-21, 0.07496753334999084, 0.06050436943769455}], 
          "LeafValues" -> 
          RawArray[
            "Real32",{-0.012598914094269276`, -0.016804970800876617`, \
-0.01729470118880272, 0.01840018481016159, 0.011786144226789474`, 
            0.005854872055351734, 0.01690518483519554, -0.006987204309552908, 
            0.006603080779314041, 
            0.010522566735744476`, -0.006701434496790171, \
-0.006515743210911751, 0.011786144226789474`, 
            0.008171575143933296, -0.0162673257291317, 0.010654214769601822`, 
            0.006690364796668291, -0.011493685655295849`, 
            0.012304680421948433`, -0.014069152995944023`, \
-0.013499216176569462`, 0.008960227482020855, 
            0.002486706478521228, -0.015697823837399483`, \
-0.01301159244030714, 0.017397494986653328`, 
            0.016563590615987778`, -0.00814843364059925, 
            0.011328420601785183`, -0.00534365838393569, \
-0.012061439454555511`, -0.0060975393280386925`, 0.007342938333749771, 
            0.0030566120985895395`, -0.0077622015960514545`, 
            0.008450514636933804, 0.012618603184819221`, 
            0., -0.008091345429420471, 0.011518019251525402`, 
            0.01793079636991024}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 16}, {
            25, 8}, {-2, 11}, {9, 20}, {39, 10}, {-10, -11}, {26, -12}, {37, 
            13}, {-13, 14}, {-14, -15}, {34, 17}, {-6, 22}, {27, 
            18}, {-18, -19}, {30, -20}, {29, 21}, {-21, -22}, {24, 
            23}, {-23, -24}, {-17, -25}, {-1, 31}, {28, 
            36}, {-16, -28}, {-8, -29}, {-9, -30}, {-4, 33}, {40, 
            32}, {-32, -33}, {-31, -34}, {38, 
            35}, {-35, -36}, {-27, -37}, {-5, -38}, {-3, -39}, {-7, -40}, \
{-26, -41}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876, 
            4351, 5940, 2936, 6865, 5571, 1322, 4717, 5571, 7463, 10115, 9201,
             6865, 10116, 6865, 5762, 9708, 6865, 9086, 9866, 10115, 1557, 
            6876, 5571, 4158, 10116, 2231, 6540, 6865, 6865, 6876, 10117, 
            8627, 7463, 10115, 6865, 10115, 8946, 10116, 10115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.03883035480976105, -0.02756432257592678, \
-0.09327687323093414, -0.03938329964876175, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.25578245520591736`, \
-0.017286919057369232`, -0.03808106482028961, -9.999999682655225*^-21, \
-0.044189415872097015`, -0.119712695479393, -0.08778919279575348, \
-0.0883902981877327, -9.999999682655225*^-21, -0.029438268393278122`, 
            0.7201182246208191, -0.5883604288101196, -0.039696916937828064`, \
-0.0641283318400383, -9.999999682655225*^-21, -0.09210039675235748, \
-0.15825799107551575`, -0.3419531583786011, -0.15215910971164703`, \
-0.3715690076351166, -0.05139482393860817, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.053387656807899475`, \
-0.08429481089115143, -0.02878742292523384, -0.04620031267404556, \
-0.31862738728523254`, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 0.20791196823120117`, -0.08063556253910065, 
            0.5477944016456604, -9.999999682655225*^-21, 0.3788796663284302, 
            0.024014312773942947`}], "LeafValues" -> 
          RawArray["Real32",{-0.00194964196998626, -0.01669156923890114, 
            0.003305197460576892, -0.015930568799376488`, 
            0.011687475256621838`, 
            0.011731229722499847`, -0.011459065601229668`, 
            0.006535595282912254, -0.006921377964317799, 
            0.011455468833446503`, -0.007552072871476412, \
-0.0064538693986833096`, 0.011687475256621838`, 
            0.008096316829323769, -0.016154328361153603`, 
            0.011454399675130844`, 
            0.01055605337023735, -0.011377083137631416`, 
            0.012196924537420273`, -0.00389951397664845, \
-0.013385006226599216`, 
            0.008876285515725613, -0.015108989551663399`, \
-0.003141010645776987, -0.017126884311437607`, 
            0.01645033247768879, -0.00901977252215147, -0.008066152222454548, 
            0.006028692703694105, -0.018404822796583176`, 
            0.019004404544830322`, 0.01123220194131136, -0.005292174406349659,
             0.0022044663783162832`, -0.008634289726614952, 
            0.002126912120729685, -0.0068467408418655396`, \
-0.0031588871497660875`, 0.012515909038484097`, -0.01647321879863739, 
            0., -0.017139460891485214`, 0.019032347947359085`, 
            0.00836101733148098, -0.0171966589987278, -0.00255323713645339, 
            0.017071854323148727`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 7}, {
            24, 19}, {9, 20}, {-2, 11}, {46, 10}, {-10, -11}, {25, -12}, {40, 
            13}, {-13, 14}, {-14, -15}, {29, 26}, {36, 17}, {27, 
            18}, {-18, -19}, {22, 34}, {32, 21}, {-21, -22}, {44, 
            23}, {-23, -24}, {30, -25}, {31, 38}, {42, 
            28}, {-17, -28}, {-27, -29}, {43, 37}, {35, 
            33}, {-9, -32}, {-8, -33}, {-31, -34}, {-20, 39}, {-4, -36}, {45, 
            41}, {-30, -38}, {-26, -39}, {-35, -40}, {-5, -41}, {-37, -42}, \
{-16, -43}, {-1, -44}, {-7, -45}, {-3, -46}, {-6, -47}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876, 
            4351, 5940, 6540, 6865, 5571, 1322, 4717, 5571, 7463, 3858, 6865, 
            10116, 6865, 5762, 9708, 6865, 9086, 9866, 1557, 6876, 5571, 2706,
             4158, 10116, 6540, 2231, 6865, 6865, 6876, 10117, 8627, 7463, 
            10115, 6865, 10115, 8946, 10116, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.03883035480976105, -0.02756432257592678, \
-0.09327687323093414, -0.03938329964876175, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.1931752860546112, \
-0.017286919057369232`, -0.03808106482028961, -9.999999682655225*^-21, \
-0.044189415872097015`, -0.119712695479393, -0.08778919279575348, \
-0.08452989161014557, -0.029438268393278122`, 
            0.7201182246208191, -0.5883604288101196, -0.039696916937828064`, \
-0.0641283318400383, -9.999999682655225*^-21, -0.09210039675235748, \
-0.15825799107551575`, -0.15215910971164703`, -0.3715690076351166, \
-0.05139482393860817, -0.09446139633655548, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.08429481089115143, \
-0.053387656807899475`, -0.02878742292523384, -0.04620031267404556, \
-0.31862738728523254`, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 0.20791196823120117`, -0.08063556253910065, 
            0.5477944016456604, -9.999999682655225*^-21, 0.3788796663284302, 
            0.07496753334999084}], "LeafValues" -> 
          RawArray["Real32",{-0.0019303200533613563`, -0.01658080331981182, 
            0.003271915251389146, -0.01577412337064743, 0.011590255424380302`,
             0.016699692234396935`, -0.011365125887095928`, 
            0.006468953564763069, -0.006856299005448818, 
            0.01362214982509613, -0.00742418272420764, -0.006392686162143946, 
            0.011590255424380302`, 
            0.008021954447031021, -0.016043806448578835`, 
            0.011357290670275688`, -0.010685627348721027`, \
-0.003963107708841562, -0.003861728822812438, -0.01327277161180973, 
            0.008793420158326626, -0.01499243825674057, \
-0.003110705642029643, -0.017005860805511475`, 
            0.016339635476469994`, -0.008930199779570103, 
            0.005970134865492582, -0.018252257257699966`, 
            0.018835078924894333`, 0.009455712512135506, 
            0.011137351393699646`, -0.005241240840405226, \
-0.008561664260923862, 0.0021825486328452826`, 
            0.002105675870552659, -0.006782518234103918, \
-0.0031271688640117645`, 0.012414819560945034`, -0.016361409798264503`, 
            0., -0.01701851189136505, 0.018865138292312622`, 
            0.008278382010757923, -0.017073960974812508`, \
-0.002527808304876089, 0.011290219612419605`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 7}, {
            23, 18}, {9, 19}, {-2, 11}, {45, 10}, {-10, -11}, {24, -12}, {39, 
            13}, {-13, 14}, {-14, -15}, {27, 25}, {35, 17}, {-17, 29}, {21, 
            32}, {31, 20}, {-20, -21}, {43, 22}, {-22, -23}, {28, -24}, {30, 
            37}, {41, 26}, {-26, -27}, {42, 36}, {34, 
            33}, {-18, -30}, {-9, -31}, {-8, -32}, {-19, 
            38}, {-29, -34}, {-4, -35}, {44, 
            40}, {-28, -37}, {-25, -38}, {-33, -39}, {-5, -40}, {-36, -41}, \
{-16, -42}, {-1, -43}, {-7, -44}, {-3, -45}, {-6, -46}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            6876, 5015, 5940, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 9201,
             6865, 5571, 1275, 6876, 6865, 5571, 9086, 10115, 4158, 9866, 
            4158, 10115, 4528, 6876, 10116, 10117, 7463, 6876, 10115, 5571, 
            10115}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, -0.10249967873096466`, -0.15292909741401672`, \
-0.4231659770011902, -0.5883604288101196, -0.2361728549003601, \
-0.09210039675235748, -0.3419531583786011, -0.049278780817985535`, \
-0.082140251994133, -9.999999682655225*^-21, -0.15434935688972473`, \
-0.07542958855628967, -0.3709371089935303, 0.3568291664123535, 
            9.999999682655225*^-21, -0.044668592512607574`, \
-0.3803325295448303, -0.4498637914657593, -9.999999682655225*^-21, 
            0.06050436943769455}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.01245826855301857, -0.0164725873619318, \
-0.01702851802110672, 0.018114756792783737`, 0.011494443751871586`, 
            0.006010487210005522, 
            0.02062710002064705, -0.0067919534631073475`, \
-0.008725515566766262, 
            0.014408509247004986`, -0.005772497970610857, \
-0.006332181394100189, 0.011494443751871586`, 
            0.007948470301926136, -0.015935678035020828`, 
            0.010394933633506298`, 
            0.006805125158280134, -0.011290538124740124`, 
            0.012029663659632206`, -0.01379267405718565, 
            0.002603687345981598, -0.015378866344690323`, \
-0.012747603468596935`, 0.013009613379836082`, 0.017183326184749603`, 
            0.016231419518589973`, -0.008023885078728199, 
            0.011043833568692207`, -0.0008551566861569881, \
-0.00614647101610899, 0.0071660783141851425`, 
            0.011509498581290245`, -0.007669803220778704, 
            0.008457962423563004, 0.012315288186073303`, 0., 
            0.009816563688218594, 0.0074418680742383, -0.007849383167922497, 
            0.01775987260043621}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 16}, {
            24, 8}, {-2, 11}, {9, 23}, {36, 10}, {-10, -11}, {25, -12}, {35, 
            13}, {-13, 14}, {-14, -15}, {32, 17}, {-6, 20}, {26, 
            18}, {-18, -19}, {28, -20}, {22, 21}, {-21, -22}, {-17, -23}, {-9,
             37}, {-1, 29}, {27, 34}, {-16, -27}, {-8, -28}, {-4, 31}, {39, 
            30}, {-30, -31}, {-29, -32}, {38, 
            33}, {-33, -34}, {-26, -35}, {-5, -36}, {-7, -37}, {-24, -38}, \
{-3, -39}, {-25, -40}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
          "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5762, 5015, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 3858, 10116,
             6865, 6865, 9086, 9866, 1557, 4528, 6876, 4158, 10116, 8451, 
            9708, 6865, 5307, 10115, 6876, 4528, 10117, 8627, 7463, 6540, 
            10115, 6865, 5571}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.08452989161014557, 
            0.7201182246208191, -0.5883604288101196, -0.016207579523324966`, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-9.999999682655225*^-21, -0.3715690076351166, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.05083892494440079, \
-0.12412932515144348`, -0.04620031267404556, -0.049029506742954254`, 
            0.38923919200897217`, -0.31862738728523254`, -0.07542958855628967,
             9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, -0.08429481089115143, 
            0.20791196823120117`, -0.08063556253910065, \
-9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.00783531367778778, -0.01636684127151966, \
-0.002515963278710842, -0.0046223304234445095`, -0.0005084308213554323, 
            0.011400002054870129`, 0.006453874055296183, -0.00672832690179348,
             0.018292415887117386`, -0.0063893492333590984`, \
-0.00045754111488349736`, 0.011212038807570934`, -0.00627234298735857, 
            0.011400002054870129`, 
            0.007875846698880196, -0.015829868614673615`, \
-0.010581943206489086`, 0.01411103643476963, -0.01309327781200409, 
            0.008667672984302044, -0.013689214363694191`, 
            0.016125602647662163`, -0.008858566172420979, 
            0.005886598024517298, 
            0.0049478416331112385`, -0.018215851858258247`, 
            0.010951612144708633`, -0.0051383934915065765`, \
-0.008361276239156723, -0.01623234897851944, -0.0066464426927268505`, 
            0.0018652596045285463`, 
            0.009895789436995983, -0.0031449974048882723`, 
            0.018257413059473038`, 0.012217268347740173`, -0.0092787966132164,
             0., -0.016220122575759888`, -0.016832435503602028`, 
            0.018709102645516396`, 0.0033133511897176504`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 18}, {-2, 12}, {29, 9}, {-9, -10}, {20, 28}, {25, 22}, {
            21, -13}, {37, 14}, {-14, 15}, {-15, -16}, {30, 17}, {-17, 24}, {
            27, 19}, {-19, -20}, {31, -21}, {26, 35}, {40, 
            23}, {-23, -24}, {-18, -25}, {32, 33}, {-8, -27}, {-7, -28}, {-11,
             36}, {-5, -30}, {41, 39}, {-4, 
            34}, {-1, -33}, {-26, -34}, {-32, -35}, {-22, -36}, {-29, 
            38}, {-6, -38}, {-37, -39}, {-31, -40}, {-12, -41}, {-3, -42}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5762, 5015, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 10115, 9201,
             10115, 10116, 6865, 6865, 9086, 9866, 1557, 6876, 4158, 10116, 
            6540, 9708, 6876, 5307, 10115, 6876, 4528, 10116, 10117, 8627, 
            9866, 7463, 6865, 5571}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.1265643686056137, -9.999999682655225*^-21, \
-0.3419531583786011, 
            0.7201182246208191, -0.5883604288101196, -0.016207579523324966`, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-0.3715690076351166, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.08429481089115143, \
-0.12412932515144348`, -0.3709371089935303, -0.049029506742954254`, 
            0.38923919200897217`, -0.31862738728523254`, -0.07542958855628967,
             0.3568291664123535, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.06374698132276535, -0.044668592512607574`, -0.08063556253910065, \
-9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.007759406231343746, -0.016263484954833984`, \
-0.016838442534208298`, -0.004575507249683142, -0.0005033771158196032, 
            0.011306892149150372`, 
            0.006388247013092041, -0.006665408611297607, 
            0.01809697411954403, -0.006328871939331293, -0.003641449147835374,
             0.01111837662756443, -0.006213159766048193, 
            0.011306892149150372`, 
            0.007804065942764282, -0.015726301819086075`, 
            0.010264732874929905`, -0.011220677755773067`, 
            0.011310689151287079`, -0.011078434064984322`, \
-0.012985958717763424`, 0.008587450720369816, -0.01358751393854618, 
            0.016022108495235443`, -0.008771220222115517, 
            0.005829582456499338, -0.018068496137857437`, 
            0.010860651731491089`, -0.005089092534035444, \
-0.00829161424189806, -0.01610981859266758, -0.0075801219791173935`, 
            0.0018467832123860717`, 
            0.009797781705856323, -0.003113427432253957, 
            0.018108583986759186`, 0.008418917655944824, 
            0.012120716273784637`, -0.007019983138889074, \
-0.016175057739019394`, 0., 0.018550772219896317`, -0.007710547186434269}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 20}, {-2, 12}, {30, 9}, {-9, -10}, {22, 29}, {26, 24}, {
            23, -13}, {40, 14}, {-14, 15}, {-15, -16}, {31, 17}, {19, 
            18}, {-18, -19}, {-17, -20}, {28, 21}, {-21, -22}, {32, -23}, {27,
             37}, {41, 25}, {-25, -26}, {33, 34}, {-8, -28}, {-7, -29}, {-11, 
            38}, {-5, -31}, {42, 36}, {-4, 
            35}, {-1, -34}, {-27, -35}, {-33, -36}, {-32, -37}, {-24, -38}, \
{-30, 39}, {-39, -40}, {-6, -41}, {-12, -42}, {-3, -43}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5762, 5015, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 10115, 9201,
             10116, 6865, 6865, 9086, 9866, 10115, 1557, 6876, 4158, 10116, 
            8451, 9708, 6865, 5307, 10115, 6876, 4528, 10117, 8627, 7463, 
            10115, 6540, 6865, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.0883902981877327, -9.999999682655225*^-21, 
            0.7201182246208191, -0.5883604288101196, -0.016207579523324966`, \
-0.09210039675235748, -0.15825799107551575`, -0.3419531583786011, \
-0.15215910971164703`, -0.3715690076351166, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.05083892494440079, \
-0.12412932515144348`, -0.04620031267404556, -0.049029506742954254`, 
            0.38923919200897217`, -0.31862738728523254`, -0.07542958855628967,
             9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 
            0.20791196823120117`, -0.08429481089115143, -0.08063556253910065, 
            0.3788796663284302}], "LeafValues" -> 
          RawArray["Real32",{-0.007684442680329084, -0.016162442043423653`, 
            0.003367105731740594, -0.004529210738837719, \
-0.0004983734688721597, 0.01121507678180933, 
            0.006323426496237516, -0.006603185087442398, 
            0.017906665802001953`, -0.006269060540944338, \
-0.00034188691643066704`, 0.011026010848581791`, -0.00615462101995945, 
            0.01121507678180933, 0.007733112201094627, -0.015624906867742538`,
             0.010172093287110329`, -0.011108610779047012`, 
            0.011767004616558552`, -0.012880401685833931`, 
            0.008508219383656979, -0.013487518765032291`, 
            0.015920864418148994`, -0.008685055188834667, \
-0.007915439084172249, 0.005773198325186968, -0.017924942076206207`, 
            0.010770917870104313`, -0.005040309391915798, \
-0.008222691714763641, -0.015989942476153374`, -0.006513350177556276, 
            0.0018284901743754745`, 
            0.009701198898255825, -0.0030821904074400663`, 
            0.01796361617743969, 0.012025590054690838`, -0.009161403402686119,
             0., -0.0166542436927557, -0.016013488173484802`, 
            0.018396617844700813`, -0.0025098545011132956`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 19}, {-2, 12}, {30, 9}, {-9, -10}, {21, 29}, {26, 23}, {
            22, -13}, {38, 14}, {-14, 15}, {-15, -16}, {31, 17}, {24, 
            18}, {-18, -19}, {28, 20}, {-20, -21}, {32, -22}, {27, 36}, {41, 
            25}, {-17, -25}, {-24, -26}, {33, 34}, {-8, -28}, {-7, -29}, {-11,
             37}, {-5, -31}, {42, 39}, {-4, 
            35}, {-1, -34}, {-27, -35}, {-33, -36}, {-23, -37}, {-30, 
            40}, {-6, -39}, {-32, -40}, {-38, -41}, {-12, -42}, {-3, -43}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5762, 5015, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 3858, 10116,
             6865, 6865, 9086, 9866, 1557, 2706, 6876, 4158, 10116, 8451, 
            9708, 6876, 5307, 10115, 6876, 4528, 10116, 10117, 8627, 7463, 
            4785, 6865, 5571}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.08452989161014557, 
            0.7201182246208191, -0.5883604288101196, -0.016207579523324966`, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-0.09446139633655548, -0.3715690076351166, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.05083892494440079, \
-0.12412932515144348`, -0.3709371089935303, -0.049029506742954254`, 
            0.38923919200897217`, -0.31862738728523254`, -0.07542958855628967,
             0.3568291664123535, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, -0.0815085768699646, -0.08063556253910065, \
-9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.007610402535647154, -0.016063641756772995`, \
-0.016661694273352623`, -0.004483434371650219, -0.0004934185417369008, 
            0.011124521493911743`, 
            0.006259399000555277, -0.006541643291711807, 
            0.017721278592944145`, -0.006209901999682188, \
-0.00033848220482468605`, 0.010934905149042606`, -0.006096715107560158, 
            0.011124521493911743`, 
            0.007662965916097164, -0.015525616705417633`, \
-0.01045851781964302, -0.004126760642975569, -0.012776552699506283`, 
            0.008429959416389465, -0.013389176689088345`, 
            0.015821797773241997`, -0.008600044995546341, 
            0.005717436783015728, 
            0.009116248227655888, -0.017785051837563515`, 
            0.010682379826903343`, -0.004992038011550903, \
-0.008154492825269699, -0.01587262749671936, -0.007500599604099989, 
            0.0018103803740814328`, 
            0.009606003761291504, -0.0030512819066643715`, 
            0.017822368070483208`, 0.008379966951906681, 
            0.01193185057491064, -0.009875116869807243, 
            0., -0.01593048870563507, 
            0.01824648305773735, -0.007560908794403076}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 18}, {-2, 12}, {29, 9}, {-9, -10}, {20, 28}, {25, 22}, {
            21, -13}, {38, 14}, {-14, 15}, {-15, -16}, {30, 17}, {-17, 24}, {
            27, 19}, {-19, -20}, {31, -21}, {26, 36}, {40, 
            23}, {-23, -24}, {-18, -25}, {32, 33}, {-8, -27}, {-7, -28}, {-11,
             37}, {-5, -30}, {41, 35}, {-4, 
            34}, {-1, -33}, {-26, -34}, {-32, -35}, {-31, -36}, {-22, -37}, \
{-29, 39}, {-6, -39}, {-38, -40}, {-12, -41}, {-3, -42}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5762, 5015, 6766, 5571, 6865, 5571, 1322, 4717, 7561, 4717, 4528, 
            5571, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 4528, 6876, 4158,
             10116, 9708, 10115, 6876, 10117, 1026, 8627, 10115, 7463, 6865, 
            6876}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.08622151613235474, -9.999999682655225*^-21, 
            0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.10004036128520966`, -0.3715690076351166, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.12412932515144348`, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.08941143751144409, -0.07903441786766052, -0.044668592512607574`, \
-0.08063556253910065, -0.409895658493042}], "LeafValues" -> 
          RawArray["Real32",{-0.007537268567830324, -0.01596701703965664, 
            0.007178310304880142, 
            0.014736046083271503`, -0.0004885132075287402, 0.0110351936891675,
             0.006196149624884129, -0.00648077204823494, 
            0.017540616914629936`, -0.00615138653665781, 
            0.013094213791191578`, 0.01084502786397934, -0.006039433181285858,
             0.0110351936891675, 
            0.007593614049255848, -0.01542836707085371, -0.006376828067004681,
             0.005005538929253817, -0.004815382417291403, 
            0.011933907866477966`, 
            0.0011531640775501728`, -0.012674358673393726`, 
            0.008352650329470634, 
            0.015724847093224525`, -0.008516162633895874, \
-0.017342017963528633`, 
            0.0056622871197760105`, -0.007568054832518101, \
-0.017648693174123764`, 
            0.010595006868243217`, -0.004944269545376301, \
-0.015757793560624123`, 0.009512163698673248, -0.00302069797180593, 
            0.011839454993605614`, -0.00808700267225504, -0.01577773503959179,
             0.017411628738045692`, 0., 0.01810021698474884, 
            0.012535023503005505`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 21}, {-2, 12}, {31, 9}, {-9, -10}, {-4, 18}, {28, 24}, {
            23, -13}, {38, 14}, {-14, 15}, {-15, -16}, {37, 17}, {19, 27}, {
            20, 35}, {-17, -20}, {-11, 25}, {30, 22}, {-22, -23}, {29, 34}, {
            39, 26}, {-21, -26}, {-25, -27}, {-18, -28}, {32, 
            33}, {-8, -30}, {-7, -31}, {-5, -32}, {-1, -33}, {-29, -34}, \
{-24, -35}, {-19, 36}, {-36, -37}, {-3, 
            40}, {-6, -39}, {-12, -40}, {-38, -41}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5940, 2936, 6766, 5571, 6865, 5571, 1322, 4717, 7463, 4528, 10115,
             9201, 10115, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 6876, 
            4158, 10116, 6865, 10115, 6876, 10117, 1026, 9866, 7463, 10115, 
            6865, 10115, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.25578245520591736`, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -9.999999682655225*^-21, -0.1265643686056137, \
-9.999999682655225*^-21, -0.3419531583786011, -9.999999682655225*^-21, 
            0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.3715690076351166, -0.049278780817985535`, 
            9.999999682655225*^-21, -0.04620031267404556, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.044668592512607574`, 
            0.20791196823120117`, -0.08063556253910065, 0.024014312773942947`,
             0.3788796663284302}], "LeafValues" -> 
          RawArray["Real32",{-0.007465021219104528, -0.015872497111558914`, 
            0.003373275976628065, 0.014587298966944218`, 0.009904888458549976,
             0.010947057977318764`, 
            0.006133664399385452, -0.006420560646802187, 
            0.011736947111785412`, -0.007604007143527269, 
            0.012977088801562786`, 
            0.010756345465779305`, -0.005982763599604368, 
            0.010947057977318764`, 
            0.007525039836764336, -0.015333091840147972`, 
            0.009987704455852509, -0.004771798383444548, -0.01101207546889782,
             0.011016369797289371`, -0.010890858247876167`, 
            0.0011416771449148655`, -0.012573772110044956`, 
            0.008276269771158695, 
            0.01562993973493576, -0.008433381095528603, -0.01721855439245701, 
            0.005607738625258207, -0.017515741288661957`, 
            
            0.010508767329156399`, -0.00489699887111783, \
-0.0064445314928889275`, 0.009419642388820648, -0.002990434877574444, 
            0.01174836978316307, -0.006563149858266115, -0.01565929874777794, 
            0., -0.016461307182908058`, 0.01795768178999424, 
            0.01695726253092289, -0.0025107471738010645`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 22}, {-2, 12}, {40, 9}, {-9, -10}, {-4, 17}, {28, 25}, {
            24, -13}, {37, 14}, {-14, 15}, {-15, -16}, {31, 18}, {21, 35}, {
            20, 19}, {-19, -20}, {-17, -21}, {-11, 26}, {30, 
            23}, {-23, -24}, {29, 34}, {39, 27}, {-22, -27}, {-26, -28}, {32, 
            33}, {-8, -30}, {-7, -31}, {41, 
            38}, {-1, -33}, {-29, -34}, {-25, -35}, {-18, 
            36}, {-36, -37}, {-6, -38}, {-32, -39}, {-12, -40}, {-5, -41}, \
{-3, -42}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
           "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5762, 6540, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 10115, 9201,
             10116, 6865, 6865, 9086, 10115, 9866, 1557, 10116, 6876, 4158, 
            6540, 9708, 6876, 5307, 10115, 6876, 4528, 10115, 10117, 9866, 
            8627, 7463, 6865, 5571}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.0883902981877327, -9.999999682655225*^-21, 
            0.6638875603675842, -0.5883604288101196, -0.016207579523324966`, \
-0.09210039675235748, -0.3419531583786011, -0.15825799107551575`, \
-0.15215910971164703`, 
            0.27920687198638916`, -0.3715690076351166, \
-0.049278780817985535`, -0.08429481089115143, -0.12412932515144348`, \
-0.3709371089935303, -0.049029506742954254`, 
            0.38923919200897217`, -0.31862738728523254`, -0.07542958855628967,
             0.25424861907958984`, 
            9.999999682655225*^-21, -0.06374698132276535, \
-0.08941143751144409, -0.044668592512607574`, -0.08063556253910065, \
-9.999999682655225*^-21}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.007393642328679562, -0.015780022367835045`, \
-0.016473645344376564`, -0.0043967715464532375`, -0.00044331385288387537`, 
            0.010860083624720573`, -0.0005676760338246822, \
-0.006360996514558792, 
            0.008686804212629795, -0.006311972159892321, \
-0.0032631047070026398`, 0.010668826289474964`, -0.005926697514951229, 
            0.010860083624720573`, 
            0.007457227446138859, -0.015239735133945942`, 
            0.009898829273879528, -0.010903379879891872`, 
            0.011469464749097824`, -0.012474745512008667`, 
            0.00760315265506506, -0.013081525452435017`, 
            0.015537019819021225`, -0.0078017739579081535`, \
-0.008351677097380161, 
            0.005553783383220434, -0.018281040713191032`, \
-0.017386073246598244`, 
            0.0104236314073205, -0.006502105388790369, \
-0.015591648407280445`, -0.007449852302670479, 0.0016278147231787443`, 
            0.009328409098088741, -0.002960488200187683, 
            0.017560945823788643`, 0.008306370116770267, 
            0.011658554896712303`, -0.007891245186328888, \
-0.015691475942730904`, 0., 0.017818737775087357`, -0.007447018753737211}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 19}, {-2, 12}, {30, 9}, {-9, -10}, {21, 29}, {27, 24}, {
            22, -13}, {40, 14}, {-14, 15}, {-15, -16}, {31, 17}, {23, 
            18}, {-18, -19}, {26, 20}, {-20, -21}, {32, -22}, {28, 
            37}, {-17, -24}, {41, 25}, {-25, -26}, {-7, -27}, {33, 
            34}, {-8, -29}, {-11, 38}, {-5, -31}, {42, 36}, {-4, 
            35}, {-1, -34}, {-28, -35}, {-33, -36}, {-32, -37}, {-23, -38}, \
{-30, 39}, {-39, -40}, {-6, -41}, {-12, -42}, {-3, -43}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5940, 2936, 6766, 5571, 6865, 5571, 1322, 4717, 7561, 4717, 4528, 
            5571, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 4528, 6876, 4158,
             10116, 10115, 6876, 10117, 1026, 9866, 10115, 7463, 6865, 10115, 
            6876}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.25578245520591736`, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.08622151613235474, -9.999999682655225*^-21, 
            0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.10004036128520966`, -0.3715690076351166, -0.049278780817985535`, 
            9.999999682655225*^-21, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.07903441786766052, -0.044668592512607574`, \
-0.08063556253910065, 0.024014312773942947`, -0.409895658493042}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.007323115132749081, -0.015689529478549957`, 
            0.007117944769561291, 0.014434942044317722`, 0.009873329661786556,
             0.010774240829050541`, 
            0.006077638361603022, -0.006302068941295147, 
            0.011678933165967464`, -0.0074750157073140144`, 
            0.012857438065111637`, 
            0.010582441464066505`, -0.005871224217116833, 
            0.010774240829050541`, 
            0.007390164770185947, -0.015148235484957695`, \
-0.006336950697004795, 0.004894633777439594, -0.004622271284461021, 
            0.011736792512238026`, 
            0.001098914653994143, -0.012377232313156128`, 
            0.008131647482514381, 
            0.015446024015545845`, -0.008271025493741035, \
-0.01702614314854145, 
            0.005500410217791796, -0.007499251049011946, -0.01725957542657852,
             0.010339573957026005`, -0.004833943676203489, 
            0.009238429367542267, -0.0029308549128472805`, 
            0.011569976806640625`, -0.006441716104745865, \
-0.015474502928555012`, 0.017121994867920876`, 0., 0.01768326200544834, 
            0.016879206523299217`, 0.0123116634786129}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 21}, {-2, 12}, {39, 9}, {-9, -10}, {-4, 18}, {28, 24}, {
            23, -13}, {37, 14}, {-14, 15}, {-15, -16}, {36, 17}, {19, 27}, {
            20, 34}, {-17, -20}, {-11, 25}, {30, 22}, {-22, -23}, {29, 33}, {
            38, 26}, {-21, -26}, {-25, -27}, {-18, -28}, {31, 
            32}, {-8, -30}, {-7, -31}, {-1, -32}, {-29, -33}, {-24, -34}, \
{-19, 35}, {-35, -36}, {-3, 
            40}, {-6, -38}, {-12, -39}, {-5, -40}, {-37, -41}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5762, 5015, 4528, 5571, 6865, 7463, 1322, 7463, 4528, 3377, 10116,
             6865, 9086, 6865, 10115, 6876, 10116, 5571, 10116, 5571, 6876, 
            8451, 4158, 9708, 6865, 6876, 6876, 10115, 6876, 10117, 8627, 
            4785, 10115, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.044668592512607574`, -9.999999682655225*^-21, -0.08778919279575348, \
-9.999999682655225*^-21, -0.07246946543455124, 
            0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.016207579523324966`, -0.15434935688972473`, -0.3715690076351166, 
            0.2675747871398926, -0.05931930989027023, 
            0.27920687198638916`, -0.04706219583749771, -0.3715690076351166, \
-0.05083892494440079, -9.999999682655225*^-21, -0.12412932515144348`, \
-0.04620031267404556, -0.4421539306640625, -0.41041773557662964`, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.08941143751144409, -0.0815085768699646,
             0.20791196823120117`, 0.3788796663284302}], "LeafValues" -> 
          RawArray["Real32",{-0.00725342333316803, -0.01560095977038145, 
            0.003357101697474718, -0.005908996798098087, \
-0.00039944503805600107`, 
            0.006414064671844244, -0.0005490080802701414, \
-0.003546847263351083, 0.017543228343129158`, -0.005919880699366331, 
            0.00003271095556556247, -0.012484016828238964`, \
-0.005816335324198008, 0.010689498856663704`, 0.0028571428265422583`, 
            0.00006915244011906907, -0.011895519681274891`, 
            0.004809647332876921, -0.012281186878681183`, 
            0.007469917647540569, 
            0.015356896445155144`, -0.012888901866972446`, 
            0.011792121455073357`, 0.008989058434963226, 
            0.004374164156615734, -0.01445637084543705, \
-0.018091820180416107`, 
            0.017336808145046234`, -0.017136141657829285`, \
-0.007699665613472462, 
            0.011017970740795135`, -0.015430879779160023`, \
-0.0063536944799125195`, 0.017723973840475082`, -0.0033257126342505217`, 
            0.009149676188826561, -0.0029015305917710066`, 
            0.01148260198533535, -0.00941305048763752, \
-0.015466435812413692`, -0.016277829185128212`, -0.0025113672018051147`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {15, 13}, {
            8, 18}, {-2, 12}, {31, 9}, {-9, -10}, {21, 29}, {28, 22}, {
            20, -13}, {-6, 14}, {-14, 25}, {32, 16}, {27, 17}, {-17, -18}, {
            26, 19}, {-19, -20}, {30, 37}, {33, -22}, {23, 
            24}, {-12, -24}, {-23, -25}, {-15, -26}, {-7, -27}, {-16, -28}, {
            35, 36}, {-11, 38}, {-8, -31}, {-5, -32}, {41, 40}, {-4, 
            34}, {-34, -35}, {-1, -36}, {-29, -37}, {-21, -38}, {-30, 
            39}, {-39, -40}, {-33, -41}, {-3, -42}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5762, 6540, 6766, 5571, 6865, 5571, 1322, 4717, 7561, 4717, 4528, 
            5571, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 6876, 10116, 
            6876, 4158, 9708, 10115, 6876, 10117, 1026, 8627, 10115, 7463, 
            6865, 6876}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.08622151613235474, -9.999999682655225*^-21, 
            0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.42219841480255127`, 
            0.27920687198638916`, -0.3715690076351166, \
-0.049278780817985535`, -0.12412932515144348`, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.08941143751144409, -0.07903441786766052, -0.044668592512607574`, \
-0.08063556253910065, -0.409895658493042}], "LeafValues" -> 
          RawArray["Real32",{-0.007184549700468779, -0.015514258295297623`, 
            0.007003281265497208, 
            0.014333393424749374`, -0.0003954698331654072, 
            0.010639247484505177`, -0.0005435373750515282, \
-0.006210991181433201, 0.008734303526580334, -0.006143623031675816, 
            0.012725785374641418`, 
            0.010448400862514973`, -0.005762021988630295, 
            0.010605831630527973`, 
            0.0073835840448737144`, -0.014976841397583485`, \
-0.00624139653518796, 0.0025906648952513933`, -0.00446351058781147, 
            0.011579728685319424`, 
            0.0010335645638406277`, -0.012186569161713123`, 
            0.007400720380246639, 
            0.015269584022462368`, -0.00823951605707407, \
-0.016838302835822105`, 
            0.005391687620431185, -0.008442279882729053, \
-0.017946740612387657`, -0.017015665769577026`, 
            0.010179458186030388`, -0.015325105749070644`, 
            0.009062117896974087, -0.002872511511668563, 
            0.011396395973861217`, -0.007636743597686291, \
-0.01532011292874813, 0.016972271725535393`, -6.929842584213475*^-6, 
            0.017511414363980293`, 0.012171787209808826`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 13}, {
            8, 21}, {-2, 12}, {31, 9}, {-9, -10}, {-4, 18}, {29, 24}, {
            23, -13}, {38, 14}, {-14, 15}, {-15, -16}, {37, 17}, {19, 27}, {
            20, 35}, {-17, -20}, {-11, 25}, {28, 22}, {-22, -23}, {30, 34}, {
            39, 26}, {-21, -26}, {-25, -27}, {-18, -28}, {-7, -29}, {32, 
            33}, {-8, -31}, {-5, -32}, {-1, -33}, {-30, -34}, {-24, -35}, \
{-19, 36}, {-36, -37}, {-3, 40}, {-6, -39}, {-12, -40}, {-38, -41}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351, 
            5940, 2936, 6766, 5571, 6865, 7463, 1322, 7561, 4717, 4528, 5571, 
            1800, 10116, 6865, 9086, 10115, 6876, 10116, 6865, 5571, 4528, 
            6876, 4158, 10116, 10115, 6876, 10117, 1026, 9866, 10115, 10115, 
            6876}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.25578245520591736`, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.044668592512607574`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.08622151613235474, \
-9.999999682655225*^-21, 
            0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15434935688972473`, -0.3715690076351166, 
            0.2675747871398926, -0.02459155023097992, -0.05931930989027023, \
-0.10004036128520966`, -0.3715690076351166, -9.999999682655225*^-21, 
            9.999999682655225*^-21, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.07903441786766052, 
            0.024014312773942947`, -0.409895658493042}], "LeafValues" -> 
          RawArray["Real32",{-0.007116479333490133, -0.015429368242621422`, 
            0.006935920566320419, 0.01419297605752945, 0.009875858202576637, 
            0.0063268644735217094`, 
            0.006027540657669306, -0.003501969389617443, 
            0.01167234592139721, -0.007290428038686514, 
            0.012614939361810684`, -0.012418118305504322`, \
-0.005708274431526661, 0.010523209348320961`, 
            0.002828646218404174, -0.006180088501423597, 
            0.004822848364710808, -0.004423160571604967, 
            0.011480044573545456`, 
            0.0010232713539153337`, -0.012093338184058666`, 
            0.00792345404624939, 0.015184029936790466`, 0.011631567031145096`,
             0.008852527476847172, 
            0.004280634690076113, -0.016726795583963394`, \
-0.014284384436905384`, -0.0073797139339149, -0.01689804531633854, 
            0.010852132923901081`, -0.004756277892738581, 
            0.008975725620985031, -0.002843794645741582, 
            0.011311329901218414`, -0.006129272747784853, \
-0.015211629681289196`, 0.016855061054229736`, 0.01683778315782547, 
            0.012068920768797398`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {15, 13}, {
            8, 20}, {-2, 12}, {38, 9}, {-9, -10}, {-4, 17}, {29, 23}, {
            22, -13}, {-6, 14}, {-14, 27}, {37, 16}, {18, 28}, {19, 
            35}, {-16, -19}, {-11, 26}, {31, 21}, {-21, -22}, {30, 34}, {24, 
            25}, {-12, -25}, {-24, -26}, {-20, -27}, {-15, -28}, {-17, -29}, {
            32, 33}, {-8, -31}, {-7, -32}, {-1, -33}, {-30, -34}, {-23, -35}, \
{-18, 36}, {-36, -37}, {-3, 39}, {-5, -39}, {-38, -40}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351, 
            7463, 5015, 4302, 6876, 6865, 4528, 9866, 7463, 5571, 7737, 10115,
             9201, 5571, 6865, 6876, 1275, 5571, 9086, 10115, 9866, 4158, 
            10115, 4158, 1800, 3462, 6876, 10115, 10117, 5571, 5015, 10115}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.11664609611034393`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.27142372727394104`, -0.017286919057369232`, \
-0.03205364570021629, -0.08021153509616852, -0.08778919279575348, \
-0.030474426224827766`, -9.999999682655225*^-21, -0.0883902981877327, \
-9.999999682655225*^-21, -0.10249967873096466`, -9.999999682655225*^-21, \
-0.4231659770011902, -0.15292909741401672`, -0.2361728549003601, \
-0.09210039675235748, -0.3419531583786011, -0.082140251994133, \
-9.999999682655225*^-21, -0.15434935688972473`, -0.049278780817985535`, \
-0.1755991280078888, -9.999999682655225*^-21, -0.3709371089935303, 
            0.25424861907958984`, 
            9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.3245195150375366, 0.06050436943769455}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.012325786054134369`, -0.015346238389611244`, \
-0.016249880194664, 0.017594238743185997`, 0.010013389401137829`, 
            0.006916522979736328, 0.01455429382622242, -0.00612135324627161, 
            0.020541537553071976`, -0.004124477971345186, 
            0.007882210426032543, 0.002946276217699051, -0.00565508333966136, 
            0.0030234099831432104`, 0.007613136898726225, 
            0.009670872241258621, 
            0.0003720859531313181, -0.011269443668425083`, \
-0.010807600803673267`, 0.011182223446667194`, 
            0.003050141502171755, -0.01575847715139389, \
-0.011776329018175602`, -0.014312125742435455`, 0.01661432534456253, 
            0.015100184828042984`, -0.007749011740088463, 
            0.013632251881062984`, -0.006465048994868994, 
            0.006549416575580835, 
            0.010023198090493679`, -0.0009886465268209577, \
-0.01408045832067728, -0.007412909530103207, 0.008208140730857849, 
            0.011227373033761978`, -0.00738100940361619, 
            0.019403746351599693`, 0.01755351945757866}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 13}, {21, 14}, {
            24, 8}, {-2, 12}, {10, 9}, {37, 11}, {-7, 17}, {-10, -12}, {
            25, -13}, {-5, 16}, {-6, 20}, {33, 18}, {-14, 32}, {-11, -18}, {
            26, 19}, {-19, -20}, {22, 23}, {
            27, -22}, {-15, -23}, {-21, -24}, {-1, 28}, {30, 
            35}, {-16, -27}, {-4, 31}, {38, 
            29}, {-29, -30}, {-8, -31}, {-28, -32}, {-17, -33}, {36, 
            34}, {-34, -35}, {-26, -36}, {-3, -37}, {-9, -38}, {-25, -39}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5762, 
            6540, 4351, 6766, 5571, 6865, 7463, 1322, 7561, 4717, 4528, 5571, 
            1800, 10116, 6865, 9086, 9866, 6865, 5571, 4951, 6876, 10116, 
            6876, 6865, 9708, 10115, 6876, 10117, 1026, 8627, 10115, 6865, 
            6876}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-0.05483130365610123, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.044668592512607574`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.08622151613235474, \
-9.999999682655225*^-21, 
            0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.05931930989027023, \
-9.999999682655225*^-21, -0.42219841480255127`, 
            0.27920687198638916`, -0.3715690076351166, -0.03330753743648529, \
-0.12412932515144348`, 0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.08941143751144409, -0.07903441786766052, -0.08063556253910065, \
-0.409895658493042}], "LeafValues" -> 
          RawArray["Real32",{-0.007057738024741411, -0.015264821238815784`, 
            0.006897083017975092, 
            0.014075606130063534`, -0.00024036735703703016`, 
            0.006276438478380442, -0.0005368097336031497, 
            0.008764919824898243, -0.005976734217256308, 
            0.012196836061775684`, 0.012422646395862103`, 
            0.010273686610162258`, -0.005602441728115082, 
            0.010481741279363632`, 
            0.0027701733633875847`, -0.006128923036158085, 
            0.002564352937042713, -0.0042863148264586926`, 
            0.011341103352606297`, 
            0.0009900822769850492, -0.012023781426250935`, 
            0.007254269905388355, 0.015017998404800892`, 
            0.014967045746743679`, -0.016563834622502327`, \
-0.014121421612799168`, 
            0.0034722639247775078`, -0.008313070051372051, \
-0.017744196578860283`, -0.016745813190937042`, -0.00045628013322129846`, \
-0.015106923878192902`, 0.008925966918468475, -0.002861709101125598, 
            0.011144492775201797`, -0.007334361784160137, \
-0.015072311274707317`, 0.016665734350681305`, 0.01732424646615982, 
            0.011921840719878674`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {11, 6}, {15, 13}, {
            7, 20}, {31, 8}, {-8, -9}, {-2, 12}, {-4, 17}, {29, 23}, {
            22, -13}, {-6, 14}, {-14, 25}, {37, 16}, {18, 27}, {19, 
            35}, {-16, -19}, {-11, 24}, {28, 21}, {-21, -22}, {30, 34}, {38, 
            26}, {-20, -25}, {-15, -26}, {-24, -27}, {-17, -28}, {-7, -29}, {
            32, 33}, {-10, -31}, {-5, -32}, {-1, -33}, {-30, -34}, {-23, \
-35}, {-18, 36}, {-36, -37}, {-3, 39}, {-12, -39}, {-38, -40}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5940, 
            2936, 4351, 6766, 5571, 6865, 4528, 7463, 4528, 5571, 10115, 9201,
             10115, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 6876, 10116, 
            4158, 3462, 6865, 10115, 6876, 10117, 1026, 8627, 10115, 6865, 
            10115, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.25578245520591736`, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03205364570021629, -0.08778919279575348, -9.999999682655225*^-21, \
-0.030474426224827766`, -0.1265643686056137, -9.999999682655225*^-21, \
-0.3419531583786011, -9.999999682655225*^-21, 
            0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.3715690076351166, 
            9.999999682655225*^-21, -0.049278780817985535`, \
-9.999999682655225*^-21, -0.04620031267404556, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.08941143751144409, 0.20791196823120117`, -0.08063556253910065, 
            0.024014312773942947`, 0.3788796663284302}], "LeafValues" -> 
          RawArray["Real32",{-0.006991134956479073, -0.01518506370484829, 
            0.0033356002531945705`, 0.013940260745584965`, 
            0.00988545548170805, 0.009933610446751118, 0.0059598335064947605`,
             0.011645035818219185`, -0.0071126362308859825`, \
-0.006127452943474054, 0.012316524982452393`, 
            0.010192248038947582`, -0.0055503398180007935`, 
            0.0029679255094379187`, 
            0.009561213664710522, -0.004247569479048252, 
            0.00047477197949774563`, -0.010701051913201809`, 
            0.010512894950807095`, -0.01059501152485609, 
            0.0009802223648875952, -0.011932888999581337`, 
            0.007768917363137007, 
            0.014937426894903183`, -0.008254249580204487, -0.016458660364151, 
            
            0.00521476985886693, -0.016634564846754074`, \
-0.004700667690485716, 
            0.009888721629977226, -0.013919666409492493`, \
-0.006312617566436529, 0.00884137861430645, -0.0028331049252301455`, 
            0.011062663979828358`, -0.007274911273270845, \
-0.014990120194852352`, -0.01603746972978115, 0.017200956121087074`, 
            0.016787715256214142`, -0.002477668458595872}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {11, 6}, {14, 13}, {
            7, 21}, {39, 8}, {-8, -9}, {-2, 12}, {-4, 15}, {27, 24}, {
            23, -13}, {-6, 16}, {31, 17}, {20, 35}, {-14, 30}, {19, 
            18}, {-18, -19}, {-15, -20}, {-11, 25}, {28, 22}, {-22, -23}, {29,
             34}, {38, 26}, {-21, -26}, {-25, -27}, {32, 
            33}, {-7, -29}, {-10, -30}, {-17, -31}, {40, 
            37}, {-1, -33}, {-28, -34}, {-24, -35}, {-16, 
            36}, {-36, -37}, {-32, -38}, {-12, -39}, {-5, -40}, {-3, -41}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5762, 
            5015, 4351, 4528, 5571, 6865, 7463, 1322, 7561, 4717, 5571, 10116,
             6865, 9086, 4528, 4158, 9866, 4717, 4951, 4528, 10116, 6540, 
            6865, 6876, 9708, 5307, 10115, 6876, 10117, 9866, 8627, 7561, 
            10115, 6865, 4528}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-0.05483130365610123, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.044668592512607574`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.08622151613235474, 
            0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.07542958855628967, -0.05574360489845276, -0.15825799107551575`, \
-0.044189415872097015`, -9.999999682655225*^-21, -0.10004036128520966`, 
            
            0.27920687198638916`, -0.08429481089115143, -0.03330753743648529, \
-0.3715690076351166, -0.12412932515144348`, -0.049029506742954254`, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.06374698132276535, \
-0.08941143751144409, -0.09301909804344177, -0.050373055040836334`, \
-0.08063556253910065, -0.17170850932598114`}], "LeafValues" -> 
          RawArray["Real32",{-0.00692529184743762, -0.015106922946870327`, 
            0.0016787113854661584`, 
            0.005031469743698835, -0.00020117370877414942`, 
            0.006226705387234688, -0.000518997258041054, 
            0.017446234822273254`, -0.005594692658632994, 
            0.012051142752170563`, -0.0026564649306237698`, 
            0.010111790150403976`, -0.005498772021383047, 
            0.010440795682370663`, 
            0.0009174032020382583, -0.006082846783101559, 
            0.004751240834593773, 
            0.011202538385987282`, -0.011843277141451836`, 
            0.0071286046877503395`, 
            0.014858420938253403`, -0.0013945454265922308`, \
-0.015484313480556011`, 0.0148179791867733, -0.014096085913479328`, 
            0.0033956950064748526`, -0.007268538698554039, \
-0.017572319135069847`, -0.0057883430272340775`, -0.000520736793987453, \
-0.01652587205171585, -0.014961214736104012`, 0.017079081386327744`, 
            0.008757886476814747, -0.0028047978412359953`, 
            0.01098185870796442, -0.007216011174023151, \
-0.015022356063127518`, 0.017033645883202553`, 0.013735836371779442`, 
            0.01708058826625347, -0.017659971490502357`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {11, 6}, {15, 13}, {
            7, 18}, {31, 8}, {-8, -9}, {-2, 12}, {21, 28}, {30, 23}, {
            20, -13}, {-6, 14}, {-14, 24}, {38, 16}, {17, 26}, {-16, -18}, {
            27, 19}, {-19, -20}, {29, 35}, {22, 32}, {-4, 41}, {40, 
            25}, {-15, -25}, {-24, -26}, {-17, -27}, {-7, -28}, {-11, 
            36}, {-10, -30}, {33, 
            34}, {-5, -32}, {-22, -33}, {-1, -34}, {-31, -35}, {-21, -36}, \
{-29, 37}, {-37, -38}, {39, -39}, {-3, -40}, {-12, -41}, {-23, -42}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5940, 
            2936, 4351, 6766, 5571, 6865, 4528, 7463, 4528, 5571, 4528, 3377, 
            1800, 10116, 6865, 9086, 10115, 6876, 10116, 6865, 5571, 4158, 
            10116, 6876, 3462, 6876, 10115, 10115, 6876, 10117, 1026, 9866, 
            5571, 10115}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.25578245520591736`, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03205364570021629, -0.08778919279575348, -9.999999682655225*^-21, \
-0.030474426224827766`, -9.999999682655225*^-21, -0.07246946543455124, \
-9.999999682655225*^-21, 
            0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15434935688972473`, -0.3715690076351166, 
            0.2675747871398926, -0.02459155023097992, -0.04706219583749771, \
-9.999999682655225*^-21, 
            9.999999682655225*^-21, -0.3715690076351166, \
-9.999999682655225*^-21, -0.3709371089935303, 0.38923919200897217`, 
            0.25424861907958984`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -9.999999682655225*^-21, 0.024014312773942947`}], 
          "LeafValues" -> 
          RawArray[
            "Real32",{-0.0068601942621171474`, -0.015030354261398315`, \
-0.016057774424552917`, 0.013792881742119789`, 0.009832102805376053, 
            0.009840592741966248, 0.005905352998524904, 
            0.011570559814572334`, -0.006993344984948635, \
-0.003535245545208454, 
            0.012175091542303562`, -0.012426868081092834`, \
-0.005447727628052235, 
            0.002958534052595496, -0.0003353639622218907, \
-0.004109010100364685, 0.0005538588739000261, -0.011883443221449852`, 
            0.004599839448928833, 0.0009356350637972355, -0.01175491139292717,
             0.007635516580194235, 0.014780937694013119`, 
            0.011355118826031685`, 0.008693383075296879, 
            0.004038541577756405, -0.0162756759673357, 0.016863595694303513`, 
            0.010495824739336967`, -0.0046409075148403645`, \
-0.016419649124145508`, -0.013767634518444538`, -0.007351439446210861, 
            0.008675466291606426, 0.008147792890667915, -0.002776783425360918,
             0.010902048088610172`, -0.005735334008932114, \
-0.014810958877205849`, -0.007279912941157818, 0.016708357259631157`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {11, 6}, {14, 13}, {
            7, 20}, {40, 8}, {-8, -9}, {-2, 12}, {-4, 15}, {30, 23}, {
            22, -13}, {-6, 16}, {32, 17}, {19, 37}, {-14, 31}, {27, 
            18}, {-18, -19}, {-11, 26}, {29, 21}, {-21, -22}, {28, 36}, {24, 
            25}, {-12, -25}, {-24, -26}, {-20, -27}, {-15, -28}, {-10, -29}, \
{-7, -30}, {33, 35}, {-17, -32}, {39, 
            34}, {-1, -34}, {-33, -35}, {-31, -36}, {-23, -37}, {-16, 
            38}, {-38, -39}, {-3, -40}, {-5, -41}}], "NominalSplits" -> {}, 
          "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
          0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463, 
            9708, 4351, 4302, 4528, 6865, 5571, 7463, 1322, 7561, 4717, 5571, 
            9086, 4528, 4158, 5307, 4717, 6876, 9866, 8451, 6865, 6876, 9708, 
            5307, 10115, 6876, 10117, 8627, 10115, 6540, 6876, 6876, 10116}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.03938329964876175, -0.017286919057369232`, \
-0.119712695479393, -0.044668592512607574`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.08622151613235474, \
-0.09210039675235748, -0.07542958855628967, -0.05574360489845276, \
-0.10353974997997284`, -0.044189415872097015`, -0.42219841480255127`, \
-0.15825799107551575`, -0.05083892494440079, -0.03330753743648529, \
-0.3715690076351166, -0.12412932515144348`, -0.049029506742954254`, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.07903441786766052, -0.08429481089115143, -0.364515483379364, \
-0.409895658493042, 0.16606731712818146`}], "LeafValues" -> 
          RawArray["Real32",{-0.006795829627662897, -0.014955311082303524`, 
            0.006699829362332821, 
            0.0049258810468018055`, -0.0001631590275792405, 
            0.00617755763232708, 
            0.017831549048423767`, -0.008835846558213234, \
-0.0005883628036826849, 0.011899510398507118`, -0.010708963498473167`, 
            0.0006475771660916507, -0.005397200118750334, -0.00995181966573, 
            0.01040044054389, 0.0009290249436162412, -0.005984427407383919, 
            0.002505845855921507, 0.011059318669140339`, 
            0.014704935252666473`, -0.0013679644325748086`, \
-0.017459800466895103`, 
            0.013592894189059734`, -0.013948251493275166`, \
-0.00818409863859415, 
            0.004923203960061073, -0.007038051728159189, \
-0.0005679368623532355, -0.016315821558237076`, -0.015488913282752037`, 
            0.016909919679164886`, 
            0.008594094775617123, -0.002749059582129121, 
            0.010823209770023823`, -0.007936093956232071, 
            0.01636291854083538, -0.014805860817432404`, \
-0.011388209648430347`, 0.011651423759758472`, -0.015309572219848633`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {13, 6}, {16, 14}, {
            29, 7}, {10, 8}, {-8, -9}, {-2, 12}, {-7, -11}, {20, 26}, {
            19, -13}, {28, 22}, {-6, 15}, {-15, 23}, {35, 17}, {18, 
            24}, {-17, -19}, {27, 33}, {21, 30}, {-4, 39}, {-14, 
            25}, {-16, -24}, {-18, -25}, {-23, -26}, {-12, 34}, {-10, -28}, {
            31, 32}, {-5, 
            37}, {-21, -31}, {-1, -32}, {-29, -33}, {-20, -34}, {-27, 
            36}, {-3, 38}, {-35, -37}, {-30, -38}, {-36, -39}, {-22, -40}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463, 
            9708, 4351, 4302, 6766, 6865, 5571, 4528, 7561, 4717, 4528, 5571, 
            5571, 1800, 9086, 10115, 6876, 10116, 6865, 4528, 4158, 6876, 
            9708, 3462, 10115, 7463, 10117, 1026, 9866, 7561, 10115, 6876}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.1015896275639534, -0.017286919057369232`, \
-0.119712695479393, -0.03205364570021629, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.030474426224827766`, \
-0.08622151613235474, -9.999999682655225*^-21, -0.09210039675235748, \
-0.15434935688972473`, -0.3715690076351166, 
            0.2675747871398926, -0.02459155023097992, -0.10004036128520966`, \
-0.049278780817985535`, -0.3715690076351166, -0.12412932515144348`, \
-9.999999682655225*^-21, 0.38923919200897217`, -0.2119971662759781, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.09301909804344177, -0.050373055040836334`, \
-0.364515483379364}], "LeafValues" -> 
          RawArray["Real32",{-0.006732183508574963, -0.014881755225360394`, 
            0.0015609086258336902`, 
            0.013652629218995571`, -0.00016153109027072787`, 
            0.009749115444719791, 
            0.01761443354189396, -0.00875944085419178, \
-0.0005825067055411637, -0.0061609093099832535`, -0.010617133229970932`, 
            0.012037079781293869`, -0.005347182508558035, \
-0.012333198450505733`, 0.0029490641318261623`, -0.0059260353446006775`, 
            0.004668861627578735, -0.003970636520534754, 
            0.0006313269259408116, 0.01096708420664072, 0.0008921145345084369,
             0.014630372636020184`, 0.011212222278118134`, 
            0.00857835728675127, 
            0.003943584859371185, -0.01610027626156807, -0.007152947597205639,
             0.009633725509047508, -0.0034813163802027702`, \
-0.015395194292068481`, -0.013620522804558277`, 
            0.008513746783137321, -0.01668739505112171, 
            0.010745315812528133`, -0.005570500157773495, \
-0.014659895561635494`, 0.016797274351119995`, 
            0.013509034179151058`, -0.011301152408123016`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {13, 6}, {15, 14}, {
            29, 7}, {10, 8}, {-8, -9}, {-2, 12}, {-7, -11}, {-4, 17}, {
            21, -13}, {28, 22}, {-6, 18}, {36, 16}, {19, 26}, {20, 34}, {-15, 
            30}, {-16, -20}, {-12, 25}, {27, 33}, {23, 
            24}, {-14, -24}, {-23, -25}, {-21, -26}, {-17, -27}, {-10, -28}, {
            31, 32}, {-5, 
            38}, {-19, -31}, {-1, -32}, {-29, -33}, {-22, -34}, {-18, 
            35}, {-35, -36}, {37, -37}, {-3, -38}, {-30, -39}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5940, 
            2936, 4351, 4528, 6865, 4717, 5571, 7463, 5571, 1322, 10115, 9201,
             10116, 6865, 9086, 10115, 4528, 4158, 9866, 4951, 10116, 6540, 
            6865, 6876, 6865, 5307, 10115, 6876, 10117, 9866, 8627, 10115, 
            6865, 10115, 10116, 10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.25578245520591736`, -9.999999682655225*^-21, \
-0.03938329964876175, -0.017286919057369232`, -0.044189415872097015`, \
-0.119712695479393, -0.08778919279575348, -0.03808106482028961, \
-9.999999682655225*^-21, -0.0883902981877327, -9.999999682655225*^-21, 
            0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.3419531583786011, -0.07542958855628967, -0.05574360489845276, \
-0.15825799107551575`, -9.999999682655225*^-21, 
            0.27920687198638916`, -0.08429481089115143, -0.03330753743648529, \
-0.3715690076351166, -0.04620031267404556, -0.049029506742954254`, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.06374698132276535, \
-0.08941143751144409, 0.20791196823120117`, -0.08063556253910065, 
            0.024014312773942947`, 0.3788796663284302, 0.16606731712818146`}],
           "LeafValues" -> 
          RawArray["Real32",{-0.006669243797659874, -0.014809642918407917`, 
            0.003295857459306717, 0.004822405520826578, 0.009756398387253284, 
            0.005782816559076309, -0.00044740905286744237`, 
            0.011460564099252224`, -0.006834263913333416, 
            0.011761368252336979`, -0.0024307495914399624`, \
-0.005297667812556028, 0.005426298826932907, 0.009838057681918144, 
            0.009350067935883999, 
            0.010360664688050747`, -0.014310849830508232`, \
-0.010609088465571404`, 0.010790319181978703`, -0.011659102514386177`, 
            0.007031766697764397, 
            0.014557210728526115`, -0.007659739814698696, \
-0.0013419876340776682`, -0.017265118658542633`, 0.014582277275621891`, 
            0.0032175472006201744`, -0.0173348356038332, \
-0.005519650410860777, -0.0006293005426414311, -0.01612279936671257, \
-0.006295918952673674, 0.016747014597058296`, 
            0.008434400893747807, -0.0026677483692765236`, 
            0.010668344795703888`, -0.006863243877887726, \
-0.014722648076713085`, -0.015828458592295647`, 0.016806336119771004`, 
            0.016615696251392365`, -0.0024818312376737595`, \
-0.015145390294492245`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {13, 6}, {14, 12}, {
            7, 19}, {40, 8}, {-8, -9}, {-2, 11}, {23, 28}, {21, -12}, {-6, 
            15}, {30, 25}, {31, 17}, {-13, 16}, {-16, -17}, {22, 
            18}, {-18, -19}, {27, 20}, {-20, -21}, {29, 35}, {-15, -23}, {24, 
            32}, {-4, 42}, {39, 26}, {-26, -27}, {-7, -28}, {-11, 
            36}, {-10, -30}, {33, 34}, {41, 
            38}, {-24, -33}, {-1, -34}, {-31, -35}, {-22, -36}, {-29, 
            37}, {-37, -38}, {-32, -39}, {-14, -40}, {-5, -41}, {-3, -42}, \
{-25, -43}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
          0, "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463, 
            9708, 4351, 4302, 6766, 6865, 7463, 5571, 1322, 7561, 4717, 4528, 
            5571, 1800, 9086, 5307, 4717, 6865, 6876, 9866, 4158, 6876, 9708, 
            10115, 6876, 10117, 1026, 9866, 7561, 10115, 6876}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.1015896275639534, -0.017286919057369232`, \
-0.044668592512607574`, -0.119712695479393, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.08622151613235474, -9.999999682655225*^-21, -0.09210039675235748, \
-0.10353974997997284`, -0.044189415872097015`, -0.02459155023097992, \
-0.42219841480255127`, -0.15825799107551575`, -0.049278780817985535`, \
-0.3715690076351166, -0.12412932515144348`, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.09301909804344177, -0.050373055040836334`, \
-0.364515483379364}], "LeafValues" -> 
          RawArray["Real32",{-0.006606998387724161, -0.014738938771188259`, 
            0.001547723775729537, 
            0.01351302769035101, -0.00012501893797889352`, 
            0.0061290026642382145`, 
            0.017484737560153008`, -0.008629285730421543, \
-0.0005429015145637095, -0.00616414612159133, -0.01047439593821764, 
            0.011902333237230778`, -0.005248647648841143, 
            0.010281037539243698`, -0.009916569106280804, 
            0.0008827217970974743, -0.0058845155872404575`, 
            0.0024817809462547302`, -0.003837141441181302, 
            0.010838265530765057`, 0.0008496263762935996, 0.01448541134595871,
             
            0.01336122676730156, -0.013733313418924809`, \
-0.01593204215168953, -0.008055094629526138, 0.0047845058143138885`, 
            0.009508011862635612, -0.016025524586439133`, \
-0.01526301633566618, 0.008356034755706787, -0.0026411486323922873`, 
            0.010592272505164146`, -0.005469297990202904, \
-0.01451397966593504, 0.016653869301080704`, 
            0.013347703963518143`, -0.011163518764078617`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {14, 6}, {16, 13}, {
            29, 7}, {10, 8}, {-8, -9}, {-2, 12}, {-7, -11}, {-4, 18}, {
            21, -13}, {-6, 15}, {28, 22}, {-14, 23}, {35, 17}, {19, 25}, {20, 
            33}, {-17, -20}, {-12, 24}, {27, 32}, {-15, 
            26}, {-16, -24}, {-21, -25}, {-18, -26}, {-23, -27}, {-10, -28}, {
            30, 31}, {-5, 37}, {-1, -31}, {-29, -32}, {-22, -33}, {-19, 
            34}, {-34, -35}, {36, -36}, {-3, -37}, {-30, -38}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 5015, 
            6876, 4351, 4528, 6865, 4528, 5571, 7463, 5571, 10115, 9201, 9086,
             10115, 4528, 4158, 10115, 6876, 9224, 8451, 6865, 9708, 6876, 
            3462, 6876, 5307, 10115, 10115, 7463, 10117, 8627, 4785, 5571, 
            6876, 10116, 4528}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-9.999999682655225*^-21, -0.23562836647033691`, -9.999999682655225*^-21, \
-0.03938329964876175, -0.017286919057369232`, -0.03205364570021629, \
-0.119712695479393, -0.08778919279575348, -0.030474426224827766`, \
-0.0883902981877327, -9.999999682655225*^-21, -0.09210039675235748, \
-0.3419531583786011, -0.07542958855628967, -0.05574360489845276, \
-0.15434935688972473`, -0.3715690076351166, -0.30185914039611816`, \
-0.05083892494440079, -0.03330753743648529, -0.12412932515144348`, \
-0.3715690076351166, -9.999999682655225*^-21, -0.3709371089935303, \
-0.049029506742954254`, 0.25424861907958984`, 
            0.38923919200897217`, -0.2119971662759781, 
            9.999999682655225*^-21, -0.08941143751144409, \
-0.0815085768699646, -9.999999682655225*^-21, -0.364515483379364, \
-0.07228947430849075, -0.17170850932598114`}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.006545433774590492, -0.014669603668153286`, \
-0.01585572585463524, 0.004720983561128378, -0.00012377146049402654`, 
            0.009655842557549477, 
            0.014734229072928429`, -0.005318465642631054, 
            0.0021673475857824087`, 0.011626669205725193`, 
            0.0008909063180908561, -0.0052001154981553555`, 
            0.0028851954266428947`, -0.012284300290048122`, 
            0.009247529320418835, 
            0.0007856700103729963, -0.010506226681172848`, 
            0.010663554072380066`, 
            0.014414938166737556`, -0.0075957439839839935`, \
-0.001316586509346962, -0.014984972774982452`, -0.011154445819556713`, 
            0.008436191827058792, 
            0.007047087885439396, -0.006691417191177607, \
-0.000689114211127162, -0.015173820778727531`, -0.0033388950396329165`, \
-0.013413159176707268`, -0.007295296527445316, 0.016590064391493797`, 
            0.008114013820886612, 
            0.008278626948595047, -0.016398286446928978`, 
            0.010517076589167118`, -0.008383317850530148, \
-0.014532859437167645`, -0.007189715746790171, -0.011079392395913601`, 
            0.020653216168284416`, -0.017080750316381454`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {13, 6}, {14, 12}, {
            27, 7}, {40, 8}, {-8, -9}, {-2, 11}, {20, 25}, {18, -12}, {-6, 
            15}, {28, 22}, {30, 16}, {-13, 29}, {19, 17}, {-17, -18}, {26, 
            35}, {-15, -20}, {21, 31}, {-4, 41}, {23, 
            24}, {-14, -24}, {-23, -25}, {-11, 36}, {-10, -27}, {-5, 39}, {33,
             34}, {-16, -30}, {38, 
            32}, {-21, -32}, {-31, -33}, {-1, -34}, {-29, -35}, {-19, -36}, \
{-26, 37}, {-37, -38}, {-3, -39}, {-28, -40}, {-7, -41}, {-22, -42}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463, 
            9708, 4351, 4302, 6766, 6865, 4717, 5571, 7561, 4717, 5571, 1322, 
            4528, 5571, 1800, 9086, 9866, 1557, 4528, 6865, 4158, 9708, 6876, 
            10115, 6876, 10117, 1026, 9866, 7561, 10115, 6865, 6876}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.1015896275639534, -0.017286919057369232`, \
-0.044189415872097015`, -0.119712695479393, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.03808106482028961, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.08622151613235474, -9.999999682655225*^-21, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-0.10004036128520966`, -0.02459155023097992, -0.049278780817985535`, \
-0.12412932515144348`, -0.3715690076351166, 
            0.38923919200897217`, -0.31862738728523254`, 
            9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.09301909804344177, -0.050373055040836334`, \
-0.08063556253910065, -0.364515483379364}], "LeafValues" -> 
          RawArray["Real32",{-0.006484539248049259, -0.014601603150367737`, 
            0.0015362774720415473`, 
            0.01338120736181736, -0.00012253582826815546`, 
            0.0057136304676532745`, 
            0.017339758574962616`, -0.008513628505170345, \
-0.0005066620069555938, -0.006166560109704733, -0.010349670425057411`, 
            0.011770701967179775`, -0.0051520648412406445`, 
            0.005363475531339645, 0.009604230523109436, -0.005837413016706705,
             0.0045983269810676575`, 
            0.010242241434752941`, -0.01410639751702547, \
-0.003693977138027549, 0.010713610798120499`, 0.00080814742250368, 
            0.014345754869282246`, -0.008487493731081486, 
            0.0048544942401349545`, -0.007051654160022736, \
-0.015770578756928444`, 
            0.009384984150528908, -0.015086380764842033`, \
-0.01584472693502903, 0.008202156983315945, -0.002562673995271325, 
            0.010442735627293587`, -0.0053188009187579155`, \
-0.014373701065778732`, 0.01651569828391075, 0.013201011344790459`, 
            0.016575314104557037`, -0.010996337048709393`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {14, 6}, {15, 13}, {
            28, 7}, {10, 8}, {-8, -9}, {-2, 12}, {-7, -11}, {-4, 19}, {
            22, -13}, {-6, 17}, {29, 23}, {35, 16}, {20, 25}, {-14, 
            18}, {-18, -19}, {21, 33}, {-16, -21}, {-12, 26}, {27, 32}, {37, 
            24}, {-24, -25}, {-17, -26}, {-22, -27}, {-10, -28}, {-5, 38}, {
            30, 31}, {-1, -31}, {-30, -32}, {-23, -33}, {-20, 
            34}, {-34, -35}, {36, -36}, {-3, -37}, {-15, -38}, {-29, -39}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 5015, 
            6876, 4351, 6766, 7463, 6865, 5571, 1322, 7463, 4528, 4528, 3377, 
            1800, 9086, 5307, 5571, 6865, 6766, 5571, 4717, 9708, 6876, 6865, 
            10115, 10117, 7463, 1026, 8627, 10115, 6876, 10116, 4528}], 
          "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1015896275639534, -0.044668592512607574`, -0.017286919057369232`, \
-0.119712695479393, -9.999999682655225*^-21, -0.08778919279575348, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.07246946543455124, \
-9.999999682655225*^-21, -0.09210039675235748, -0.10353974997997284`, \
-0.05931930989027023, -0.02459155023097992, -9.999999682655225*^-21, \
-0.04706219583749771, -9.999999682655225*^-21, -0.12412932515144348`, \
-0.3715690076351166, -0.04620031267404556, 0.38923919200897217`, 
            9.999999682655225*^-21, -0.2119971662759781, \
-0.09435421973466873, -0.08941143751144409, 
            0.20791196823120117`, -0.364515483379364, -0.07228947430849075, \
-0.06636073440313339}], "LeafValues" -> 
          RawArray[
            "Real32",{-0.006424303166568279, -0.014534899964928627`, \
-0.0024820680264383554`, 0.013259142637252808`, -0.00012131257972214371`, 
            0.00608117925003171, 0.014609790407121181`, -0.004753766115754843,
             0.00604826956987381, 0.016723578795790672`, 
            0.011674297973513603`, 
            0.010164018720388412`, -0.0051044886931777, -0.009875665418803692,
             0.0027413717471063137`, -0.0007199851679615676, \
-0.003660497022792697, -0.011879311874508858`, 0.00440924521535635, 
            0.0008000988746061921, 
            0.014277827925980091`, -0.009339901618659496, \
-0.013408515602350235`, -0.01568261720240116, 0.006270525977015495, 
            0.01644163392484188, 
            0.0028925538063049316`, -0.015000646002590656`, \
-0.0032535686623305082`, -0.00622121337801218, 0.008126605302095413, 
            0.010369226336479187`, -0.01621103473007679, \
-0.006522408686578274, -0.014327462762594223`, -0.01564844325184822, \
-0.010914322920143604`, 0.02046680450439453, 0.0032921242527663708`}], 
          "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {13, 6}, {15, 11}, {
            27, 7}, {37, 8}, {-8, -9}, {-2, 12}, {-4, 16}, {-6, 14}, {
            20, -13}, {28, 21}, {-12, 22}, {29, 17}, {19, 33}, {25, 
            18}, {-18, -19}, {-11, 23}, {26, 31}, {-14, 
            24}, {-15, -23}, {-20, -24}, {-22, -25}, {-16, -26}, {-10, -27}, \
{-5, 36}, {30, 32}, {38, 35}, {-1, -31}, {-21, -32}, {-29, -33}, {-17, 
            34}, {-34, -35}, {-30, -36}, {-28, -37}, {-7, -38}, {-3, -39}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463, 
            9708, 4351, 4302, 4528, 4717, 6865, 5571, 7561, 4717, 5571, 1322, 
            5571, 9086, 9866, 4528, 4158, 4951, 6876, 6540, 6865, 9708, 6876, 
            5307, 10117, 10115, 6876, 9866, 8627, 7561, 10115, 6865, 6876, 
            10116}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.03938329964876175, -0.044189415872097015`, \
-0.017286919057369232`, -0.119712695479393, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.03808106482028961, -9.999999682655225*^-21, \
-0.08622151613235474, -0.09210039675235748, -0.15825799107551575`, \
-0.07542958855628967, -0.05574360489845276, -0.36605125665664673`, \
-0.42219841480255127`, -0.08429481089115143, -0.03330753743648529, \
-0.12412932515144348`, -0.3715690076351166, -0.049029506742954254`, 
            9.999999682655225*^-21, 
            0.38923919200897217`, -0.31862738728523254`, \
-0.06374698132276535, -0.08941143751144409, -0.09301909804344177, \
-0.050373055040836334`, -0.08063556253910065, -0.364515483379364, 
            0.16606731712818146`}], "LeafValues" -> 
          RawArray["Real32",{-0.0063647134229540825`, -0.01446946244686842, 
            0.0014929687604308128`, 
            0.004567693918943405, -0.00012010118371108547`, 
            0.005696190521121025, 
            0.017191311344504356`, -0.008401989936828613, \
-0.0004708160413429141, 
            0.011445214971899986`, -0.010227055288851261`, \
-0.002104981569573283, 0.005271421279758215, -0.005057381000369787, 
            0.009482483379542828, -0.005753922276198864, 0.00241783051751554, 
            0.010086704976856709`, -0.013972308486700058`, 
            0.010579807683825493`, 0.014211123809218407`, 
            0.01667320728302002, -0.0012801174307242036`, \
-0.016839569434523582`, 
            0.0031885383650660515`, -0.00793219543993473, \
-0.005140125285834074, -0.0008117202087305486, -0.014916566200554371`, \
-0.01567147672176361, 0.016396120190620422`, 0.01029653288424015, 
            0.008051952347159386, -0.00248607131652534, \
-0.006470129359513521, -0.014379831030964851`, 0.016379976645112038`, 
            0.01308032963424921, 
            0.01642986200749874, -0.010833324864506721`, \
-0.014758770354092121`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {14, 6}, {15, 12}, {
            28, 7}, {10, 8}, {-8, -9}, {-2, 13}, {-7, -11}, {22, 26}, {-6, 
            17}, {20, -14}, {29, 21}, {36, 16}, {19, 25}, {-13, 
            18}, {-18, -19}, {-16, -20}, {27, 31}, {38, 24}, {23, 30}, {-4, 
            40}, {-22, -25}, {-17, -26}, {-12, 34}, {-10, -28}, {-5, 39}, {32,
             33}, {-23, -31}, {-21, -32}, {-1, -33}, {-30, -34}, {-27, 
            35}, {-35, -36}, {
            37, -37}, {-3, -38}, {-15, -39}, {-29, -40}, {-24, -41}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]], 
        MachineLearning`DecisionTree[
         Association[
         "FeatureIndices" -> 
          RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5940, 
            2936, 4351, 6766, 4528, 6865, 5571, 7561, 4717, 4528, 5571, 5571, 
            10116, 6865, 1800, 9086, 10115, 6876, 10116, 4528, 6865, 10116, 
            4158, 3462, 6876, 10117, 6876, 10115, 1026, 9866, 7561, 10115, 
            10115}], "NumericalThresholds" -> 
          RawArray["Real32",{-0.22387510538101196`, 
            0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.25578245520591736`, -9.999999682655225*^-21, \
-0.1015896275639534, -0.03205364570021629, -0.017286919057369232`, \
-0.119712695479393, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.030474426224827766`, -0.08622151613235474, 
            0.7201182246208191, -0.5883604288101196, -9.999999682655225*^-21, \
-0.09210039675235748, -0.15434935688972473`, -0.3715690076351166, 
            0.3376719355583191, -0.10004036128520966`, -0.02459155023097992, 
            
            9.999999682655225*^-21, -0.049278780817985535`, \
-9.999999682655225*^-21, -0.3715690076351166, 
            9.999999682655225*^-21, -0.31862738728523254`, 
            0.38923919200897217`, -0.09435421973466873, -0.06374698132276535, \
-0.09301909804344177, -0.050373055040836334`, 0.024014312773942947`}], 
          "LeafValues" -> 
          RawArray["Real32",{-0.006305760703980923, -0.014405257999897003`, 
            0.001478190766647458, 0.01312874536961317, 0.009746325202286243, 
            0.009576408192515373, 0.0059510814025998116`, 
            0.011440176516771317`, -0.006536525208503008, \
-0.006212928798049688, 0.011547323316335678`, 
            0.002724908059462905, -0.005010735709220171, \
-0.012302788905799389`, -0.00569807318970561, 
            0.0045376988127827644`, -0.003532739821821451, 
            0.0010352885583415627`, 
            0.010493949986994267`, -0.011613202281296253`, 
            0.00752090523019433, 0.0007599126547574997, 0.014145610854029655`,
             0.009897882118821144, 0.008252211846411228, 
            0.002928804373368621, -0.0069402228109538555`, \
-0.015530726872384548`, -0.004419949371367693, 
            0.00921308808028698, -0.013151556253433228`, \
-0.015583842061460018`, 0.010224631987512112`, -0.0024613328278064728`, 
            0.00797817949205637, -0.005093427840620279, \
-0.014172252267599106`, 0.01627737283706665, 0.012987330555915833`, 
            0.016591854393482208`}], "Children" -> 
          RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {13, 6}, {14, 11}, {
            7, 19}, {39, 8}, {-8, -9}, {-2, 12}, {-4, 16}, {-6, 17}, {
            22, -13}, {31, 23}, {37, 15}, {18, 26}, {21, 35}, {-12, 
            30}, {-15, -19}, {28, 20}, {-20, -21}, {-11, 27}, {29, 32}, {24, 
            25}, {-14, -25}, {-24, -26}, {-16, -27}, {-22, -28}, {-7, -29}, \
{-10, -30}, {-18, -31}, {34, 33}, {-23, -33}, {-32, -34}, {-1, -35}, {-17, 
            36}, {-36, -37}, {38, -38}, {-3, -39}, {-5, -40}}], 
          "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
          "NominalNodeNumber" -> 0]]}, "ClassNumber" -> 2, "IterationsNumber" -> 
      50, "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAABcBnDKXKFv4OfwSJ2hTWMJCYQKXXGEGiNIHirrlunOvUJFn6
ZN+OdbjaYtu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu27X+e1/n5Lg/puSnu

              "], "Type" -> "NumericalVector"]], "Output" -> 
         Association[
          "(f1f2f3)" -> 
           Association[
            "Type" -> "NumericalVector", "Weight" -> 2.999999999999989]], 
         "Processors" -> {
           MachineLearning`MLProcessor["DensifyNumericalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association["(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAABcBnDKXKFv4OfwSJ2hTWMJCYQKXXGEGiNIHirrlunOvUJFn6
ZN+OdbjaYtu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu27X+e1/n5Lg/puSnu

                  "], "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
             "ID" -> 5853706460650246025, "Output" -> 
             Association[
              "(f1f2f3)" -> 
               Association[
                "Type" -> "NumericalVector", "Weight" -> 
                 2.999999999999989]]]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "NumericalVector", "Weight" -> 2.999999999999989], 
             "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "GradientBoostedTrees", "Options" -> 
      Association[
       "BoostingMethod" -> 
        Association["Value" -> "Gradient", "Options" -> Association[]], 
        MaxTrainingRounds -> 
        Association["Value" -> 50, "Options" -> Association[]], 
        "LeavesNumber" -> 
        Association["Value" -> 110, "Options" -> Association[]], 
        "LearningRate" -> 
        Association["Value" -> 0.01, "Options" -> Association[]], 
        ValidationSet -> 
        Association["Value" -> Automatic, "Options" -> Association[]], 
        "MaxBinNumber" -> 
        Association["Value" -> 255, "Options" -> Association[]], 
        "ThreadNumber" -> 
        Association["Value" -> 2, "Options" -> Association[]], "MaxDepth" -> 
        Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
        Association["Value" -> 7, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "BaggingFrequency" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "MinGainToSplit" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], "LossFunction" -> 
        Association["Value" -> Automatic, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.5060504485967252, 0.010575589262120802`], "Accuracy" -> 
         PlusMinus[0.8317124486514206, 0.021900915115162237`], 
         "EvaluationTime" -> 0.0018316533333333333`, "TestSize" -> 300, 
         "TrainingSize" -> 3200, "TrainingTime" -> 3.281506, "TrainingMemory" -> 
         1036813464, "ModelMemory" -> 623104, "ExperimentCount" -> 1, 
         "ModelUtility" -> 0.7595639717676009, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.5060504485967252, 0.010575589262120802`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.8317124486514206, 0.021900915115162237`]}, 
         "Configuration" -> {
          "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
           MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
           0.01, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
           "ThreadNumber" -> 2, "MaxDepth" -> 6, "LeafSize" -> 7, 
           "FeatureFraction" -> 1, "BaggingFraction" -> 1, "BaggingFrequency" -> 
           0, "MinGainToSplit" -> 0, "L1Regularization" -> 0, 
           "L2Regularization" -> 0, "LossFunction" -> Automatic}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 17]}], 
        Association["ID" -> 274199444811556]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7103362298345132, 0.0134547761818646], "Accuracy" -> 
              PlusMinus[0.4627845587258604, 0.040515449391942626`], 
              "EvaluationTime" -> 0.00014588000000000003`, "TestSize" -> 300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.360914, 
              "TrainingMemory" -> 5436488, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6024590578577611, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7103362298345132, 0.009513963477543703]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4627845587258604, 0.028648749007863013`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6808533832566114, 0.0067993542003725324`], 
              "Accuracy" -> 
              PlusMinus[0.5604148116752478, 0.04042205960025746], 
              "EvaluationTime" -> 0.00010875666666666668`, "TestSize" -> 300, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.146059, 
              "TrainingMemory" -> 19885120, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6296707070879572, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6808533832566114, 0.004807869462772653]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5604148116752478, 0.02858271245286883]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6767233206027792, 0.008243097023932385], "Accuracy" -> 
              PlusMinus[0.5572218146380753, 0.04033346105447162], 
              "EvaluationTime" -> 0.00010396333333333334`, "TestSize" -> 300, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.40375, 
              "TrainingMemory" -> 66392464, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6332362511133883, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6767233206027792, 0.005828749803601238]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5572218146380753, 0.028520063820340398`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010396333333333334`, "MeanCrossEntropy" -> 
             PlusMinus[0.6767233206027792, 0.008243097023932385], 
             "ModelMemory" -> 297064, "TrainingMemory" -> 66392464, 
             "TrainingTime" -> 11.127580666666667`], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7194345920495708, 0.16467199782388042`], "Accuracy" -> 
              PlusMinus[0.6683170319846272, 0.06686570287200874], 
              "EvaluationTime" -> 0.0016142300000000001`, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.512412, 
              "TrainingMemory" -> 8788920, "ModelMemory" -> 5113360, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4361527539858625, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7194345920495708, 0.11644068633280223`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6683170319846272, 0.04728119192960219]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6478894117156915, 0.21981001728325172`], "Accuracy" -> 
              PlusMinus[0.826732873568786, 0.05430594453599856], 
              "EvaluationTime" -> 0.0017407, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.924282, 
              "TrainingMemory" -> 21156640, "ModelMemory" -> 5276592, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.46840498406267517`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6478894117156915, 0.1554291537937195]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.826732873568786, 0.038400101640145116`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7301739616989222, 0.20327380287194208`], "Accuracy" -> 
              PlusMinus[0.7376239626776967, 0.06266969912114659], 
              "EvaluationTime" -> 0.00192868, "TestSize" -> 100, 
              "TrainingSize" -> 150, "TrainingTime" -> 2.334414, 
              "TrainingMemory" -> 53045856, "ModelMemory" -> 5604280, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.41252528688123064`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7301739616989222, 0.14373628444832773`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7376239626776967, 0.04431416922348337]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00192868, "MeanCrossEntropy" -> 
             PlusMinus[0.7301739616989222, 0.20327380287194208`], 
             "ModelMemory" -> 5604280, "TrainingMemory" -> 53045856, 
             "TrainingTime" -> 62.76345200000001], "Index" -> 2], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7078845143934611, 0.013500228143082372`], 
              "Accuracy" -> 
              PlusMinus[0.5000002003014584, 0.03535189031810231], 
              "EvaluationTime" -> 0.0020425866666666666`, "TestSize" -> 200, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.04105266666666667, 
              "TrainingMemory" -> 1.3589573333333333`*^6, "ModelMemory" -> 
              327912., "ExperimentCount" -> 2, "ModelUtility" -> 
              0.5521409332545696, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7057681302136795, 0.018074578613429138`], 
                PlusMinus[0.7103847857401784, 0.019645563925520262`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000002003014584, 0.0499951227433864], 
                PlusMinus[0.5000002003014584, 0.0499951227433864]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.693916447346747, 0.011733755145309235`], "Accuracy" -> 
              PlusMinus[0.5000002003014584, 0.07070378063620462], 
              "EvaluationTime" -> 0.00218753, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044996, 
              "TrainingMemory" -> 4985584, "ModelMemory" -> 327912, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5588339963428564, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.693916447346747, 0.008297017832030703]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000002003014584, 0.0499951227433864]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931794955643081, 0.012420774060626662`], 
              "Accuracy" -> 
              PlusMinus[0.5000002003014584, 0.07070378063620462], 
              "EvaluationTime" -> 0.00219468, "TestSize" -> 100, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.056745, 
              "TrainingMemory" -> 18348552, "ModelMemory" -> 327976, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5590903272731396, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931794955643081, 0.008782813565855082]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000002003014584, 0.0499951227433864]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6195934792474617, 0.014957588345872479`], 
              "Accuracy" -> PlusMinus[0.717821982479677, 0.0452890581247049], 
              "EvaluationTime" -> 0.00229792, "TestSize" -> 100, 
              "TrainingSize" -> 700, "TrainingTime" -> 0.306059, 
              "TrainingMemory" -> 85148584, "ModelMemory" -> 330632, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6210572096371108, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6195934792474617, 0.014957588345872479`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.717821982479677, 0.0452890581247049]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5832037561354543, 0.01646838046151549], "Accuracy" -> 
              PlusMinus[0.6966930868206325, 0.026614459968530162`], 
              "EvaluationTime" -> 0.001999316666666667, "TestSize" -> 300, 
              "TrainingSize" -> 3200, "TrainingTime" -> 2.120496, 
              "TrainingMemory" -> 388870144, "ModelMemory" -> 355112, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.668660162442181, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5832037561354543, 0.01646838046151549]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6966930868206325, 0.026614459968530162`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.001999316666666667, "MeanCrossEntropy" -> 
             PlusMinus[0.5832037561354543, 0.01646838046151549], 
             "ModelMemory" -> 355112, "TrainingMemory" -> 388870144, 
             "TrainingTime" -> 2.6916726666666673`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7949802879524245, 0.23827208869097197`], "Accuracy" -> 
              PlusMinus[0.4695975506941125, 0.020504363497497322`], 
              "EvaluationTime" -> 0.00005184777777777778, "TestSize" -> 600, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.024808333333333335`, 
              "TrainingMemory" -> 2.511552*^6, "ModelMemory" -> 1.058176*^6, 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.47689759349387184`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.2241211204605742`, 0.05984310475101461], 
                PlusMinus[0.7490327598050556, 0.019581469199765337`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4666307221312403, 0.028740155746711512`], 
                PlusMinus[0.4725455374989883, 0.028648748785816535`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.740672721055067, 0.04944107562093404], "Accuracy" -> 
              PlusMinus[0.5693410221597353, 0.04048091645502671], 
              "EvaluationTime" -> 0.00006793666666666668, "TestSize" -> 300, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.019254, 
              "TrainingMemory" -> 9896432, "ModelMemory" -> 3486528, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4824485086268756, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.740672721055067, 0.03496011984071935]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5693410221597353, 0.02862433053399548]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7002415326550797, 0.04421614145183475], "Accuracy" -> 
              PlusMinus[0.5552480413672188, 0.04954854932424755], 
              "EvaluationTime" -> 0.00010726, "TestSize" -> 200, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.058578, 
              "TrainingMemory" -> 36451984, "ModelMemory" -> 12390584, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.4440924055514126, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7002415326550797, 0.03126553345849595]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5552480413672188, 0.035036115225131566`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6696066359310376, 0.04073081369512506], "Accuracy" -> 
              PlusMinus[0.6226845443173914, 0.0396360522749294], 
              "EvaluationTime" -> 0.00030852, "TestSize" -> 300, 
              "TrainingSize" -> 700, "TrainingTime" -> 0.366041, 
              "TrainingMemory" -> 170000672, "ModelMemory" -> 56910312, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.38418418639526863`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6696066359310376, 0.028801034567068826`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6226845443173914, 0.02802692134306706]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00030852, "MeanCrossEntropy" -> 
             PlusMinus[0.6696066359310376, 0.04073081369512506], 
             "ModelMemory" -> 56910312, "TrainingMemory" -> 170000672, 
             "TrainingTime" -> 2.116471190476191], "Index" -> 4], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0648151014485372`, 0.07632911451743131], "Accuracy" -> 
              PlusMinus[0.5033269555689651, 0.0407429416760608], 
              "EvaluationTime" -> 0.00002981, "TestSize" -> 300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.061191, 
              "TrainingMemory" -> 2271136, "ModelMemory" -> 248368, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.3998256361268606, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0648151014485372`, 0.053972834477240224`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5033269555689651, 0.02880961034463059]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0081945861781478`, 0.09339960650627042], "Accuracy" -> 
              PlusMinus[0.5737503166222438, 0.04027519025856665], 
              "EvaluationTime" -> 0.000025500000000000003`, "TestSize" -> 300,
               "TrainingSize" -> 40, "TrainingTime" -> 0.07792, 
              "TrainingMemory" -> 6541704, "ModelMemory" -> 248368, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.42054218053265446`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0081945861781478`, 0.066043495120739]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5737503166222438, 0.028478860145410855`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7061807365761662, 0.10742842117632576`], "Accuracy" -> 
              PlusMinus[0.7914160543898323, 0.03341997088421695], 
              "EvaluationTime" -> 0.00002083, "TestSize" -> 300, 
              "TrainingSize" -> 150, "TrainingTime" -> 0.532795, 
              "TrainingMemory" -> 24371016, "ModelMemory" -> 248496, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.5934642870753662, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7061807365761662, 0.07596336510594444]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7914160543898323, 0.02363148803928678]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6262192751567842, 0.0849697333490053], "Accuracy" -> 
              PlusMinus[0.7559816249401023, 0.035134775492932376`], 
              "EvaluationTime" -> 0.00002052, "TestSize" -> 300, 
              "TrainingSize" -> 700, "TrainingTime" -> 2.928631, 
              "TrainingMemory" -> 113576552, "ModelMemory" -> 249648, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6713853249681158, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6262192751567842, 0.06008267464669438]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7559816249401023, 0.024844038006519402`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00002052, "MeanCrossEntropy" -> 
             PlusMinus[0.6262192751567842, 0.0849697333490053], "ModelMemory" -> 
             249648, "TrainingMemory" -> 113576552, "TrainingTime" -> 
             16.79622528571429], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931978668030144, 0.0045817034022360235`], 
              "Accuracy" -> 
              PlusMinus[0.4627845587258604, 0.040515449391942626`], 
              "EvaluationTime" -> 0.00010415666666666669`, "TestSize" -> 300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.1131, 
              "TrainingMemory" -> 5322288, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6188746742777085, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931978668030144, 0.0032397535451065677`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4627845587258604, 0.028648749007863013`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6930005101174215, 0.004578428061256456], "Accuracy" -> 
              PlusMinus[0.5034505393101978, 0.040693515588268996`], 
              "EvaluationTime" -> 0.00011328000000000001`, "TestSize" -> 300, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.191147, 
              "TrainingMemory" -> 19905688, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6190512669862743, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6930005101174215, 0.003237437529289218]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5034505393101978, 0.028774660822785483`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00011328000000000001`, "MeanCrossEntropy" -> 
             PlusMinus[0.6930005101174215, 0.004578428061256456], 
             "ModelMemory" -> 297064, "TrainingMemory" -> 19905688, 
             "TrainingTime" -> 7.758980000000001], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7096351510257853, 0.013062610037040576`], 
              "Accuracy" -> 
              PlusMinus[0.4627845587258604, 0.040515449391942626`], 
              "EvaluationTime" -> 0.00010409333333333334`, "TestSize" -> 300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.109052, 
              "TrainingMemory" -> 5311216, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6031184380928735, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7096351510257853, 0.00923666013718685]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4627845587258604, 0.028648749007863013`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6819130384638427, 0.006778935169338023], "Accuracy" -> 
              PlusMinus[0.5368052976932705, 0.04062655585583601], 
              "EvaluationTime" -> 0.00010297000000000001`, "TestSize" -> 300, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.160329, 
              "TrainingMemory" -> 19906056, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6286979422260391, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6819130384638427, 0.004793431027462892]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5368052976932705, 0.02872731314191568]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010297000000000001`, "MeanCrossEntropy" -> 
             PlusMinus[0.6819130384638427, 0.006778935169338023], 
             "ModelMemory" -> 297064, "TrainingMemory" -> 19906056, 
             "TrainingTime" -> 6.522212000000001], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.693140340769074, 0.004579368183436897], "Accuracy" -> 
              PlusMinus[0.5402654930880483, 0.040529868669785016`], 
              "EvaluationTime" -> 0.00015669666666666667`, "TestSize" -> 300, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.172637, 
              "TrainingMemory" -> 19796536, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6189263529122859, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.693140340769074, 0.0032381022960581516`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5402654930880483, 0.028658944977005177`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931480226512614, 0.004579443792981804], "Accuracy" -> 
              PlusMinus[0.4627845587258604, 0.040515449391942626`], 
              "EvaluationTime" -> 0.00014642666666666668`, "TestSize" -> 300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.121038, 
              "TrainingMemory" -> 5316320, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6189194955221885, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931480226512614, 0.0032381557600800774`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4627845587258604, 0.028648749007863013`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931467524813593, 0.004579430764648902], "Accuracy" -> 
              PlusMinus[0.5398950035177195, 0.04063898387608408], 
              "EvaluationTime" -> 0.00010617666666666668`, "TestSize" -> 300, 
              "TrainingSize" -> 700, "TrainingTime" -> 1.430069, 
              "TrainingMemory" -> 289258304, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.618920655411438, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931467524813593, 0.003238146547657535]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5398950035177195, 0.028736101079309816`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010617666666666668`, "MeanCrossEntropy" -> 
             PlusMinus[0.6931467524813593, 0.004579430764648902], 
             "ModelMemory" -> 297064, "TrainingMemory" -> 289258304, 
             "TrainingTime" -> 8.344459857142857], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6935624783560991, 0.004689936069727446], "Accuracy" -> 
              PlusMinus[0.45917805838230685`, 0.04045302499644721], 
              "EvaluationTime" -> 0.00011073, "TestSize" -> 300, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.100075, 
              "TrainingMemory" -> 5322184, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6185304726780312, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6935624783560991, 0.003316285598235661]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.45917805838230685`, 0.02860460829449673]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6923788055183756, 0.004601826101219699], "Accuracy" -> 
              PlusMinus[0.5099114645440351, 0.04079968684499781], 
              "EvaluationTime" -> 0.00010729666666666665`, "TestSize" -> 300, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.162424, 
              "TrainingMemory" -> 19905864, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6196022162573163, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6923788055183756, 0.0032539824420137007`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099114645440351, 0.028849735238385528`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010729666666666665`, "MeanCrossEntropy" -> 
             PlusMinus[0.6923788055183756, 0.004601826101219699], 
             "ModelMemory" -> 297064, "TrainingMemory" -> 19905864, 
             "TrainingTime" -> 6.597035000000001], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.700756803162236, 0.007227545957320064], "Accuracy" -> 
              PlusMinus[0.5127532364890223, 0.05394814423359888], 
              "EvaluationTime" -> 0.00010651777777777778`, "TestSize" -> 600, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.11659766666666667`, 
              "TrainingMemory" -> 5.32236*^6, "ModelMemory" -> 297064., 
              "ExperimentCount" -> 2, "ModelUtility" -> 0.6117463521498924, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7104150732735632, 0.009462774009968054], 
                PlusMinus[0.6985178477820185, 0.004556081814487729]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4627845587258604, 0.028648749007863013`], 
                PlusMinus[0.5627803032753406, 0.028665482331271874`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6808693908911159, 0.007173482529099038], "Accuracy" -> 
              PlusMinus[0.5233221672491021, 0.04068752775226506], 
              "EvaluationTime" -> 0.00010225, "TestSize" -> 300, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.156857, 
              "TrainingMemory" -> 19906104, "ModelMemory" -> 297064, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6295868848239772, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6808693908911159, 0.0050724181410491545`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5233221672491021, 0.028770426783342466`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00010225, "MeanCrossEntropy" -> 
             PlusMinus[0.6808693908911159, 0.007173482529099038], 
             "ModelMemory" -> 297064, "TrainingMemory" -> 19906104, 
             "TrainingTime" -> 6.3908776666666665`], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.01], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 7], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6075692199156848, 0.04284136262958795], "Accuracy" -> 
              PlusMinus[0.6683170319846272, 0.06686570287200874], 
              "EvaluationTime" -> 0.0026154100000000003`, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.201503, 
              "TrainingMemory" -> 10485040, "ModelMemory" -> 595840, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.6014507644014278, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6075692199156848, 0.03029341803065358]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6683170319846272, 0.04728119192960219]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5350208823700366, 0.017655616078808056`], 
              "Accuracy" -> 
              PlusMinus[0.7858304324992255, 0.033786602159638524`], 
              "EvaluationTime" -> 0.0018483899999999999`, "TestSize" -> 300, 
              "TrainingSize" -> 700, "TrainingTime" -> 0.836632, 
              "TrainingMemory" -> 227406784, "ModelMemory" -> 616704, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7163263543686459, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5350208823700366, 0.012484405855351417`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.7858304324992255, 0.023890735500332452`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.5060504485967252, 0.010575589262120802`], 
              "Accuracy" -> 
              PlusMinus[0.8317124486514206, 0.021900915115162237`], 
              "EvaluationTime" -> 0.0018316533333333333`, "TestSize" -> 300, 
              "TrainingSize" -> 3200, "TrainingTime" -> 3.281506, 
              "TrainingMemory" -> 1036813464, "ModelMemory" -> 623104, 
              "ExperimentCount" -> 1, "ModelUtility" -> 0.7595639717676009, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.5060504485967252, 0.010575589262120802`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8317124486514206, 0.021900915115162237`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0018316533333333333`, "MeanCrossEntropy" -> 
             PlusMinus[0.5060504485967252, 0.010575589262120802`], 
             "ModelMemory" -> 623104, "TrainingMemory" -> 1036813464, 
             "TrainingTime" -> 4.3033855], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 274195149844260]], "MaxTrainingSize" -> 4000, 
      "LastReportingTime" -> 3.740223523823656`16.325472546510813*^9, 
      "PreprocessorEvaluationTime" -> 5.15966796875`2.*^-6, 
      "PreprocessorMemory" -> 747248, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 3.372993127586295, 
          "ElapsedTimes" -> 3.777105, "ExperimentCounts" -> 13], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 4.216241409482871, 
          "ElapsedTimes" -> 4.883285, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 150, "TimeBudgets" -> 5.270301761853585, 
          "ElapsedTimes" -> 5.529966, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 700, "TimeBudgets" -> 6.587877202316982, 
          "ElapsedTimes" -> 7.247559000000001, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 3200, "TimeBudgets" -> 8.234846502896227, 
          "ElapsedTimes" -> 6.7769960000000005`, "ExperimentCounts" -> 2]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 5], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[274203739778852]], "ID" -> 
         274208034746148]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {"I got your number Mister Man. Anyway.."}, "ID" -> 
           1701647139666863241], "f2" -> 
         Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{11, 15, 11, 7, 12, 12, 13, 2, 13, 13}}, "ID" -> 
           2224475813358149678], "f3" -> 
         Association[
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
           7653724838730018861]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 40.667002, "MaxTrainingMemory" -> 1406179976, 
      "DataMemory" -> 2687040, "FunctionMemory" -> 1555760, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 10, 14, 58, 43.954847`8.395581750112958}, 
        "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{3.740237923987525*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"52511c1b-2fe5-4b52-8146-9b6169d5c0eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm40003D", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl40003D", ",", "testset"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740237959520808*^9, 3.740237980130831*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"0ebe265f-65f5-43f3-bc60-c54c05c3fd1c"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["400", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GradientBoostedTrees\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["400", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.8225000000000000089`4.76116964530695", "\[PlusMinus]", 
                    "0.0191284898203445373`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 4000, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"], "f3" -> 
              Association["Type" -> "Numerical"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
              Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 3]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {
                    "Text", "NumericalSequence", "Numerical"}, 
                   "FeatureKeys" -> {"f1", "f2", "f3"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f3" -> Association["Type" -> "Numerical", "Weight" -> 1], "f1" -> 
              Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2f3)" -> Association["Weight" -> CompressedData["

1:eJztxbENQFAABcBnDKXKFv4OfwSJ2hTWMJCYQKXXGEGiNIHirrlunOvUJFn6
ZN+OdbjaYtu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu27X+e1/n5Lg/puSnu

                 "], "Type" -> "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f3" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8638625972092938175]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    8878490732860731487]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    7761057869153230768]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Imputer" -> (DimensionReducerFunction[
                    Association[
                    "ExampleNumber" -> 4000, "Imputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {1.57475}, "Method" -> "Naive", "VectorLength" -> 
                    1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                    MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.57475}, 
                    "StandardDeviation" -> {4.800667915769639}, "Method" -> 
                    "NaiveSampler", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                    MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                    MachineLearning`MLProcessor["Identity"], "Padder" -> 
                    MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                    MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 1]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                    "Model" -> 
                    Association[
                    "Matrix" -> {{1.}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.57475}, 
                    "StandardDeviation" -> {4.800667915769639}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 1, "Method" -> "Linear"], 
                    "PerformanceGoal" -> Automatic, "Invertibility" -> 
                    "Approximate", "Log" -> 
                    Association[
                    "TrainingTime" -> 0.092573, "MaxTrainingMemory" -> 200720,
                     "DataMemory" -> 32888, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 7, 10, 14, 58, 3.544708`7.302155453753076}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                    PerformanceGoal -> "Quality"]& ), "Method" -> 
                    "DimensionReduction", "VectorLength" -> 1, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                    8173270132276539166]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1], "f3" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                    8.972251905053866, "StandardDeviation" -> 
                    4.492166600917825, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 2098501952737615792]], 
                  MachineLearning`MLProcessor["Standardize", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {1.57475}, 
                    "StandardDeviation" -> {4.800667915769639}, "Output" -> 
                    Association[
                    "f3" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Version" -> {11.3, 0}, "ID" -> 831145964257612050]]}, 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 1808528905651628212, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6568792965940910320, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", "\"", "'", 
                    "(", ")", "$", "%", "&", "@", "*", "-", "+", "[", "]", 
                    "{", "}", "\\", "|", "\\", ">", "/", "~", "`", "#", 
                    "^"}, {":)", ":-)", ":D", ":-D", ";)", ";-)", "<3", ":p", 
                    ":-p", ":P", ":-P", ":(", ":-(", "=(", ":/", ":-/", 
                    "</3"}, {"=", "<", ";", ":"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3843928245291384872, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxUnTmybc2SlH+BITCBkpAwy74ZQpkhMYQSMENCKEbAyInP82yP9epR9bg3
7l5NrsxoPTz+7T/+z//8X//vv/3zz3/+l3/++ed//O///L///l/j//Pfb2ul
9VP2raeuenuvP0E9o4/V1lpj7b1q/wnKHr3cdk5b5Z7ZtwVznXLuurO3seec
Kehn93n77GOcM64FZe9Z6r23tl3naX+Cevftde/W+yxjtlssiEvdskoI9hmt
5S/iOuvskKy61p4piKed87a5RvyjNY4F/Yx92i5xuRp3GR9BLEudZfVdzxx5
qdbnWPXExW6JB+sWsFh19drKaLFoeY866ol/Wi4vHm/0E8QfarxeWfEPRo31
tGC1O+7Yu7caVy2+x5m11H5P/KLveGAvyY43qHqBMs6dx5fa/ZzeVp+zxU9H
qxbE29V1by/jtnU+gtL5rDVWPTZDfIWfYJ3YBG3W2A+t9Vp9jzXbOFystz5K
yxdc/a7a+o6Nssvp57cZ6oy/r3GfeU+PFy01BX3dEztoxf+bZ+4UtBN7o8dC
3cJSWnB6afG3LW7UVnwdC8aJ7RDPFR8/Vrf7C84W6xpvvUbsqVGrBeNuLhOr
Hx+wnXpS0OaI/9n8few+v/mIl0LY4z5sCt98rLNiy/USn+Ss+IMF8fV2G3Ou
uWtsurxU733FQSx31jgpNwWxN2c8Tbs7vkpd/uZ9jV1jk6w4mLF7r1e3lx27
PT5evF2LJ/ZTxSV2iYfhC04WJwVx+3tLi29W4rnyF3HpON439kqf8XT5izYG
J2PEoq04jH7c2GY7/vnkNfmOXt0Wd56sXyzKic9sQSzbqZPXX3H7WJuPoN8R
axEHZY7PweE4sT3i/eNtU8nEcUJLtTgxsRxj7rwHV49DG8c2/s3teal4rLJa
PDKnc+ayx2Hqsar7xLNeFvsniA8UB2NzbM+Ip/Bahe4J4em77TNDM/0EJVQb
u+SOue4KRVstOHFm4kFjCeMF4+xYECesxC7dcf3Fi1oQKzjv5iCu2I+fe4SC
nTtWtcXV4njlL+LFYsvftXqLIzRXCmKD8ql2CPlnP0HoDxR1aP3KoT1+qtAk
oZBix8V3bbEi5yMofLmQxBPEMlgQmj02Tbx4fKQ6d14KgxJWJ05U6PddUtDi
pUOR3hvyeBG/4J6hicN0hIJCMV7fY3PwYufGaoYa3St/UUuLF5+hZ8/kDS0o
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
Ik4dCdx1dNzghNC4YrYcx6O0FSESDTf4+j7OZyNEh7QsHe0MesQeXP0MQ6Rn
2L8nYROkChD1cffxzRCx1pUOz93vyfNEG2Fd0b+rekdc7zAmpumqfX9vKoie
QD3X3l/5g4TsMGImxoZLclf8ymzjjA/U5xObHXeuXp5Qsc+O4yLEKdwI8vn2
VxEsAHYjXkm7/pv3iqtO7jBdZKF1nOxz+vIrNvezzgeyxiIQ8uZejry0ZezU
Bv8HdG6fp0kFs94TdmPr/eXI8gl68dmiDkiFjmPLUzMOVLnWPReWIUgmrEfV
3W/8Svv2jC5w/d3DOW++7KBB6v3klkqG33uiIfvtj1mR9NE0OICFy0FZ3NMg
Aa1On+vpuBZzTNX01p+6roip5I8S7XnGL35HH5435GOi+Y0To8gS9rZNr47D
MOCOyO5m9VsOvIYrf9W/9vzOn19fOskRWy5cn6YoUboZeX7FX903MzsnuGHt
yr2+cbglmNkp1QSw+calY7J8Zhj3KnwU1zz6+dTYrhCZ6ziEYuC6Nqve3fkJ
lEx8iZb9RcZUcZPPJ0bNmjS1j5O+PeKLu0d9tr5fI749SuhUpRqXIv7EKpO0
Vyymv3GF15mNPySqylcPsFkDCaXWbDzzK/iF+ftEKK7XJaiLERdGwL6j6yYe
eeEGyzhQLep8fD6L/QGSLLBSx+8gBwFQtNrq+OAc1h2oHdZBdf5PyLnzRWn6
ACrOuSqeAls45N/zOaNNLtdMKbrqfgZpGfmz4yuQXXENJgM/7TkQvI6z6t2A
nHnn1H07I4CMUrG8eoXDdOvxvqgBxAmp8rpQZn1xg5pHz3Ppi0PwHTGppo93
VPzKXBur90oXs+OvZl+Qv1s/96D0gg4/I4FYz+Xc4zwqmaVGNOq7gN4zIL1T
o4xeh8/YnMXVc9IIq+8UD0ff7A45yyJYcbCKePrZ1n7ngxKPSharWkCcijvt
YL9ggQqPLYO8YJePWIro4Fd8Ri0xNq9EKa6OM42ZVOHoSdV7Im6o+Ek5NI/H
6HjSGYSJfcWOu+J0+WaaMytCqN84hAPqy2e39bVUPnlmohdvewothcc4TB63
+MATwxqd31pIpEzr3IIHrn1EmkklP24Lss26/75a9TPTvnMWPxddy0zVmAtI
Ya3+vWSbdIXGliZLxSN/BKL2+ZKlH9+4yYhuTpQ20SQ6LkUkG4N1O+fv91c8
K7zTGhB1f7wLDFW+Onh9nDvUfd/0564eq8//DrNNawg86+7zBOg704hCQ72f
+rvMUAyeZfspNCq+4jqdtoSueN0HPD0tWtuwhl6fz3PGeYBIhkF1PS+uA9LS
nQ/5Ubz1I+ghO6o0mubY7HjEBCxKEry+rhXfZQDEjIBqf/9ihUiFLvjb3++p
T96xe1dVro7zH/CcsNc49VY8KnmP5zmCAa74IqbNCH6bsZP7xkkkB1ECoYb8
VHELBP9gAyxVeMVtjHe0RTYIxz6O5sIyOo2nU18XSarUCRudmKPXjYBgtlcq
QhrVx8GtQ1/+PDX7Sf/d2/d70uNFW696KqNEk1nYkOssPQS30tbLBE4Nvo2O
e3U8nVOG3usJwc4ZVv+GT1z8U/i2bEcAwHlR6/fmjhcbVFIie+kkaJQqJqMz
gxFV3wWZGm+B+RiqyNG/l8dItmcgtVUHXWF3n+E9qBnr/mfCtVm5syR3PwH8
I5qt6IaGaXvHNeZxMTUF947HEkNJgIU9Cw8cGUzYeX5myK+1XilPvbA06WQv
VccRuVtxzL2tvKVvoNPBhMBO8aRzX/c/fX8k7Eu5du5nx6W1MWyS09f3deEM
0nHQpdXjrfPXBDnPaPRl3N7H50DLPYQ49935IeE1oKYrbEGvXcdl8Vpj8IQ1
PzpiwyRD9Caaidd1XSEUUrYlN1B44NBqnbYULZlvnb8G0jEDgx1B21Z8hDH6
+SZXtD0rHrST/GOlr9LvW8iZtP8MW5l3dJxgwElvJB30Pk7sP2F5qBo9/Z5P
KzT1JWOhq/PeK9xNbRcr7Fk4N+dn5n3FGzSqlRW/w120bs1gHr5x5Qt+EBUn
D7v+LulDy/aZzHjUviA7wdxPvgM2W+/VDSqUsccL6K37fweVAJXyRWRW/Llf
/VKETHTRb/yFicW7YI9q9y+uqEx4/vIWLP/4SUj3g76pOC2ISDoafax+joaS
ANRaW+m2dRxWG50dDqr3I+wcWZhWVdr5/XuYU73LCzLu914Z6EFfMNxaQJPf
OGcl81+c9ggTV1wrKfTWPY49dT8z2KHyqRzdV38XpKGwI0B8Nem/caiE8eBc
TiOp0q06QiFy9487/YzR8SONvCPijHvx1wIaVg/79uJf/1TcEDTiElPLv/KN
IUGLsscWYaW63pGMwuafYX6/hzFXN6yfdwrGL77rwGhL5/M02I2H7hv/HPFl
uc9M4Ou9Gpm0n7EyvOOl+I2beJx8VDRwt+KNcto6oivxXl7xRo+XlR1E4oup
q+vNSv/gUo9Ine4df+K4tY5w2GtfHvwJlfbQBtEVrjgxIrZAe1ABtZ7jg6wY
0lzk7H7HZ3q+ok2gDTlqfR5R76MoOdKNre90XNlz0EA1tkbV6SMM8SPPPGy1
ug/D7I4ePKuA5+7zDLNbLutjvQp/9e4ubDqiM716fmRcGCmz+A2TZ6z4Ow6+
IjDRfIdDJ9eef8X7wZtU8T2IdWJUXIsqf8gzYnBBCOvcey429P/finKG8lnv
VQgxtv2YjxcOVksCSHekuZJZc8Vfdwp6NpT3Ks9UcY/Yg6Qzvvf3smxQ0f44
ZeTHL67TxrX5irRo/10DgXD6mQzs/XefLekAAhVzvKofI/SCgipDwhaZvzh4
DG8eWlhVn8KYGE3qH0RFvu6zD2g9sSPasndXPJkCOAJvtb3fnzcrTzWhXV77
oHHQMntnHYmi1efJm1UvQLU+rn7/+RLFCZOw+1k8C3FFRHxQTgVan/8Thj6J
vzvz6jduA08ePOPqs9f3GycVPdB0vmR5FSecZyhKZuUqXGsEv0OxWMh5e+Gg
1PPU+Id8nL1SPd8ZMQszFvBZ0O6Kxwk1bOfnaj6O+PVWC8QGzs5XgT0gN/HR
WLCM/j2BjCvKtLjuVx//3oK5ySd2FP6WlHOyA+yOOwr/33hIqTJDPpy2vo5/
zobMmYYOAc6OKwPN5D5ns7rfOyNH75KlnGfpRRxRataYBr6DJqv7iewffpqW
hfyl4vFbNnbN4+r4FXI3iBtNoqe+X1aZM10IgOZROoFUcsPzJA4PV9bPXdcA
U/6WwOy9PvCzYH5GBJICYPV/uB0NgF1JkfjeccpCWjMq1VX1Av7F6azAl4JY
7Dgxe9L1n3Sv+Q5cFgEuwQAH+l19X2QWePNu3pbPwaqvSLaES4SqeIajVXEv
M17PZ3uHhLt+8U9FSMn0gRiudVI5zrmdIXpcO+q568kd0bCRRfWcTpyBBIZ7
RL/q/BEP+Cpmrou0/I1T6yPdyXhRB6p+nzKCGZdO4tP1DntUBoFAsNMaXdd7
x0larcKyefR7q7waXs07JkZ9H7ShmOqM9C7H07+36Iyo+EcJuu6zt8zlbCG0
XJX/zFfq3QLnGsb4xSMeZUb1QKP0cSBMPi8RLXrzk63j1xF5+ZDO9j7Pt4Rg
9oFb93sfUjQp7Mgna2VXfMU6mdJAMsp6P1HrpJNHXFzn0fE9SG1W2cbM/Vzw
Plb+rFZS57dxHZMZ0sMfMcT8xq2/8yUzrd8cJHK84AYr4Pzt7r/r3T4p4qxY
f/1+v4JrJ/EZq5k3ToWCxZVZFExm3U+kFFKNBoJ70C8VzxcPUhWfgd/vc1TO
u8Dvva8Re4wTUr753353Z/CsU/R5i0jx1vmAkiDuLvS5u5/LvYd6jcpHanSr
fZankTU0oj0BEFTcgB8zAGJABfaNk8ikIoE+glVaf9e3RSo/LPrmSx5UjoiM
5ZuxXNXxj2CFdCfnEUxjxwkLQSya/ez1/oAS4pmnboXWq/umEaw3eUFLfnLL
o+IjOAGSVUEm9XEMPuN+SFim9zWgLupjOLVqmMr3kPVMjUxHKFxUvwLP+QoX
XEMQNbvjALJB8apaK0/gzfKAm9JJg+o/Oh5Bee1qtXrfhxCJPs/Wy+uy+u9G
Y0mVsgX9XvcBP8H9irLe2fUCVIL02LyLW8Ho47zKzPrwXtTq/7hVsMsaNOTx
ZsfRcCJrFbv52h/vcJFtndxR9l7P78hX207PmDP296J76mBKJmC4Pj6e765h
xxh3v+q6ZuzBpJvbzCin4v6EDIGkM5Hjip+EmLk57Slq+zhntgZJ5m66Wuep
MeBxjcyle18Ae1RQplr0Ftd7qxcHjzVjeH72+4mDFcGqK9Offq+iEghXZsT/
OWwdnwWQcmGHFH6636VwgXp/9P/9d/8es5OIhHr26jldxIrlZ4c72nq5B2ro
8aWxnrGlrLjNaMQZhulBf6fkKyhAHmEx95w3qnX7C/fADKy+hLdPJXpJsJDN
Ok5f8lN46HlraO4Vh9kh3nmGVV51sdIukzjvGk3au+JpDVkAgAEaD7CIKOrP
v4D7wvFGVASynoFJvvet4gMvyUXsd1pVv/gTHyr9H/IrFadOf2Vx3pjpHP/i
K5ZAHvPxOw7HGKXXOGOu3dcVA6AV/pGZSt2HmL0zdh+QgN2vWG814tm7xMYp
uSOfHcmmDSbceSyySgaiyksCuR2PMEA061VUVc/GlE/FdkYKo/dBcm37epJp
jqyjFR+Rqv/cCBtT6X4c4YyE83FFqry+i1ztFgUUzMPiNyFTQAmRWNIRuPp5
4RRcUVehjVJ64Ef8fgx90kBrHLg4dM4VTRqyyHvH5ysxgNBkjlRxiGzGLdGV
6f1uhbgOBejP7D3PoinFZZzRxRlhiI7nAUYfl5ZQH0enbbwP30y/7gM5As7b
bqpto+MWoK+EbyTiKn5HhgWMwECi+pmLTe0c8Wbl4dz3GUTCNF3udZuSdDwS
BHS8EFv6/t9WNXYTd9DhtT7jrejDGriArvf74CnG0fl40sr9xc8Is7lwacvq
OILNl/uLZlBxSSby+hXgYt//DFRNGUHi7XgVV5jKAg15Z+MqI9+1zeOV1r+u
mhdHyPl5ZwKYW7U/EpGAJgSRBRXr74U/bszbY0P41HooPhCx8HjoXs6Oj+jv
Z3b+NO7UPY46zHpL4P5OEWNogT8zVg29TqIObyOKsMDIfT6kBUAiaOpwwerf
Rz/8CZQhnew37mN/QmyamZ7U+oywS80ZxWDLlKPiQMWkq8/0bqpO4bLyKmmw
AZ7dt9ThoYEesyF4qPq7tlCNKpRG/8rWcU03w3S9rL3qvidt3vkdA8i1Kj6l
u+YCxEYat4m3wjaW/Kgpbz3f593OcHRjgFL3GfYKFHALTASptOJ05ZIBUp8o
HYbDIDGcJG+/BkXdNzMcfaHo1p6NE8Cuwx6OSStBwDoOIZ8zl3TE8bPOM4bh
QHMBYfW8G5bAa3Mndvc+zoIm3+ITM9HSp9KYxF0ZUYGgJtXHQc90qYsMQ+f5
8XywrNqL7M11HEycPYgpgsaNe4nR2ovufXHcfZyYzAFC8bR6qh55Ygx4RuE4
ILat4yum5y+cpfModbg30GRqRs++4ofVP+7v1/6rF8JzyacXXmPxJXVgo06q
4wc+UvsXEYo4q5/5vFatD0ZSANCY68Ef9XHu1Cpp4uIE1vnc6/XmfTzz5ofG
o0BjMk6Gtrs6jnXGcAdwhJ5i/R60K/Ax0ix34zcCqcTTBieXQNb1GkV4GyjN
nGANFX9WhrBm2oGyfOPPCybnyXnP1mnEUIuYJ3UFFPvaRywtUCa02L0X3+8O
dU2XnH6V1OL+ns+LeYEYsoBzN9oqfkXS8Lbp+4b7OJc3IbxUifr3vT0jmuSS
X1x08UHOMObO/YuL32sOcsps4X7OaPZ9Lr7Ox7QnbpcKATJiFbdVRY/3es3O
K/75fANxlF03fy2SFujgNIVNLb/Pl5lxvNyAFQ2TV51nAJGQy4hqo3Bo0TrV
i9rD57tK7zdUXpXFDDpEh7fi4dGpGIAA19XHGWgxT5xYPeSr4xH3CFg47hsV
x7dijkVtkkxVxVluR9vF0Lz0Y3k4jEx4pBxOq+4nUqf16vQanZXXiet8bmog
mJVR5088gQoYdR34/7rPsQX5vNHbHfWJe/3ivPJYuVsl9447xRkNLVKF/Vwu
a0l6yrRfK+8Vz4wUDv+KEUXFyfJxpH6sdcVDP0OG99wjRtdzXkRDDFSod/vU
3u/JMDg0j+ZTc9R66H6hEqw0lJUYHYfYuqK0oFfTf9ep4EAbQqqX677NmAYB
ASKNjd9xEGW9+lc0Pfs5kimbe9y0jAe2Ok/5m1Vi5SUvPr604UJj4XnpaW11
PvFFtbKaXT2lV8z+htDGAjww1Fx1/+/XqVSGcMb24BuXbvt4PZi0biouq8D2
2jNT6+tVEaDnrlCDt14fVurwLa3nYOoqPjKZ+uw/Ee/s7w6YP3nYjLLz7OM/
kQCIPL9eWR1HnWvLeSclR7//jy31PHP+G9ZGxb34rB9icnvO/n28d/nMoYTO
Pn9zmZGXHJ/+7PfEVwdNoZ/wHIULEn9dauLrcdcc5wyx2+ia1wUDqlVxBIso
kq24XVwV98mEqzHC7jk6frFO4YjxzNbTPnUfIqfJn0Q7r39vL4PxsmJ+bkP/
XaoJKnRPRdPwG/fEMYboAir/Om59V11jRzylV0+wbcTZmfeMDbHjRm6n9rQh
dt9/XKHAdTSmwkmuOHwP5b89Sp3fvgFE/R2n17CJt/5Od/VvxGaivn5vdd/M
QHeUMHjIVXpH4hqN1PCYXVafJHF6zvEaPOJa9o1L00xPgxutfAbkKzZpm9VY
z/f+F8dUsJua1z0dj+GkSeAtXH+XUe+nFv3cpZWcu+PeDW0prDwowYrfUmI4
KQ5/o+8/L+RY2q2sD/2ekJnBDpOcAOzVezJyM32Vg2r99YvLf6JlrAf+1HUN
zzZ8DQYohXcSn4HonAYZR/llnDzCIseC4TNaV/Z8BeDMIXxOrTduyLVec6Iz
MMl+jhwlaB1mQbv+/f5S7NhevO6lk8OLzkK5Z4Yvm633R1bIWDuKaZLcivN6
pNjkPXyq/g3VIFrjUKlgg3WfCSrR0iAqFuhdxSn3m7rpSq+z7wPKinF2AKDn
3ucZ9tpJ/zlU99rfcSUCL7Ipn0/1jcVniI93ktyz35PPeo6QTbaMLMLo48hi
6C98voN4zXSctJcXB3i7dInV7sGaq50wUffjFx+oJVp8rqHuf0x00U4gDj+n
VvdHGQL7hVZlT6/fS60iibzihbR1XKZBViD7VOGTMfUiEDbifC7Fq7huJU0r
U9un8HLna0KHAhyg4Dx/cTqAVzQoV+sU6TX5u+CxZ1K/0fEVJysSSNmF3jih
ETAJj/Dz12uuFC/C6BHDSOncnBXfUzmxG51RL6i4RG2EbYffVPfBQr7HlU8R
t/X7fwSqBa9C/HOv+j2CrObx9x6BjqqXKfdagmgnyBZKjxE+2KwGE+eI1t7q
uHJhxJmHpUgdnwMABjeSvb/zVBzQUr6qKT2q3ownl2yDoiBsdj33EHtU3yZk
W/N6zLdIuyrjISifWj9hYpfliB87Kmidvzu90jrnAV94e3GQDIagMy3Dum8n
kq1q0Qt6Vp9NXKXJdZq7ZPFuTvwdshZrDyziqHXgiKQ1ugb42148cXGIJuVu
9LuuPk+t9icMQRze2jct2OdrJqOkGv18AdDcVUhl1Nu6/yMy+cm7dWm/9aMk
nIw34K89q3SbMbh00DUZnGXpHohfOtbgUO5R5e1B8+C+h6cDf1rxGRdOYBkq
NP0cuRF6YBhaqr+6Luo5Z0SaDR+Kf3cGIOLfSLLHo6rjpHb07JHEO984ZkYS
T/wXLIv1XICq9TelZXoQHUeqDF3VDS381Yk3FEcFrSowlo7r3sVuhTVP1ztH
eJGmtLejH5XPH5FwnbHyyR5R7w/Y7S7DeQiCFQ72jFPujeqZTb/m2rpu2uRU
91WMpZsh07gzAjyS6Jx9/5fZ2YECbHq0/34vE4j+rW+qcGLny40iDQEthDBf
cXWiL5ffwtP7kcYozEfsYlDA6jx1nVA+qL6q3Op50c5asZJ6Mqv6Xq8CW9v1
ojMTslnFjd7QySAEr5qPcFJAFrZBZs5Y31GkebCU4Qs4FnT8icMJ2a23l/SN
w/5QMt4j7VM6SAT8AX/dMoTb0uE/MxVXje5xGiy+YapZO2H05CDj6/w/7/LM
HqDJM0ovXQGB6IgbAJlbPFzxGckF8pYmMXX+Jh2HPdDE/uz36tSc3aNYw1eo
vzvowxFjQ3305jOKw8FE75eATq3/Z0x8zpkmBKnw+rufw+tn0q3dafHV8UcM
HCCsrsxd675p8b5MKS/pqjwtXgC3oky3pfG6yUyipG6gEgLDN75i5yqf2vWk
qh4hnRMM0ZHZ27bXdT3Jlq5Xnf7zIfziT4SHwv3a+j3H2SGaYdwYp5w6vsa2
KSZ5lN88NCzkEWehuHiUvtMZa95UcDdWcOElKACChivu4+BX3zvnPwkR3FN6
VbPiXi2Kd5dNuXRNxa/gob3PKCRbxUn6Iu9YBCSQFZcN40nhNp3ll3QGdwib
/xID9++8SXwRQoKMYuPz+z0b2AW2SB+08D+kSsAPXTY4fvHKzytFB8reZHe0
to6DDVtj0vi46n1TuqcXPyK09NR6+4mHnUK1GXOs74/JGGe2QwtBCvyN66zA
UyL7eiHr78rQETBkFpxp6vhnZF/hEbbYXl4Vpyk1iEpCspefJu8/Yu5xsggO
+ai4gY1dO/bDXa+BZwTwgb0lddo7vkjAnBkC3jVvMkWIMNtlajI+z+X73SHz
MymOoHAcBiq+v8IZqKGfRa6f4wjhFqvneO1tKn7DzH1Sa4g6DsMVX4ZlRCxC
zO/jzAiB2xPIl299PjQM48HuZl+9fuJIbXG4gsI/ut9ryD3C1r+i2V3rienc
jBkorS8H6vjNWzuylbAldf7GsmozKV1UxToOHLhlryJtWM+LZNjNXTUZ2Dj6
+A+1XCXbyXS89h1K0zE7zZZBSrfiIfAFZRtY1tZxDFCKEFuec92HtdKRVejG
L73iqro0MuOD8VwdP6Iwrynt0+/1geQl65cRpHj3wTAQo0tJXAo+/PtejcDZ
InQ1k+FtFceNxbI73u1xVfxwh4OMch+qD/bJ9kjikPDYn+TiHX+tGfd8FJ2X
siB4rojrxpG7rmtknjrS2Za//M5TcUuaUJJ8Fd9cPNudmlnRXHkgUpulwYg0
Y7+74tlpMyGfwbl3fBCKhWSIAVnHib98ckZKdZBxdf4Rq6RAbIizys/0DAYp
mDXYTXJ4FWcqKQkkmjoKDyxuM+L+Lj8Z++/3QGl6Fs8dsOM3LruxAqUyb/8v
Ztsz8gUz4v81b6IWsMOWamHRjKp1eBxftsBh7ESW6hvXub+MFmgHGIlXPFLS
8RhJNlLnQzN/RTAS37P7QhTecHGjDqbfdlScQjMElqQR0/4bv7aoWO4R1916
X7OJ7t7QEBIbTw5EOON1SnQqrIWOE0/ODDbFdx+HLmdmsESKZuVjnKdpTg9K
rNb/Pg5t5xmakISvvuvBATyAR3/zXP1d5IX2Ep5RMO/3eYDERNjAjLj0TNwd
A/K8JDrRtf5Hm2RFjZdOb/Hg6OWdLyVbSbIKdyqzVFTrqm+ubfXfJWVF1IS+
jtbWL/4EgGNWuXX9haOThrKXCHWsjh+XZi85R6Wn+2kERI38qAK9ugsVN8Vn
9a51cW79XCaxb2xcoAng1G/c2C0rPA7Bvvr99KiheojVUIrp3+e9iqkuVu24
O049yKsl37n6vikTb/1TevIYrRV/cBNJB0c5pc9nvQaK/BDvXELHn8jJRL7c
w6y4lBrcMN2Sfevfv+19A0sE7+cXDwptj0NS87hPjzSyrucZGmLlM+BCT5wO
bqCt9S/OYsDXa20t38Mz6tI2hy1Uo54rQVxBLU3dQ3qKfT7PmQbQqRE/eo6j
Y3ZFkP0JJq+vN3Ye42UebGfx1AzECTNTrI08bfXB8FlmdFwzj3t6PfxsUSkJ
km2f/X29o5cN1jME+/q+PmlFCJZ4GFcYXRW/Y7kSkQ9CIvV7nyAzAupJs327
vGrEpWm7h2399O95iZyRLictX/nb1Nw7Q631Mp6jj2N6BuhA7vnpPHBGeQhw
My33rb6L6WM2C7KsxHKq4mfU/WcqRijRigcHqPa+cJx/x4lOvQb/mc+pjyPX
BhRGHG1/dvF4VjxR1Zil+8fxYsHiPG97qPtXZuD6FFEvl5vVdZFkoEnKkvL5
1dFWJcB9DaYQ52fFaZRirCiEt8LDf2pHDUdIsD1ar7X/Yj/wCQBxICRR+Z77
K0ul+RIoUx8nBkvuPrOFu75r4NQMw/fob5d+IDTxpsZ4ZEheudlxBlOf+wsC
33y0TxzRLYntTcu+1m1NvSvQLKut2qHid7Rj9cBopZ0djy/bfgYAsa1+vsjJ
21tZ5xrqfGY4cBD9VsnSZwMGHt4DoCwGqPW9Q+newaxteVVqPbHfmzAQAzc4
7Pt88zNKdzgEtn4fVpKiOGpyEKp1b8bpSQtFvUXRoeOSMRs1fEfp55/R/NvS
Fdq5y1XeFfW1QbHQN2aM/Y2js0RBF613jL7PT6xjocpJ6q5+Dz+PlBMQxVQ2
NdU3YD4YnSkQndX8eiSpoYv6It+f8ssTj+DIEYTBVX5t4iu1ndyK4Hbdn9iP
JJVHJi388Blx7UEazt99+ruLvcAWeam3k3VUnJGYgtx6b8GqeFTG2QtovZav
UBBgT4bXUOwAURXfM30JZghQbFQ8qRUFFcP38p3HZaAgHZtchWf1f165NbhB
3ePWyRRnZX0Y3GOK1lyJftMTFWIMjea5aM+QOM/swZSo1iXKlsBIW4x4Zvn2
MoCCS3zAXS8WTFfHtaLoWIe+Vuu/EW50Yo2/UpFUnKCUgToW8TV+vwftjvTf
nip+67haZ4xw3Wf5QeCJZeJ0B150lJ6/hYr8TsyC+eTU/mVLXpmhzbhv1PcF
hh975xgxb90HuCMawJwW6Ju5WsfHq8CDg02GuOK4exT7Ts2l63d8ikwUy2yz
e/l9i8fC06s+9+bDsmNgJWvzWjFNrfMf8Sg2j5ZDHP3cB+DAOnzUOkGrf6+f
k7Fi1rPZv1/oHeRjEGOffk+4595HmJX0UWr/MqvKm2NaTLK47vOMkIatFiBh
9PtDUgVN9ory0/odB1iRHs5Ir7v6hJlHhrCYb7j0Zq2RsFl4G08UhLeOs3y+
NSxuAgF13+64U157hH9BVSsOBoJNR0VrNB4pEEV93flygGud/OyOoB60A8x+
ykeJB3U+YOJve3pK33iEAO+X5R5n3YoH9ahFpsTctl+cGumpyN6juFFxq4wu
vxtIaqjiDCKUZxBCn92vzgdtK7yP6DKWbjYp+h0P14KjB1r5UjSx5OtYXWwg
R8VP2geaCjdt0y+/ILS1Eb1+gmlP6T9TDeQpYhD7qcNW4aXj7gDyNZKf3MW3
jdLR55cgvrb3Xv99y6/RGqrs0/3JsGSkDovVyX70+e8oFXn67n5/F6EqxhQy
ItZd373WF+ajL/Jl799fMSkDrVRd1jofq1KeQGdUvLtvEA837MoB1I9+9Y0f
W5BO0cUCrdwrHtriBt1tC6o8AWAqMjNaADz16vdnLO8tzyBUPacLtEgP4zFP
t7pWPHMgCAQ839I5OUHV9NP2iOB93rC6n/RA08VmFLGKR/y22BVZyet//Tpp
/BPXFWDMp3FcUQO3lWeQtm19n3mOrHzScPp3vz8k9ihmE/qMRHrHs0Ab/MR0
sO7DFTAfCM18ZfS/8WyjnwcmIYCjrusdJh4mkvggR/nfaWyH5KKcjr1bH4fu
mXVYTXmVz+YZ3ofBPyfVDFAqjjyTmT+HtlHrTHgfBHlV2RwL6vekxO+cJlHJ
3/fF2fMFzMlWZ/UZ4L0+7wEBMHn1XfmtHi08IknM9EP695zXbp8fSl3jSxdg
Y7S19vCcqg9gpHmDv2pBjuPcf/FkXVekuq7Ot7PZ0Deh1a6hXNfFQCuYfUPh
o9fDxU+T0antYv/hRZcUR5+WvNonWvvjZ01OAT2isPCrN195GFlcRPxKryzF
gEzQucTgpv5uBjUkKUa8mft6qfOCGhptElyq7wViJ17K0Y05+72VDWMT22ZY
hdZ9UGRFv4KHD15gxa+4wcXsmx5Mxx0oGEDtmKu/98cwQLvhyY2oOcjKzFw5
dWWgXPt+modROYxofOOdotMRoBbVxKvxeJQBoOjSNAUK7+MkOzgj7H8aR1bc
sD9wGGpKd9U1n50YFIqVy7Kf1DpsVqnEplgbE9dZcWtkRAUy96/9lNPKIIt1
ZGm/ax7qdhJbnoFUGZlWnHQqABd6+n784mYLpiojsknP+YuHosj8LgIcHYdV
h3XyV0rnP5K+htgjZpir82qdFm0b2pQ67n3fmNWNOHalmdf37Qi2XUaB8HBV
HxhNnOLKikvX3fgxr8kjfWVxdPzyLs2rhUJCon95nBWfLzeVOzbhxT7OHUll
DmkM6fp9oMV6ZFyANV+602d0A6MWlQlb6aed7xzFzIGgyvW7//qiHKupCR36
4hUnzw4qSlTjKD1qcVTBO9CoGC5WfGX6aBryPO17KA6sEv06t7X2qZRLoRLF
HLB0J8STT0o3wP37/COdT77q0Ywq/9/MI+3tR5Rlzt91Yafbq+/XIqrvD/gi
sAwdfvigjiOP2SjUNXvnwwGvguBOwP19/H4PAE1IVYN0dX3BSlHHNCNLTgl1
f5yKkUm+Mclax5llEMVUd5TeC8b4iTqyx6326PoRtBoQk8YiemvV3ZlpyK+g
iJdlreJBUT1UWf/j8KFT9ZIRJ9L7ep+vMbXyhOfYE7DdVfEQ+OJvohr81h0c
5YC4NrnjkR71N76/IDEQpsduu3f8BRxfKz4S3zwH5xItxhv9+RKkMBW3oWqR
Kb5W4QxfoUScwz2O69uo4wM8wS2kU+aMKx4Sn6Glvn3prSWu3rhWiveqI3yB
r15KCLCfvf6seICoITbHd+CpuHwMM8gpnNXfFjewMaMwyN5WnQ+YjQqUHHYq
9Y6DUADzaI8+Z13XGbZnlCRwur/fkV4WnRHIQAywrZ/Lhc6QGUmoA6vjOCZQ
BZbo5seZQBAID5UXi2Ov+8yn4zIuUpJjElR8j+6Q6ean7Nj7OPxFPLM0fO/i
MUUFWVebnjaM4F7no1Wp2a8BJwM4O25OzBQpqdys89HLR30MZQZQuOKEBuZO
1srA+KnnAg6x4WnEeX323wX84VGA8uobqOPwCtSY1Jf6+RGI36T5Pm/QDJC7
npdCmrFtcCx74ZqQqchbsWfZIynafzeIdBuMHt/R7zOMksroCsPvGvV8zVNp
zm1PyNz9/mjLkWiI28gs3TN1jl8tImpGwH3flnc7ybAWZvFPUX+uaDlFDuqT
bG4d51N16j05gX7fDAMYHszQke/+7swCwOZ1/z7LaD8Xk5e4vd9ReL3r/jwo
9/hoqvj5+65NiaUsW3DOlecbWunZQYg5+ZozXm/PgDWbRZRgS8WZ6d7enkxt
6r699GGwSGXkVfotn7jeF7VPPfXWmVTgxxlN9uYp1/XCrrz7zZb/rusyTaJK
Fn3liOt94xHiB4w6IsTzrVsvL7EGxvn6qx71fn7iBKH1fT83/Ki69Yp1ISgY
Zmck+37xcCu1p8EIvvdtfwW4vVufdfQpfSFxFPgXJ2XJrONkzL4ZIScjqO86
jg80sZDvB7ftimtgKXToLJ7b7/gaY25q7MV+10ueS+PZUolT1seHP8SYeeUw
nj6OTqrmHHbPqr7Q2xycbztGx/p3vY92SqQGkib07+ntYCfCcFEq/cYBcFBN
GPXGELTiUtYtwoU2pLvekysmzgYOiqbCV6Oz3SG7PIE5lL7K9Q4FJAT0M+7R
z2vkLLG5YQKKF5xRR5yq1vstHRXPLAYDBQLlPH7xPdhfc4oDvWF0/MKzuFds
VKt+IZcL1wWbFuDIdnT8RTsBnFDjqPMnWxdBrFiH93qlpc7T8o4c/Cr/UCo2
Z/oPW2Dmvc/uVoGoutv398pPxL3epHV5Zuyrzj/8/bSbrVClcxV1swg4Wv3O
npOKAwDx7qZCU3w3cdIivM2wX55+vopJGYu2Gvb86rgukfTKo+v1LUanUXt+
Qif7HZ9fS9DmJoKlu+X5jRABh3bYKL8hMsOS4SMYO1tVHx+qVI9GKXBd/Z4j
0lPL4ilBeKTe8wcWQitDf+upfJVlneFyHBM4Hq86T7AcSqIDsKr9caD8LtR1
BCituS9OOww7jUbUqniH3R2XZ5scXVFj2yoeccC3rwb5tFecPZG0Eptm7/2U
Idaj8QBXHCGairPD2qJpHTngPo6J3gDgtYlv9dxjsr4xaw2qs+pTyj7mIpL0
dI1qfz9CNDKKYpoxC7dvBYMxvePVShmz7gPOk086Dlp38d2uI05BTyxH5Xij
jqOajTG4sqp1jBNf0V++DAILZ+IemtdjRGLz1Rz/orYI3eIc0U1qXf28ZDNj
wU2r+6r6iHq+dsjISBH+Ze/49NgJJuLU9H2z3s4nJl3bj1/JQIfEMwQsZe77
W0dDeVxvS/CMysq9dRyc3uSZyPDq+xAtKWi/Gfru3cchov65zZqj1BbrfhL7
oy8wUtus+o7ssR6upocav77HVzg1ZPqw1Pt++hrv53VOI4Jcf5eVndSRUhQe
U8WnlO6zNlN1JrVU5wNeSDQFctDDrvsDlPBIYtcVk5K6DwCb12sSgiQ5+/hx
d9cCCLK235+pxyN3VCe2b5ElyqcRrz95bD/f+YQuAEz9EHqo43+OqORD5gDw
rfVfZz/Aaw0sg8Z6rz6J6qTRrkUFLFn3bWUhREaPMVh/p4Y9oGy299n+EeIv
UOKILNS21/lYrEIU4wzQc+pI+u46nzAX2AR1fLJ5wCYmIdH1r7jbhqQuWz1G
P9/QduWrpgJb6S2IwyIcGaHpY9wd1/V7vqTIf3+XGyLKs+HPVbiUKwIkMg6J
Joh3x9MBuAn5uanffp1c8ktZjxrL9e2niQ+FFHA+hlx91ybpDNnoufpYa/2B
gdQOfV2EZs3x9Si2yPXFKecs3OBlYILXJzfR26p1GDHPtelJsPjZ/8UHXBOo
AArkXvEV9S5+KTBhVW+GGMabIg3uu/SdsFSJyazQH1f7NLFTJImwURv4PJb5
O84lT4BKPUaSuIoTBlJiQb+Mzk/QJGNdjHPyKULq/Q+HHbLVKNe39HT8jhiV
3vp9dx5yGr3uBD94M85+D83MNXgMjwzbfnG6kz6JUAz2ek9g1nwp0bSY193v
w/W6IKLjakFU/mlmFJ0xRYYxfL0nWm5GTRByJ02niuvvq9vXCseg/+7KWOz1
XJyz36srDu9hQVolqy44YavOCKl/DXcqfrwiw2DjQCv1dw1lTd52+oSjeFX4
tDaVdwaW2r7iOotX4KUzqgPfeNwm0uZhnl68j/S4sJw3ZD6anLPjqmHOgHig
pTel5qU5jappbz5+v1fX+JO0VJ7ia0QDWE90kNZRwtffTVtjpbULVV/9EGZF
GStFRHH97rMWpFI6OsB78dON/6zEy2zmwjWq41sDUrvaYmQ0HX/oV0wjzJAL
Kx4yrS7EkZyn46SW0dojuXD1+09GMRQw/xmFS1GIf42kIkc1+z7oGIClSbx0
3Op62XwTaYzQ0q9uzWOVBuhsKVTr/MmqUU/SUCOy/H1PIlavHuS8p5V0VPwV
SrePhTw/O05ayKDr9ZJeFSf6M18b6W3U3DxOxK+seHapUfuI7wpgVpuMANTZ
f5eKGFBh6LOdbyi8dSVwSsHZqi8nCzT/sCbhF9S+f+2R9pbWU6YZv7hONqG3
iE+Xfwpo7VfxMU59/RyDyj+cK+2c+bve/PzMLhkYR90f+D12oHJc3KL6/akf
pcudeWL5uYsfYSlIsEgm1nM5M/8YlNXhOfc+zogEnCwUqHrr4wR0yuWc80Pp
iohjUl/BvOv47hWPUJmz1LGYtS+LR+P+ZO52db8CiZg6i5k2sGffN1NE2J9o
um2dx2qDc0GIIXpYKR0HfNxiXb23Xs3FfwQ8MMxIS1kfnxaEpsWK/HSt50Ys
BtcjUt5H6dtorsI9RLKcbWd9p9cIVA7uVJ/t2uvvDh4rpnVP7M62/j2htwiQ
Sf9Lr0zasCJavAU61+t2TDnxviL0Y+jbcd+igZXxw9nnH/ZU0CMcF0o/QXxl
Phtec/uGXFF3SKtxI8DV+xfu74EniA77/PrG9CN0p/xVSUCfz7sMgKznpvbx
o31E1Wpiidccgffa8TL+9avOwvNIvXfIhScKaGfh28XfeRz/JUtxXW8Ap7yK
GaD3nB1Y4orhqKXn4QHwi1+ZIsFmzbPfH/lt2urpz4x+f8CogXVT5PkMvvFn
i0qX1ptDVl4dlSXI8YDrrq3XK9BU7SlowvHrU3lriMpsgQXNtf/i8PpWVxTR
wjkjNgFpH+FUPa0j57XFQSdFpQL7Pa8nWTu7M/J+v+9dOsTcCaVNr+H7PfpY
HhPC+DvM7reEBxRJF339va9XPF6g4Buz8VoYJZLsaUJE/Kz6+fqnmn4r6AKJ
X8UNnGbAKk/gL9+4cSv1lc/xnxRnHUeeN+dE1i5dmvQyTV6kVvEfq/PcI/Jv
NHMGkFPXC/OrMQElJeWu85fBwrXQ3Pm801UvBIzlbdPeIslS5xPNFmhVbYmz
dOTALB8CCjgJsqyn44b+/AY+2yxrpqfiQakPoLuIdtR5HiltzndJ3ErHQMbD
ijp2v6/y3zcOd8t2bOhxs/WsOKNxFfcMR7X2lxHjOs0T/PRROhLMnOwV0+YS
o/OOaxg9Ge6ozWt/H6+nmWYLsa7SQ9MJfPkwVxqwhZcWfx/8Z0s4QqWt+B1j
rs0e7mrqPK8Vvs24YjRc/KMr2PzYp9j8P0vc7DgdFeBSQsmlVyNOpBc2F22y
/AeNrhFST24U3OwqT6ZLEvVYU7p7Kx7lK7+J/vXEw770Km0LHq9u29Bf7POZ
kfE4kkjtv3pkvLRQpi0RQn+2jkcDRQY0s8l943dcsHy6Oyfsvm8htPFxOCH8
9v5e1DjaGGeG6d0HyEAyC9ydkfL6xU/9u33LAlv83Cs8GpXN8zKNqp/8zgTS
Nk5Lo/a1kfbYdYRFQFWvzofaRGz0jGdn4RbEbfzk1ePWNH5xDZd4iXES6PUE
EATOyZ5niR0dx7+4omMKGd/HMRLzNhrGjuJxfD2v5nr7D6P09OJN79JoRUOe
1vsmtaXYoVh/8mV843qMNAg2DS81ScUJ2MQAwXZeOsl0SOPCR2PvuRvPeYVb
ncr7YsTQff7J7NL6pdZao+fmM7SRXC30RffzzX71WSglHFElqfhDidnlfvaj
Vfg9Wh0j9t0RTL6Kp6P4TQ8gGBkaxPV3keivUALVSb/rPd+9KHNILImKA5eA
GxM5IGtV8dgkAfrp2szu67L8mfvrbXvHzanjAAIQm2xV+v2fqSEmqPN8lQu+
cXqhMQHgH/KbFwTQYXZrsvXTVVN1I3enKthg/vr3L8XryTZ5Fl6dncod51wM
EwOJWXGLD5mZXcOu+PU+dTPIiSJEX6rW7ckDx15uGhJ3wYqf6SirjCjC9vNV
gKpJoNkIx9T1IrJT5YhC+bX1e75iQPvOVTmO1Hmaa6D0II5J4UfHZ1pCWyQo
uq81U1ggJ73SRKPjtyRHlh+Yxt7HoT1MdEiffJYOP2nYM2odlFO2X790xgP5
UlqjGnVf3TfHyVmxH2/d+r3xlswtpgNX4QN9PFSW4kdAXrHyE1AA7G7T1Xyv
dX8AgEaYXHwkCufDiMDnxqnvINb4xaNe9oMMTzJ7X8VrjszaFvaEZ3KVPhXo
TRR9yFQhOdQ6EGsiLf2N+KFJdcc5Nh/JAWmsPRW3lr92Q5wLjz7OSQPbeFli
elc+c8f3awbxIuOs+yOecnz/yv723w1IF4IXl+ap9+pW3X62M7IvERTo40CG
noht0PndF0rLCTwYsiqczG/8iLOkPQS+td/n0DHMKojJGElXnLkPE2M1CsZ4
/d0XPCE7tDKWT6sNMaI6L+ERxfsb953DOHrhkaK3jt/BZGk3Xs3nve7XiJFx
hQbRUevzHberM3ABC/7q3y82egvu+x/vEn2Dqmk2w/HvO8W/RZqkXieP7vcN
AZ6Sqg88nYaKE0NT0OoIWCd+canhFfAVeHTFx/2CTz9pI4XaOs9oVkH0od81
LzXZdGrI1yyy+MuJv1g0xdks/8eosumghAIJel33GZT8CoVP77v4R+JWkcMX
w4Gy+op3ps2v3TtBiVqH77SYZZrYu6t8GWxGg9DdiL3kZwGs92rFnDKSC5Kw
/u5WVLavULk/70b1f3jyGo0o8z7VWq+HOkQgI3ijRqz93kLy27u0ds1E+zi0
mT8b6Zkx6m8diEXlyjyBLGiff/SJzlhEQK7U+mnCES3J9aIWa7+4vUt3JARZ
1pR+6RUwg9s8Yu9U+jyE/dcrYUER+en+W9CxBlQZr65+fwy7mWKgnEPdVV9u
kaKA8MzCe5bfNJu2HWuKj89rFVjx+UquyGSDyfzFH67BlEPVdHfFH4NKJr8W
516f2Ypqg+xx1J6FQxZHeb25yykV67tb0QV9zeDYw1R+bmh4JDV5YOH2yn/I
8BO88wye45cvQcduSULj4NX1LJ7FFUAAANDT+A3TIFkt60ayTP13U9U/L+Qg
wPKOI6nFB3yLYnTFQ3xN5/Lem98BRqhtNTWGdlOF+rvGFNQ8rItgbk/HY5FJ
/nuLdkDHkWqxW6Fhev4CU3zm5bXTzq3PR4Udh1z6xLN8E6K/yUIGeESycvbv
YxWwxdPLPHR23LeNd2Lsdp19/jGr2AO0phhV8ZH5ER8t8jClNyiOZhhe5I3p
Uu+D9eJtnBvyls6SOHOWsV5kStfv/PMoTkPJ07GbffwI+uBt2TQaP0B8P768
WHmkPOq6YjqpjtYmf0pHC4uPuNITiWYNqa3j5FNAf/ZowM1f/M6E0F59dn23
pMAkCwACMUu3jtNCI1trHnfWuqdzuGEtXnap1gkUZ/dmiTzo81ReHTE6Yw7d
v9E6JyTB7hBJbRq81ep+Kr4Mey1v/683WBFlxhV1473jrzu4zhD5hNXnCWqz
RyP8iUHSN06J+o7n/ZbVtc4TS1ML74ij8tPf3a1+8YjVxdatbzyonRGurA5I
r2+pKV+QElxN5beK+mXkNN6BRL+f2BTEKrb0xMvvgLGRYYFlOsZ/Z8d15ViV
hPO/Kt+GJ7NJUgZ6YtxYcY0hmhOWqB+O0WLE3eF5YVONy0VlRiDmbiO96nXJ
vhCXU/Syvfw9NdPf/uwI1HrVfrFeNjwZqfjSH784AqKuI0zV6PuD5U8ty341
zt93ZDqCNM+63pf3PR9l/XVG3kUhUfygMKxXgONSqqv3zTQV44zH5nZ1vgeg
wYYgABsD+u9949CHCfUsE6+n8Vc6mxCCRkRooHfHuT7CFlMtPIvfKq7fnjHY
rYO5V/wMA+vJyvL0HARr2qoT9zXkvdlxpZkxBkWt0lnKtBXrFfpKhr3177HM
GcJEa2DW/pgx3YMXJCnei19P2SMUpvHq+N59nKjbbpHNs/kVHuY5MhAi8EMc
o3hAKf7vGJxoFT6ly4ciwLIQv+GVStgq7lPHu47b4vP7/YgHxh4Jpk/l3X+X
bavS4o7UcL23TxTFVvgOKZDr+NQSKe3EDuHuPCRmXiNiHnckhDsehUh3YqRY
rb+r6iIm+uwRsKt6H2rHUusDgx6ffZzPa5jyWgtQI77iXP0ggWGakKErfkd4
CS4iCme/OBwtqDpmY/EBZflP7Eyl9M+vLqM5hM+lK0o3o+oyZkAjXH/Um73x
pQ9ycfhriPO/eWW69VtAo8GsXH0c8m9axukM7r/jpPmsNapv1PmYDuGTx7JF
p672zVccOzJL/MR7fheN913v720DVD7GSDwCnyt1bc+vAWTuoPkhZ/ej70Nw
SHSR8A4NeCqOO0BSacUtstZbgPFoOtKDGtvW6wAvuZWWGfh+92EesKkDpkH3
Ccqm4tAEKxahoYPXfVgyLn4ftD6hlytuQ8pI1G5+1D5FbIJY1qtlP3u+/zCD
gMTORFwJ2/EQIvcjIJmz+qJokna/d/G31P3ioY6Dh1ytFy0eghZ4JfXs6pM8
MS0mBhbZodK/cqeolBKcID9TejJR9Z0pmB6NnZrnjshL67YjA/KU2Ss+Xzjq
Coum9uvY1ENkUaEhm/3d90doiLvGsIzvrHVJL43KKXIPm8O56vdkqUAQ0ig+
a/6Y8n+4ZStv9urzDIiOFCwQyypdppHWEQLPnWdf/D7eI566fD5mR1v9XWvG
jnUzIElr7hDxqdf/DpVylY5oJJ9nvMbdewVgxfExKDNLNWf1aTmCjOTld0xO
ar4WYpPG4RbI0FZ9J3F5SZpRU+VQv9cDc8+A50OkrTij0S3qP5ykr46rX5jB
ZeBUPrAjKo0sSNw6JIp6T7KDHdw9M79a9XcHfN3BB+86IgdZ8UOZjjfgwzj2
eh9eUDUbE/lt9X+G50rT/IzG82exezoebZsr8gBH6V6OiOrIWU7qqE/pr1qq
OYnNSJN4bev40Zymm2BWsRcPd2yvEXI4cp+v8e73n6mlDD1OjXPv+2DUA+DJ
7QLtu48fxaT9dR47qm8WLQotP2oepkJXXdcdhPh6B9n6bRU/M+5BWzQa6+Pf
QTqsKJHT56z7SYhxvg4vqDSz3rcAxPboJH3ei6vfh8yCozI8peL7L25rJmUT
NeyzrvdNFLCxrsDz6/48YcKCKGOLle+qOF8i8uoHUuhZ52l6ekedj0hV8dMH
3xBcHyanHHe++4s4i4IgRdndHf37K52Z1BxBh1X8Drw0PRiifd/7QIOTIVPk
1eWcR8fNnPag0Qw574qbh2kY0U7bjj6+1OmJ71jWplpPUHfeLgARCdq/FV9B
dL7+RT7LiutQGWiBFD7lz8iKCZklLZeNdlBdb/aoOxLoUA11n0NDi57DkWpn
9nEyQYvaO12RPp9UsTc+Ijz41ed/nJkfGT3Skfsdx32IQCc65b7q757h5xir
mp3XvJWEACAJsXD/uHRN8yIwGPn8XzD9tR5GKAISbI9+3ur7AMIyYdCPqCqN
ug+U+fz+1lk5ai5m9Pvqfgeh/5Tfn7ieMUmI/K9R1+vWnNF8esgnn/V7kHlp
MqcySsGz43foUHH1mr3e2r/Dxo95yCh8y4BiP195xRHj9XqvIAhCYzV33Qsf
KP68GkVn+h+1n/I3oWGX+aS9ps6ToaUBuCmb9ebs+GOoFe4Q6n/d/xGR/Xhk
7WYYfRyHvkM62WISWfEIRtBsJTFSPOvInXI+AkaI88rs+BV1yFdZ+zw6bglT
s1rqJRffeAQ2vPiR1izcsvjk1AQfaDA86v5M/RR7mpzgLD6p+cEeJK+NHBjq
6bhxE1V/wgh3f3cAp9GToha9l17xy4OVvCv51PZ1/swSthFrkmi71XO8FRgq
feLV+93Xiyag+xQm+V7zrEFdJrjP43Uc6e+FZnJ0mBF2nr2v19zuer1lVjx6
Kw6Ba/awv9IrdRw4J5Yb6eqM1eepYA56MJJ01bcJw8eMZAWhvwrPZhymwgOs
tz0U3ptoSCjtIUk9rYcz0pTw/Yy4+x39vfjexisRMDN9qPitWXm/lqDb7PXt
SZsz/qdKnsrHDNak63a3yBhdHVcs8wmX/Z/1fcHi6QJfEWVtXL09fL3ELf9t
TFvxO1cGZPGklVrxFTGZJ/a63NO+cZh9+EZ900heVZz8xgxGcqVT3HHodqkF
DOJz/H5/x/HB1D9kv4pD7UMsvLoOtQ68zQj3gIiF8VjHzWjtgzMGxqPivui8
opwQSk9J3JLEW4ulT+erL7OSEIxBzlZ+soBGyJCxAR4mzHVdVBufvMhcFXpf
O2xdTxRhob9K5038iAEShNPtY+24EaQBjsyj8MD2BGCDTzHB/G7r/DCDBWpT
Ucq0gnzjZ1SKKTZ5pvPbD5F9RvWViKhvfOvfa2LvKwimCA9+45g3T+Q2Ivbc
5xNXErA1eMNZvk7aU1rQmzxCkVT5GH5RFJYMsPan+nUA8Pr+B/h4tLnr+aZv
HGG7/TWsrXiyvyv4WDyb/v0MnPiIu9VdfaERa2TlNkGxTGO+8Rkbtftlez6F
qxmhFsX+FL5y1nxthK9kMovIDFzTcdKLuDvn+67W+YD26MUbvoBL1H0mEMuQ
Nm3jzy2p33+2Co1bO5WBd623FoCZm7OlUu/3Uy/HvP6Mc2rXccl1iYsrxAIK
qDhlHdgr89ie31GQp5AErJil8fjFNWE0x+BPn8qvYE+oGN4hfpy9zieq23K8
3pxnx1OCUcBCoj/7e9HPuux/QQ6O/q419+80FIhb9n4kh4zfd8hzRo0Vlxwg
Vc/oYVd+ywDV4kY1cWU/rLiUCaM66Lt+vhC0+oxH8ue7cBTjNTKkMB+nz64j
JAcUyDRueCZW/mY29/mXo6BjvlHrPGO8maYyuNYnnd8rbpZFtIHgSM8XBmRD
eigwpKildZ5oDnpbcSIapf8c8q9MWC91Mw2o6yWaryO6Z+Xo/ZRG1rzTEZHf
1byAcYSW0IXIGau3u+Kk1GETgisvXud4XUXDxvyUKZ894/tcyJwbHEJdwDpX
/pnkgKhYHLBH+QjAopyBsJo/eBnr/pgK32AiqgOFWMXRCj7bjW9+b7xfdJkJ
VINR6Jn2/b/CetwIXtgAah3AR+K0c0gOpZtbxwGdqLVoHJdvO58PU159Sglr
rzNnXGnd7Y2RRvEuMXbJexwjzLk5fn9XmXLEW2vGbbjjBtTQjaaqNe9jz0Td
0lCXflXpQDLOwxNjP4vcU3r+Fhi9FU9zBG/yi0+AKfuyW/Xv9/G5Diz4ah8W
svR7eAiR1dlKt2pEoJzPAoD96QZ+49ompkdebMPy+r0lJyo0M145lYdEQDBq
FSPNs1qvkP3liLH3NtvruKTE20z86e78jRDYGQmdz64q7ajfZ/aU8R6K3N7r
g7eG3vLnjYBH679Lysd8gvGWJLfO8wkHKNCpx0yuj2MISHt4+2IxO/5ES3eP
L83T353yynAs8J/Z+w66zRPfOOIJe+nqi98pExyb1dKqeHivu/mAoVzlV6zR
g8e4Ui9Xn5MtgJ5XMEafpbr8RF4pN7TLR3PO0L7iQToQuTRf3iq/Qrz3J8iW
4xBWnQLDxZgk+rv6Fd/rpQwJ36nXeK7m0YjHqImShO+p+j/XkS625itDgtK1
Fg+w8U7Kx/Kv4jC8dNAU6pgWHSd7AGCIr9fryRWjtS2afeFT9vG/Fd9KAdXf
L+JutPow8ShAfN9npmgGCXA0TxyuOh5mPVp18pqO70GO0CewclTei4BH5k5D
TA1fdeUV34eAUWMVtPVx8iESTYWnKj/3xO9Yr5mgbsWXieV7nM9jF+GYHbdV
m72PUCSOjhMwvWP6DRFe8Qz9V6CJOAi13wWF5pJ2a8zq9x8hBPuB29Y0Et1/
8WUjH+Y/s/z1xG1sxHsMQAsPbxWTOoSBRG+h3+dUljYY0npkozquu/nSktav
z3ZhjNLXYAMFpPOLE06wmml/11zeXR9hMJkBaN53XBVFWzmt+sLhDADubYtK
z3gywet4vFb2lNjtMwXwecPbkNu0iPffDbw3PDhs0t7HIeg05vT+qZpXv4Kw
39sEYq96/L4vTI1YKy2WB73PXumoA1+gofZ8XCP0PIM/1KdsfdERrwYgZSjT
IEQqjt4UZNl+Rqmw4lG1fpJ1W77rPlAxxtL32Am+13mu1yrdigukuer+RAnQ
bCCsqt/9QSKNaTYNrc/96N8/3CufaHbgwR2/ONz4jMndb65hBCehOaJRx7nk
G4+zj0mETu3sfhHxJfeTck5I76vjcKRYsQ8IfK/nUMOGWlvMJ2v+i+MQHCHB
SQop1WeAm0GwIOsp16/na1B06IH6C8rTq+Jh1Ue8ll51fadkWLQgV7waCC1V
PHUXNyyrYvf/1SCES9/a9CmcBi+YE0sJfmrHg98rDrQNwmEAxOyw49wUjRTt
VKPuj3kDjqg1OxPi+v0RJrqJMcRG1480NjJuTpl7FQ+UVGQeb2x3719epwCz
EMuCVHJf3NQIVtxXsYfo+NRz91PbLOMD9WZ9X7T9JV1PdLQ++XnHr4w7M0qJ
XWLFzRh5cO7RZFz9e4usphAvh19/T+Jin4V+PkgT1e9xfCDjziej4HpvI72k
cfMkxd5r/pIFFDBzyxC2fCpHRK2j0PXi7Oq7dsFrT678SQjW7PfBBd8BbPKH
PX6/v2JsErJUJkMVD1gCvGIPzXJ1XJ8RvE9bYs6O32zXcMJ1NkflP3E3Z+wh
8cK9+sXZAewB+mTCXXHj4hHmNfGCUfeBR5XLXwrjs/QoqHLSJdZ9iAfKUfcf
zeHzFxFrCbhU/ZKp480dQyJHhrvjDI60xHn69NzWbARQWA96ouVfv/gdgguJ
pM/HV8cJL32kV7tHo7/i1OUihX2E2dm/t8AEWJ/pZO1fPk1MNEJazKn6/n/V
m3g5w+TX/DEZKRLDqaBaxWM1g6JkbPaIHDmqbxA3pCjw84BdpaMYbnV2pM8p
7fFj+cYJUW+vM7xsp/KlGfYR7boVwESt23OPYwabQV277uOxz9A4o5ieJ/m9
D3GPGEBcg7zHU/d/6nbrHO8xPy3+znidKyOCvYWp0sfJ8CPQPYCuyvOtbGS4
HjUoM7+n49SosbTc8PJ5JxyNSsYQ4J2U1nVddke0lbQLSxfLu6EbQlcpr0nl
nxo25LAYVwP49v1UMViLHXH89ilfIAMhmq3b0z6qYFEsbqE6zmAFR8dvXyel
oDSa6/j6WmcMvKNOUHlXlG+VgZaCsfVcewIuhVysKUJ7t+LzFROwbhBsrOeO
Tkh2SGbE7OvqOFCTRBakq/DP6dbZpjz2OyOIioMiOBPtcIP2ioMqfqrWJ9Xf
c/Xv5QM+JNymrXERzFl8pncsS/bf/Y+AaPLwI7Onp+PJyg3YeCtUfkutCXEK
THYPsuQb/6wndj9bA8p81Zuq4hlfKq/pKl1cW6V2hFmQYVn3qTRnzOqkTd6S
p+NJNKB+7enlH2QSA5qA3Yoidvb7EGHrI+UsLmftF4EY6IbTCZA71n1g3gZw
irbk/q+On3SfFTBw8dvv9xpRCGOEga5eHx75RByTJKWl6wKGGjPET3F0gcRW
PqPK8SUhL7Opq/fN/7ztgrQzpYcdl7U/4eRot1Qea/c9M0rX3NCwqngGS9Hn
3Ag9f88fme7iERsEHJWsig/gqBHcGfWvOg7NYMhfIxAYtTp/n1EoiDe4auMH
2NbsSS4CTOz+JMmktCGXJ3oWvlQxf8Ba8RnW16n1E9bPzo+i86Sn0XHfukIu
dst1/2GlKOrcNDC0l/rvQtqqP8ebuffxg/TcX1OIs/D84uEayeD0+Wve7Swn
LOGjPtoaD0OZSC+cUXKav/W8TkRNYiMjCl81VzJbMI0x+Y35fJ1PHOzppDk8
vEzFWTasaPxYaI4+zqSOGt1a6XDtXya2qcw+r8kIl6TjnGf42aI5naOPn+r/
zHwWabvupywN1sYWDxuwdZxlNvxaNDFqv8CdBF2YViyajBUfAc5/EmGtyqt4
9COY1ijwUbxbRx9fxyL0pgmP2ngYawtUUJpJmV1VfIWS8KxXF6vWYbT6QA00
UxmDjY6TDeHlohS+av2nZed9Zt5ETKWfy2f9x8yLiarZ6i8OP3cjDHhH+/2E
PxyBCxiEl38x8xr5B4zXERfLp+NaeVbCkcFKfV8hqao/pSdn+X9F1vsJfmhl
ulR9DCKBEyGYXhqeacVXhvoUr0MWrP3os8yfUWSPwObxL/5Z6haS+x5+xujj
BBFpjm8fPPr+Y0fxDpHrmCp/j7MIeZ9hw0Vbv86fHkSUM/E3P4+41gcEpoNY
LjlYnnl9HCyIm2IxB6rSOZfGpttq3B4N4f792l8PFSSju/gmFAXvOBQBq+YC
vnF2kdS+ZByyzToOnZQtCRZdwdJlHWmZ3DoVkXPqfGMFWBDG7adCnt1fpXe8
x/xnIlWXPxcxSu1qAKI721Id58gi/Lpr//R/RtBRe3rACpvr93s2XwalGq0K
w4oH7wSoSOugv6/o1hl83hmvlf871ORcYelaTPbyDxpgBQgVM1QjyMuOHzFF
jcH32XMTe0cQiBAQZl1Xx/1t1XgcBEf/PkpKWyDFUu7zF7+j0nIkp+33R8WR
JHzPDln1r1EzAv/x0rdKbwrgwat1hzYzf/M+HS4QFr457y3tuDaGmtk87lm/
36dp4yxZTNR6YoQTslH0CchQVpx/AN3R+FkU74ZQ00MK/5Pj3CmF6z6Y44K9
6ebBpNV1zTT17DO20P3q3xvI+7Ioys3uV69o0ejjbPFv7N9n54rRY3gH/RyB
Yt/mlslN53uo6ZsSdAZ6vfd9Xhl88WebofPW37UWwuxv26sQV98LY5jhVY84
fM/3IRVpRb9p+lG6bRSOsNCp/Z5HkH0dj4gHXNWMNHfFaVldUWvaKK7Wcwfv
hbCLZsnT+K6IX3njvv/Z+/ioK2oLU6sffliQbc2TFO4s/ixXCRn+FQLkoi5b
cTI/I5T2GS5wxyHQH8qZkev7fhdPqtiwHW6tyMoTmDV+UtgYtBueV77xbDlU
HKs/V93zmqDgLc5KMzXX93q5GSF2AokwkT46fkYQPAADFM+947hAhnjp11Xe
rqTRGyX6ZZ9/+jjxLF1RyUMU2Sp+x8/vPEIk3FYfx+bnbK7sGrWOPXukjY9o
Rsb69RsnECwvIZEW46SK25ePLXQcb0SdjwnjlmnsFopiHwe/SCIOgkJDrOKS
DF143L6nv5cnGolkOzK0LT9l1Jq86Oi7iortFwfIYvYXQc6q08OUcaN59FFa
qr97poNxRVUAcr/uzxVv27wVFyxax+G69GjxY1qX8hPnR2XNeNfn6jfqJIRb
hnHCdqOer6fxqgwbxx21b6ofkKggMDOKqt9DygeYQGi3/YLFU/1qulJo+MUv
4GHzJvPze/3iUx6mFxIGVd2fdBA/f4Hv5L397o+KyrbiH5kN13OU6UTqnzPc
XT71BD/s95iwJHm7vgDOu2IafCuRu++hmuXu4Bbs168P8PJK6Lf7iFfpfY34
SEWz/gA77jkgd4TIye9xVS/ekL844hu0SOmAUlScdHw8UqigX0//PqNHQzN2
cL/7z9ApuEdEx6vnzk84cYwKqNacnVerKdLyhabV1ajrRZXXRYVbCaC54ucW
qimZeUlSXRf8XhCwstWr5x0PPwmeTkdYcrP6bE/YdyNWCrDl3/VWJxeiBtoj
I4jvfirLMNj3EgL0FA4kWDXydGkNLfvzN24dwzi+edi0H5MU2GuZ/vwTyeiK
HzGopi2B//LNJ8nwUGlKu9ow9ay/e2zxZcgAPpr8FY8sZ5g7xpt3/d0DmPDI
fANF4qnjH2/iSXL/CRu14oTupIGYsrDlFUfLtcYQpm4eFnPQLV4Oh62p8TYz
qQfghhahb6Tup0a+28sCTYe7zkfpQOLTJJmgc/8+0xrV6+fvPjWfnfFQZiQ5
XwjcUcchlKntRpJMPr91/CZgEQK8FafOH/1oj5uXum3v6yJZQarbYmiovHc8
6d6dsnsv/CfZZ5gGIy7U8nl3/M477cuwsBz1vPDE1Ym6skyxKq7XAb9BfYBR
Yp3PiBbpeBX999LNAO0FlNCunRmf1PWi0GNPr0iGlw7YjGa23uKdp184VXFD
Q4Rzo9Gn7+fEdZZdPCOPpn4f/S7NNFIe993nY87NUsGoO7zbihtsjiiHSWW/
68kMp8M8CQ+F1nbdB2Uad87xaoOO+rtMn9Mg/LwA0Ubo+JNRVGAWc/Z7yIUs
KpY++VX1VChHBtFH2Nfj6viTugKaFvG49KnEFXvjNfbbS/9BwwQ/3ZiClczW
3yn+mja8WpTNwPd6SUHMJxoBnxvrkXVciUK6Ti5ben3uy52Kz5CUz2MfJxYA
TFrPmNFuFc9oyT/eg69ZHU+nwcMkEz7798BwaAFbGGO1/phUAgJI6/GwVh1H
AxJdDsTnuYpfIy6DfcvQaxYO5BMHsbsBPQMuu4+OYzOC6aRBU+uhGTXtEt3M
68dTnpGoDhd6Jpf+1qehtB13oE2YAbO+rz2ACKSfgy5o4am4gBCjPlX7dLC+
88QZoBPGW9z09tL/ofC7peLYY/RcfGEYTNaWkGOENbbVv18vDjtY3dadFk+j
/YzNwl58DTMHA2TXtSNFzdFxAHY9SuC3u58jP4/gXXGMjtXnc6XPYjabQXut
n3v2XlM/ucOoOfuMOC2d/Khdn5VXzxC/OK2sNArPfm/jnxKxhbgk13e333HR
lO/oFaxaBzC3n/iNStWu0c8Xj+zMLGQnD1nfKYm7cBTAQOn2bx2/0yHcsrQe
9d3FJe+z79h7ZoQgv/EFvkoP7c7v+7uQFV2xTyH3fPbz0niWF4ayavLZcWSN
l9oHAVnPcVHoNI1zsLvm7/rFQcplVUTX77+LxavLv62IDtTx34aHVvgRqbS6
D0+KQ1L2Oho1HzE406V7InGWtmbFLdfeHGBwaqIVT1pr9Em6pvRdU9kNcgpQ
j97JPo4UBM07DlXn2DvOVxiiMzpRdV2xZb8idm7QW31mccwhwCutzvvbV+Tk
Z3RyR8bO1G6vuL37oGODZFr16UQQD8BOm3s1/4s4M2MZOJYtHvcVjzbMkfz3
1f/o+IonAPwCQMZRcWxGTkCc0O7S24Gf0xW70sofW78/+oDXS1jivdr7I0eJ
DWJww6pqP47E+W7ELZXreB1HnsABhtxCzKgqHqiEkWX6UvUciViumHGtEb3z
o+NKaPKFtsJrOzv+WRlsbmf0cvr4RCJSI/ms2w9oUsd+ESg6xLN8vVHm8Ax9
BtKH0qURP/HxoPRgOPt9iIkRLiAw6rz6uduaTs3sM/ly7Re4AFjBMHDEL/p9
8C2iruiSrO7Pf+JJSsAZVNOj7/M0NueVkrZy5z+AOfoa3xlG6efPF7dP8NI9
fYpHDGQQcUifEApI7V8kw1DtdtcA2FnnY5pIGfEIM7b3nYDBFs8HCibqyIpb
+XHNNe1bryzWpFukC3dwn6ePrwFGzgHOEAmhzmcFRhfXRSvEvDtuluj2oxSU
7q6Gw5k+Uaw2t63jaZtEZYvewLU6TmUZlQB6p/Go3DNmbr1pPaJXnc+DDchz
43li+1bP0bsf7EmYc+VTELPJK+CUjY1x+UNFuQCtAfkvNKyO6wMchHST7z8d
h9lH2AsGtHhb4Aa2d1/jxb3lW7+LA2qHAy1Tq/oIDCk2g8yP7GT1+7hu4Mie
L8xq/osfMVtGk675e2A8pGjx2uJtsVU8lpFw4Jn9P338iBHgT9kqq5/JLHYG
9096Se1W58nbAYE28nOeXcUplMTG9ZOjNe4iZJ84FsayfJa+n7jNl03iikxd
HUfyponhT1PVu35xtERkSc/h6t+n2aeAfF6n3IoDykUkwxf/1P6IIBWPuNdu
7bp/8cOb6Zs+9LbOjgfiA7QMaNXnL6XYX4G2J1zyip+xbR/m3mHcVtwQzT+y
XG6dJ788haQL3x2g4gZcyYfjy7f3cfKKEtGkvrT6fVCAZn0DVDqe3/FtsxS/
DJmv8bsPZkQatYAdZ/nJQll9NhdQN6hFmeY3ji3/RNyPjGjNVadWzRknB4Oe
xr3P9AIdJiSw2fUp3H+c3mEcdbnqOBQyQtKFOztLZ34m295iT2HAtCo/BJCM
EQ5G5d1+solDx3A9i4NCXa9ma5qR1oH2W0cbfORPR4zDrtKx55qClQd7+/lY
m9+HtaVlr8qgCbD39eJncQWwiLKSqOP4UoyPP8tYVGHPf3HzKug4vb46f6Sj
KNJpZIzCsYhT3QWAhrpZffyF5m8pRD1Zxev0hhuDnjEBONfvfYu4Q3y6SYJv
/d0pkynEXhEcLvwSqcihyopWAlxPXa8MMPkPgsRVfDG1S3ofyU0JTXc8AiSw
OXfK47oPMGZwG1us3ra+3ueJ15rhiXlO5XUUnSJguWPOXaXLMTP0iSr9FXvL
yltU8jR3OHxpktb3EiqzeTCKPV5+H3/BtVASyzv9i5MYQNWB6N+KlzotgZNt
GSeW33wc6MfGvMVf2/rTcaCm6H7oTzz3Ly4Ric6izLvPn9fc/kpwLICZveJ3
/FBB69Me6uNwV/YMwcm383ccuL4LuZvxYfF5X2f2aAHDVp6l5wz5HElM9NrY
URwVV1fGy83QsHj6es4kfpB41JVX7YPo+eB+Zl1HpgYdN9c3R3UZW9/nOKZ5
v9NxLl4qoOXSgqFTsYGY1fmocmf8o6Fu7lonlYgvhFHBP7Y+T3XrFUAK2ErX
NaEUAppTHLzO1ccxjOFYmP79r+5WM0kZz+A6SXVVnFSC3gmNgX3v9+HzuS/v
1asGUDxQmE9PI0prSES1/hCWlmbMr9HzqudiHjliWHeMn79YumMWgTtsCq9S
xTFpmJsgMd2loyX+QvGf6OKWDkAwh8BvuwmHtnfHoxap7RRnnaOuF/DrVZSf
8WWq8wnMWXN4WFb2vt7Pa6O2H0HuX6V7MyNkPNknSvNX+YHOKz4lWnsEX7bO
Pwn+3tl59gj99Pt5xxyXQBJr0b36KlQ4TWDRzkjR9HdEk5PQPjf56ykdgBmW
qiH1xslqlp+IcQ/2dfpRt2qizhOH3dQpvhtn+QrNzH5xiY4MyLpPDodH/5pC
Mo2VyisImxJqISu/B91XcT0PKosw9L9+KSiEB3nG23aVvoq4aYSuROCKe90H
ShpXtHWoHhx932Jy6YPD9B1X3zfrY15EhJrmdzMqNwKACxojCmsdB4BF8Nj/
zYWnvn+oCHd4A7PvzxMEYCbdk1pD3Qe9yf3V0GSQ8PR5kuV2Z2hd770ueepq
eGZBn8S366/XtjJwImJKvU9h6MtRJAa0E3+/B2vHW/wUlVj7/fs098gkxfvz
i4sj7iHzGuFMk39YFVemxJKPKug4+/dRylV9jxRce8Upy5riZbnt/md8T9iD
YwmZqDy/+BlXrDUyQKnz1J1B5wrPvXU2SG6QUbTYYh8ctT4MA3Oi0CS3tqd8
1cXv6MuNt16sPmSIuFtaT1eaVvV7poxsFLbszJ33gnW4qgg8rr34p+JGqivk
ZaP/uv8m5kbO4w60pN4rtqIR71KvXK3vFBWqGSPnDTl7Pn38afAlEDH4WpdA
0xCf0pAnala/N34yhp1xe599//Ut8Y6gubJAVHyGab2b80jMno4/rxvu9aY8
dXyf582OXVbcvnvcpO5XD8WrzmCm4yviEhHt2Aqvy3MHpQ7cID41tW+ihKYt
ZGKPGTU7rsg3KXLZvW+GIaVQISIC8lznOfkYziBK+FtufRzPWqkgLULMrHgc
mbVjTdiKZ4drQy2CisEVTZOt40Q97AhjBORScXo4mjl0bO5eJ0coASMUP5Pw
ypcAy/Sb3CTkzH7umQtHTBdloPSl9bm2V1glhehRfachdSBOlV7LtvV3Gr1Z
S4nHM4qHpT24onkcP+1ROAoeU7T1YdZeOb1/caN9QDXsoL6fcg8A3+cKqqTf
/4dek2LLl7n3HEqpREbbzTYArf6AFqOqdwVUPHruCWzNQtUaeaffXHFmz49b
vRue97oXhyzwTCT3vXheEH57SHjhH1zd558R4joi/OER1b7spYoErvRai/Hu
uLJCbhGxitrfzbbgnPLCnFvp84tLPxTZn5V+L79acU0Phs2vo0wdPxrLkXNi
0Fk8o5lxQUxVaFSA8lZc8nCFQXKP6/d3I3rJBidffvm/R75eRXi+oNmj1kmN
Y6ga1A8ou1rPZ0AP7guHydaD5TZwRP7NqQLw1Hker354RJWAmju+XhF+9jPs
5vo43jL7S8TnCzfIjlDWpWcEd1O+ABPbbZf8ShYYx9b5h5ke8g4D9c5zYLJe
RB85xb3nMgo8Tz1G1Bzk6u8aucUIh9nOLL6eeODMW7o2Z+knT5nz8VqgxYS2
1oEZ2rI+KmXlq/gaM9LIk0cB/hGlwoq/qjPqCSPQWp9nxtH8uqLE87sPsljK
xBS7oztScVKZXmbg9K1w7LHJHiOty89VmDpWXJv3CRD8Dvu24lrAR9rMbHhr
f5k63N6nEQ+bno+gAGKlnAy23e6Oj0wrR5z2rp4L+MNHsObe3q3nVqgnJGvw
qv/p2c5sC4b2+VgtNBWfIdzGGBjvpK4XRwReZRiLrc43SM6TBIeMIB/Y79sd
wb8brErGtGbHgeoIHhDR7b59+DhPxkHAj2evA4H8xhlnGab2ewI+Rw9RT2Rz
ThW/QnXMP4DS7N9HkvEkKYYx2OuYsQUpMKbWyset48YNOjMz7/nv93Gdtf1+
6uau69mA0/a+XlnEu/ZB4gMB1o3Xnr3menO9chfQud6U6qvIS+DNIsZDO6Pu
A/qtwpIBCpnaOk60yOB5ArUtn9xXxFYuE8PFWX5zkVq8MiiIS0XjTO5gR7dY
AsfpZ1Tc2iIBGtGt/P2emy5PqTNIqN/xr+ivBSfONKiPA5MScbOMNysfII6E
s7iOWKWV/m1oXnGAZQUKnXt0/LO28Gww17JiVlzdBah0SmfureNe5thnvo6q
dRzMRNM4lar9cOs42TGVkR73XvvLbVrmdc7o4SzcOPj3rml8ZA9vvXQm1KBs
0a/T/6/18I4ZAYVXJIbzd5/jm2PyQ/Og+fuRq8XNM2q5Zvul+let8hrwDlL+
LDy2jGXhoyIFWXkRKZpDuRCvtVE+Jj7TXc23pUUPS1xxSp+fbOl28+fveemf
eIlMdO5/f9f1X0wFX0Xm/rvWKUpCfJnMFfs4ZGSe9L1D66znAkP4RNLlhnbq
5xXHG3OKpewp/+hJn27f05NVix79HBWi119T95UtNw4DAXRLEpXI/W/MfUsP
kD/mjA/cVqsVSIQKWpHWGHnNX9xyqhGuIh2j+ESBH3uy9oC1Wz9QewFvF0Y7
Y9d679jRqo9s8XumuB2PztgRUaOj+GjiclIVFj7scX7HebcAJG7gsrq/IAUe
QZyi7ZubRCLXgvFY4s7Gubk6NOb9/451W8WlHNyWNXvbD1f8iaIeTS5D37rv
FiAkJLoyBD3ujgNSW4GPGNnXcXBkvHQRMji2vi8PYh+DyYhyF4/mjn4cFyHZ
PiGC2XHSutpDIIJPvy+/p1IHOra6nx6+Puye3CUVEdDMXxzwWlIXbxxU+o4r
zgPrCHOlrtsKBWaEF3Yg2lTc4hMGDSWp3nfsifCCdCV/G9Ks9xfLbssoOdl/
19FzS4OQDyOlht7HgR4w9XUgXupzxZV1M10t+PS6PjxksUzN4UPbq+8F1Nje
9uSDwvnFIQHA6PicNF7ULMZMBUA9IsJPx5/Alu7r1cncK36t1+TXlXiKF3+/
4tq/NwnxnsvS0XE67Ozb6So1XjSa36kygj+8vvMxH0xX0FPazwkqo7frt5qA
OZcfFgBUGuoSWQS/msfRbkUeR34dgdxUXF4EGkHW0Uin4kZLk8yht77noWws
DOePMBg4nP3FzwDFsjBRV6u8hUjvjNRXmn9jddyzpzRGcz0b5zk5mzFnUWSZ
79X5aOTJPu+Y236/K0rql15SOMbbFyeOTPH4bVF2PBa5xCSBY3uOibwZm6bg
zc7i8YkjEKDzbi/Qp+Jx6Abu5eB4fOcz71e8/UhTv/LGmDByE8ADA72p3xth
gkj579Aytf7PIPiQ7AJYLB0AcVcuXjt3XoOKG9mqXMI73v+Lz7C+75j6Nb5l
vtoAIxoQyVgrzkc7mmJq9e2/OMyNbHOFsnF98Ui85cVexYMQNeuwtysC7r7v
AdrAtEVlfvZzayaz4gRNfqL3Cz5YGsFbnCQkSX/xFUG13/OGcL2X3lHIbxS0
QlRnvFfHscQamj1hLM0+PulrS7f+VewbKx49rzuic1EjqzhNIPlWhvhn7SN6
A/geGBn+vtaljH7Zn1LN1Rt6Km4T1Xcer+zm3XGiNHvEJ81h9oqrFCErdZpR
ySqOO2uw8NrdPH2cRU98hVOVSusvPkIVu5MI6rfMjg8AzKzNnB6Ojl/Jo2ZY
Pd1XJw+5RRc9ZfPR30scMAQYuvXtTw1LqHfutVH9la6IngxNxj14m9/qWnlR
2O30fRRP14cnYe2gHRc+7G+LWX0cfCQtggAvuv+52IOADFqzIBJGxYldL/Pl
ELK+eBzFoW2IdDb+hFSilUC6N5/WP7lZ4KA2PFhXEcvpOEwfnVF89tIxvqNf
GVEZBp1n6fmY9usPWGp8+1nrp8TNcBIKArm81kOVQiig2jn56RWf5KfcfoK0
xftLI/kFyZyv7m6d//XqKQD/GjL0cxIF64iQTFO90Z8fhKtQX4/UFE/HnxSW
vmW7ild456ZGqg9mZJQOZGQMYtm2svKV3lc6R8QPJrmlp/W1br4wr988Wd9r
6zisB0sbT0kYDxUfhHy0UTIXqPXK0HmLNypvDFq6f3GbMZozhiI7vo7TJ6HC
fAdDWPOUNV++G0yEd7b6gSsuebSM+bav8l0Sl+HG4AFfrZ8T2snwf3cAQN2P
XRKR6UTOqCvM/l7gkD2ZoYxg9Pdyg1+x9maK0++jLkmE2DbWXt0fg5jS98Ay
NU7p+0hLgY8m6bfjm4ODJIPmGEJSxOnnEDwNNAU8R6ZS1x9jwkYdmw1Wbomb
jUAQIGts0ZTfOo5CcLz6WnutD+QrWDDOqCqQ8T467kwnLcMtpmEVT34+g7nX
9KrPDwCyQPKQImufeoifKAnwLU6i0XfFT7i4X1lLtrPn1HEdoTYHFqrI+9tP
03Kw4WDOEs5YW8cj5w/ROSD+rop7k1B6Y2E2xhe/Uze6CFv3f2zsu3LNWAu4
4KzzoQih1S45wnB6Og5GQqdRX+7q65+HgQgbglnziyNeY0mMj+rmVai45ldk
fV5xyrpudp1b7qK4X8XzItOX/qxJq5f5ruv5pq8AJRE+/uLo1JoG8eurfOOJ
bQGALAEH4rn1eyl84KhgzCJB1XXWpcI0V9iv/ezrnAk2LJ3sZKu8F7pdi03B
4dEtvmfgmmcEdYwfV+lW4R5FvzjCQGfjCR/SeCRSAXftv3+4U/ycUAjO9w1f
sz8fzB2M8OAs2udJb0GjTqMsbvAVB81FZ82vXlcfX0F4YIwG5vydz0QQgu1C
Gnq+82Fmp3NGfGuVzszDt4Wiu/d1xTnpL+5aUczLjHkr/J64GTJJhyc8x7rv
MS699r/Ku3zVk2h7DE1jdX7P+r3m6dqnpsgoLfV56V7WYvOf4+jnUxbFCsv2
Pkfl82gFMrjBaGHzxtf9gh560nlNPvu3j1PHMCzbUvOHGVBxRm5b5Jl9w/nF
46cTvc/FsKHi5i7L4jP8tr96MzM6LU0u6tvTftZ+kem1Mk4iXfn5A7f9hJh6
a/cc9ZyTRnrRUdTLz74vhNagdFdUPY+avxj5cw/d4icvKzwqTrZC9av1u2rf
eWKdSz6BkYEWcp1nkmyYbiX/Kj3tvzgFd9LNVJgqruEUfjcfp62eK2KCx7Xj
vypWSk/geVM9KBRD+dnrsxdLs4vOihbsX59KnGHpQY4tI7mz465zRvJP/Ls6
jgycBY6hc1+HdyrLWM67WXg/ckRv7wACTsJXcaMsFJqUHuO7jzpdp471biHu
51Z6bvIQkTF6P3fH5RsU0WQLle9RcAh33DAFhbOvpzjtV44TXH/rd4WYCxuK
gLaXv7PM0tVCfDWIGtcXxwwiqoG2d/X5PGoTrJMFctP7kaTwikvfFu3xvZ7/
F12nRNnvcGsrPoM89Tahej2j40CniOWaoueo+yhf0g9CRDzO7/gT3/N8L3Q4
yRUPcNVTtEXHoz+vrKbhJzeRM3T8BNM9zYDBPet8FKAwPWiiAXZUPKAUBgNP
OoN1HXSkDVLUH2Qh6ntTsMGY4xvt1UfSOr3CKNnoJM/SH3jYNduR6MogQG6j
4+v1ImN1cox+PrEmaNnucdEofdRoNWQzsR+u1sV6gukGX/Hte+O3o9hGTAn9
EYSgfpeyGjiLEogrUe+R+HSVIpy7f8dhvMSBCgLOb+w4NIPZaiS351++Stzt
eWfhWpFErSoemLmtGTKs9BxQIBQ6aW38bn/hdaXx8EUh2cus+3wonnEah3qX
mPXnk1LG3tMD398rkzxpJATsWv1SBL4VIJVWaZrQFY8g+quoZyx8fXFvhn7m
S3aqOLR1JFTSjr3qOihN4xT9GBGctZ4AJRBwvTLtPaufxvsybzvQFnzWVtfn
dw3s7SsCtSgzFX+ya+EeGXBX/hMfPhV/CE3GUhWXPnBKj3lZ6ec/YcVFIQra
DwG+4nmJPHWRfO779cp32ATyHqz6XSazEUqPdkbnw2SEHqKk+lgq2LovhA2M
egmmEeWdHV+wAE/kk4/Sp32S/LB6txrHwbrjzoa2Wnp09b54cQNbSoOx++qJ
Uyp9AADiSlzxM1ZxeRygO4+OG4bGO0cJ3PcrGyyvUyKCGjF/8aBcD4jjOGj2
cxUUFdAEYv9V/dI0RGGjXppK4x9UyKTV0vt/NV0r7uXHkZsgS0f/3oeQTJTZ
/LOj7/uvigLaIt02x3/rgAbug8tH7wsirOLQS9H2U3cWftimiQknz8Uj3vo9
iizhHXhOpIPres6Zke6Ke8VdfT9yd+bcK7VZ8AsV94x43bWKV+F5nlcwiUHX
Zo8vfyiSc9Klc3ubMHflJzScgW4IOEZu46k49YfIY6fCq/to+yA49WgWfXhF
Cly03g3gDVivveN0w+PeQnii9E/0/Q/KHC6c8vFvPotWA/TiPQZCrj5MkJ0A
BNLNTSPrqvhBrRAaiXFI+dFb+FMXhx1tDt/HYaZi9GgQqzPR8fQBaNIAzj31
e/egy/eQVDKH/OJIRcxL5Xz1vmfcGpeLGefPa//ikc3YrPRfXeAi6Dz/frFJ
y1b1LMHv6woZ5KVQ9/HveExFlMts4+44CudlZVZaVV4RMSNjFwvmQICsuB7O
iJMLqZan4x5L2gBHAGr9uxDJsuEcaTBVXhGxBipbLoZJ0dZxu4LK8g7AvY4P
Rn5nIWdLMPq+HHq5a49ZcETZK369NCia1twh6rodmQhEH8sCe3d8Ko3o8D3p
xdX1PwMGi5z92trn8fnrjUnRjiNCJBWfugJKwrXNr07U27siLUI8svG0ERzd
stgDpcvxKj40UU2nwi3dO85miBNOVADOyocPT4lUR1tubxw1xr43jswDaHDp
sYTJn3kfFW5to9lxPqR3THxkF3X8CCg7vDf2Lj2KJwBVYFEeF0DYdZ5RaJhR
RVRpjFofqIIhIoTU9ttA+/PmN4t/VNanq783jU8Il7R1+roZ9FqpEEpjYvkX
jxh47tcVgtn9xQ3l7ORHgHYVlzqQedviVTe+uFHjwg99XVoqfgc3cyZh+/Yd
pPgjs8Y9NrOVx8YsWPLlhYU92r94rFiPFGbH2fGQKd4+fRjnf3HQsCMW3Qra
wi0EEYuYMUMIWtf5xT3IK65DttY6f77jEpERc4M5+vMGckHwBpI9Z8fTkKW9
jYXR57kiRXUGlEirva7belXR05z2IvwdH33VQ87pGOCz6mIOExFjcaGxD56K
4yLcSNDP/HypIJP5o20YZBAntf4Hd04uC16Dd9t/cXkY0MIe/6KOG6YCptym
p/OLU0DhPIkLU3qVkIjS+997FI7o3uePQGAtJ7d/N45U/ByZacchu/CQ1LbW
CNwVT+Luvijq9cHF9lXx3lafj3LPPjipPBUe4EE6iweehxSCuM5HPkrpf8TF
p/PSMyCHi4AU1vpZ+7ViQSsnfOdAjit+xxbzxV/M8pERJ4DCXFV3+qm+Ir7V
BnoOCHHO7hOeQcbyJVHF/PLWOg6ZO3eZ3ZTts44Ts6V4WGmzPrUfvV0qi9gd
la6zPz+zg0XFJRlixWmaGiQ8MzJq9Xnd4S12PvGJ6PsYsjZvDDCEUXhsEuTx
gkMqRx99+jgHcu+pLXdFMrPjvyTgjHMmPaXVcVzOReuBz/XW509kUrUPikAn
4ei42h0kF+6xeGFPalbYONtCVHn/4sH/r8BVPc+Vv+ldaeigkyESV95yRlJE
cmhezI624qDtuP1IZqwzK/67XFrbdyR/C68lc1gpR9SimsgdB+Z77fhCV63n
AQoGNEdOLzmq7w1HVt8BcXQUryedMWxhfnrBotX1MUmG99CLzZTtL/7IS6mt
WiRaR0t8JnsjQDz+O85v518xxSC8q3Cq+BmkmdU1AMQ6f29FZkKBiHQecmYo
E4IZF8Dy5Xlinq03o98DMVTX0zaLzm49m40DYZYazdGwoA0cr45TU2O6BKh5
9+9S6af/rn9sMNfxlWEKuBU5hP58min6qIi3V/8uHMcRcucTWkN/Pj434fbx
O+v1OW5hdI3/5JzrONQ/wy8dkSepfRxPCt0TwcnOX/ltXIaCHFaN3+XPDv5G
lO2Jv5lu8Ky4TPV8VwLM47vjRuR+HCXLs9bzK7q+v4PDCULRr4rHbJgENl5Y
4bo1FFdsJTSWt9ZXxMSLd/Ud9DA7vIrHzGAEGgvienTcvF/jH0u0+x7yId7P
Cg+YpbovV7ZFxIAtKOeqB/GVcOU1j5+n8cY2C93xiORcR+MA423odXzv+ei+
Lq0g6BMsY5IGdV/IOmbb8QIAjt8dl5cwSdGUKL6k8ShKKR0wnuBXPW9EvnR7
dyd6tN8rdz6siDh73AF9VxwBYM9AkaZSrZOkLqAQLj2nMD8rboHAx4lQdc/7
pIUzHACofbtfxSFRD9rKXKm2ft4Y5TGQoNXife143CBSNNzJ4DsuiQp85ojU
fcdx/GJOQU613scUvTb+9Pqvwg+Is12IAE14H33+0kbd5CN8jaovrte4lUfi
FoHu0XHZB/PQ9dKWKq7fp5GkPDq6riFwb3WHak2jpz//W2bPcJaonM1+X0hJ
oTYQcDBeXh23lmHUwSsWjwYicQUvuKUmufs5mVvcBsi+GLRX/zanzEQP8Iuj
Tx0fIAjKZERUtfAe4uTopaxQm8XHfwJL3uNTQ6q5/HOfUM7OqAwTeur17Vpx
+wum5LeGFm75iTDuER2wIyisOn/iOU8wetpsd98vUAkiQBRo5lU4VZimQ5P8
iczBb6PZO66RyqaALUf5F9BqiriEAumSptX1B/bSQlU3p4h64+xX5G1yLKC8
ytujFa+juEL/7d+b1swC0ZbsNQ/xyQz3jpHvHa7p0XENV70tFVrPDW9pspEz
ukX8QzoeT1OzGSjW73uB2I6k+Pgl9RxqL0chwYwfIruPo0OFgPEm7rXvQ9Qp
9TEL9mCAKg5jC5dOyvcpP9a00g0klPbAnrVu3PFtPTJin5rFdT6IfTCdzj9m
VhVXqqVufe1gO84kO1qenErX6uPga6AkxKKo9EBMkQdHQqJYT1ixHdfLjoQ9
beijjzORguBk+BWWfqP52XZGi8gE0qbRcR1ryjQ7GETlpZhoxHJI7ujldvwI
QfeOb57UblX8yFT8d/g0Jvq+gPGTYZMMPk/xUJ4IoDzJtAngPH0dYqgeY3jJ
eK/PAJV7GII6iKN0V9gsQNxdccz24NVzeMaOOIiFOJfUfTxfvEd0zMZTfsQ0
uiLr6z4M3j11/Tm636/TyLxar1tcF1Of/tGB6+fKlm48tSLXWHjyzHvipRF6
37n1fQzxj/jJb4sxkDg6/ru5r46u0V7lddqGPHXcR4p3tb8YPxqWDZ1aL1rd
L8Q2ezLVS8V//a5k+DjQsrSn9HbA6ilwR2keAXX2cSIBB58wAj7q4yjztzA/
4hxW10ev60zLYsaSoo5vkg836Q0nprJ3/Ij2DQsDzdqOvxWqh5qWUz/nVmF8
7LhxyZQrHuuNWI6+xksVJ7sK8zuy1PdzxRcDZuFk5HOV7hNZCbDHX/4XCY7S
TwadgG7cY3evZKjvTZKk+7A0gs++nlO3RYtvi4lHr2MAqWHow7zvez8n0EYR
iY248urraWG4I0kUt4C+nnydGXzJaYz563fpICmbogr+lF82LVYEFUsEKHLp
D5BldktIe+kzlA4h0J1iJ6M37LWqHwPwchVMwrIBVJz9y37Fm81TML74WJE3
07Qo3yXx/Qyt9oahL32/Byo2eYXJWFRwKj6pXw+bNmR0vb/Rhx3cs0Kc6DxW
ikChxJ3XU6q8i88RR6Bl8UY77s/PCNBjkMXspD6vQSIP0w0g3FPXZ+jVmB+D
qT5Xn49h9ymhi2hA6WMkHolku/xvu+rfaxmxoMwMYYsv/LyzHvq/MvpvLi/L
wHzRyYZ+6+PbrQmNKWqPu/RVyN7Gk8dY7LLn1fGP+O0BVmP+9Rwcv2IFiKev
MBpvYw1L63gPe31Vf/g5Q3O8w7Pej+4ranBuM26hdOqKx4e4OXPXz+zAvV5J
/Y7g68BB7t6/0gyRFv12FgSxq7+XnoAK17T66n35LdhIMnmFEXAqniHiHkNA
a3R97x2Yz4j+FcpOx+Fmoyzuxf6uAzrPEZoTUunq88TAjmemaf7T+BMjtewv
8ai7S0fuiX6NxOtOFVQ8xNArzhgTToI/5cugjxZ1tIeW+f31z1HRXvyxEd/R
eabeGGSfzuv5+Xc8EdMG+FBL4aDW9US0WnE/IUndfTOmj9vSVwqSuvtaD3IU
aObIC9vzXD1C5juY36K1ruIo76EycoJU/VScI17cKKksNe6UGhOepO4xg4/a
B+nyU3KFboTm6fdFZQSewzj8fgo/LEWKi/welcPju1+L047lRD/tLF10PDFj
6pFmUoTc3zhof37XMNZlhFDx0Kn29Dujsdzxa3tdLmIVW+8vd4KZeagWxFl8
qEcbJBrwK3e/9ENYHEe3lw05ofKtzyck0xnNXJPn+rzKnUgeOxYyJ1fFdexM
WZxW6zGmxeIWx0UPn77Of3fvTgB8Kfpe+QOQ1oyxBgUKffqOZzCr6p/5qo5T
D0n5C1xe+5oOW3Z4QH22UfW9aFZTY/pPeaTOkythRLKN/e7i9URxwBMedRUG
XnU+44kAwQzX7v6OD7EPZQqE6R2r83n9hH6HsO+pSyqeLni4R2DOV39ehwM4
BGfx957Webrk1OtGCBVd35mgjFcQCip4VH0kztcNVC6Mnfo8Bi58beS6Rul2
5rULSOME+FjffT/xNHT9IGfP8iX5xQFXJWrEibFT/+JareR8qVmG8FDxGaQw
Vj+pqtmfp+5heTaF3boejFi8BDxaSt86Q5wwploauZqA1xd/stqzRT96voZR
ACu0BxXdPk1Pai+/lFvW9c2tJs6N8Bb9reIdiOv3+qX2z64v4iAJgED4ZbvK
X9ioP3uYST2lnMqv0gYwYNQryUznL578g6kTc8tRul7Er+M4gW73EFGr9cFg
LXCY3w0brZ9gVKLPxieUXUnxYSnJxtvqCjtvaxzmTApFEI5G+VdHh49hxgvV
LSf74miqV/rZjl/nuV6Yxit9LImseIhhMyrMltv+XurYdnGN3L18q2PmfacR
fGBJ9H1ZenX2PykrWv5RcUJiZxoTU79nVJwjXqBHWdDv/vyZ28X2LfJzq+NW
qissbnD+p+O4X95eoKTGdZClIc3kd2s9nf29d6ylqTazjdr6OIR1V5qdIzJ2
f/HAhQjxxPSs+zwLGTXNrmEo2vPulVpPl5PzmS5dx9HTyWPc3rtaT6CFVHd3
0GP76vP80621P1jj+roBLFIrNR3z41fH71cUKuCpxjstXf63JuF8W3qMTzTj
9XPvV0q/8qJgIY+wMpL8Vr7H0Eb1taLbOXoOuyJEi9+HBUpzteLRB1PWv5os
/fnYEV9hUlJBrzgeLPu8qKqSsOj4XOlSRaSldH2J8nufAbEh/buvZZUlwEPK
kJd67TtmZ0d4iDvnwO3q4/wRErzeZgD9eVA9Y/xfXk0DvM/HEu3SAJ1hk/zF
kVUIK0f6+O7+lW43oN+mvSIB2jp+GYDsRECxhK+ORxdrC7mHambF47TiXTn1
FkbHtbCN5Pbw5o8+jowpa+txpGaoeFrJBE+1EBpvHDXGEY4UJ5yr30d4d94U
NEpjBFvxSfdpS+/QoK5+Lyai1QzLghtSf97M1F5xcIn73kcIO3k7RQSZTV1P
naTXdXfGXn3rOC4TB1RMztKx9O5vkRvc84YcfT5Un6Q/IY8/3TdYmYzvYcxD
6vf7CE24Bet6xKu3zmfiiUcFRgI9+zk36o7WcAyTxt3H0WfAJjLAejp/XrHK
AF4KVPNeX3xGnDZChIAuFdeFR4CB4Dbs77j57h3pvEcDs+J39im0jSPS8RX3
a9I/OeRmf/3kGRHpkcEtQYH6XbHrXMneCUC3j4yLDCcW8W9G0Xd/nuwWG5Xf
gn+1b6PJ3xKS+F6htVc8LdwjG6px8VXxSZ08DGPNttnxFfQT+avwP+p8gsM+
ZIg63NV3et+hPQYYkUP4u7/I+yqq33qOPiQ5qDgHrfG6OYMt13kigeOjrtDF
y9/wF9/vtFuO/ZWvqO8d+mIkxtI2Pfp6SpRgjC7LzCp/Tw1CD+cZI7ytdUpT
LoREaCp5t1465BycIdD0jDxknT/85XrimKG10sf/PbK8BTJVRZ9dHSd8hvl6
W2T/nrdMXwijetuvGD1UPEgqyJ9ohR/9vdiQI5xmEut7x89MiWOrDuHYx48h
raUsmi1bn+eK4foYUWkp/MkM6Dn7SIZR+xcf0NBPpJmP1ucRDzcyeqIMa7aO
B5MdnWF/cf/FXwcSrSjclVqfVZ7UagxpsdSvvr+oLXAbPDOmNn3H5bwhNsS0
e//i73eaYV5Xv3e87aKEnObJ08+VXimsAUbftZWu7AzWQz4gvwY+qvPRZt6j
sKqBufd7NGPYMt+x51F9rcQzhfp9sbLymB2fcSLeX1nKuTq+4lV1Rtvr6utM
OpHCYagi7lDHU/UN7Vgoxf4867c9+pDbp2uUcpbcxODKQGGwnvPIIVP1vJCF
z74+UFYc3ZEl11X7vrgXDPWdrEXpcs9wz+N4c8L7l58m1fnfmgbb5cE7n75f
8fNGCp+kLJ65dVxSivREZbd8umnqxHaVQ40/9nq1ssSvQOFH404DhyDgpLEe
zcm/3wv8p1XCICfwxi9ucjijiLO1vy0VdbPQwwO0zPrPjksvyVu8jlWr4mgZ
QdF5h2t+Mfd4JD7BObNI+ttfxDWvLYRsHp6rj7NGlG3IuEeJoeO0DWYSyMD4
/uIRzWOMGgpq6YCppo6IvsPRxeet4rc8ZlcSolv95aUTIRWYXA9+iyJaxWmu
3CObqelknc+r12k/hYT7zp/SO6IAIcpUThV/Yl3nluwxkql4pnYr0hLEzvvz
BChDbb1ipzA6To8plwCo4arzCSAp3fBwSP/yRgh+eiBe3nQb/vJk8biCUCM9
gQXqfEiw0JdBthuNbxeH1bDvwVOVT8qMwQWArU0GOqKuw5X6R/KgPC2dE/HQ
PaRGULB9/mByUEQh4/+qvXp+mIIrrY/0evZ6r3mep2d/hz5Uc0Nx430uCxLp
0j2LTgGhCustsZ5Rv8uMSLuV+QAJh7rOtyHc76XeAFdW6eNFV9Hsi+8qytjo
z8sbN/wPq2LNcbBh2bAk4z0s53Xd6J/sMA5brM/3+ryhrOfKn6wTW8efwK/s
GYR26zkJlUVFFgOFre/LEzYRsyxaG9X/n6/m1ssUu4i79XFWav0z1SkG718c
XstmB7lJo7uOj+z8BGtrf7v7eqomMcgiC3oWLtTqj3VGrWKnZzhHxwndAZyh
jxS+ghXWE+cyellX6yQn/ppgyLqMRv/ikX0+InpwJp2tuJ6Z1+KObWQ/n0ga
0Hu4X+fo/SJEKyPStygvPeEMMwK6QelkiPjFjyhmBDB89bqE/xnw7AtA73UM
Z41q4AI+MVRZFc8eiF6zx6e3juNxAC794+vX/oKW8cTl/NlitfT3Xg8S7SC5
QFJP968SpwtPDsa2X+81RcoY0kA7Qyb15z3gdjYqSVvpr04rjxn/Fenyu+aS
kHLj9cHFKlx9Xyg7PdGl1f95SudnJmWQKcG5xfD9L36GFpfU91Tbnh0n7pRc
+4TieDq+MJlScxMNrd91QrFsUdM7qHfU+cDcYgqmazf6eaCwircFnp6qZO/4
Sm3NCOf3vFW+YRBBysrI2xrV1+cKPC2DHNOreg5Rg8JUxUg+2led+4idTlH7
KyhG6S8lPpQ1OizHVXMBcTyZK5ZGJjR9Pr/HSTnG2Xhp5v7FiYhK5ePk3H1F
ED9b2+BVoOde++aA9fM+YssCWI+OcwxElxopr+s6Z/6tYRnZ4+86QwYZCWnf
UJKt4xgUj0ikRWLor78dzUVzZS6cmRPWec4jAnJ7/A336j/M2GiE5Ku6fDr/
dGqqLhJq0xPZn6d8CJf5Gip93/t7ECSgNu2IUFacSsvCLVOwbP/FoeuoKRm6
9TrJnIhxyBGdpDH7+Yy3BbK73XArPJJV1oQWV/4mNFN1CkUeHJTfOWkTlO4o
ELuFw6r0y48wtCrOqy4gLHlK6XVM1tGWeMYieSX/rn9m01CzFlEa41vHkY42
jHLojr/5UfCmM5zCFQpd5f9Hirv9FRWEJq3v3bM1ay7pFpbOkjg/M7Tj+NFU
HZpUz+D6Mv9Uu1WchkoAvxtWauVXkNkRQ15hWtYcZ8YyMJ3OESWjPv9hkq/F
DJQHeFFxZgOmL/frCVfnP2KGCvYlZS7eBOLA85Z+M27Q9V7gi3kLpcMj6NeK
k26ICTBcf+kPUL0yoU33IypY9b2IO15KaD/T8q3jv0NBAcoPt71/F/M5EzBZ
O7PxikOhGfKwYNRqqvME5L28i9QFR/FEMm4y1JMVUUivPOeIyQWQBk0jzuIV
1zt9fe5A5Pp+UfoFw46K8l34jSkluZhTSNn1jM6Kj0hGIFjecVKvOLQNcGzs
ibp+pwhGqSlaV3COfXx1q/IU/eaXFdd1CD9ETa5/fhVPX1x7hmYPznjhlGDz
6Ev+0gtT9ubB0YnTxKM/oIsy+n187C6S0xV2Vu1fhwzLzAzlT8ehPk8P3+wN
HECGV+fJJNUtiIYfmYCKZ1JtrASYXX7NWLtsiEMatin9F38y9CBROFtn1SqJ
0/t7L9RYe9cdRygfBMv/bLrre8nb0hT2m/ZVc8w4UoS0FFzzUfh58mXUu7l6
QE6Ur9YrxgTOvYef2+skoVmzuDPacB7tih+BlCNUQqDXPhulaDDU+D9spf8J
y0DRJYCVCVTVx7/llPIp+jT9XBkfGAlZJt8l+i/urssottNM4q568NQcV/bR
sORn8n2eBg8MC45tzTsmyX/CylvcPIGtK46rHcgoRuJR79dppj+1vHeXr/tR
vy+1WaBugYKWzgNglERgRJDCGtXHn3EU0THWI6318AXCR1YfWObo8xnnK8wn
YcYSquPH9oI1VZygis9ro79eTfEr2gtVL5xBNJ3xurSbVl5xqtPuLPAmN8+q
6wmr8P62ePDVPnIGcCdZ0A45at7kjySYuYSz4SmdFolDgOa1ItZ++lu6nnQQ
mSW5ExUnA8JYdI0ItvZzCGSJaRrTga8/AKZIWBRBgJjoXZ+PQWUMo4KyqDxW
r47Z32uHNQoPHMMizbFJbNW+Ub8Lxz/NaiX7UXgD8RG4r8dcWVvnQ5t3t8gZ
kXz14/m6202bxYwmcsWZyy42jDPEwIorWU14tRuYIVwdxyUmv6uS6zzhDOwN
ctXFP46+noT1A2liwPB87wUaFGCo7I3OdF03+aXUeUQ97errDEi33m75EdPZ
ikdEGBbDnG2rPv+Z7kNoYMnT+3mIZ+t4pYVo8NXvCg/Ks34qr4s3rePm5Uf8
pZx6VZ/BrCzzY9AvSVV9XktCNhZg+lU6EsAqGl0293Rq+zx110a8xbjLnH09
WU3SA2WKd7evqLjkgV/GbyUe3QdAn1E9/JYTuP5R+0tUqGL9C8OL093xdOdZ
ggVHWtcn8rbJn2FCjr4vK4n7Gb4yY7y/4zBbh2kIbnxrPGcuzAuS0U3eyxcy
6oHarqDp+tPf59MbMLBBLHkqb1dNGgCetn9T6I4rRWORgtBevgbzNanh1soO
RK1acTNuimTXeNHXHb9iyYAgSgfr7rgRC4QhUnzpviqIkRBibUUlst7r+D3N
qJuRY+g6SO+NaWkw8lHJrjhNUDMDeO/z/uJPhg5MyUE3Kw+08htII8LQkqq+
4qvVxpSGEUj7xXMpc9thZM3COr+6Xga3Fr1yunhh4m6gjRqPtnBukbs00IZn
f2CV6vpIOGwW0jQDxT4+fbZ7Q24dUYL+i0cdzSUGF2gdD3FTBIbtM2bhd8ev
CDnfr8zi88VnrIx04mf7BnrJ03HRQcUoqn1HFwlTw5Td7rX6OG4xKpYJhDS9
45yFzmghk6es4+ui+Y8S8W/XrHXDqhcDrcOAb539ewMBh3m1sW41jxa3jGhK
wLd2fyZqNBesj23+7n7UZR7j93C729uHesbDdkdW8kXb3r8LMp+OP/zgNUu3
cEZxHbRFaylEkY47RZmhvvL3XGlqkPwdKYPPfl8iUZqdIg2a/l0mCdeVtyVM
7vpe1gIw5cpfCLCOw93t8b2y91c/ynK9B/1I/GZ9z6HesKsfZ+Z59/vlqbnz
AmkVl/6hOKkRpFh8zZ6LwXEyvXV3Viy5/+IuLvheRGjW9z7qf10RAWMnWD4y
5DdVIeSEfi9y82qnPdbzv3jacCqo75Xl6TPK4NOteuM35iYi6YJQv0uX2Ox1
4y/r0yqYyj/FAeejoai66eNc6RdnA6PTe1ZctbeZG4KSXt/nsURswNyKt77+
N3kDWz4kqfr673pmF4qu/YibY/W9o3kbS1QKRlfnLUavkxWrsYTnpL5XLs9r
cQbUvPf3msLt2Smwyst/J9pZqm3KqSuUhIqzUdVHfu0Qqr8dGz6MA41oD3Cd
D7VFJl8OSKS2v5cEYTQRITVKf2YGm4qavtOfXP2cxKdJiRE3CyPgjpvDcU3y
W87Z8eRikAY0DEtHAnD33F7XB3yowtG9onPE+uzuJgp1nU87828rP+6gYfu+
/BJH3TQ2G7rQ1c/k3zTiFWHgOIrH6oYauOoQPJE0rPuS+nBlwgu61vcXsoX4
g0UlOrh/cSAYtlxxKL+7D3nTvrMBn89rkVHXDTJhhXIwI5S9VfyXGgSA5Ym8
O2+/45n4kGU94q83O37EkgefjOjz0XGqPMRpyKX1HOQ1cLI34oA1z31ip8SU
bYdqU/FUnLJZTCugptcXRwqzjXAVPLrfqBdCRNPwQeHRvyvE8QVWbBCzVR4Y
1CevpBF3z72Pr/xR/zORnq3zKa69vW9mLRS+6r7MmF1yEwOu6PrrntlUdMnj
KPL08bE4EHX007ipVjyM1AtGA326j88D9CBpaL7wFC/AUSw/FDGRhopHb4C8
aVCq2CCb+3mwJsR/ms/nvX1x+STTN2Id99P3i+rhPDPzNuCsvl/Etw/uQeDS
V+lFiJsZBGFFqLDmes+r9ohWGAuSyhspMFxQf8kYRvfbTVtt7fRyJShPx2lT
hcWX2qbed7nzFYgD3sdderwTvex+whn6ncDT9bvm4wYIAHBmD+3Pqw+Dgb1f
54SKR90yUlFsAyrfJqyp08LT2qr1dNxI2sBG/nOWDyZRd2QN8u5UGkoncEZx
wusSAYLR9WmWd6Mp5Mdt3P17wf59B5Y1itbseFJEjYIVMem/OHmlWPau8LNq
H4d41M8CdiavVfvjK/y0AFkOz0ofn4FtFIk5GYzGpTzRXnZvZqbaR52nHiCU
hbHrMbofC3blFltp0pCq8zxzilESPkx1+zhMSmIufEc5ta5PKMor4H/vXvXV
NXvD8c1kGqCt4hLfV1LvoC1T34v2u7KkbunM9edZnh+vRZNFv57zO32SOxy/
+c2zpHR7SM3wJ7N8ezNIAYOkekAhuvrMRJOuK7Mp9MKr5umKzYOkYUQhfq/d
7LjXX3MSi6DxYOA/at0jdNbfQ7N1PI3yKFtortf3UhwZqXgYwRQPwnQ2w4KH
dBLcfv3e54VPL30wzYX6vRDuDDbw3sy86vlJvhpZH6ly6T+L63aj4MbM/O7z
x69RRENe//bDum4QNZAC5OkB4/eOg6Uxs4MtL346MPoRo7g9YgaNG8SVeKJU
DY2xRt/HbNYRuSJUcfT5QxuZVGhQoAiNjtNjt/nSfe38GXB2i/LljO9f1ekP
Q4JprQQeO+Z3HNRN5XEwOqWLaEQQHBWuAnBVvUeAfbygIWR1fCsv5fG0gj9Y
4EJP1RGAU/wr9VKzWdXnX6DGFtcA0JvZ8SMnY8fbG38r7rJdaW0cq/PPkPU0
pcHBeAhtFY8JR/Z+vYL+XSOpgH17xh9gr7jmqlbPC7+o9daAmd7UwIqxmfdx
VDq09qjrtH4y6Zz4qtjwAOSqP8CyjxvKuiPSs9U+Avyv6JcV6N7XPpsSHLUq
ZMan76NBwhYd1yPK8dU/Se/Zeqr/l+FGxbVIFB2/H6GjfVWcmxfsPNG1q/G0
M3aHuOu8yo7iDc1oHkLxzYBXS09mpgG0R/vnivJ3Hf/3QuzJwbGMvjxKQ0Rl
bytlKb513EDSxPZeQVrV77344xqCI6LsPa9R2OwcDNXZtKLqOt8ZpXhk5bKr
9hcJKJB82Hw8f/s4cHi34aE3pudu5AERyqnw7ZGv/YtreHuxYtg2e+4Asv2k
cY5J8uEV+T1HKv/GpLp7X8uDLj25Qpwu3appTAzat8eZeTv6+UdR0tOMUcjR
OBYsFj2PgI+up+s+Dn+RjQGg1RSr66wkiFrdzDNW9RFdNuL/r6fU6vx2xUrt
nn9awMWzRnRQS+3cNV4V4o6/vvJb3OhLh1YcoTTTU+Pt7TsOn4CNzt/YWgfP
nHVDyiGFjL1f66efawdHqKA+UXXBCsbb1Fgfu/Ux5EjRPNVnBUKpOl1Nx30k
wuYhJf/FiUwpx+i8wZjdFX90NoxUYRq2Ph+OVyD6FHNRFZ+Ke7hX6Ix78vG/
ODD0FoudeFv3dTv2aDps8XdDJaw4ERIdCf02xuIVfy3OvTe4ytUvNa20hP7y
zDOa7P297lc07WgE9xxnvSIqYTUTvOrfS/iPVA7ZEalQfe8ZvwrQ9j1A9DrP
M8bDJh6RPqt8Q1OL8csEJg0yoOKBsNJwX+PTo+NQSSSEkYa9rXjc4lQBonfk
/tb6ZvYid9/kPjzy6jwNt6Q4xi9mY/W7yJmMUOhvI/u+zkSy9hhhgR9u/fyb
6uAXP6/Ufa0n/nUEJYlbwsXV97L5Sv5h+nM3ztNuZON94MTC4Om48Hp7D3vj
WrV9yJeecQMhl1zxI24cHAaVCLWekAOlzm9hiULN03FCibriMtnGz68ojgRB
qUtfPuniwXtw1LFD9/mH132lKjYd7M/PJAmGCCAA8+rPczvX0HnhEqPjwDcW
aHyX1f3Ytf6Q2vh/3sw6T+U1dmU2Z/ZjHYc2oAYzeUXUuq2dFnZ3sGvNm56Y
Gpoh8enmC711PHs7o5eXW5S4pDHz08ejA/C6VxxmauxpNsaurOM6b/YFJJTq
J6/QVgJ+1kKc1b/CRbM+e3azYP29p+u9UyvKinH5qc9rSOykI9GWRuW3eKR0
Tvc4ydyoyX9xfXCuhewu4hNScem9BZj9UfsNLR18QuPgcrDr44v77mhDwJsc
9xdnU/OrdC/jmr955aLqZ3CBsnWldV/x6DkqwHgQVF/dkJEdt0a5eVzpBaXL
EDiPLhXV/dHxGQfbiByfsz8vmzddQwoPi63iLk+Uc7gAXH0fs/HaL5JJlM4G
XZ4jgsVXiEmF53zjuUBHegdbfx40AtIYobFxxd65+Q6c7ggm/uErABZiA4gJ
R/V4r+P80kk4DHWZsUHfR2QDXovRhCLtXPH77VUBdss4VsV/l3fcL9OdeE9/
7xM1ytMVGa3PqVmGipn5eCbi5xcPwtSaGyLPXzybF+C7zGZd/TwEYxmglkHC
dddx4Ks5Qx3K33Pr8ySxIA1ThkUAquLhR+lUK54qz8RBSapHzmekaV3xAR1L
GHhGJqfjB02LaLdQFOvrz+E8rApCPHP0/bJ+Yb9fil8tqI4HKERnle5mv9eS
B6QPLRdpUx0H3h34YUQXufrJQXRjr50IG3uvY0hQZrAWCAV76V9Jo+JJn9Xg
aV2LP35pck8I49X3N3QkGtC3+qh44tkJkpogbO52yIrnQSAVfUXtc3T891xt
8f85zsb5aG080etH+EpHreKD5NPSfjBGvjt+RZvkPgNW3Pv+xp3IWwcuA8Vc
cWuOxHQELvEdH0GRSECok+VTydZEz+Yg5mGqXeuD7niMJ4MemaWPoccpNTTl
55tZ+p/Elo9QfV09DeW74wQZpVHyt3n1995IBdijqKWVn0NTSfaSOs9ot1Zc
q4jQVfxMy/9LeouxyhgTfqHmBeLQ9gREYO7Pv36LDSGAfbpJKsl6T1WeeR+M
+7TU6ntxTGPpsV5Mbx1/ZBFD0+RNVnmpuFYX3/KIqf/Vv7xNpNA7u5TIdNXx
pd5GKdnVnuqvyuIJHAT5bDuaV8fjihfukYSvjxOZQMIrOivlX4DLRTIYjIJq
WeH/l2wu/JSTd4RJVcd/z5XZm0VMP77iK3R2ECtwudXnqbmnQUAscxWvHP2d
D8XvMDGlKl48c24gPKBHs43V3ys9IPAaBavt7PNUIP4SC0703GBHPScxBQR+
AHjaqn5JHCg3VxtVvM4HbeEK0TRiP7Vu8LFacYrG1jjuPn+brI7jjE1W9cdW
sOVGbqgsrJz68/e790a7gTDrX1zOTsXIyOb348fRcWWrzdPcofgFK8XqFg/A
TSld6yftefPBZNV7+06aeiVtjpEq8EJdzwd8gz6nmrz7MAqZdFVMcUybvuME
nrn0MjAzznp+6LNdeToRHo/vONCiQEO6FuyqK+5tRq7hB9o8dC3233v3W8zi
eE3MqOLWnrCPgZev8cUjy2atAgWpfQfcQp0JpwBHUPlVfKBIfp1RZHj6OVmw
UceZrFHSX8dBUjoJ5wDht9+ohtAAnNXIiAp9x8MKjWMhDaha//Xycatese1V
uAJxwJDXbBlH5aq4ZAh9F+iDX03FITIic3UT2fqrC8JDwNiIyWx6rxXnurSS
178mhH9xWLAgcTRk99KRXm9vacZ8GRix8kndEWgUCgb0Qo+OAwNHc12fqnA+
jCXnO5UBRzY9+QfhE8JX
                    "], "Values" -> None, 
                    "DefaultValue" -> -1, "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJzFXXvQ11WZR1HiBbm9vC+XV1ikVXRXF8usKcldtSUrL4ial5RpBKPVRRy0
3GwwiV1dV7IlHWyUGsTSMG/tiJhrghdyVUJ0mjXZ0nHLFSrlkpcxEd1/el5m
Pt/5zOfznPN96a8zv9/3ds5znudznvPczsSZF578hT369eu38MB+/TZ/YuNR
c0+f8NB1U88+aenQiQ+NvvA7C7dc9Be9vw/77XELLp/3ftnGe9R9+N4D+k++
+eI/9Mj7ol38+sFv3HBqz0NT9nnvd/Nv6qH3P/OpNz+w59/tZ/cn7lfjZ99B
Oir6Yf+z9Jzz1l17HHXGGPqdp6YM/uzMnvGNfs/6zJA9P/7j8b1tjDfue+Gk
ox/tGDuu8b4fvvPHF2/5VvN/d96xxfn5wbU3TnjimrH0PvUdHAebt1Mnb//N
a0M43RX/sf/V9xk/xjyo96v3uPIa/YzvqufUdeQzfI5dZ/OL9MD3nbnhd1d0
TRtpj5e9T+HDpgdOPOb2Q8ak+T3ei9/deOCD7590576yHzguxJUsvqn5ZHRU
fJbFHcUP8T2Xv1k/FD+WylH8jzio+rVz7YRFK/9nNH1fzG/guepP4DPjsyyf
l+Kg4ms2Thc3kR9Wf+S5/a85bl+7X+58s//je3Fd8X2MD/vp4lEWv5Uclc4H
tkwfwHaPQV/+5LqZI9I45Y7b7S+7z/1OFg+z/cD/S/F46YvPPzJj0xi5fkR7
5PynZxw/cFTvb6bPqe+iPLjPof6ZxR98Tulb6n1M71X478pDdv/ktmzcim+C
fjjvwY+160SsA8jfrn6b3T9h6/Kzkmfsr9JfcVxKXtbfs+C0ZVu75ThwH5qV
m1iHavfFpfqVux9jv7Gfteum2w8X3xS9suPDNuwiiDvMXuLKJxvXh8bM3zju
gs40nyn9z8WnUrrXtogbOC/MTtNWf8Oehe9heMb0YYVv2yad/fDxR3Wl50f1
pxZfsvicfS/KUandoBQP2P9KD6ylrxpH4Dh7v9r3KHqwfYq7j3fp2zX7gg93
PNHka7Ye47rE5iG77tfex+jA7CLqfa5ep3CE8VPpfgzpj+Ou3S8y/T67rj31
lSU7f7Nv0x7de93kj2y/S/GQ2dmU/Twrd2GnP/nO45c8882mXculQ1vr/Ljh
1+8/bOVo6U9RdCydH7XvQH+L6z9gdmC1nrjjyPpt1DrEvuvqhwo3auWnlu+Y
/TGLA/i8wqW4b/COz6/64r277MNDV175s/P36O7VH0vlGflPjSerx+P9WRxW
30e8Z+vI8o6Zs44+pYnnyJ9t6a+qv+p7yh/i7j/cfi7dcdE+/Z8dWfweZhc7
77gH1vR7fJStLzL5R79lls4u/7vjz8ZJZO1brr9E8QHD37hf2ROyfhOF3wpf
3H1X2/tHtR7iPt2d92w/Yn6VnxH/r13flL5Rax9W34v3u/qUGi+bz/gOs7so
PlD7V7Vv2F1trX7n7sf+3C2uk248Ext/2Mlcu3ct3yv/d/z+6C1fu+2n07ul
H3xd57arblvVWW2XYPyAfsQsLjNcRfnOyhHas0pxMPa3jO+RD0LO7r72gwMX
XjJc4gNbF5EOjK7Iz0o+Ff+rfa3SL9T/TP9AOsy5t+frz69rzje+n/m9lfyc
+vMf3fjr87m9wsU7Ny4q4n7c/YXrVyuNsy2VT9Vif3C8gW/zfv6rW+f/sqth
p0F9L+w5Wfor+XHphe9nehDT/5VdxNXX1HXUk4Ku6B9i+6as3XXy3CkTuwdo
+cH/nxy8fK8X9hxD6ezu25TdwcVDd9/gxiNGG/R35VP5HRn/sfjleB7XQeW3
y8ZNRPuV1X+7dOCZnWn8DHxw/Ymzjz3puZuGdaTxC+8rHSdrEa/ZvpzhnDsP
uI5m9XJFL/QTZOmc3R8o/GP9UHjI9nNKnrLrK8Mt9tyCrW+tXXvFGJtepfZC
9R7UA3EdVnR31ye2n4n1KPht1KYR/3Lwp0bb81Iah+iOpxdfTT2xNO+FzUu8
L5t/FO2MldfdccTwEQ2cdfMv3P6X2gMUveI64iD699h9WdxSz5XGWWHeCPJd
7F8UHRDnlX061he233P1UNdf9/fjX9oxvXOwpLtr9671C6H8uHyIOJLVS0v9
MG3FxWdbhvOxfraFB6XxcejnjPbWQcMnDpjV+dAVc7/6b+fPa/qTlL6u5Kav
7Jzx3vs+Pu1X3540ukF3RR83PofxK9rR1DhDftz4L3xf4DLzl2T3a6x/Lj1Y
Hl+Wnuz7pfqve93FY9aP1z98yks7e4ak9ZXSeGsVV1hLn6zfsRYfsi3jT+xX
/A75zNqtFV8oewKzt6r3Rf8i/iQ7P4s/uOq7+542ytZTsnKl9oFZ/55qlZ/W
zQMr1TcV3bE/bpxc263Sp4Ifgp6T/2PD8n+6lufJKHuF6w9qS88qxSW2vqt1
t4EjBHfVc67/yR134JLaj5TKn2sHdvHUxQlX/3fnDVt3/7N51ay9jlw4qDU7
t/peNi4qG18bfMvozejYVjxz2/Yj1UYcYikeBX1ZvRQXd7LyVitPON9MfynF
ob6yV5fyVa0clfaf7Z9xfYj3ID5nccud776iM8ODUj8Rth2f27B53vymHlJq
/2XfZetk1o7i+nGQDzBfKPSwrL9JfRf91Oz5tuPE234u6//I8m+0Km9X8SM+
x+zm2TihbD4S66/KD1TvVferfS7au+L/gdPOvXXS27vqmeB6y/Ybqt/sPlcu
1P6ydh0p9QPHuGrl1sWt+M30hb6SfyavjXg2qOcUz7nxntl5c/U8HF92vhi/
ufsgbNHuoezFrh7F6l8w+WnLHxP3uftelp/p8mHbcclt74fc9025a/G49y0d
0XiO5XcrPG/LjhDt9v02X3LXPzTzo9x10a23WItPbhv9zOZnMvxTcZNZnMv6
edT/b89Y9umdizqL+5NtQ/5749mTchrjj/XN9W8z+cQ29JtSecDrvfmjZtx+
Ld0RN/tKriLeUvlDVXxh9JPloZbSqa39clv9UftVXO/dOFslZxFffszxV5zz
5gND0+MstRcgf8T/WT9LyI/b39fmrDlx1VX90340t16nizNZf7iL1yhnSm/G
cbW1Tir9ti25rMWp0no1bv3VbH9cu1U23wbtUqofbJ+WtWegXzIr36X5mFk/
AbNnKPyM39k4sFVXr7jzX58dQa8re0LbcZyqjgr7DsYNqPXcnR/Uh9h+m+1D
S/PR1P1sf439y9pXWP5mzAtb5xhdVL1TjJ9hdA18zNbvxvedfMAj1w89d3iD
bxi9P3fosuU/Hj+yQf/S+EhssR6+a5cs9ZcrPmBxQW6LfNDX8VpsXailQ+11
pdcpPnb1t9L411K705rLjjr4la5uar+K/127ZK29memPWXtm1LnJ4jTDYfa9
UnslPufa+Uv9WSzfVJ3zoeQT513JVWmd8Ggjfji+7+p9rn32jg3vzNzQvz+9
7n6P4UXt+LO4UFt3RPF/X/l1aunTlv3JjSNsO54a+RVxYuyEW++98/amno/9
yOYrKH+Umn8XH7N6XnZe2HMMt9z8ClceGR8GLiz8yDnr/nJasy5MKT605ed1
21q/abZl/g3mj6ytF531u7t6SbSRh4z2E/Uexf+YL5vdv2btG7X4WooHbt4U
5nufPvuK7kvmdUk6Mv+v2hfjdcwvbWt9yvKvwmdX7uJ51G/wfKYsfzGcbiuf
UeVz1O4v2W/cxyh6I79m+1V6nlFfyfXVXUu++cy8oTaelq7rtf4lxk8qfoH1
N+tXxLbtOgEop4pvmPwEf7r9Y/E0rFV0Y/MW9c+z67RLt+CDbH1+xe+Mv1T9
sb7O0/3YJ6Yf9pPRw+V9rl1e/X/k5We+9fKhfN+d9avW7kuZ3uT64ZgdOuSA
+b1K+12qr6r7XX8dvqc0r9WVg7bkL8sPtetn6bnN7ndDThCn3DxoNX6kgzp/
RNkJa+1hLp+zeEElT+xc87bjgBSfZM+VLbWvsO8pfHDngflJ3HOAcJys/h6r
m6HkwW2z57LjPLn171AfcuePxWVE6+a3s+eDP0Lvcu1PjC9Vf0vfG/TGdUjl
ayr/T7THrBj7hXfWNP2raj/ynW0bd8x+dE/63VK9APMKFb6r+Ae176ndr7n8
lrVjKXkszdNxx9d2nj2bt8hrya6nrp3ftbO55+C6/VT0aMuvxXAoy2eIL27/
Xpq+dcFTB3U35qGv7TSqv1k/D5tfJrdxX1v6PcMLxmfZc5ujjbr/8Vud58Jw
UsWfK3qzdYLpQy5O4Xg67n7wve89NtCWK0X33n6Kup5uPQU27+59OF7M+0R9
zdX7lZ1I0Se+s+ONQ6689mV9XhO2r551/h+2bx5E19vafHk2brbfZ3yJ/Of6
XUr9e0F3VpchWoyXZHzu0sddlxleYpwO6ncsXk7h8V7nHLH34W93NujP1n9X
r2m7vjebh8CJLH/juNa9ted/beoaYM8v0pfVUVF8mbXbIU6zfRzjg7iu6jBm
5YvFLarxZe0MWf7AfmTno7TF/obcoDyW1rVi33Xt5IhHLK7NPQ8T38/6cdBN
x126beFIeZ87z8o/jPezPPSYB5QLVQcG34/rnJqvUv0X5yt7/i/L42H0VXkc
bJxtxSUj35bixLM7e1Zc8Nje1Xkartyz61l9TsmJGzfO9iHxO/Q3lz7ZvKts
3DVrVbx96bp66eZFqzsfGNJ4LvRF184ZdVUZ3kar9o+Mfm59G2Wny9rhsn4E
9t3a+MHQexgOIX1K1/XseHtxT+TdZ+3lbeWduXYwNX72f5yzlqWvuk/Vr3DH
1dd2tWgnzhnwZMesYcXPl/oXGe5hvQr2fmZ/ZN8b333XktUjRtp0dfVvVe/c
xa0sv5fyi6rbWCq/aKdw/XYYf1JrZw2+we//fsXTA264rqsxbpRL1HvYOWqj
v/HMET23NOsLuXoTvhfXYab/1+IT8ovaB7N5ZHzA4olwHQzcUXzingPq4rJ6
juWxt13vK9r3PXnZgtm3DafzUdoyOc/qV7Xjy9Iva8/K9gvjI9m6rPQe5Etm
T0Y/N9ufKhxn8T2MftE/pecgX7Ttr3Tvc/WE0nhl9JvW6nPZ76I9QNkxsH/o
p3H1HzX/8b3A4d2FD+59WX3AxZnsvJbGuzD5dscfeTml8qNwK5574fUb+520
tRnXrOoIr9826L39to9I04Xhsvu/O6/snFJ3PVHxqHOP/e3m5Vt2+aUYjqrf
bc2vSx9mn2R16xS9lLwpPzqec+b6W2r5Dvsf3w09sLSOAbZuvCXSsbbeAWvV
vlX5fRTds/1m+y03X0bhCtO7GnG6f+JTNs54T+jXKo7k1vNmHPT4u0PS/WZ8
wfw22fhmta65fFSqH5XWeWXjY/tx9lw2PyrkF9dPlf8Uv194fNXaT27papxr
X0o3JW+MTtH/bPyRuu+qG+4+68KnB8h45NJxYxvxzDhuZd9qi0/RPqO+49aX
U/+rPBalt6jvlervpXRmuMPyD2rtg23Hk816ZGH/S68ZJc+lUHIR/Kz8gQ39
ltSxy8YtMz2/ll5nnX3NG1f+orvxXeyfii9FuuC67vIfs08ye5+7rmbzlfG9
2bg77M+n/3Pl6AtO2rX+ZeOimF6g9Liep19aufLf+6e/4+b5Kb+wqn+M6wHa
/9i4s35KJTdxHeOys+fRxfOl9gTWhl5S+74sPm9cdtj+sxb65zQoPsn2G/0S
7PmQA3WeT/b7wZ9ZnI1+lO6T2feYXbKWv/A97v7QtUciDrDxZsfhxhUq/szq
Va79Afl+zt8sXtizvLM6D5zxR229EOQzhrdu/qmbb5e1xyi5K5XbWvmZPHfK
xO4BOo+V4ZJLr9I6bYwe7nkx2G+sj1qaX4n+9b6Se9Qv2X1R3znohfqj6w/b
3fs89r86P72U391+4D6gtP4Nnr+j5sG1j+PvccOv33/YSl7/LvQotp907Wdt
z0e00S88fwvPHXL9Zq6eUTuewH1WJwnpitdr895ZW+t3re0Hq6/M9CiVTx3x
CizuuhZ/3OtsXCyeHK+rfSfaTRpxXYCLSn5duqj8LRU35eIUw1mkTza/vhR/
lF5d6geJ3+65udiinSvbsvPsQ36wP7fd13/W1NdG2vRV8xrrXrQxj6gnu/WT
Su0q8dyDd50w6cn9dtkFQo5UPkW0oTeWxjMx3Mrif9yv8sRrcb6v/CyqjflA
e2nQT8XTqvVX/Y/jZfkWDL9r5Qf1/bbiN928GfU84xOVp+WuH/i/6w9l9GJ5
43EdcSH8L1m9l8UBuvlpWTljdKv1V0ZdHdxPYBvjcvf1Wb9Klu8Zn8y6ZPuR
U+/fx36Pih9XfjfXTufifW29tmgjbpPtY9n66urDzB6U5V/WL7Xufu3mL69f
fD8/f8rFbbfFfSvDA5evmR3KHYcbp6ra4I8ZN7w7c8nEUVK///zvjzhq2qtN
+crW3XTHydYh9r6Ib8rmHWbPL8y2Yffu7SfEM6r1FPdNsW4xepbuc5AepetK
LR+oeYj5jTrd8R63nhKL62X0QLuF6hcbp/oerpsK31j91PjOjMuuP2HohGbd
GxxHVu9S+I/vY/KV3Qe1LZdttazfpftHtIMyPnHXIbd19WDEK4XTtXXOWL9c
Px/OQ8fli2aceNDWNdn5wf0Fjrfrvv89YdH9W9bU4qLb9uaTtoTXyj7B8Ckr
F24e34NHP/zotP0HS32nlo5KH2PrJ8N7Zvdi9MV6fKW4o+ZD+bX6Kn+PyT9+
rzRfgl13/cbq/Wy+GO649WLoPlacR4vxddE/zKNX+0x3v8q+l+UD1/6axU/V
nzivuPS7Kv9S8U/WvpTd1zI7RtT5UjhciuNZfVjZTcIexeposrpArM6lwvHs
OLJxnVHXtBR32HXMa3LlGPU0ZU/EdQvr+2XHEb+VvTHmn30n/FfKXsTie1Gv
LM1fV3LI6pkiPbLrXlbPV/ozix9i9TPx+ew4WJ0M1OddXCqN1wk7KYvrz65j
7vqmxsXyApHubcUPol8ncLh2XcqOl11X40QcUHaYWnphq86FxP4jTrh2TlyP
2PkvLr2/sfbh73cf2cwHULiBv1Wd6dL46ZDPtueNjTP6mT3Pi70/m8/A4vXY
ddZm8yKYX4utM1m7fC1+lOaDu3RldR9c/HDttfi/O64PLf/SxS8ft7fUd9h1
/M3sdy5/sPmptR+UrpfqPuyXojvbT2XrwLrjLK1Hhr/bXv/cOIas/1LVRVX0
GPvcC8MGru6w1y2mz6j5YfmxtW3b+pPLT2ycSC+0m+E+NvCC+XXcdcqNG8br
pX4OjGNRfhXXPufOJ7N3or6h9tlZeVPrmZIfhgMq/3H9qz+6asm4YWm8U/Oi
niv1Oyg9FfdJtTjA8saRz1S/2f7d1d/jPrW+xf2sHmoWx9zzxNrKW8r+n30+
WxcFx4vnpGHbVpxKVr5q7QyIlxG3wdaTWrzAccX1Q69/4s0vDtpLjlvllar5
ceni5vtl5cxtGT9hnYFSv0/peanqfVjvjc0PrntuPCTjP4anbp41Pqf0NIU/
bp1sdf6COpeYtZjP3Vb8qsKfUjwozW907TlZ+0bWn1RLx+B/hjulceul6z/m
L7vzzOhcamfM9tuV+6x/ovS82N01XsRVF1eYPwPfx/x0tXjhjpetH8w+OuKd
IV865Ke78pfZOonnVpXWISjFmVJcycaVYb2F2vq7bY3D5edSfGZxca49i+m9
tXWklJ7h0smti8LoyeyEqGe7eUNxHe1AzI/b8eIDT2z8v+GU3mrdqK2Ho/g0
3r/+ngWnLdva3ZpfV8lvfIfVFWV1S922lm7IJzgeV18ppWft+e3RMrsK2vmi
zfq7suepu/XSg25x/hEbP9rD0N7e1r6A0cXV+1TcmXt/lk+UfLDfLL9D8TnK
XeCKqzdk8z1Zq/Te6Afag9x1xl1f0X8R86XyEnrpOecHc26e0inH6+7Hs23W
f63+z+IxW1dL47XR7nvsgUv/6ubbR6bzcd3+tqXnsn2Kuz5k45/Z+on9Zf3P
rgtZ+16Wj7L5G9n9P4vrVHaCbL1Fpg/F98IuxuqvMH7I0tnVfzCeFseNreqP
ygNSfK/msbaN9y0945S1N/6keb6M6wfEel9xPbsutu2vUXZIhtdMDq59derU
P65o1sMvlftSuXK/0za/qH4rXHLl5tDnN+09f96QRp0ojGdn73XrS7F9dBbf
+6pl8jD44v++7/tX6/Og3H1ldv+m8MjNW2S4j3LL8hwUP5XGQ2bnW52Tzt6H
9Zvc7yn9rzSPmM1TW/oNrhPuusz2Ryyeg/WndJ+G592qugjsO7V2Hnye7edd
PyrjI9SH0V6tcNRdj7L+oVK5detssTg7Zldz80/bkjuXrln/bdzPzr3KxuvE
77bOOyjFb5W35dL3lc13fOuIjzXr+WT5XMkjrnssj7MtOrnzmV2favNCEFey
fJfFDWUXyNJN9YOtDyw/qhb/Sudf8bcrP2x/U5pfwL6XteMhLrjxqll/r9qP
rPn2uR89fWonxdtS+a/dF7K8ubbkNvtc9ryA4B/Gf7V6bak/HO0mTN5L5w+f
Z63C07bsEL3r2J/yRJi8xm+3Xmdf2cPi92Njz7rlHw8fnh6v20a8S6l/ltV/
iLhz175Y2rp83pY+4NIJ6wjW8q/6/rbzth1998+a+K3056wcK7+nqp9Uy79K
DtuuX8fwNc5xVHl8at7ccxjwfldfVG3Wr/H154b9YvoPedxYVv/C+hG18TRM
f/pz2U93F84puuJ8KztB1v+X7Wfp/Lj3MbsIG6eSGzwvPmufR/xUdGTrFaMv
xi0hH7j4xPLc2Dqv4h1c+rj5HqX8wejmxr0wfFH1r9x+u/X1Su1xrI16IKpO
hPqusjeX4l4pbmfrXDN7OvYjq8+o+5VcqnjO6K9bl1rRozSvRD1f+hwbR9t6
JeuPqjeF9Fs07qJhZ/z14Mb8Kr5g+O3SielX7H78X8VhZXHG3W8xfSSLl4rP
lRy/d/j2nf98TDNuNsuniu+iTtvtm359z+O/fLdRfxifV3nGpbjD/DWleI11
7l16KTtLKZ4oucD3Z/VPRm8W7/fVKQesmf69EWk6q3oorlxk7Y/KXuzu06L/
Lp3jvahXqrg0/F+di1R6fl3WLsru27Ki/wVzPtCsy8DoHr9V/LXia9YfF4dx
/+POy/rVr8we+dnBjXlW43DzWZRdSuGJ2h+49pvS/qNd2n1PVs9h+7usvuHi
kCsn2XzguA/jt9zzfN33u+N17ZJ97S8IPlHrqsJNJUfsPa5+qs5pzc4Hs+O4
+zasa+LyN8sTWPri84/M2MRxmp2j6vIn5gGq+VV1Ixjd3HoZrv25Vn8uxf0s
LmN8aPwf/lz3O0rvYfbIUnuDkmf8Thbf/x/yD2t9
                    "], 
                    "Version" -> {11.3, 0}, "ID" -> 7914070120903112767, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 2, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 884775526023742407, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 2, "Version" -> {11.3, 0}, "ID" -> 
                    4422581646867123738, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1], 
                  "f3" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
                  Span[1, 10114], 
                  Span[10115, 10116], 
                  Span[10117, 10117]}, 
                "Wrappers" -> {SparseArray, Identity, Identity}, "Output" -> 
                Association[
                 "(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAABcBnDKXKFv4OfwSJ2hTWMJCYQKXXGEGiNIHirrlunOvUJFn6
ZN+OdbjaYtu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu27X+e1/n5Lg/puSnu

                    "], "Type" -> "NumericalVector"]], "Version" -> {11.3, 0},
                 "ID" -> 5946029764627680100]]}, "Invertibility" -> 
            "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 2472221187450073527]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not a Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                1589389040996761228, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8120213736258895844]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "Not a Question" -> 0.4955022488755622, "Question" -> 
           0.5044977511244377]], "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       Automatic, "BatchProcessing" -> Automatic, "Model" -> 
       Association["Trees" -> {
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 
               1800, 9866, 4158, 6865, 10117, 7463, 10115, 10115, 10116, 5940,
                4528}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.04620031267404556, 9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, 
               0.5376577377319336, -0.3576050102710724, \
-0.06636073440313339}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.014285714365541935`, -0.019999999552965164`, \
-0.0028571428265422583`, -0.014285714365541935`, 0.014285714365541935`, 
               0.006666666828095913, 
               0.014285714365541935`, -0.008571428246796131, \
-0.011111111380159855`, 
               0.015294117853045464`, -0.007263427134603262, \
-0.00800000037997961, 0.014285714365541935`, 
               0.009999999776482582, -0.019402984529733658`, \
-0.01272727269679308, 
               0.006666666828095913, -0.0033333334140479565`, \
-0.016923077404499054`, 
               0.015789473429322243`, -0.005454545374959707, \
-0.015368420630693436`, 0.019732441753149033`, 0.014285714365541935`, 
               0.013749999925494194`, 0.019999999552965164`, 
               0.01148936152458191, -0.019699811935424805`, 
               0.0033962263260036707`, 0.019999999552965164`, 
               0.005517241545021534, -0.008571428246796131, 
               0.015254237689077854`, 0., -0.019999999552965164`, 
               0.00947368424385786, 0.019999999552965164`, 
               0.019999999552965164`, 0.0028571428265422583`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               22, -12}, {33, 13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24,
                32}, {-1, 29}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {36, 
               30}, {-30, -31}, {38, 
               34}, {-23, -33}, {-5, -34}, {-32, -35}, {-20, -36}, {-24, \
-37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 
               1800, 9866, 4158, 6876, 10117, 10116, 7463, 10115, 5571, 10116,
                10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.3709371089935303, 9.999999682655225*^-21, 
               0.3568291664123535, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, 0.5376577377319336, 
               0.181747168302536}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.014143581502139568`, -0.01980198733508587, \
-0.01987103931605816, -0.014143581502139568`, 0.014143581502139568`, 
               0.0066000730730593204`, 
               0.019817307591438293`, -0.008485870435833931, \
-0.011000340804457664`, 
               0.015142064541578293`, -0.007190887816250324, \
-0.007920126430690289, 0.014143581502139568`, 
               0.009900248609483242, -0.01921076886355877, \
-0.012600511312484741`, 
               0.0066000730730593204`, -0.0033000092953443527`, \
-0.01675505004823208, 
               0.01563255675137043, -0.005400040186941624, \
-0.015215639024972916`, 0.019537026062607765`, 0.014143581502139568`, 
               0.013613144867122173`, 0.01980198733508587, 
               0.011374845169484615`, -0.019504712894558907`, 
               0.003362273331731558, 0.01980198733508587, 
               0.005462110508233309, -0.00854293443262577, 
               0.015102576464414597`, 0.008616483770310879, 0., 
               0.009379158727824688, -0.0098862424492836, 0.01980198733508587,
                0.014119388535618782`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {38, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24,
                32}, {-1, 29}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {37, 
               30}, {-30, -31}, {36, 
               33}, {-23, -33}, {-32, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-24, -38}, {-7, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 
               1800, 6865, 9866, 4158, 10115, 10117, 7463, 10115, 10115, 
               10116, 6876, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -9.999999682655225*^-21, \
-9.999999682655225*^-21, 0.4169449508190155, 
               9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, 
               0.5376577377319336, -0.38233935832977295`, 
               0.3788796663284302}], "LeafValues" -> 
             RawArray["Real32",{-0.015000144019722939`, -0.01960979774594307, 
               0.0029239775612950325`, -0.014004269614815712`, 
               0.014004269614815712`, 0.006534288637340069, 
               0.019629647955298424`, -0.008401470258831978, \
-0.010891336016356945`, 
               0.011495312675833702`, -0.007210674695670605, \
-0.007841299287974834, 0.014004269614815712`, 
               0.009801974520087242, -0.019023984670639038`, \
-0.01247600931674242, 
               0.006534288637340069, -0.0032670365180820227`, \
-0.016591031104326248`, 
               0.015479099936783314`, -0.005346158053725958, \
-0.015066126361489296`, 0.019347254186868668`, 0.014004269614815712`, 
               0.013478908687829971`, 0.01960979774594307, 
               0.011262200772762299`, -0.019315237179398537`, 
               0.0033286800608038902`, -0.008391371928155422, 
               0.01960979774594307, 0.006312416400760412, 
               0.0022239491809159517`, 0.014954137615859509`, 
               0., -0.01967548206448555, 0.009285987354815006, 
               0.01960979774594307, 
               0.013972647488117218`, -0.0028376213740557432`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {38, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24,
                33}, {32, 30}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {39, 35}, {37, 
               31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-24, -38}, {-7, -39}, {-3, -40}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 
               1800, 9866, 4158, 6876, 10117, 4717, 7463, 10115, 5571, 10116, 
               10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.3709371089935303, 
               9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.044668592512607574`, -0.4498637914657593, -9.999999682655225*^-21, 
               0.5376577377319336, 0.181747168302536}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.013954068534076214`, -0.019423186779022217`, \
-0.01955494098365307, -0.01386768277734518, 0.01386768277734518, 
               0.006469296291470528, 
               0.019447334110736847`, -0.008318202570080757, \
-0.010784049518406391`, 
               0.014881403185427189`, -0.007049280218780041, \
-0.007763492409139872, 0.01386768277734518, 
               0.009705140255391598, -0.018842406570911407`, \
-0.012353693135082722`, 
               0.006469296291470528, -0.003234409261494875, \
-0.016430867835879326`, 
               0.015328975394368172`, -0.005292889196425676, \
-0.014919769018888474`, 0.019162893295288086`, 0.01386768277734518, 
               0.01334720104932785, 0.019423186779022217`, 
               0.011151377111673355`, -0.01913115195930004, 
               0.0032954395283013582`, 0.0194587130099535, 
               0.005353117361664772, 0.008582773618400097, 
               0.014808802865445614`, -0.008439077995717525, 0., 
               0.00919413473457098, -0.009677940048277378, 
               0.019435903057456017`, 0.013828910887241364`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {38, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24,
                32}, {-1, 29}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {37, 
               30}, {-30, -31}, {36, 
               33}, {-23, -33}, {-32, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-24, -38}, {-7, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 
               1800, 6865, 9866, 4158, 10115, 10117, 7463, 10115, 10115, 5940,
                10116, 5571}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -9.999999682655225*^-21, \
-9.999999682655225*^-21, 0.4169449508190155, 
               9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, -0.3576050102710724,
                0.5376577377319336, -9.999999682655225*^-21}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.014852343127131462`, -0.019241923466324806`, \
-0.002786854049190879, -0.013733728788793087`, 0.013733728788793087`, 
               0.00640508346259594, 
               0.013672818429768085`, -0.00823603942990303, \
-0.010678429156541824`, 
               0.011300078593194485`, -0.00706917280331254, \
-0.00768668670207262, 0.013733728788793087`, 
               0.00960970763117075, -0.018665824085474014`, \
-0.012233493849635124`, 
               0.00640508346259594, -0.0032021249644458294`, \
-0.016274411231279373`, 
               0.01518206112086773, -0.005240222904831171, \
-0.014776451513171196`, 0.018983719870448112`, 0.013733728788793087`, 
               0.013217938132584095`, 0.019241923466324806`, 
               0.011042318306863308`, -0.018952233716845512`, 
               0.0032625480089336634`, -0.008240397088229656, 
               0.01924159564077854, 0.006196374073624611, 
               0.0022031874395906925`, 0.014666466042399406`, 
               0., -0.01935097761452198, 0.009103569202125072, 
               0.019279658794403076`, 0.019241806119680405`, 
               0.002956481883302331}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24,
                33}, {32, 30}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {39, 35}, {38, 
               31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-24, -39}, {-3, -40}}], "NominalSplits" -> {}, 
             "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 
               1800, 9866, 4158, 6876, 10117, 10115, 7463, 10115, 5571, 10116,
                10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.3709371089935303, 9.999999682655225*^-21, 
               0.25424861907958984`, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, 0.5376577377319336, 
               0.181747168302536}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.013769924640655518`, -0.019065791741013527`, \
-0.019248487427830696`, -0.01360231637954712, 0.01360231637954712, 
               0.006341633852571249, 
               0.01910247839987278, -0.008154957555234432, \
-0.010574431158602238`, 
               0.014630206860601902`, -0.006911141332238913, \
-0.0076108588837087154`, 0.01360231637954712, 
               0.009515641257166862, -0.018494034186005592`, \
-0.01211534719914198, 
               0.006341633852571249, -0.003170179668813944, \
-0.016121525317430496`, 
               0.015038246288895607`, -0.005188150331377983, \
-0.014636065810918808`, 0.018809523433446884`, 0.01360231637954712, 
               0.013091041706502438`, 0.019065791741013527`, 
               0.010934976860880852`, -0.018778273835778236`, 
               0.0032300022430717945`, 0.019134318456053734`, 
               0.005246592685580254, -0.008385692723095417, 
               0.014527017250657082`, 0.00860612466931343, 0., 
               0.009014260023832321, -0.009490255266427994, 
               0.019090132787823677`, 0.013542532920837402`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {38, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24,
                32}, {-1, 29}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {37, 
               30}, {-30, -31}, {36, 
               33}, {-23, -33}, {-32, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-24, -38}, {-7, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 4528, 6540, 
               1800, 6865, 4951, 9866, 10115, 10117, 7463, 10115, 10115, 5940,
                10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -9.999999682655225*^-21, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
               9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, -0.3576050102710724,
                0.3788796663284302}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.014708371832966805`, -0.018894582986831665`, 
               0.0029960342217236757`, -0.01347336359322071, 
               0.01347336359322071, 0.006278934422880411, 
               0.01339250523597002, -0.008074932731688023, \
-0.01047201082110405, 
               0.011110774241387844`, -0.0069311149418354034`, \
-0.00753598939627409, 0.01347336359322071, 
               0.0094229057431221, -0.01832684688270092, \
-0.011999191716313362`, 0.006278934422880411, 
               0.01586398296058178, -0.0159720741212368, 
               0.014897414483129978`, -0.005136661231517792, \
-0.014498511329293251`, 0.018640102818608284`, 0.01949775032699108, 
               0.012966434471309185`, 0.018894582986831665`, 
               0.006254843436181545, -0.018609074875712395`, 
               0.0031977964099496603`, -0.008045386523008347, 
               0.01676689088344574, 0.0061326599679887295`, 
               0.002183114644140005, 0.01439035777002573, 
               0., -0.019058741629123688`, 0.008926176466047764, 
               0.01894395798444748, -0.002770425518974662}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24,
                33}, {32, 30}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {38, 35}, {-24, 
               31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 
               1800, 4158, 10115, 6876, 10116, 10117, 7463, 10115, 5571, 6876,
                10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.2361728549003601, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.15434935688972473`, \
-0.3709371089935303, 0.3568291664123535, 
               9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, -0.38233935832977295`, 
               0.06050436943769455}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.013590910471975803`, -0.01872810162603855, \
-0.01896311715245247, -0.013346786610782146`, 0.013346786610782146`, 
               0.0062169721350073814`, 
               0.01878054067492485, -0.007995941676199436, \
-0.010371122509241104`, 
               0.014387903735041618`, -0.00677633797749877, \
-0.007462058216333389, 0.013346786610782146`, 
               0.009331469424068928, -0.01816408336162567, \
-0.011884963139891624`, 
               0.0062169721350073814`, -0.0032489346340298653`, \
-0.015825936570763588`, 
               0.01475946418941021, -0.005085746757686138, \
-0.014363688416779041`, 0.018475273624062538`, 0.01880577765405178, 
               0.012844042852520943`, 0.01872810162603855, 
               0.010742693208158016`, -0.018444446846842766`, 
               0.003165928414091468, -0.006073633674532175, 
               0.008336497470736504, -0.008301625028252602, 
               0.00858693104237318, 0.014256391674280167`, 0., 
               0.008839288726449013, -0.00929412804543972, 
               0.013260182924568653`, 0.019007356837391853`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {24,
                33}, {-1, 29}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {38, 
               30}, {-30, -31}, {36, 
               32}, {-32, -33}, {-23, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-7, -38}, {-24, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 10115, 6540, 
               1800, 6865, 4951, 9866, 10115, 10117, 7463, 10115, 10115, 5940,
                10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -0.0883902981877327, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
               9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, -0.3576050102710724,
                0.3788796663284302}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.014566374011337757`, -0.018566161394119263`, 
               0.00304198544472456, -0.013222510926425457`, 
               0.013222510926425457`, 0.006155733484774828, 
               0.013130265288054943`, -0.007917961105704308, \
-0.010271728038787842`, 
               0.010927077382802963`, -0.006796369794756174, \
-0.007389047183096409, 0.013222510926425457`, 
               0.009241299703717232, -0.01800556853413582, \
-0.011772606521844864`, 0.006155733484774828, 
               0.0014803169760853052`, -0.01568298600614071, 
               0.014624293893575668`, -0.005035398993641138, \
-0.014231503941118717`, 0.018314851447939873`, 0.019222285598516464`, 
               0.012723795138299465`, 0.018566161394119263`, 
               0.011662349104881287`, -0.018284212797880173`, 
               0.003134391503408551, -0.007879305630922318, 
               0.01654059812426567, 0.005997755564749241, 
               0.0021643261425197124`, 0.01412502583116293, 
               0., -0.01878088153898716, 0.008753569796681404, 
               0.018621603026986122`, -0.002738792449235916}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24,
                33}, {32, 30}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {38, 35}, {-24, 
               31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 5571, 9086, 4158, 2726, 4528, 6540, 
               4158, 10115, 1800, 6876, 10116, 10117, 7463, 10115, 5571, 
               10116, 10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.2361728549003601, -0.09210039675235748, -0.049278780817985535`, \
-0.10510517656803131`, -9.999999682655225*^-21, -0.08429481089115143, \
-9.999999682655225*^-21, -0.15434935688972473`, -9.999999682655225*^-21, \
-0.3709371089935303, 0.3568291664123535, 
               9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, 0.181747168302536, 
               0.06050436943769455}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.01341680996119976, -0.01840858906507492, \
-0.018691500648856163`, -0.013100460171699524`, 0.013100460171699524`, 
               0.0060952045023441315`, 
               0.018475458025932312`, -0.007840970531105995, \
-0.010173785500228405`, 
               0.01415396947413683, -0.006644744426012039, \
-0.007316935807466507, 0.013100460171699524`, 
               0.00915236584842205, -0.01785114035010338, \
-0.011662065051496029`, 0.0060952045023441315`, 
               0.015539078041911125`, -0.015543113462626934`, 
               
               0.014491806738078594`, -0.004985607694834471, \
-0.01410186942666769, 0.018558191135525703`, 0.018158670514822006`, 
               0.01260562427341938, 0.01840858906507492, 
               0.00601761182770133, -0.018128203228116035`, \
-0.006058325059711933, 0.008177929557859898, 
               0.0031031835824251175`, -0.008204123936593533, 
               0.008551359176635742, 0.013996172696352005`, 0., 
               0.00866898987442255, -0.009103657677769661, 
               0.01298864558339119, 0.01881810650229454}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {22, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               23, -12}, {34, 13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {-1,
                28}, {24, 33}, {-8, -25}, {-4, 30}, {-18, -27}, {-21, -28}, {
               38, 29}, {-29, -30}, {-26, -31}, {36, 
               32}, {-32, -33}, {-24, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-7, -38}, {-23, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 2936, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 2726, 2706, 6540, 
               1800, 6865, 4951, 9866, 10115, 10117, 7463, 10115, 10115, 
               10116, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.25578245520591736`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-0.10510517656803131`, -0.09446139633655548, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
               9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, 0.181747168302536, 
               0.3788796663284302}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.014428176917135715`, -0.018255215138196945`, 
               0.0030864193104207516`, -0.012980562634766102`, 
               0.012980562634766102`, 0.006035374011844397, 
               0.018320318311452866`, -0.007764947600662708, \
-0.010077257640659809`, 
               0.011621398851275444`, -0.006645732559263706, \
-0.007245705928653479, 0.012980562634766102`, 
               0.009064636193215847, -0.017700644209980965`, \
-0.011553287506103516`, 
               0.006035374011844397, -0.003415509592741728, \
-0.01540620531886816, 
               0.014361911453306675`, -0.004936366342008114, \
-0.013974696397781372`, 0.018006566911935806`, 0.018959030508995056`, 
               0.012489466927945614`, 0.018255215138196945`, 
               0.010471059940755367`, -0.01797625608742237, 
               0.0030723006930202246`, -0.007717537228018045, 
               0.016322484239935875`, 0.005866200663149357, 
               0.002146026585251093, 0.013869749382138252`, 
               0., -0.01851644366979599, 0.008585525676608086, 
               0.012870700098574162`, -0.0027083889581263065`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24,
                33}, {32, 30}, {-8, -25}, {-4, 
               28}, {-18, -27}, {-21, -28}, {-26, -29}, {38, 35}, {-24, 
               31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 5015, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 5571, 9086, 4158, 2726, 10115, 6540, 
               4158, 10115, 1800, 6876, 4717, 10117, 7463, 10115, 5571, 5940, 
               10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.2361728549003601, -0.09210039675235748, -0.049278780817985535`, \
-0.10510517656803131`, -0.0883902981877327, -0.08429481089115143, \
-9.999999682655225*^-21, -0.15434935688972473`, -9.999999682655225*^-21, \
-0.3709371089935303, -9.999999682655225*^-21, 
               9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, -0.3576050102710724, 
               0.06050436943769455}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.013247406110167503`, -0.01810588128864765, \
-0.018432745710015297`, -0.012862751260399818`, 0.012862751260399818`, 
               0.005976229906082153, 
               0.012734152376651764`, -0.00768987275660038, \
-0.009982106275856495, 
               0.01544094830751419, -0.006494414061307907, \
-0.007175341714173555, 0.012862751260399818`, 
               0.008978082798421383, -0.017553936690092087`, \
-0.011446218006312847`, 0.005976229906082153, 
               0.0013031529961153865`, -0.015272160060703754`, 
               0.014234521426260471`, -0.004887665156275034, \
-0.01384990569204092, 0.01832140050828457, 0.017858387902379036`, 
               0.012375259771943092`, 0.01810588128864765, 
               0.01137834507972002, -0.01782822050154209, \
-0.006042129825800657, 0.008023444563150406, 0.0030417367815971375`, 
               0.008515389636158943, -0.00811044406145811, 
               0.013745673932135105`, 0., 
               0.008503149263560772, -0.008918531239032745, 
               0.018181724473834038`, 0.018635667860507965`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {22, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               23, -12}, {34, 13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 
               20}, {-16, 26}, {25, -19}, {-9, 35}, {21, 27}, {-17, -22}, {-1,
                28}, {24, 33}, {-8, -25}, {-4, 30}, {-18, -27}, {-21, -28}, {
               38, 29}, {-29, -30}, {-26, -31}, {36, 
               32}, {-32, -33}, {-24, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-7, -38}, {-23, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 9086, 5571, 4158, 4528, 2726, 6540, 
               1800, 6865, 4951, 9866, 10115, 10117, 7463, 10115, 10115, 6876,
                5571}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.09210039675235748, -0.18917298316955566`, -0.049278780817985535`, \
-9.999999682655225*^-21, -0.10510517656803131`, -0.08429481089115143, \
-9.999999682655225*^-21, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
               9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, \
-0.38233935832977295`, -9.999999682655225*^-21}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.014293634332716465`, -0.017960436642169952`, \
-0.0026640782598406076`, -0.012746958993375301`, 0.012746958993375301`, 
               0.005917761009186506, 
               0.018038218840956688`, -0.007615725975483656, \
-0.009888296946883202, 
               0.010873805731534958`, -0.006545932963490486, \
-0.007105824537575245, 0.012746958993375301`, 
               0.008892679587006569, -0.017410874366760254`, \
-0.011340810917317867`, 0.005917761009186506, 
               0.015230881981551647`, -0.015140877105295658`, 
               0.014109551906585693`, -0.0048394957557320595`, \
-0.013727417215704918`, 0.017713988199830055`, 0.018707243725657463`, 
               0.012262942269444466`, 0.005789309274405241, 
               0.017960436642169952`, -0.017683951184153557`, 
               0.003011490684002638, -0.007582999765872955, 
               0.016112100332975388`, 0.005737863481044769, 
               0.002128200139850378, 0.01362387090921402, 
               0., -0.018249180167913437`, 0.008421837352216244, 
               0.012613948434591293`, 0.0031134786549955606`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {23, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               22, -12}, {34, 13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 
               20}, {-16, 25}, {26, -19}, {-9, 36}, {21, 27}, {-17, -22}, {24,
                33}, {32, 30}, {-8, -25}, {-18, -26}, {-4, 
               28}, {-21, -28}, {-27, -29}, {38, 35}, {-24, 
               31}, {-31, -32}, {-1, -33}, {-23, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 2936, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 6865, 8207, 5571, 9086, 4158, 2706, 9866, 4158, 
               10115, 6540, 2726, 6876, 10116, 10117, 7463, 10115, 5571, 5940,
                10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.25578245520591736`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.2361728549003601, -0.09210039675235748, -0.049278780817985535`, \
-0.09446139633655548, -0.082140251994133, -9.999999682655225*^-21, \
-0.15434935688972473`, -0.08429481089115143, -0.10510517656803131`, \
-0.3709371089935303, 0.3568291664123535, 
               9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, -0.3576050102710724, 
               0.06050436943769455}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.013082494027912617`, -0.017818739637732506`, \
-0.01818019337952137, 0.01934228651225567, 0.0126331252977252, 
               0.005859954282641411, 
               0.0124954953789711, -0.007542488165199757, \
-0.009795796126127243, 
               0.011625846847891808`, -0.006463053170591593, \
-0.007037138566374779, 0.0126331252977252, 
               0.008808397687971592, -0.01727132499217987, \
-0.011237017810344696`, 
               0.005859954282641411, -0.0035757271107286215`, \
-0.015012260526418686`, 
               0.01398692186921835, -0.0047918506897985935`, \
-0.013607155531644821`, 0.01809477061033249, 0.01757322996854782, 
               0.012152457609772682`, 
               0.0102107934653759, -0.0126331252977252, \
-0.0060250828973948956`, 0.007872862741351128, -0.017543310299515724`, 
               0.003296834882348776, -0.008054581470787525, 
               0.008527781814336777, 0.013504263944923878`, 0., 
               0.008341564796864986, -0.008752599358558655, 
               0.017898667603731155`, 0.018459714949131012`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {22, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               23, -12}, {34, 13}, {-13, 14}, {-14, -15}, {31, 17}, {-6, 
               20}, {-16, 25}, {26, -19}, {-9, 35}, {21, 29}, {-17, -22}, {-1,
                27}, {24, 33}, {-8, -25}, {-18, -26}, {-4, 30}, {38, 
               28}, {-28, -29}, {-21, -30}, {-27, -31}, {36, 
               32}, {-32, -33}, {-24, -34}, {-5, -35}, {-20, -36}, {-3, -37}, \
{-7, -38}, {-23, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 5015, 6865, 5571, 1322, 4717, 7463, 9866, 3858, 
               6865, 6865, 5571, 9086, 5571, 1275, 6876, 4158, 10115, 9866, 
               2726, 6865, 4951, 9866, 10115, 10117, 7463, 10115, 10115, 
               10116, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.08452989161014557, -0.016207579523324966`, \
-0.5883604288101196, -0.10249967873096466`, -0.09210039675235748, \
-0.18917298316955566`, -0.15292909741401672`, -0.4231659770011902, \
-0.049278780817985535`, -0.0883902981877327, -0.082140251994133, \
-0.10510517656803131`, -0.04620031267404556, -0.36605125665664673`, \
-9.999999682655225*^-21, 0.4169449508190155, 
               9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, 0.181747168302536, 
               0.3788796663284302}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.014162610284984112`, -0.017680654302239418`, 
               0.0031723291613161564`, 0.01916373521089554, 
               0.012521187774837017`, 0.0058027999475598335`, 
               0.01777035742998123, -0.007470142096281052, \
-0.00970456749200821, 
               0.015402736142277718`, -0.006314618047326803, \
-0.0069692679680883884`, 0.012521187774837017`, 
               0.008725211024284363, -0.01713516004383564, \
-0.011134792119264603`, 0.006384776905179024, 
               0.0011327022220939398`, -0.014886217191815376`, 
               0.013866555877029896`, 0.0020372061990201473`, 
               0.01743597909808159, 
               0.018466243520379066`, -0.016533298417925835`, \
-0.013681904412806034`, 0.012043753638863564`, 
               0.011106501333415508`, -0.012521187774837017`, 
               0.003264258150011301, -0.007428816985338926, 
               0.015909019857645035`, 0.005612621549516916, 
               0.0021108323708176613`, 0.013386784121394157`, 
               0., -0.018009310588240623`, 0.008262310177087784, 
               0.012365980073809624`, -0.002652288181707263}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {18, 
               16}, {22, 8}, {-2, 11}, {9, 19}, {37, 10}, {-10, -11}, {
               21, -12}, {34, 13}, {-13, 14}, {-14, -15}, {29, 17}, {-6, 
               20}, {-16, 26}, {27, -19}, {-9, 36}, {24, 23}, {25, 33}, {32, 
               30}, {-21, -24}, {-17, -25}, {-8, -26}, {-18, -27}, {-4, 
               28}, {-28, -29}, {38, 35}, {-23, 
               31}, {-31, -32}, {-1, -33}, {-22, -34}, {-5, -35}, {-30, -36}, \
{-20, -37}, {-7, -38}, {-3, -39}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876,
                4351, 5940, 6540, 6865, 5571, 1322, 4717, 5571, 7463, 3858, 
               10116, 6865, 6865, 5762, 9708, 6865, 9086, 9866, 1557, 6876, 
               4158, 2706, 10116, 8451, 4528, 5571, 6876, 6876, 10115, 10117, 
               8627, 7463, 10115, 6865, 5571, 8946, 10116}], 
             "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.03883035480976105, \
-0.02756432257592678, -0.09327687323093414, -0.03938329964876175, \
-0.23562836647033691`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.119712695479393, \
-0.08778919279575348, -0.08452989161014557, 
               0.7201182246208191, -0.5883604288101196, \
-0.029438268393278122`, -0.039696916937828064`, -0.0641283318400383, \
-0.016207579523324966`, -0.09210039675235748, -0.15825799107551575`, \
-0.15215910971164703`, -0.3715690076351166, -0.049278780817985535`, \
-0.09446139633655548, 
               9.999999682655225*^-21, -0.05083892494440079, \
-0.07542958855628967, -9.999999682655225*^-21, -0.3709371089935303, \
-0.31862738728523254`, 0.25424861907958984`, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 
               0.5477944016456604, -0.08063556253910065, \
-9.999999682655225*^-21, -9.999999682655225*^-21, 0.07496753334999084}], 
             "LeafValues" -> 
             RawArray[
               "Real32",{-0.0021327820140868425`, -0.017546048387885094`, \
-0.017944926396012306`, -0.011750801466405392`, 0.01241108775138855, 
               0.017604157328605652`, -0.012251262553036213`, 
               0.006768656428903341, -0.007398666813969612, 
               0.014162122271955013`, -0.007965453900396824, \
-0.006902195978909731, 0.01241108775138855, 
               0.008643095381557941, -0.01700226031243801, 
               0.012038270011544228`, -0.01103409193456173, \
-0.0036264837253838778`, -0.014140142127871513`, 
               0.00940503366291523, -0.0012158820172771811`, \
-0.015896765515208244`, -0.0036644861102104187`, -0.014762664213776588`, 
               0.01730211079120636, -0.009234005585312843, 
               0.0063495817594230175`, -0.01908024027943611, 
               0.011936773546040058`, 
               0.010036869905889034`, -0.005674608051776886, \
-0.009431217797100544, 0.012590145692229271`, 
               0.0037672268226742744`, -0.007965859957039356, \
-0.003121471032500267, 0.0084935138002038, 
               0.013271363452076912`, -0.017249571159482002`, 0., 
               0.008594795130193233, 
               0.01956390030682087, -0.008577176369726658, \
-0.018037158995866776`, 0.012217162176966667`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 
               7}, {23, 20}, {9, 18}, {-2, 11}, {44, 10}, {-10, -11}, {
               24, -12}, {39, 13}, {-13, 14}, {-14, -15}, {27, 25}, {34, 
               17}, {-17, 29}, {30, 19}, {-19, -20}, {21, 31}, {43, 
               22}, {-22, -23}, {32, -24}, {28, 37}, {41, 26}, {-26, -27}, {
               40, 35}, {-9, -29}, {-18, -30}, {-8, -31}, {-21, 38}, {
               33, -33}, {-4, -34}, {42, 
               36}, {-28, -36}, {-35, -37}, {-25, -38}, {-32, -39}, {-5, \
-40}, {-1, -41}, {-16, -42}, {-3, -43}, {-7, -44}, {-6, -45}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 2936, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 
               9201, 6865, 6865, 6865, 8207, 5571, 9086, 10115, 4158, 9866, 
               4158, 10115, 6540, 2726, 6865, 10117, 7463, 10115, 10115, 
               10115, 10116, 10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.25578245520591736`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, -0.5883604288101196, -0.029438268393278122`, \
-9.999999682655225*^-21, -0.2361728549003601, -0.09210039675235748, \
-0.3419531583786011, -0.049278780817985535`, -0.082140251994133, \
-9.999999682655225*^-21, -0.15434935688972473`, -0.08429481089115143, \
-0.10510517656803131`, -0.04620031267404556, 
               9.999999682655225*^-21, -0.044668592512607574`, 
               0.20791196823120117`, -0.4498637914657593, 
               0.024014312773942947`, 0.3788796663284302, 
               0.06050436943769455}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.012902201153337955`, -0.017414800822734833`, 
               0.0031890342943370342`, 0.018954157829284668`, 
               0.012302772141993046`, 0.005841437727212906, 
               0.01245778426527977, -0.0073280478827655315`, \
-0.00950564257800579, 
               0.011642292141914368`, -0.006287344265729189, \
-0.006835910025984049, 0.012302772141993046`, 
               0.008562025614082813, -0.01687251217663288, 
               0.011040447279810905`, 
               0.005913959350436926, -0.011760230176150799`, 
               0.0127828698605299, -0.014641514047980309`, 
               0.013670035637915134`, -0.004483151715248823, \
-0.013262145221233368`, 0.017827874049544334`, 
               0.017171503975987434`, -0.008330132812261581, 
               0.011831468902528286`, -0.012400423176586628`, \
-0.006065474823117256, 0.00766751728951931, -0.01715189963579178, 
               0.0032038541976362467`, -0.007254910655319691, 
               0.013157935813069344`, 0., -0.017780477181077003`, 
               0.008095252327620983, 
               0.0177724938839674, -0.002625477034598589, 
               0.01827143505215645}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 
               16}, {23, 8}, {-2, 11}, {9, 20}, {37, 10}, {-10, -11}, {
               24, -12}, {34, 13}, {-13, 14}, {-14, -15}, {32, 17}, {-6, 
               21}, {25, 18}, {-18, -19}, {27, -20}, {-9, 36}, {22, 
               30}, {-17, -23}, {-1, 28}, {26, 
               33}, {-16, -26}, {-8, -27}, {-4, 31}, {39, 
               29}, {-29, -30}, {-22, -31}, {-28, -32}, {38, 
               35}, {-25, -34}, {-5, -35}, {-33, -36}, {-21, -37}, {-7, -38}, \
{-3, -39}, {-24, -40}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 
               9201, 6865, 6865, 8207, 6865, 9086, 5571, 10115, 4158, 9866, 
               4158, 10115, 6540, 2726, 6876, 10116, 10117, 7463, 10115, 5571,
                6876, 10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, -0.029438268393278122`, -9.999999682655225*^-21, \
-0.5883604288101196, -0.09210039675235748, -0.2361728549003601, \
-0.3419531583786011, -0.049278780817985535`, -0.082140251994133, \
-9.999999682655225*^-21, -0.15434935688972473`, -0.08429481089115143, \
-0.10510517656803131`, -0.3709371089935303, 0.3568291664123535, 
               9.999999682655225*^-21, -0.044668592512607574`, \
-0.4498637914657593, -9.999999682655225*^-21, -0.38233935832977295`, 
               0.06050436943769455}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.012785838916897774`, -0.017286790534853935`, \
-0.017720285803079605`, 0.018786363303661346`, 0.012196186929941177`, 
               0.005784491077065468, 
               0.017400335520505905`, -0.00725826621055603, \
-0.009418318048119545, 
               0.010875113308429718`, -0.006251349579542875, \
-0.0067703924141824245`, 0.012196186929941177`, 
               0.008481978438794613, -0.016745802015066147`, 
               0.010936531238257885`, 
               0.00585619593039155, -0.011639055795967579`, 
               0.012667229399085045`, -0.014522690325975418`, \
-0.004439324606209993, -0.013150048442184925`, 0.013555364683270454`, 
               0.01704404689371586, 
               0.01768961362540722, -0.008245371282100677, 
               0.011727789416909218`, -0.012292280793190002`, \
-0.006004239432513714, 0.007594515569508076, -0.017024271190166473`, 
               0.0031722330022603273`, -0.007897657342255116, 
               0.008477787487208843, 0.013046440668404102`, 0., 
               0.008019059896469116, -0.00840629544109106, 
               0.012004736810922623`, 0.018121976405382156`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 
               16}, {24, 8}, {-2, 11}, {9, 22}, {38, 10}, {-10, -11}, {
               23, -12}, {35, 13}, {-13, 14}, {-14, -15}, {32, 17}, {-6, 
               20}, {25, 18}, {-18, -19}, {27, -20}, {21, 
               30}, {-17, -22}, {-9, 36}, {26, 34}, {-1, 
               28}, {-16, -26}, {-8, -27}, {-4, 31}, {39, 
               29}, {-29, -30}, {-21, -31}, {-28, -32}, {37, 
               33}, {-33, -34}, {-24, -35}, {-5, -36}, {-23, -37}, {-3, -38}, \
{-7, -39}, {-25, -40}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876,
                4351, 5940, 6540, 6865, 5571, 1322, 4717, 5571, 7463, 3858, 
               10116, 6865, 6865, 5762, 9708, 6865, 9086, 9866, 1557, 6876, 
               4158, 4528, 10116, 4528, 5571, 8451, 6865, 6876, 10117, 8627, 
               7463, 10115, 10115, 6865, 8946, 10116, 10116}], 
             "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.03883035480976105, \
-0.02756432257592678, -0.09327687323093414, -0.03938329964876175, \
-0.23562836647033691`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.119712695479393, \
-0.08778919279575348, -0.08452989161014557, 
               0.7201182246208191, -0.5883604288101196, \
-0.029438268393278122`, -0.039696916937828064`, -0.0641283318400383, \
-0.016207579523324966`, -0.09210039675235748, -0.15825799107551575`, \
-0.15215910971164703`, -0.3715690076351166, -0.049278780817985535`, \
-9.999999682655225*^-21, 
               9.999999682655225*^-21, -0.07542958855628967, \
-9.999999682655225*^-21, -0.05083892494440079, -0.04620031267404556, \
-0.31862738728523254`, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 0.20791196823120117`, 
               0.5477944016456604, -0.08063556253910065, \
-9.999999682655225*^-21, 0.3788796663284302, 0.07496753334999084}], 
             "LeafValues" -> 
             RawArray[
               "Real32",{-0.0020979985129088163`, -0.017161907628178596`, 
               0.0032283375039696693`, -0.011664513498544693`, 
               0.012091279961168766`, 
               0.017244169488549232`, -0.011919994838535786`, 
               0.006810763850808144, -0.0071893068961799145`, 
               0.013991443440318108`, -0.007769240066409111, \
-0.006705631501972675, 0.012091279961168766`, 
               0.008402932435274124, -0.0166220273822546, 
               0.011821823194622993`, -0.010910703800618649`, 
               0.01471131294965744, -0.01385435089468956, 
               0.009218773804605007, -0.001004536752589047, \
-0.01557023823261261, -0.003432072000578046, -0.014406113885343075`, 
               0.016919629648327827`, -0.009174729697406292, 
               0.00621377769857645, -0.01882859505712986, 
               0.011625689454376698`, 
               0.0053603556007146835`, -0.0055015054531395435`, 
               0.012415732257068157`, 
               0.00365822552703321, -0.009054766967892647, \
-0.007108165416866541, -0.0031917509622871876`, 
               0.012936815619468689`, -0.016871046274900436`, 
               0., -0.017562029883265495`, 0.008554928936064243, 
               0.01939167082309723, -0.017687736079096794`, \
-0.0025998239871114492`, 0.011852378025650978`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 
               7}, {23, 20}, {9, 18}, {-2, 11}, {44, 10}, {-10, -11}, {
               24, -12}, {38, 13}, {-13, 14}, {-14, -15}, {27, 25}, {34, 
               17}, {-17, 29}, {30, 19}, {-19, -20}, {21, 33}, {42, 
               22}, {-22, -23}, {31, -24}, {28, 36}, {41, 26}, {-26, -27}, {
               40, 35}, {-9, -29}, {-18, -30}, {-8, -31}, {
               32, -32}, {-4, -33}, {-21, 37}, {43, 
               39}, {-28, -36}, {-25, -37}, {-34, -38}, {-5, -39}, {-35, \
-40}, {-1, -41}, {-16, -42}, {-7, -43}, {-3, -44}, {-6, -45}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 
               9201, 6865, 10116, 6865, 5571, 1275, 9086, 5571, 6876, 10115, 
               4158, 10116, 9866, 2726, 4951, 9866, 6876, 10115, 4717, 10117, 
               7463, 5571, 10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.23562836647033691`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, 
               0.7201182246208191, -0.5883604288101196, \
-0.10249967873096466`, -0.15292909741401672`, -0.09210039675235748, \
-0.18917298316955566`, -0.4231659770011902, -0.3419531583786011, \
-0.049278780817985535`, 
               9.999999682655225*^-21, -0.082140251994133, \
-0.10510517656803131`, -0.36605125665664673`, -9.999999682655225*^-21, \
-0.3709371089935303, 0.4169449508190155, -9.999999682655225*^-21, 
               9.999999682655225*^-21, -0.044668592512607574`, \
-9.999999682655225*^-21, 0.024014312773942947`}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.013886711560189724`, -0.01704004406929016, \
-0.017505614086985588`, 0.01858980394899845, 0.011988001875579357`, 
               0.005820650607347488, 
               0.012085399590432644`, -0.007121153641492128, 
               0.006740648299455643, 
               0.010696318000555038`, -0.006830982863903046, \
-0.006641611456871033, 0.011988001875579357`, 
               0.008324863389134407, -0.016501085832715034`, 
               0.010793609544634819`, 
               0.006656662095338106, -0.01156606711447239, 
               0.012483292259275913`, -0.014291711151599884`, \
-0.013733819127082825`, 0.009131445549428463, 
               0.0024386777076870203`, -0.01592458039522171, 
               0.016798146069049835`, 
               0.01806492730975151, -0.013204206712543964`, \
-0.008196871727705002, 
               0.011525123380124569`, -0.005448315292596817, \
-0.012175648473203182`, 0.0031137894839048386`, 0.015418152324855328`, 
               0.005322372540831566, 0.008439309895038605, 
               0.0020309321116656065`, -0.007813266478478909, 
               0.012829003855586052`, 0., -0.008239725604653358, 
               0.01738904044032097}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 
               16}, {25, 8}, {-2, 11}, {9, 20}, {40, 10}, {-10, -11}, {
               24, -12}, {38, 13}, {-13, 14}, {-14, -15}, {34, 17}, {-6, 
               22}, {27, 18}, {-18, -19}, {30, -20}, {29, 21}, {-21, -22}, {
               26, 23}, {-23, -24}, {28, 37}, {35, 
               32}, {-17, -27}, {-16, -28}, {-8, -29}, {-9, -30}, {-4, 
               31}, {-31, -32}, {-26, 33}, {-33, -34}, {39, 
               36}, {-1, -36}, {-35, -37}, {-25, -38}, {-5, -39}, {-3, -40}, \
{-7, -41}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876,
                4351, 5940, 6540, 6865, 5571, 1322, 4717, 5571, 7463, 3858, 
               10116, 6865, 6865, 5762, 9708, 6865, 9086, 9866, 1557, 6876, 
               4158, 4528, 10116, 8451, 4528, 5571, 6865, 6876, 10117, 8627, 
               7463, 10115, 6865, 10115, 8946, 5571, 10116}], 
             "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.03883035480976105, \
-0.02756432257592678, -0.09327687323093414, -0.03938329964876175, \
-0.23562836647033691`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.119712695479393, \
-0.08778919279575348, -0.08452989161014557, 
               0.7201182246208191, -0.5883604288101196, \
-0.029438268393278122`, -0.039696916937828064`, -0.0641283318400383, \
-0.016207579523324966`, -0.09210039675235748, -0.15825799107551575`, \
-0.15215910971164703`, -0.3715690076351166, -0.049278780817985535`, \
-9.999999682655225*^-21, 
               9.999999682655225*^-21, -0.05083892494440079, \
-0.07542958855628967, -9.999999682655225*^-21, -0.04620031267404556, \
-0.31862738728523254`, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 0.20791196823120117`, -0.08063556253910065, 
               0.5477944016456604, -9.999999682655225*^-21, \
-9.999999682655225*^-21, 0.07496753334999084}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.001979284454137087, -0.01692109741270542, \
-0.002561488188803196, -0.011563465930521488`, 0.01188630424439907, 
               0.017023731023073196`, -0.011685874313116074`, 
               0.006671426352113485, -0.0070537906140089035`, 
               0.013770106248557568`, -0.007627731189131737, \
-0.006578319706022739, 0.01188630424439907, 
               0.008247751742601395, -0.016382882371544838`, 
               0.011604700237512589`, -0.010802105069160461`, 
               0.014507152140140533`, -0.01361546479165554, 
               0.009045273065567017, -0.0009010070352815092, \
-0.01533492747694254, -0.0032847849652171135`, -0.014179414138197899`, 
               0.016679497435688972`, -0.009096750058233738, 
               0.006121586076915264, -0.018602631986141205`, 
               0.0114260483533144, 
               0.005249117035418749, -0.005395702552050352, \
-0.00884179025888443, 0.012273282743990421`, 
               0.003587117185816169, -0.006987189408391714, \
-0.003140542656183243, 0.012722951360046864`, -0.016637954860925674`, 
               0., -0.01733880676329136, 0.01919376291334629, 
               0.008432725444436073, -0.017436347901821136`, 
               0.0032499658409506083`, 0.01161416620016098}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 
               7}, {23, 20}, {9, 18}, {-2, 11}, {44, 10}, {-10, -11}, {
               24, -12}, {38, 13}, {-13, 14}, {-14, -15}, {27, 25}, {34, 
               17}, {-17, 29}, {30, 19}, {-19, -20}, {21, 31}, {42, 
               22}, {-22, -23}, {32, -24}, {28, 36}, {40, 26}, {-26, -27}, {
               41, 35}, {-9, -29}, {-18, -30}, {-8, -31}, {-21, 37}, {
               33, -33}, {-4, -34}, {43, 
               39}, {-28, -36}, {-25, -37}, {-32, -38}, {-5, -39}, {-35, \
-40}, {-16, -41}, {-1, -42}, {-7, -43}, {-3, -44}, {-6, -45}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5940, 6540, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 
               9201, 6865, 10116, 6865, 5571, 1275, 6876, 5571, 9086, 10115, 
               4158, 10116, 9866, 4158, 10115, 2726, 6876, 10116, 10117, 7463,
                5571, 10116, 10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.23562836647033691`, -9.999999682655225*^-21, \
-0.16631430387496948`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, 
               0.7201182246208191, -0.5883604288101196, \
-0.10249967873096466`, -0.15292909741401672`, -0.4231659770011902, \
-0.2361728549003601, -0.09210039675235748, -0.3419531583786011, \
-0.049278780817985535`, 
               9.999999682655225*^-21, -0.082140251994133, \
-9.999999682655225*^-21, -0.15434935688972473`, -0.10510517656803131`, \
-0.3709371089935303, 0.3568291664123535, 
               9.999999682655225*^-21, -0.044668592512607574`, \
-9.999999682655225*^-21, 0.07496753334999084, 0.06050436943769455}], 
             "LeafValues" -> 
             RawArray[
               "Real32",{-0.012598914094269276`, -0.016804970800876617`, \
-0.01729470118880272, 0.01840018481016159, 0.011786144226789474`, 
               0.005854872055351734, 
               0.01690518483519554, -0.006987204309552908, 
               0.006603080779314041, 
               0.010522566735744476`, -0.006701434496790171, \
-0.006515743210911751, 0.011786144226789474`, 
               0.008171575143933296, -0.0162673257291317, 
               0.010654214769601822`, 
               0.006690364796668291, -0.011493685655295849`, 
               0.012304680421948433`, -0.014069152995944023`, \
-0.013499216176569462`, 0.008960227482020855, 
               0.002486706478521228, -0.015697823837399483`, \
-0.01301159244030714, 0.017397494986653328`, 
               0.016563590615987778`, -0.00814843364059925, 
               0.011328420601785183`, -0.00534365838393569, \
-0.012061439454555511`, -0.0060975393280386925`, 0.007342938333749771, 
               0.0030566120985895395`, -0.0077622015960514545`, 
               0.008450514636933804, 0.012618603184819221`, 
               0., -0.008091345429420471, 0.011518019251525402`, 
               0.01793079636991024}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 
               16}, {25, 8}, {-2, 11}, {9, 20}, {39, 10}, {-10, -11}, {
               26, -12}, {37, 13}, {-13, 14}, {-14, -15}, {34, 17}, {-6, 
               22}, {27, 18}, {-18, -19}, {30, -20}, {29, 21}, {-21, -22}, {
               24, 23}, {-23, -24}, {-17, -25}, {-1, 31}, {28, 
               36}, {-16, -28}, {-8, -29}, {-9, -30}, {-4, 33}, {40, 
               32}, {-32, -33}, {-31, -34}, {38, 
               35}, {-35, -36}, {-27, -37}, {-5, -38}, {-3, -39}, {-7, -40}, \
{-26, -41}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876,
                4351, 5940, 2936, 6865, 5571, 1322, 4717, 5571, 7463, 10115, 
               9201, 6865, 10116, 6865, 5762, 9708, 6865, 9086, 9866, 10115, 
               1557, 6876, 5571, 4158, 10116, 2231, 6540, 6865, 6865, 6876, 
               10117, 8627, 7463, 10115, 6865, 10115, 8946, 10116, 10115}], 
             "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.03883035480976105, \
-0.02756432257592678, -0.09327687323093414, -0.03938329964876175, \
-0.23562836647033691`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.25578245520591736`, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.119712695479393, \
-0.08778919279575348, -0.0883902981877327, -9.999999682655225*^-21, \
-0.029438268393278122`, 
               0.7201182246208191, -0.5883604288101196, \
-0.039696916937828064`, -0.0641283318400383, -9.999999682655225*^-21, \
-0.09210039675235748, -0.15825799107551575`, -0.3419531583786011, \
-0.15215910971164703`, -0.3715690076351166, -0.05139482393860817, \
-0.049278780817985535`, 
               9.999999682655225*^-21, -0.053387656807899475`, \
-0.08429481089115143, -0.02878742292523384, -0.04620031267404556, \
-0.31862738728523254`, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 0.20791196823120117`, -0.08063556253910065, 
               0.5477944016456604, -9.999999682655225*^-21, 
               0.3788796663284302, 0.024014312773942947`}], "LeafValues" -> 
             RawArray["Real32",{-0.00194964196998626, -0.01669156923890114, 
               0.003305197460576892, -0.015930568799376488`, 
               0.011687475256621838`, 
               0.011731229722499847`, -0.011459065601229668`, 
               0.006535595282912254, -0.006921377964317799, 
               0.011455468833446503`, -0.007552072871476412, \
-0.0064538693986833096`, 0.011687475256621838`, 
               0.008096316829323769, -0.016154328361153603`, 
               0.011454399675130844`, 
               0.01055605337023735, -0.011377083137631416`, 
               0.012196924537420273`, -0.00389951397664845, \
-0.013385006226599216`, 
               0.008876285515725613, -0.015108989551663399`, \
-0.003141010645776987, -0.017126884311437607`, 
               0.01645033247768879, -0.00901977252215147, \
-0.008066152222454548, 0.006028692703694105, -0.018404822796583176`, 
               0.019004404544830322`, 
               0.01123220194131136, -0.005292174406349659, 
               0.0022044663783162832`, -0.008634289726614952, 
               0.002126912120729685, -0.0068467408418655396`, \
-0.0031588871497660875`, 0.012515909038484097`, -0.01647321879863739, 
               0., -0.017139460891485214`, 0.019032347947359085`, 
               0.00836101733148098, -0.0171966589987278, -0.00255323713645339,
                0.017071854323148727`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 
               7}, {24, 19}, {9, 20}, {-2, 11}, {46, 10}, {-10, -11}, {
               25, -12}, {40, 13}, {-13, 14}, {-14, -15}, {29, 26}, {36, 
               17}, {27, 18}, {-18, -19}, {22, 34}, {32, 21}, {-21, -22}, {44,
                23}, {-23, -24}, {30, -25}, {31, 38}, {42, 
               28}, {-17, -28}, {-27, -29}, {43, 37}, {35, 
               33}, {-9, -32}, {-8, -33}, {-31, -34}, {-20, 39}, {-4, -36}, {
               45, 41}, {-30, -38}, {-26, -39}, {-35, -40}, {-5, -41}, {-37, \
-42}, {-16, -43}, {-1, -44}, {-7, -45}, {-3, -46}, {-6, -47}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 6876,
                4351, 5940, 6540, 6865, 5571, 1322, 4717, 5571, 7463, 3858, 
               6865, 10116, 6865, 5762, 9708, 6865, 9086, 9866, 1557, 6876, 
               5571, 2706, 4158, 10116, 6540, 2231, 6865, 6865, 6876, 10117, 
               8627, 7463, 10115, 6865, 10115, 8946, 10116, 10116}], 
             "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.03883035480976105, \
-0.02756432257592678, -0.09327687323093414, -0.03938329964876175, \
-0.23562836647033691`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.1931752860546112, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.119712695479393, \
-0.08778919279575348, -0.08452989161014557, -0.029438268393278122`, 
               0.7201182246208191, -0.5883604288101196, \
-0.039696916937828064`, -0.0641283318400383, -9.999999682655225*^-21, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-0.3715690076351166, -0.05139482393860817, -0.09446139633655548, \
-0.049278780817985535`, 
               9.999999682655225*^-21, -0.08429481089115143, \
-0.053387656807899475`, -0.02878742292523384, -0.04620031267404556, \
-0.31862738728523254`, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 0.20791196823120117`, -0.08063556253910065, 
               0.5477944016456604, -9.999999682655225*^-21, 
               0.3788796663284302, 0.07496753334999084}], "LeafValues" -> 
             RawArray["Real32",{-0.0019303200533613563`, -0.01658080331981182,
                0.003271915251389146, -0.01577412337064743, 
               0.011590255424380302`, 
               0.016699692234396935`, -0.011365125887095928`, 
               0.006468953564763069, -0.006856299005448818, 
               0.01362214982509613, -0.00742418272420764, \
-0.006392686162143946, 0.011590255424380302`, 
               0.008021954447031021, -0.016043806448578835`, 
               0.011357290670275688`, -0.010685627348721027`, \
-0.003963107708841562, -0.003861728822812438, -0.01327277161180973, 
               0.008793420158326626, -0.01499243825674057, \
-0.003110705642029643, -0.017005860805511475`, 
               0.016339635476469994`, -0.008930199779570103, 
               0.005970134865492582, -0.018252257257699966`, 
               0.018835078924894333`, 0.009455712512135506, 
               0.011137351393699646`, -0.005241240840405226, \
-0.008561664260923862, 0.0021825486328452826`, 
               0.002105675870552659, -0.006782518234103918, \
-0.0031271688640117645`, 0.012414819560945034`, -0.016361409798264503`, 
               0., -0.01701851189136505, 0.018865138292312622`, 
               0.008278382010757923, -0.017073960974812508`, \
-0.002527808304876089, 0.011290219612419605`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {8, 4}, {5, 6}, {16, 12}, {15, 
               7}, {23, 18}, {9, 19}, {-2, 11}, {45, 10}, {-10, -11}, {
               24, -12}, {39, 13}, {-13, 14}, {-14, -15}, {27, 25}, {35, 
               17}, {-17, 29}, {21, 32}, {31, 20}, {-20, -21}, {43, 
               22}, {-22, -23}, {28, -24}, {30, 37}, {41, 26}, {-26, -27}, {
               42, 36}, {34, 33}, {-18, -30}, {-9, -31}, {-8, -32}, {-19, 
               38}, {-29, -34}, {-4, -35}, {44, 
               40}, {-28, -37}, {-25, -38}, {-33, -39}, {-5, -40}, {-36, \
-41}, {-16, -42}, {-1, -43}, {-7, -44}, {-3, -45}, {-6, -46}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                6876, 5015, 5940, 6865, 5571, 1322, 4717, 7463, 9866, 10115, 
               9201, 6865, 5571, 1275, 6876, 6865, 5571, 9086, 10115, 4158, 
               9866, 4158, 10115, 4528, 6876, 10116, 10117, 7463, 6876, 10115,
                5571, 10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.017286919057369232`, -0.03808106482028961, \
-9.999999682655225*^-21, -0.044189415872097015`, -0.08778919279575348, \
-0.08021153509616852, -0.0883902981877327, -9.999999682655225*^-21, \
-0.016207579523324966`, -0.10249967873096466`, -0.15292909741401672`, \
-0.4231659770011902, -0.5883604288101196, -0.2361728549003601, \
-0.09210039675235748, -0.3419531583786011, -0.049278780817985535`, \
-0.082140251994133, -9.999999682655225*^-21, -0.15434935688972473`, \
-0.07542958855628967, -0.3709371089935303, 0.3568291664123535, 
               9.999999682655225*^-21, -0.044668592512607574`, \
-0.3803325295448303, -0.4498637914657593, -9.999999682655225*^-21, 
               0.06050436943769455}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.01245826855301857, -0.0164725873619318, \
-0.01702851802110672, 0.018114756792783737`, 0.011494443751871586`, 
               0.006010487210005522, 
               0.02062710002064705, -0.0067919534631073475`, \
-0.008725515566766262, 
               0.014408509247004986`, -0.005772497970610857, \
-0.006332181394100189, 0.011494443751871586`, 
               0.007948470301926136, -0.015935678035020828`, 
               0.010394933633506298`, 
               0.006805125158280134, -0.011290538124740124`, 
               0.012029663659632206`, -0.01379267405718565, 
               0.002603687345981598, -0.015378866344690323`, \
-0.012747603468596935`, 0.013009613379836082`, 0.017183326184749603`, 
               0.016231419518589973`, -0.008023885078728199, 
               0.011043833568692207`, -0.0008551566861569881, \
-0.00614647101610899, 0.0071660783141851425`, 
               0.011509498581290245`, -0.007669803220778704, 
               0.008457962423563004, 0.012315288186073303`, 0., 
               0.009816563688218594, 
               0.0074418680742383, -0.007849383167922497, 
               0.01775987260043621}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 12}, {19, 
               16}, {24, 8}, {-2, 11}, {9, 23}, {36, 10}, {-10, -11}, {
               25, -12}, {35, 13}, {-13, 14}, {-14, -15}, {32, 17}, {-6, 
               20}, {26, 18}, {-18, -19}, {28, -20}, {22, 
               21}, {-21, -22}, {-17, -23}, {-9, 37}, {-1, 29}, {27, 
               34}, {-16, -27}, {-8, -28}, {-4, 31}, {39, 
               30}, {-30, -31}, {-29, -32}, {38, 
               33}, {-33, -34}, {-26, -35}, {-5, -36}, {-7, -37}, {-24, -38}, \
{-3, -39}, {-25, -40}}], "NominalSplits" -> {}, "RootIndex" -> 1, 
             "NominalDimension" -> 0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5762, 5015, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 3858, 
               10116, 6865, 6865, 9086, 9866, 1557, 4528, 6876, 4158, 10116, 
               8451, 9708, 6865, 5307, 10115, 6876, 4528, 10117, 8627, 7463, 
               6540, 10115, 6865, 5571}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.08452989161014557, 
               0.7201182246208191, -0.5883604288101196, \
-0.016207579523324966`, -0.09210039675235748, -0.15825799107551575`, \
-0.15215910971164703`, -9.999999682655225*^-21, -0.3715690076351166, \
-0.049278780817985535`, 
               9.999999682655225*^-21, -0.05083892494440079, \
-0.12412932515144348`, -0.04620031267404556, -0.049029506742954254`, 
               0.38923919200897217`, -0.31862738728523254`, \
-0.07542958855628967, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, -0.08429481089115143, 
               0.20791196823120117`, -0.08063556253910065, \
-9.999999682655225*^-21}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.00783531367778778, -0.01636684127151966, \
-0.002515963278710842, -0.0046223304234445095`, -0.0005084308213554323, 
               0.011400002054870129`, 
               0.006453874055296183, -0.00672832690179348, 
               0.018292415887117386`, -0.0063893492333590984`, \
-0.00045754111488349736`, 0.011212038807570934`, -0.00627234298735857, 
               0.011400002054870129`, 
               0.007875846698880196, -0.015829868614673615`, \
-0.010581943206489086`, 0.01411103643476963, -0.01309327781200409, 
               0.008667672984302044, -0.013689214363694191`, 
               0.016125602647662163`, -0.008858566172420979, 
               0.005886598024517298, 
               0.0049478416331112385`, -0.018215851858258247`, 
               0.010951612144708633`, -0.0051383934915065765`, \
-0.008361276239156723, -0.01623234897851944, -0.0066464426927268505`, 
               0.0018652596045285463`, 
               0.009895789436995983, -0.0031449974048882723`, 
               0.018257413059473038`, 
               0.012217268347740173`, -0.0092787966132164, 
               0., -0.016220122575759888`, -0.016832435503602028`, 
               0.018709102645516396`, 0.0033133511897176504`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 18}, {-2, 12}, {29, 9}, {-9, -10}, {20, 28}, {25, 
               22}, {21, -13}, {37, 14}, {-14, 15}, {-15, -16}, {30, 
               17}, {-17, 24}, {27, 19}, {-19, -20}, {31, -21}, {26, 35}, {40,
                23}, {-23, -24}, {-18, -25}, {32, 
               33}, {-8, -27}, {-7, -28}, {-11, 36}, {-5, -30}, {41, 39}, {-4,
                34}, {-1, -33}, {-26, -34}, {-32, -35}, {-22, -36}, {-29, 
               38}, {-6, -38}, {-37, -39}, {-31, -40}, {-12, -41}, {-3, \
-42}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
             "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5762, 5015, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 10115, 
               9201, 10115, 10116, 6865, 6865, 9086, 9866, 1557, 6876, 4158, 
               10116, 6540, 9708, 6876, 5307, 10115, 6876, 4528, 10116, 10117,
                8627, 9866, 7463, 6865, 5571}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.1265643686056137, -9.999999682655225*^-21, \
-0.3419531583786011, 
               0.7201182246208191, -0.5883604288101196, \
-0.016207579523324966`, -0.09210039675235748, -0.15825799107551575`, \
-0.15215910971164703`, -0.3715690076351166, -0.049278780817985535`, 
               9.999999682655225*^-21, -0.08429481089115143, \
-0.12412932515144348`, -0.3709371089935303, -0.049029506742954254`, 
               0.38923919200897217`, -0.31862738728523254`, \
-0.07542958855628967, 0.3568291664123535, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.06374698132276535, -0.044668592512607574`, -0.08063556253910065, \
-9.999999682655225*^-21}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.007759406231343746, -0.016263484954833984`, \
-0.016838442534208298`, -0.004575507249683142, -0.0005033771158196032, 
               0.011306892149150372`, 
               0.006388247013092041, -0.006665408611297607, 
               0.01809697411954403, -0.006328871939331293, \
-0.003641449147835374, 0.01111837662756443, -0.006213159766048193, 
               0.011306892149150372`, 
               0.007804065942764282, -0.015726301819086075`, 
               0.010264732874929905`, -0.011220677755773067`, 
               0.011310689151287079`, -0.011078434064984322`, \
-0.012985958717763424`, 0.008587450720369816, -0.01358751393854618, 
               0.016022108495235443`, -0.008771220222115517, 
               0.005829582456499338, -0.018068496137857437`, 
               0.010860651731491089`, -0.005089092534035444, \
-0.00829161424189806, -0.01610981859266758, -0.0075801219791173935`, 
               0.0018467832123860717`, 
               0.009797781705856323, -0.003113427432253957, 
               0.018108583986759186`, 0.008418917655944824, 
               0.012120716273784637`, -0.007019983138889074, \
-0.016175057739019394`, 0., 0.018550772219896317`, -0.007710547186434269}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 20}, {-2, 12}, {30, 9}, {-9, -10}, {22, 29}, {26, 
               24}, {23, -13}, {40, 14}, {-14, 15}, {-15, -16}, {31, 17}, {19,
                18}, {-18, -19}, {-17, -20}, {28, 21}, {-21, -22}, {
               32, -23}, {27, 37}, {41, 25}, {-25, -26}, {33, 
               34}, {-8, -28}, {-7, -29}, {-11, 38}, {-5, -31}, {42, 36}, {-4,
                35}, {-1, -34}, {-27, -35}, {-33, -36}, {-32, -37}, {-24, \
-38}, {-30, 39}, {-39, -40}, {-6, -41}, {-12, -42}, {-3, -43}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5762, 5015, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 10115, 
               9201, 10116, 6865, 6865, 9086, 9866, 10115, 1557, 6876, 4158, 
               10116, 8451, 9708, 6865, 5307, 10115, 6876, 4528, 10117, 8627, 
               7463, 10115, 6540, 6865, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.0883902981877327, -9.999999682655225*^-21, 
               0.7201182246208191, -0.5883604288101196, \
-0.016207579523324966`, -0.09210039675235748, -0.15825799107551575`, \
-0.3419531583786011, -0.15215910971164703`, -0.3715690076351166, \
-0.049278780817985535`, 
               9.999999682655225*^-21, -0.05083892494440079, \
-0.12412932515144348`, -0.04620031267404556, -0.049029506742954254`, 
               0.38923919200897217`, -0.31862738728523254`, \
-0.07542958855628967, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, 
               0.20791196823120117`, -0.08429481089115143, \
-0.08063556253910065, 0.3788796663284302}], "LeafValues" -> 
             RawArray["Real32",{-0.007684442680329084, -0.016162442043423653`,
                0.003367105731740594, -0.004529210738837719, \
-0.0004983734688721597, 0.01121507678180933, 
               0.006323426496237516, -0.006603185087442398, 
               0.017906665802001953`, -0.006269060540944338, \
-0.00034188691643066704`, 0.011026010848581791`, -0.00615462101995945, 
               0.01121507678180933, 
               0.007733112201094627, -0.015624906867742538`, 
               0.010172093287110329`, -0.011108610779047012`, 
               0.011767004616558552`, -0.012880401685833931`, 
               0.008508219383656979, -0.013487518765032291`, 
               0.015920864418148994`, -0.008685055188834667, \
-0.007915439084172249, 0.005773198325186968, -0.017924942076206207`, 
               0.010770917870104313`, -0.005040309391915798, \
-0.008222691714763641, -0.015989942476153374`, -0.006513350177556276, 
               0.0018284901743754745`, 
               0.009701198898255825, -0.0030821904074400663`, 
               0.01796361617743969, 
               0.012025590054690838`, -0.009161403402686119, 
               0., -0.0166542436927557, -0.016013488173484802`, 
               0.018396617844700813`, -0.0025098545011132956`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 19}, {-2, 12}, {30, 9}, {-9, -10}, {21, 29}, {26, 
               23}, {22, -13}, {38, 14}, {-14, 15}, {-15, -16}, {31, 17}, {24,
                18}, {-18, -19}, {28, 20}, {-20, -21}, {32, -22}, {27, 36}, {
               41, 25}, {-17, -25}, {-24, -26}, {33, 
               34}, {-8, -28}, {-7, -29}, {-11, 37}, {-5, -31}, {42, 39}, {-4,
                35}, {-1, -34}, {-27, -35}, {-33, -36}, {-23, -37}, {-30, 
               40}, {-6, -39}, {-32, -40}, {-38, -41}, {-12, -42}, {-3, \
-43}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
             "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5762, 5015, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 3858, 
               10116, 6865, 6865, 9086, 9866, 1557, 2706, 6876, 4158, 10116, 
               8451, 9708, 6876, 5307, 10115, 6876, 4528, 10116, 10117, 8627, 
               7463, 4785, 6865, 5571}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.08452989161014557, 
               0.7201182246208191, -0.5883604288101196, \
-0.016207579523324966`, -0.09210039675235748, -0.15825799107551575`, \
-0.15215910971164703`, -0.09446139633655548, -0.3715690076351166, \
-0.049278780817985535`, 
               9.999999682655225*^-21, -0.05083892494440079, \
-0.12412932515144348`, -0.3709371089935303, -0.049029506742954254`, 
               0.38923919200897217`, -0.31862738728523254`, \
-0.07542958855628967, 0.3568291664123535, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.044668592512607574`, -0.0815085768699646, -0.08063556253910065, \
-9.999999682655225*^-21}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.007610402535647154, -0.016063641756772995`, \
-0.016661694273352623`, -0.004483434371650219, -0.0004934185417369008, 
               0.011124521493911743`, 
               0.006259399000555277, -0.006541643291711807, 
               
               0.017721278592944145`, -0.006209901999682188, \
-0.00033848220482468605`, 0.010934905149042606`, -0.006096715107560158, 
               0.011124521493911743`, 
               0.007662965916097164, -0.015525616705417633`, \
-0.01045851781964302, -0.004126760642975569, -0.012776552699506283`, 
               0.008429959416389465, -0.013389176689088345`, 
               0.015821797773241997`, -0.008600044995546341, 
               0.005717436783015728, 
               0.009116248227655888, -0.017785051837563515`, 
               0.010682379826903343`, -0.004992038011550903, \
-0.008154492825269699, -0.01587262749671936, -0.007500599604099989, 
               0.0018103803740814328`, 
               0.009606003761291504, -0.0030512819066643715`, 
               0.017822368070483208`, 0.008379966951906681, 
               0.01193185057491064, -0.009875116869807243, 
               0., -0.01593048870563507, 
               0.01824648305773735, -0.007560908794403076}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 18}, {-2, 12}, {29, 9}, {-9, -10}, {20, 28}, {25, 
               22}, {21, -13}, {38, 14}, {-14, 15}, {-15, -16}, {30, 
               17}, {-17, 24}, {27, 19}, {-19, -20}, {31, -21}, {26, 36}, {40,
                23}, {-23, -24}, {-18, -25}, {32, 
               33}, {-8, -27}, {-7, -28}, {-11, 37}, {-5, -30}, {41, 35}, {-4,
                34}, {-1, -33}, {-26, -34}, {-32, -35}, {-31, -36}, {-22, \
-37}, {-29, 39}, {-6, -39}, {-38, -40}, {-12, -41}, {-3, -42}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5762, 5015, 6766, 5571, 6865, 5571, 1322, 4717, 7561, 4717, 
               4528, 5571, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 4528, 
               6876, 4158, 10116, 9708, 10115, 6876, 10117, 1026, 8627, 10115,
                7463, 6865, 6876}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.08622151613235474, -9.999999682655225*^-21, 
               0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.10004036128520966`, -0.3715690076351166, -0.049278780817985535`, 
               9.999999682655225*^-21, -0.12412932515144348`, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.08941143751144409, -0.07903441786766052, -0.044668592512607574`, \
-0.08063556253910065, -0.409895658493042}], "LeafValues" -> 
             RawArray["Real32",{-0.007537268567830324, -0.01596701703965664, 
               0.007178310304880142, 
               0.014736046083271503`, -0.0004885132075287402, 
               0.0110351936891675, 0.006196149624884129, -0.00648077204823494,
                0.017540616914629936`, -0.00615138653665781, 
               0.013094213791191578`, 
               0.01084502786397934, -0.006039433181285858, 0.0110351936891675,
                0.007593614049255848, -0.01542836707085371, \
-0.006376828067004681, 0.005005538929253817, -0.004815382417291403, 
               0.011933907866477966`, 
               0.0011531640775501728`, -0.012674358673393726`, 
               0.008352650329470634, 
               0.015724847093224525`, -0.008516162633895874, \
-0.017342017963528633`, 
               0.0056622871197760105`, -0.007568054832518101, \
-0.017648693174123764`, 
               0.010595006868243217`, -0.004944269545376301, \
-0.015757793560624123`, 0.009512163698673248, -0.00302069797180593, 
               0.011839454993605614`, -0.00808700267225504, \
-0.01577773503959179, 0.017411628738045692`, 0., 0.01810021698474884, 
               0.012535023503005505`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 21}, {-2, 12}, {31, 9}, {-9, -10}, {-4, 18}, {28, 
               24}, {23, -13}, {38, 14}, {-14, 15}, {-15, -16}, {37, 17}, {19,
                27}, {20, 35}, {-17, -20}, {-11, 25}, {30, 22}, {-22, -23}, {
               29, 34}, {39, 26}, {-21, -26}, {-25, -27}, {-18, -28}, {32, 
               33}, {-8, -30}, {-7, -31}, {-5, -32}, {-1, -33}, {-29, -34}, \
{-24, -35}, {-19, 36}, {-36, -37}, {-3, 
               40}, {-6, -39}, {-12, -40}, {-38, -41}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5940, 2936, 6766, 5571, 6865, 5571, 1322, 4717, 7463, 4528, 
               10115, 9201, 10115, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 
               6876, 4158, 10116, 6865, 10115, 6876, 10117, 1026, 9866, 7463, 
               10115, 6865, 10115, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.25578245520591736`, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -9.999999682655225*^-21, -0.1265643686056137, \
-9.999999682655225*^-21, -0.3419531583786011, -9.999999682655225*^-21, 
               0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.3715690076351166, -0.049278780817985535`, 
               9.999999682655225*^-21, -0.04620031267404556, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.044668592512607574`, 
               0.20791196823120117`, -0.08063556253910065, 
               0.024014312773942947`, 0.3788796663284302}], "LeafValues" -> 
             RawArray["Real32",{-0.007465021219104528, -0.015872497111558914`,
                0.003373275976628065, 0.014587298966944218`, 
               0.009904888458549976, 0.010947057977318764`, 
               0.006133664399385452, -0.006420560646802187, 
               0.011736947111785412`, -0.007604007143527269, 
               0.012977088801562786`, 
               0.010756345465779305`, -0.005982763599604368, 
               0.010947057977318764`, 
               0.007525039836764336, -0.015333091840147972`, 
               0.009987704455852509, -0.004771798383444548, \
-0.01101207546889782, 0.011016369797289371`, -0.010890858247876167`, 
               0.0011416771449148655`, -0.012573772110044956`, 
               0.008276269771158695, 
               0.01562993973493576, -0.008433381095528603, \
-0.01721855439245701, 0.005607738625258207, -0.017515741288661957`, 
               0.010508767329156399`, -0.00489699887111783, \
-0.0064445314928889275`, 0.009419642388820648, -0.002990434877574444, 
               0.01174836978316307, -0.006563149858266115, \
-0.01565929874777794, 0., -0.016461307182908058`, 0.01795768178999424, 
               0.01695726253092289, -0.0025107471738010645`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 22}, {-2, 12}, {40, 9}, {-9, -10}, {-4, 17}, {28, 
               25}, {24, -13}, {37, 14}, {-14, 15}, {-15, -16}, {31, 18}, {21,
                35}, {20, 19}, {-19, -20}, {-17, -21}, {-11, 26}, {30, 
               23}, {-23, -24}, {29, 34}, {39, 27}, {-22, -27}, {-26, -28}, {
               32, 33}, {-8, -30}, {-7, -31}, {41, 
               38}, {-1, -33}, {-29, -34}, {-25, -35}, {-18, 
               36}, {-36, -37}, {-6, -38}, {-32, -39}, {-12, -40}, {-5, -41}, \
{-3, -42}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5762, 6540, 4528, 5571, 6865, 5571, 1322, 4717, 7463, 10115, 
               9201, 10116, 6865, 6865, 9086, 10115, 9866, 1557, 10116, 6876, 
               4158, 6540, 9708, 6876, 5307, 10115, 6876, 4528, 10115, 10117, 
               9866, 8627, 7463, 6865, 5571}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-0.08778919279575348, -0.0883902981877327, -9.999999682655225*^-21, 
               0.6638875603675842, -0.5883604288101196, \
-0.016207579523324966`, -0.09210039675235748, -0.3419531583786011, \
-0.15825799107551575`, -0.15215910971164703`, 
               0.27920687198638916`, -0.3715690076351166, \
-0.049278780817985535`, -0.08429481089115143, -0.12412932515144348`, \
-0.3709371089935303, -0.049029506742954254`, 
               0.38923919200897217`, -0.31862738728523254`, \
-0.07542958855628967, 0.25424861907958984`, 
               9.999999682655225*^-21, -0.06374698132276535, \
-0.08941143751144409, -0.044668592512607574`, -0.08063556253910065, \
-9.999999682655225*^-21}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.007393642328679562, -0.015780022367835045`, \
-0.016473645344376564`, -0.0043967715464532375`, -0.00044331385288387537`, 
               0.010860083624720573`, -0.0005676760338246822, \
-0.006360996514558792, 
               0.008686804212629795, -0.006311972159892321, \
-0.0032631047070026398`, 0.010668826289474964`, -0.005926697514951229, 
               0.010860083624720573`, 
               0.007457227446138859, -0.015239735133945942`, 
               0.009898829273879528, -0.010903379879891872`, 
               0.011469464749097824`, -0.012474745512008667`, 
               0.00760315265506506, -0.013081525452435017`, 
               0.015537019819021225`, -0.0078017739579081535`, \
-0.008351677097380161, 
               0.005553783383220434, -0.018281040713191032`, \
-0.017386073246598244`, 
               0.0104236314073205, -0.006502105388790369, \
-0.015591648407280445`, -0.007449852302670479, 0.0016278147231787443`, 
               0.009328409098088741, -0.002960488200187683, 
               0.017560945823788643`, 0.008306370116770267, 
               0.011658554896712303`, -0.007891245186328888, \
-0.015691475942730904`, 0., 0.017818737775087357`, -0.007447018753737211}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 19}, {-2, 12}, {30, 9}, {-9, -10}, {21, 29}, {27, 
               24}, {22, -13}, {40, 14}, {-14, 15}, {-15, -16}, {31, 17}, {23,
                18}, {-18, -19}, {26, 20}, {-20, -21}, {32, -22}, {28, 
               37}, {-17, -24}, {41, 25}, {-25, -26}, {-7, -27}, {33, 
               34}, {-8, -29}, {-11, 38}, {-5, -31}, {42, 36}, {-4, 
               35}, {-1, -34}, {-28, -35}, {-33, -36}, {-32, -37}, {-23, \
-38}, {-30, 39}, {-39, -40}, {-6, -41}, {-12, -42}, {-3, -43}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5940, 2936, 6766, 5571, 6865, 5571, 1322, 4717, 7561, 4717, 
               4528, 5571, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 4528, 
               6876, 4158, 10116, 10115, 6876, 10117, 1026, 9866, 10115, 7463,
                6865, 10115, 6876}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.25578245520591736`, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.08622151613235474, -9.999999682655225*^-21, 
               0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.10004036128520966`, -0.3715690076351166, -0.049278780817985535`, 
               9.999999682655225*^-21, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.07903441786766052, -0.044668592512607574`, \
-0.08063556253910065, 0.024014312773942947`, -0.409895658493042}], 
             "LeafValues" -> 
             RawArray["Real32",{-0.007323115132749081, -0.015689529478549957`,
                0.007117944769561291, 0.014434942044317722`, 
               0.009873329661786556, 0.010774240829050541`, 
               0.006077638361603022, -0.006302068941295147, 
               0.011678933165967464`, -0.0074750157073140144`, 
               0.012857438065111637`, 
               0.010582441464066505`, -0.005871224217116833, 
               0.010774240829050541`, 
               0.007390164770185947, -0.015148235484957695`, \
-0.006336950697004795, 0.004894633777439594, -0.004622271284461021, 
               0.011736792512238026`, 
               0.001098914653994143, -0.012377232313156128`, 
               0.008131647482514381, 
               0.015446024015545845`, -0.008271025493741035, \
-0.01702614314854145, 
               0.005500410217791796, -0.007499251049011946, \
-0.01725957542657852, 0.010339573957026005`, -0.004833943676203489, 
               0.009238429367542267, -0.0029308549128472805`, 
               0.011569976806640625`, -0.006441716104745865, \
-0.015474502928555012`, 0.017121994867920876`, 0., 0.01768326200544834, 
               0.016879206523299217`, 0.0123116634786129}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 21}, {-2, 12}, {39, 9}, {-9, -10}, {-4, 18}, {28, 
               24}, {23, -13}, {37, 14}, {-14, 15}, {-15, -16}, {36, 17}, {19,
                27}, {20, 34}, {-17, -20}, {-11, 25}, {30, 22}, {-22, -23}, {
               29, 33}, {38, 26}, {-21, -26}, {-25, -27}, {-18, -28}, {31, 
               32}, {-8, -30}, {-7, -31}, {-1, -32}, {-29, -33}, {-24, -34}, \
{-19, 35}, {-35, -36}, {-3, 
               40}, {-6, -38}, {-12, -39}, {-5, -40}, {-37, -41}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5762, 5015, 4528, 5571, 6865, 7463, 1322, 7463, 4528, 3377, 
               10116, 6865, 9086, 6865, 10115, 6876, 10116, 5571, 10116, 5571,
                6876, 8451, 4158, 9708, 6865, 6876, 6876, 10115, 6876, 10117, 
               8627, 4785, 10115, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.044668592512607574`, -9.999999682655225*^-21, -0.08778919279575348, \
-9.999999682655225*^-21, -0.07246946543455124, 
               0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.016207579523324966`, -0.15434935688972473`, -0.3715690076351166, 
               0.2675747871398926, -0.05931930989027023, 
               0.27920687198638916`, -0.04706219583749771, \
-0.3715690076351166, -0.05083892494440079, -9.999999682655225*^-21, \
-0.12412932515144348`, -0.04620031267404556, -0.4421539306640625, \
-0.41041773557662964`, 0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.0815085768699646, 0.20791196823120117`, 0.3788796663284302}], "LeafValues" -> 
             RawArray["Real32",{-0.00725342333316803, -0.01560095977038145, 
               0.003357101697474718, -0.005908996798098087, \
-0.00039944503805600107`, 
               0.006414064671844244, -0.0005490080802701414, \
-0.003546847263351083, 0.017543228343129158`, -0.005919880699366331, 
               0.00003271095556556247, -0.012484016828238964`, \
-0.005816335324198008, 0.010689498856663704`, 0.0028571428265422583`, 
               0.00006915244011906907, -0.011895519681274891`, 
               0.004809647332876921, -0.012281186878681183`, 
               0.007469917647540569, 
               0.015356896445155144`, -0.012888901866972446`, 
               0.011792121455073357`, 0.008989058434963226, 
               0.004374164156615734, -0.01445637084543705, \
-0.018091820180416107`, 
               0.017336808145046234`, -0.017136141657829285`, \
-0.007699665613472462, 
               0.011017970740795135`, -0.015430879779160023`, \
-0.0063536944799125195`, 0.017723973840475082`, -0.0033257126342505217`, 
               0.009149676188826561, -0.0029015305917710066`, 
               0.01148260198533535, -0.00941305048763752, \
-0.015466435812413692`, -0.016277829185128212`, -0.0025113672018051147`}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {15, 
               13}, {8, 18}, {-2, 12}, {31, 9}, {-9, -10}, {21, 29}, {28, 
               22}, {20, -13}, {-6, 14}, {-14, 25}, {32, 16}, {27, 
               17}, {-17, -18}, {26, 19}, {-19, -20}, {30, 37}, {33, -22}, {
               23, 24}, {-12, -24}, {-23, -25}, {-15, -26}, {-7, -27}, {-16, \
-28}, {35, 36}, {-11, 38}, {-8, -31}, {-5, -32}, {41, 40}, {-4, 
               34}, {-34, -35}, {-1, -36}, {-29, -37}, {-21, -38}, {-30, 
               39}, {-39, -40}, {-33, -41}, {-3, -42}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5762, 6540, 6766, 5571, 6865, 5571, 1322, 4717, 7561, 4717, 
               4528, 5571, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 6876, 
               10116, 6876, 4158, 9708, 10115, 6876, 10117, 1026, 8627, 10115,
                7463, 6865, 6876}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.05483130365610123, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03808106482028961, -9.999999682655225*^-21, -0.044189415872097015`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.08622151613235474, -9.999999682655225*^-21, 
               0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.42219841480255127`, 
               0.27920687198638916`, -0.3715690076351166, \
-0.049278780817985535`, -0.12412932515144348`, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.08941143751144409, -0.07903441786766052, -0.044668592512607574`, \
-0.08063556253910065, -0.409895658493042}], "LeafValues" -> 
             RawArray["Real32",{-0.007184549700468779, -0.015514258295297623`,
                0.007003281265497208, 
               0.014333393424749374`, -0.0003954698331654072, 
               0.010639247484505177`, -0.0005435373750515282, \
-0.006210991181433201, 0.008734303526580334, -0.006143623031675816, 
               0.012725785374641418`, 
               0.010448400862514973`, -0.005762021988630295, 
               0.010605831630527973`, 
               0.0073835840448737144`, -0.014976841397583485`, \
-0.00624139653518796, 0.0025906648952513933`, -0.00446351058781147, 
               0.011579728685319424`, 
               0.0010335645638406277`, -0.012186569161713123`, 
               0.007400720380246639, 
               0.015269584022462368`, -0.00823951605707407, \
-0.016838302835822105`, 
               0.005391687620431185, -0.008442279882729053, \
-0.017946740612387657`, -0.017015665769577026`, 
               0.010179458186030388`, -0.015325105749070644`, 
               0.009062117896974087, -0.002872511511668563, 
               0.011396395973861217`, -0.007636743597686291, \
-0.01532011292874813, 0.016972271725535393`, -6.929842584213475*^-6, 
               0.017511414363980293`, 0.012171787209808826`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {16, 
               13}, {8, 21}, {-2, 12}, {31, 9}, {-9, -10}, {-4, 18}, {29, 
               24}, {23, -13}, {38, 14}, {-14, 15}, {-15, -16}, {37, 17}, {19,
                27}, {20, 35}, {-17, -20}, {-11, 25}, {28, 22}, {-22, -23}, {
               30, 34}, {39, 
               26}, {-21, -26}, {-25, -27}, {-18, -28}, {-7, -29}, {32, 
               33}, {-8, -31}, {-5, -32}, {-1, -33}, {-30, -34}, {-24, -35}, \
{-19, 36}, {-36, -37}, {-3, 40}, {-6, -39}, {-12, -40}, {-38, -41}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 4351,
                5940, 2936, 6766, 5571, 6865, 7463, 1322, 7561, 4717, 4528, 
               5571, 1800, 10116, 6865, 9086, 10115, 6876, 10116, 6865, 5571, 
               4528, 6876, 4158, 10116, 10115, 6876, 10117, 1026, 9866, 10115,
                10115, 6876}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.25578245520591736`, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.044668592512607574`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.08622151613235474, \
-9.999999682655225*^-21, 
               0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15434935688972473`, -0.3715690076351166, 
               0.2675747871398926, -0.02459155023097992, \
-0.05931930989027023, -0.10004036128520966`, -0.3715690076351166, \
-9.999999682655225*^-21, 9.999999682655225*^-21, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.07903441786766052, 
               0.024014312773942947`, -0.409895658493042}], "LeafValues" -> 
             RawArray["Real32",{-0.007116479333490133, -0.015429368242621422`,
                0.006935920566320419, 0.01419297605752945, 
               0.009875858202576637, 0.0063268644735217094`, 
               0.006027540657669306, -0.003501969389617443, 
               0.01167234592139721, -0.007290428038686514, 
               0.012614939361810684`, -0.012418118305504322`, \
-0.005708274431526661, 0.010523209348320961`, 
               0.002828646218404174, -0.006180088501423597, 
               0.004822848364710808, -0.004423160571604967, 
               0.011480044573545456`, 
               0.0010232713539153337`, -0.012093338184058666`, 
               0.00792345404624939, 0.015184029936790466`, 
               0.011631567031145096`, 0.008852527476847172, 
               0.004280634690076113, -0.016726795583963394`, \
-0.014284384436905384`, -0.0073797139339149, -0.01689804531633854, 
               0.010852132923901081`, -0.004756277892738581, 
               0.008975725620985031, -0.002843794645741582, 
               0.011311329901218414`, -0.006129272747784853, \
-0.015211629681289196`, 0.016855061054229736`, 0.01683778315782547, 
               0.012068920768797398`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 5}, {4, 10}, {11, 6}, {15, 
               13}, {8, 20}, {-2, 12}, {38, 9}, {-9, -10}, {-4, 17}, {29, 
               23}, {22, -13}, {-6, 14}, {-14, 27}, {37, 16}, {18, 28}, {19, 
               35}, {-16, -19}, {-11, 26}, {31, 21}, {-21, -22}, {30, 34}, {
               24, 25}, {-12, -25}, {-24, -26}, {-20, -27}, {-15, -28}, {-17, \
-29}, {32, 33}, {-8, -31}, {-7, -32}, {-1, -33}, {-30, -34}, {-23, -35}, {-18,
                36}, {-36, -37}, {-3, 39}, {-5, -39}, {-38, -40}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 6865, 4528, 4528, 4351,
                7463, 5015, 4302, 6876, 6865, 4528, 9866, 7463, 5571, 7737, 
               10115, 9201, 5571, 6865, 6876, 1275, 5571, 9086, 10115, 9866, 
               4158, 10115, 4158, 1800, 3462, 6876, 10115, 10117, 5571, 5015, 
               10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.042195938527584076`, \
-0.02756432257592678, -0.03938329964876175, -0.17170850932598114`, \
-9.999999682655225*^-21, -0.11664609611034393`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.27142372727394104`, -0.017286919057369232`, \
-0.03205364570021629, -0.08021153509616852, -0.08778919279575348, \
-0.030474426224827766`, -9.999999682655225*^-21, -0.0883902981877327, \
-9.999999682655225*^-21, -0.10249967873096466`, -9.999999682655225*^-21, \
-0.4231659770011902, -0.15292909741401672`, -0.2361728549003601, \
-0.09210039675235748, -0.3419531583786011, -0.082140251994133, \
-9.999999682655225*^-21, -0.15434935688972473`, -0.049278780817985535`, \
-0.1755991280078888, -9.999999682655225*^-21, -0.3709371089935303, 
               0.25424861907958984`, 
               9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.3245195150375366, 0.06050436943769455}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.012325786054134369`, -0.015346238389611244`, \
-0.016249880194664, 0.017594238743185997`, 0.010013389401137829`, 
               0.006916522979736328, 
               0.01455429382622242, -0.00612135324627161, 
               0.020541537553071976`, -0.004124477971345186, 
               0.007882210426032543, 
               0.002946276217699051, -0.00565508333966136, 
               0.0030234099831432104`, 0.007613136898726225, 
               0.009670872241258621, 
               0.0003720859531313181, -0.011269443668425083`, \
-0.010807600803673267`, 0.011182223446667194`, 
               0.003050141502171755, -0.01575847715139389, \
-0.011776329018175602`, -0.014312125742435455`, 0.01661432534456253, 
               0.015100184828042984`, -0.007749011740088463, 
               0.013632251881062984`, -0.006465048994868994, 
               0.006549416575580835, 
               0.010023198090493679`, -0.0009886465268209577, \
-0.01408045832067728, -0.007412909530103207, 0.008208140730857849, 
               0.011227373033761978`, -0.00738100940361619, 
               0.019403746351599693`, 0.01755351945757866}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {7, 4}, {6, 5}, {15, 13}, {21, 
               14}, {24, 8}, {-2, 12}, {10, 9}, {37, 11}, {-7, 
               17}, {-10, -12}, {25, -13}, {-5, 16}, {-6, 20}, {33, 18}, {-14,
                32}, {-11, -18}, {26, 19}, {-19, -20}, {22, 23}, {
               27, -22}, {-15, -23}, {-21, -24}, {-1, 28}, {30, 
               35}, {-16, -27}, {-4, 31}, {38, 
               29}, {-29, -30}, {-8, -31}, {-28, -32}, {-17, -33}, {36, 
               34}, {-34, -35}, {-26, -36}, {-3, -37}, {-9, -38}, {-25, \
-39}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
             "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5762,
                6540, 4351, 6766, 5571, 6865, 7463, 1322, 7561, 4717, 4528, 
               5571, 1800, 10116, 6865, 9086, 9866, 6865, 5571, 4951, 6876, 
               10116, 6876, 6865, 9708, 10115, 6876, 10117, 1026, 8627, 10115,
                6865, 6876}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-0.05483130365610123, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.044668592512607574`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.08622151613235474, \
-9.999999682655225*^-21, 
               0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.05931930989027023, \
-9.999999682655225*^-21, -0.42219841480255127`, 
               0.27920687198638916`, -0.3715690076351166, \
-0.03330753743648529, -0.12412932515144348`, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.08941143751144409, -0.07903441786766052, -0.08063556253910065, \
-0.409895658493042}], "LeafValues" -> 
             RawArray["Real32",{-0.007057738024741411, -0.015264821238815784`,
                0.006897083017975092, 
               0.014075606130063534`, -0.00024036735703703016`, 
               0.006276438478380442, -0.0005368097336031497, 
               0.008764919824898243, -0.005976734217256308, 
               0.012196836061775684`, 0.012422646395862103`, 
               0.010273686610162258`, -0.005602441728115082, 
               0.010481741279363632`, 
               0.0027701733633875847`, -0.006128923036158085, 
               0.002564352937042713, -0.0042863148264586926`, 
               0.011341103352606297`, 
               0.0009900822769850492, -0.012023781426250935`, 
               0.007254269905388355, 0.015017998404800892`, 
               0.014967045746743679`, -0.016563834622502327`, \
-0.014121421612799168`, 
               0.0034722639247775078`, -0.008313070051372051, \
-0.017744196578860283`, -0.016745813190937042`, -0.00045628013322129846`, \
-0.015106923878192902`, 0.008925966918468475, -0.002861709101125598, 
               0.011144492775201797`, -0.007334361784160137, \
-0.015072311274707317`, 0.016665734350681305`, 0.01732424646615982, 
               0.011921840719878674`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {11, 6}, {15, 
               13}, {7, 20}, {31, 8}, {-8, -9}, {-2, 12}, {-4, 17}, {29, 
               23}, {22, -13}, {-6, 14}, {-14, 25}, {37, 16}, {18, 27}, {19, 
               35}, {-16, -19}, {-11, 24}, {28, 21}, {-21, -22}, {30, 34}, {
               38, 26}, {-20, -25}, {-15, -26}, {-24, -27}, {-17, -28}, {-7, \
-29}, {32, 
               33}, {-10, -31}, {-5, -32}, {-1, -33}, {-30, -34}, {-23, -35}, \
{-18, 36}, {-36, -37}, {-3, 39}, {-12, -39}, {-38, -40}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5940,
                2936, 4351, 6766, 5571, 6865, 4528, 7463, 4528, 5571, 10115, 
               9201, 10115, 1800, 10116, 6865, 9086, 9866, 6865, 1557, 6876, 
               10116, 4158, 3462, 6865, 10115, 6876, 10117, 1026, 8627, 10115,
                6865, 10115, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.25578245520591736`, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03205364570021629, -0.08778919279575348, -9.999999682655225*^-21, \
-0.030474426224827766`, -0.1265643686056137, -9.999999682655225*^-21, \
-0.3419531583786011, -9.999999682655225*^-21, 
               0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15825799107551575`, -0.02459155023097992, -0.15215910971164703`, \
-0.3715690076351166, 
               9.999999682655225*^-21, -0.049278780817985535`, \
-9.999999682655225*^-21, -0.04620031267404556, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.08941143751144409, 0.20791196823120117`, -0.08063556253910065, 
               0.024014312773942947`, 0.3788796663284302}], "LeafValues" -> 
             RawArray["Real32",{-0.006991134956479073, -0.01518506370484829, 
               0.0033356002531945705`, 0.013940260745584965`, 
               0.00988545548170805, 0.009933610446751118, 
               0.0059598335064947605`, 
               0.011645035818219185`, -0.0071126362308859825`, \
-0.006127452943474054, 0.012316524982452393`, 
               0.010192248038947582`, -0.0055503398180007935`, 
               0.0029679255094379187`, 
               0.009561213664710522, -0.004247569479048252, 
               0.00047477197949774563`, -0.010701051913201809`, 
               0.010512894950807095`, -0.01059501152485609, 
               0.0009802223648875952, -0.011932888999581337`, 
               0.007768917363137007, 
               0.014937426894903183`, -0.008254249580204487, \
-0.016458660364151, 
               0.00521476985886693, -0.016634564846754074`, \
-0.004700667690485716, 
               0.009888721629977226, -0.013919666409492493`, \
-0.006312617566436529, 0.00884137861430645, -0.0028331049252301455`, 
               0.011062663979828358`, -0.007274911273270845, \
-0.014990120194852352`, -0.01603746972978115, 0.017200956121087074`, 
               0.016787715256214142`, -0.002477668458595872}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {11, 6}, {14, 
               13}, {7, 21}, {39, 8}, {-8, -9}, {-2, 12}, {-4, 15}, {27, 
               24}, {23, -13}, {-6, 16}, {31, 17}, {20, 35}, {-14, 30}, {19, 
               18}, {-18, -19}, {-15, -20}, {-11, 25}, {28, 22}, {-22, -23}, {
               29, 34}, {38, 26}, {-21, -26}, {-25, -27}, {32, 
               33}, {-7, -29}, {-10, -30}, {-17, -31}, {40, 
               37}, {-1, -33}, {-28, -34}, {-24, -35}, {-16, 
               36}, {-36, -37}, {-32, -38}, {-12, -39}, {-5, -40}, {-3, \
-41}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
             "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5762,
                5015, 4351, 4528, 5571, 6865, 7463, 1322, 7561, 4717, 5571, 
               10116, 6865, 9086, 4528, 4158, 9866, 4717, 4951, 4528, 10116, 
               6540, 6865, 6876, 9708, 5307, 10115, 6876, 10117, 9866, 8627, 
               7561, 10115, 6865, 4528}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-0.05483130365610123, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.03938329964876175, -0.119712695479393, -0.017286919057369232`, \
-0.044668592512607574`, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.08622151613235474, 
               0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.07542958855628967, -0.05574360489845276, -0.15825799107551575`, \
-0.044189415872097015`, -9.999999682655225*^-21, -0.10004036128520966`, 
               0.27920687198638916`, -0.08429481089115143, \
-0.03330753743648529, -0.3715690076351166, -0.12412932515144348`, \
-0.049029506742954254`, 0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.06374698132276535, \
-0.08941143751144409, -0.09301909804344177, -0.050373055040836334`, \
-0.08063556253910065, -0.17170850932598114`}], "LeafValues" -> 
             RawArray["Real32",{-0.00692529184743762, -0.015106922946870327`, 
               0.0016787113854661584`, 
               0.005031469743698835, -0.00020117370877414942`, 
               0.006226705387234688, -0.000518997258041054, 
               0.017446234822273254`, -0.005594692658632994, 
               0.012051142752170563`, -0.0026564649306237698`, 
               0.010111790150403976`, -0.005498772021383047, 
               0.010440795682370663`, 
               0.0009174032020382583, -0.006082846783101559, 
               0.004751240834593773, 
               0.011202538385987282`, -0.011843277141451836`, 
               0.0071286046877503395`, 
               0.014858420938253403`, -0.0013945454265922308`, \
-0.015484313480556011`, 0.0148179791867733, -0.014096085913479328`, 
               0.0033956950064748526`, -0.007268538698554039, \
-0.017572319135069847`, -0.0057883430272340775`, -0.000520736793987453, \
-0.01652587205171585, -0.014961214736104012`, 0.017079081386327744`, 
               0.008757886476814747, -0.0028047978412359953`, 
               
               0.01098185870796442, -0.007216011174023151, \
-0.015022356063127518`, 0.017033645883202553`, 0.013735836371779442`, 
               0.01708058826625347, -0.017659971490502357`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {11, 6}, {15, 
               13}, {7, 18}, {31, 8}, {-8, -9}, {-2, 12}, {21, 28}, {30, 
               23}, {20, -13}, {-6, 14}, {-14, 24}, {38, 16}, {17, 
               26}, {-16, -18}, {27, 19}, {-19, -20}, {29, 35}, {22, 32}, {-4,
                41}, {40, 
               25}, {-15, -25}, {-24, -26}, {-17, -27}, {-7, -28}, {-11, 
               36}, {-10, -30}, {33, 
               34}, {-5, -32}, {-22, -33}, {-1, -34}, {-31, -35}, {-21, -36}, \
{-29, 37}, {-37, -38}, {39, -39}, {-3, -40}, {-12, -41}, {-23, -42}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5940,
                2936, 4351, 6766, 5571, 6865, 4528, 7463, 4528, 5571, 4528, 
               3377, 1800, 10116, 6865, 9086, 10115, 6876, 10116, 6865, 5571, 
               4158, 10116, 6876, 3462, 6876, 10115, 10115, 6876, 10117, 1026,
                9866, 5571, 10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.25578245520591736`, -9.999999682655225*^-21, \
-0.1015896275639534, -0.119712695479393, -0.017286919057369232`, \
-0.03205364570021629, -0.08778919279575348, -9.999999682655225*^-21, \
-0.030474426224827766`, -9.999999682655225*^-21, -0.07246946543455124, \
-9.999999682655225*^-21, 
               0.7201182246208191, -0.5883604288101196, -0.09210039675235748, \
-0.15434935688972473`, -0.3715690076351166, 
               0.2675747871398926, -0.02459155023097992, \
-0.04706219583749771, -9.999999682655225*^-21, 
               9.999999682655225*^-21, -0.3715690076351166, \
-9.999999682655225*^-21, -0.3709371089935303, 0.38923919200897217`, 
               0.25424861907958984`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -9.999999682655225*^-21, 0.024014312773942947`}], 
             "LeafValues" -> 
             RawArray[
               "Real32",{-0.0068601942621171474`, -0.015030354261398315`, \
-0.016057774424552917`, 0.013792881742119789`, 0.009832102805376053, 
               0.009840592741966248, 0.005905352998524904, 
               0.011570559814572334`, -0.006993344984948635, \
-0.003535245545208454, 
               0.012175091542303562`, -0.012426868081092834`, \
-0.005447727628052235, 
               0.002958534052595496, -0.0003353639622218907, \
-0.004109010100364685, 0.0005538588739000261, -0.011883443221449852`, 
               0.004599839448928833, 
               0.0009356350637972355, -0.01175491139292717, 
               0.007635516580194235, 0.014780937694013119`, 
               0.011355118826031685`, 0.008693383075296879, 
               0.004038541577756405, -0.0162756759673357, 
               0.016863595694303513`, 
               0.010495824739336967`, -0.0046409075148403645`, \
-0.016419649124145508`, -0.013767634518444538`, -0.007351439446210861, 
               0.008675466291606426, 
               0.008147792890667915, -0.002776783425360918, 
               0.010902048088610172`, -0.005735334008932114, \
-0.014810958877205849`, -0.007279912941157818, 0.016708357259631157`}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {11, 6}, {14, 
               13}, {7, 20}, {40, 8}, {-8, -9}, {-2, 12}, {-4, 15}, {30, 
               23}, {22, -13}, {-6, 16}, {32, 17}, {19, 37}, {-14, 31}, {27, 
               18}, {-18, -19}, {-11, 26}, {29, 21}, {-21, -22}, {28, 36}, {
               24, 25}, {-12, -25}, {-24, -26}, {-20, -27}, {-15, -28}, {-10, \
-29}, {-7, -30}, {33, 35}, {-17, -32}, {39, 
               34}, {-1, -34}, {-33, -35}, {-31, -36}, {-23, -37}, {-16, 
               38}, {-38, -39}, {-3, -40}, {-5, -41}}], "NominalSplits" -> {},
              "RootIndex" -> 1, "NominalDimension" -> 0, "NominalNodeNumber" -> 
             0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463,
                9708, 4351, 4302, 4528, 6865, 5571, 7463, 1322, 7561, 4717, 
               5571, 9086, 4528, 4158, 5307, 4717, 6876, 9866, 8451, 6865, 
               6876, 9708, 5307, 10115, 6876, 10117, 8627, 10115, 6540, 6876, 
               6876, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.03938329964876175, -0.017286919057369232`, \
-0.119712695479393, -0.044668592512607574`, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.08622151613235474, \
-0.09210039675235748, -0.07542958855628967, -0.05574360489845276, \
-0.10353974997997284`, -0.044189415872097015`, -0.42219841480255127`, \
-0.15825799107551575`, -0.05083892494440079, -0.03330753743648529, \
-0.3715690076351166, -0.12412932515144348`, -0.049029506742954254`, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.07903441786766052, -0.08429481089115143, -0.364515483379364, \
-0.409895658493042, 0.16606731712818146`}], "LeafValues" -> 
             RawArray["Real32",{-0.006795829627662897, -0.014955311082303524`,
                0.006699829362332821, 
               0.0049258810468018055`, -0.0001631590275792405, 
               0.00617755763232708, 
               0.017831549048423767`, -0.008835846558213234, \
-0.0005883628036826849, 0.011899510398507118`, -0.010708963498473167`, 
               0.0006475771660916507, -0.005397200118750334, \
-0.00995181966573, 0.01040044054389, 
               0.0009290249436162412, -0.005984427407383919, 
               0.002505845855921507, 0.011059318669140339`, 
               0.014704935252666473`, -0.0013679644325748086`, \
-0.017459800466895103`, 
               0.013592894189059734`, -0.013948251493275166`, \
-0.00818409863859415, 
               0.004923203960061073, -0.007038051728159189, \
-0.0005679368623532355, -0.016315821558237076`, -0.015488913282752037`, 
               0.016909919679164886`, 
               0.008594094775617123, -0.002749059582129121, 
               0.010823209770023823`, -0.007936093956232071, 
               0.01636291854083538, -0.014805860817432404`, \
-0.011388209648430347`, 0.011651423759758472`, -0.015309572219848633`}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {13, 6}, {16, 
               14}, {29, 7}, {10, 8}, {-8, -9}, {-2, 12}, {-7, -11}, {20, 
               26}, {19, -13}, {28, 22}, {-6, 15}, {-15, 23}, {35, 17}, {18, 
               24}, {-17, -19}, {27, 33}, {21, 30}, {-4, 39}, {-14, 
               25}, {-16, -24}, {-18, -25}, {-23, -26}, {-12, 
               34}, {-10, -28}, {31, 32}, {-5, 
               37}, {-21, -31}, {-1, -32}, {-29, -33}, {-20, -34}, {-27, 
               36}, {-3, 
               38}, {-35, -37}, {-30, -38}, {-36, -39}, {-22, -40}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463,
                9708, 4351, 4302, 6766, 6865, 5571, 4528, 7561, 4717, 4528, 
               5571, 5571, 1800, 9086, 10115, 6876, 10116, 6865, 4528, 4158, 
               6876, 9708, 3462, 10115, 7463, 10117, 1026, 9866, 7561, 10115, 
               6876}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.1015896275639534, -0.017286919057369232`, \
-0.119712695479393, -0.03205364570021629, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.030474426224827766`, \
-0.08622151613235474, -9.999999682655225*^-21, -0.09210039675235748, \
-0.15434935688972473`, -0.3715690076351166, 
               0.2675747871398926, -0.02459155023097992, \
-0.10004036128520966`, -0.049278780817985535`, -0.3715690076351166, \
-0.12412932515144348`, -9.999999682655225*^-21, 
               0.38923919200897217`, -0.2119971662759781, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.09301909804344177, -0.050373055040836334`, \
-0.364515483379364}], "LeafValues" -> 
             RawArray["Real32",{-0.006732183508574963, -0.014881755225360394`,
                0.0015609086258336902`, 
               0.013652629218995571`, -0.00016153109027072787`, 
               0.009749115444719791, 
               0.01761443354189396, -0.00875944085419178, \
-0.0005825067055411637, -0.0061609093099832535`, -0.010617133229970932`, 
               0.012037079781293869`, -0.005347182508558035, \
-0.012333198450505733`, 0.0029490641318261623`, -0.0059260353446006775`, 
               0.004668861627578735, -0.003970636520534754, 
               0.0006313269259408116, 0.01096708420664072, 
               0.0008921145345084369, 0.014630372636020184`, 
               0.011212222278118134`, 0.00857835728675127, 
               0.003943584859371185, -0.01610027626156807, \
-0.007152947597205639, 
               0.009633725509047508, -0.0034813163802027702`, \
-0.015395194292068481`, -0.013620522804558277`, 
               0.008513746783137321, -0.01668739505112171, 
               0.010745315812528133`, -0.005570500157773495, \
-0.014659895561635494`, 0.016797274351119995`, 
               0.013509034179151058`, -0.011301152408123016`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {13, 6}, {15, 
               14}, {29, 7}, {10, 8}, {-8, -9}, {-2, 12}, {-7, -11}, {-4, 
               17}, {21, -13}, {28, 22}, {-6, 18}, {36, 16}, {19, 26}, {20, 
               34}, {-15, 30}, {-16, -20}, {-12, 25}, {27, 33}, {23, 
               24}, {-14, -24}, {-23, -25}, {-21, -26}, {-17, -27}, {-10, \
-28}, {31, 32}, {-5, 38}, {-19, -31}, {-1, -32}, {-29, -33}, {-22, -34}, {-18,
                35}, {-35, -36}, {37, -37}, {-3, -38}, {-30, -39}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5940,
                2936, 4351, 4528, 6865, 4717, 5571, 7463, 5571, 1322, 10115, 
               9201, 10116, 6865, 9086, 10115, 4528, 4158, 9866, 4951, 10116, 
               6540, 6865, 6876, 6865, 5307, 10115, 6876, 10117, 9866, 8627, 
               10115, 6865, 10115, 10116, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.25578245520591736`, -9.999999682655225*^-21, \
-0.03938329964876175, -0.017286919057369232`, -0.044189415872097015`, \
-0.119712695479393, -0.08778919279575348, -0.03808106482028961, \
-9.999999682655225*^-21, -0.0883902981877327, -9.999999682655225*^-21, 
               0.6638875603675842, -0.5883604288101196, -0.09210039675235748, \
-0.3419531583786011, -0.07542958855628967, -0.05574360489845276, \
-0.15825799107551575`, -9.999999682655225*^-21, 
               0.27920687198638916`, -0.08429481089115143, \
-0.03330753743648529, -0.3715690076351166, -0.04620031267404556, \
-0.049029506742954254`, 0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.06374698132276535, \
-0.08941143751144409, 0.20791196823120117`, -0.08063556253910065, 
               0.024014312773942947`, 0.3788796663284302, 
               0.16606731712818146`}], "LeafValues" -> 
             RawArray["Real32",{-0.006669243797659874, -0.014809642918407917`,
                0.003295857459306717, 0.004822405520826578, 
               0.009756398387253284, 
               0.005782816559076309, -0.00044740905286744237`, 
               0.011460564099252224`, -0.006834263913333416, 
               0.011761368252336979`, -0.0024307495914399624`, \
-0.005297667812556028, 0.005426298826932907, 0.009838057681918144, 
               0.009350067935883999, 
               0.010360664688050747`, -0.014310849830508232`, \
-0.010609088465571404`, 0.010790319181978703`, -0.011659102514386177`, 
               0.007031766697764397, 
               0.014557210728526115`, -0.007659739814698696, \
-0.0013419876340776682`, -0.017265118658542633`, 0.014582277275621891`, 
               0.0032175472006201744`, -0.0173348356038332, \
-0.005519650410860777, -0.0006293005426414311, -0.01612279936671257, \
-0.006295918952673674, 0.016747014597058296`, 
               0.008434400893747807, -0.0026677483692765236`, 
               0.010668344795703888`, -0.006863243877887726, \
-0.014722648076713085`, -0.015828458592295647`, 0.016806336119771004`, 
               0.016615696251392365`, -0.0024818312376737595`, \
-0.015145390294492245`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {13, 6}, {14, 
               12}, {7, 19}, {40, 8}, {-8, -9}, {-2, 11}, {23, 28}, {
               21, -12}, {-6, 15}, {30, 25}, {31, 17}, {-13, 
               16}, {-16, -17}, {22, 18}, {-18, -19}, {27, 20}, {-20, -21}, {
               29, 35}, {-15, -23}, {24, 32}, {-4, 42}, {39, 
               26}, {-26, -27}, {-7, -28}, {-11, 36}, {-10, -30}, {33, 34}, {
               41, 38}, {-24, -33}, {-1, -34}, {-31, -35}, {-22, -36}, {-29, 
               37}, {-37, -38}, {-32, -39}, {-14, -40}, {-5, -41}, {-3, -42}, \
{-25, -43}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 
             0, "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463,
                9708, 4351, 4302, 6766, 6865, 7463, 5571, 1322, 7561, 4717, 
               4528, 5571, 1800, 9086, 5307, 4717, 6865, 6876, 9866, 4158, 
               6876, 9708, 10115, 6876, 10117, 1026, 9866, 7561, 10115, 
               6876}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.1015896275639534, -0.017286919057369232`, \
-0.044668592512607574`, -0.119712695479393, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-0.08622151613235474, -9.999999682655225*^-21, -0.09210039675235748, \
-0.10353974997997284`, -0.044189415872097015`, -0.02459155023097992, \
-0.42219841480255127`, -0.15825799107551575`, -0.049278780817985535`, \
-0.3715690076351166, -0.12412932515144348`, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.09301909804344177, -0.050373055040836334`, \
-0.364515483379364}], "LeafValues" -> 
             RawArray["Real32",{-0.006606998387724161, -0.014738938771188259`,
                0.001547723775729537, 
               0.01351302769035101, -0.00012501893797889352`, 
               0.0061290026642382145`, 
               0.017484737560153008`, -0.008629285730421543, \
-0.0005429015145637095, -0.00616414612159133, -0.01047439593821764, 
               0.011902333237230778`, -0.005248647648841143, 
               0.010281037539243698`, -0.009916569106280804, 
               0.0008827217970974743, -0.0058845155872404575`, 
               0.0024817809462547302`, -0.003837141441181302, 
               0.010838265530765057`, 0.0008496263762935996, 
               0.01448541134595871, 
               0.01336122676730156, -0.013733313418924809`, \
-0.01593204215168953, -0.008055094629526138, 0.0047845058143138885`, 
               0.009508011862635612, -0.016025524586439133`, \
-0.01526301633566618, 0.008356034755706787, -0.0026411486323922873`, 
               0.010592272505164146`, -0.005469297990202904, \
-0.01451397966593504, 0.016653869301080704`, 
               0.013347703963518143`, -0.011163518764078617`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {14, 6}, {16, 
               13}, {29, 7}, {10, 8}, {-8, -9}, {-2, 12}, {-7, -11}, {-4, 
               18}, {21, -13}, {-6, 15}, {28, 22}, {-14, 23}, {35, 17}, {19, 
               25}, {20, 33}, {-17, -20}, {-12, 24}, {27, 32}, {-15, 
               26}, {-16, -24}, {-21, -25}, {-18, -26}, {-23, -27}, {-10, \
-28}, {30, 31}, {-5, 37}, {-1, -31}, {-29, -32}, {-22, -33}, {-19, 
               34}, {-34, -35}, {36, -36}, {-3, -37}, {-30, -38}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 5015,
                6876, 4351, 4528, 6865, 4528, 5571, 7463, 5571, 10115, 9201, 
               9086, 10115, 4528, 4158, 10115, 6876, 9224, 8451, 6865, 9708, 
               6876, 3462, 6876, 5307, 10115, 10115, 7463, 10117, 8627, 4785, 
               5571, 6876, 10116, 4528}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-9.999999682655225*^-21, -0.23562836647033691`, -9.999999682655225*^-21, \
-0.03938329964876175, -0.017286919057369232`, -0.03205364570021629, \
-0.119712695479393, -0.08778919279575348, -0.030474426224827766`, \
-0.0883902981877327, -9.999999682655225*^-21, -0.09210039675235748, \
-0.3419531583786011, -0.07542958855628967, -0.05574360489845276, \
-0.15434935688972473`, -0.3715690076351166, -0.30185914039611816`, \
-0.05083892494440079, -0.03330753743648529, -0.12412932515144348`, \
-0.3715690076351166, -9.999999682655225*^-21, -0.3709371089935303, \
-0.049029506742954254`, 0.25424861907958984`, 
               0.38923919200897217`, -0.2119971662759781, 
               9.999999682655225*^-21, -0.08941143751144409, \
-0.0815085768699646, -9.999999682655225*^-21, -0.364515483379364, \
-0.07228947430849075, -0.17170850932598114`}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.006545433774590492, -0.014669603668153286`, \
-0.01585572585463524, 0.004720983561128378, -0.00012377146049402654`, 
               0.009655842557549477, 
               0.014734229072928429`, -0.005318465642631054, 
               0.0021673475857824087`, 0.011626669205725193`, 
               0.0008909063180908561, -0.0052001154981553555`, 
               0.0028851954266428947`, -0.012284300290048122`, 
               0.009247529320418835, 
               0.0007856700103729963, -0.010506226681172848`, 
               0.010663554072380066`, 
               0.014414938166737556`, -0.0075957439839839935`, \
-0.001316586509346962, -0.014984972774982452`, -0.011154445819556713`, 
               0.008436191827058792, 
               0.007047087885439396, -0.006691417191177607, \
-0.000689114211127162, -0.015173820778727531`, -0.0033388950396329165`, \
-0.013413159176707268`, -0.007295296527445316, 0.016590064391493797`, 
               0.008114013820886612, 
               0.008278626948595047, -0.016398286446928978`, 
               0.010517076589167118`, -0.008383317850530148, \
-0.014532859437167645`, -0.007189715746790171, -0.011079392395913601`, 
               0.020653216168284416`, -0.017080750316381454`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {13, 6}, {14, 
               12}, {27, 7}, {40, 8}, {-8, -9}, {-2, 11}, {20, 25}, {
               18, -12}, {-6, 15}, {28, 22}, {30, 16}, {-13, 29}, {19, 
               17}, {-17, -18}, {26, 35}, {-15, -20}, {21, 31}, {-4, 41}, {23,
                24}, {-14, -24}, {-23, -25}, {-11, 36}, {-10, -27}, {-5, 
               39}, {33, 34}, {-16, -30}, {38, 
               32}, {-21, -32}, {-31, -33}, {-1, -34}, {-29, -35}, {-19, \
-36}, {-26, 37}, {-37, -38}, {-3, -39}, {-28, -40}, {-7, -41}, {-22, -42}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463,
                9708, 4351, 4302, 6766, 6865, 4717, 5571, 7561, 4717, 5571, 
               1322, 4528, 5571, 1800, 9086, 9866, 1557, 4528, 6865, 4158, 
               9708, 6876, 10115, 6876, 10117, 1026, 9866, 7561, 10115, 6865, 
               6876}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.1015896275639534, -0.017286919057369232`, \
-0.044189415872097015`, -0.119712695479393, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.03808106482028961, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.08622151613235474, -9.999999682655225*^-21, \
-0.09210039675235748, -0.15825799107551575`, -0.15215910971164703`, \
-0.10004036128520966`, -0.02459155023097992, -0.049278780817985535`, \
-0.12412932515144348`, -0.3715690076351166, 
               0.38923919200897217`, -0.31862738728523254`, 
               9.999999682655225*^-21, -0.09435421973466873, \
-0.06374698132276535, -0.09301909804344177, -0.050373055040836334`, \
-0.08063556253910065, -0.364515483379364}], "LeafValues" -> 
             RawArray["Real32",{-0.006484539248049259, -0.014601603150367737`,
                0.0015362774720415473`, 
               0.01338120736181736, -0.00012253582826815546`, 
               0.0057136304676532745`, 
               0.017339758574962616`, -0.008513628505170345, \
-0.0005066620069555938, -0.006166560109704733, -0.010349670425057411`, 
               0.011770701967179775`, -0.0051520648412406445`, 
               0.005363475531339645, 
               0.009604230523109436, -0.005837413016706705, 
               0.0045983269810676575`, 
               0.010242241434752941`, -0.01410639751702547, \
-0.003693977138027549, 0.010713610798120499`, 0.00080814742250368, 
               0.014345754869282246`, -0.008487493731081486, 
               0.0048544942401349545`, -0.007051654160022736, \
-0.015770578756928444`, 
               0.009384984150528908, -0.015086380764842033`, \
-0.01584472693502903, 0.008202156983315945, -0.002562673995271325, 
               0.010442735627293587`, -0.0053188009187579155`, \
-0.014373701065778732`, 0.01651569828391075, 0.013201011344790459`, 
               0.016575314104557037`, -0.010996337048709393`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {14, 6}, {15, 
               13}, {28, 7}, {10, 8}, {-8, -9}, {-2, 12}, {-7, -11}, {-4, 
               19}, {22, -13}, {-6, 17}, {29, 23}, {35, 16}, {20, 25}, {-14, 
               18}, {-18, -19}, {21, 33}, {-16, -21}, {-12, 26}, {27, 32}, {
               37, 24}, {-24, -25}, {-17, -26}, {-22, -27}, {-10, -28}, {-5, 
               38}, {30, 31}, {-1, -31}, {-30, -32}, {-23, -33}, {-20, 
               34}, {-34, -35}, {
               36, -36}, {-3, -37}, {-15, -38}, {-29, -39}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 5015,
                6876, 4351, 6766, 7463, 6865, 5571, 1322, 7463, 4528, 4528, 
               3377, 1800, 9086, 5307, 5571, 6865, 6766, 5571, 4717, 9708, 
               6876, 6865, 10115, 10117, 7463, 1026, 8627, 10115, 6876, 10116,
                4528}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-9.999999682655225*^-21, -0.13944777846336365`, -9.999999682655225*^-21, \
-0.1015896275639534, -0.044668592512607574`, -0.017286919057369232`, \
-0.119712695479393, -9.999999682655225*^-21, -0.08778919279575348, \
-9.999999682655225*^-21, -9.999999682655225*^-21, -0.07246946543455124, \
-9.999999682655225*^-21, -0.09210039675235748, -0.10353974997997284`, \
-0.05931930989027023, -0.02459155023097992, -9.999999682655225*^-21, \
-0.04706219583749771, -9.999999682655225*^-21, -0.12412932515144348`, \
-0.3715690076351166, -0.04620031267404556, 0.38923919200897217`, 
               9.999999682655225*^-21, -0.2119971662759781, \
-0.09435421973466873, -0.08941143751144409, 
               0.20791196823120117`, -0.364515483379364, \
-0.07228947430849075, -0.06636073440313339}], "LeafValues" -> 
             RawArray[
               "Real32",{-0.006424303166568279, -0.014534899964928627`, \
-0.0024820680264383554`, 0.013259142637252808`, -0.00012131257972214371`, 
               0.00608117925003171, 
               0.014609790407121181`, -0.004753766115754843, 
               0.00604826956987381, 0.016723578795790672`, 
               0.011674297973513603`, 
               0.010164018720388412`, -0.0051044886931777, \
-0.009875665418803692, 
               0.0027413717471063137`, -0.0007199851679615676, \
-0.003660497022792697, -0.011879311874508858`, 0.00440924521535635, 
               0.0008000988746061921, 
               0.014277827925980091`, -0.009339901618659496, \
-0.013408515602350235`, -0.01568261720240116, 0.006270525977015495, 
               0.01644163392484188, 
               0.0028925538063049316`, -0.015000646002590656`, \
-0.0032535686623305082`, -0.00622121337801218, 0.008126605302095413, 
               
               0.010369226336479187`, -0.01621103473007679, \
-0.006522408686578274, -0.014327462762594223`, -0.01564844325184822, \
-0.010914322920143604`, 0.02046680450439453, 0.0032921242527663708`}], 
             "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {13, 6}, {15, 
               11}, {27, 7}, {37, 8}, {-8, -9}, {-2, 12}, {-4, 16}, {-6, 
               14}, {20, -13}, {28, 21}, {-12, 22}, {29, 17}, {19, 33}, {25, 
               18}, {-18, -19}, {-11, 23}, {26, 31}, {-14, 
               24}, {-15, -23}, {-20, -24}, {-22, -25}, {-16, -26}, {-10, \
-27}, {-5, 36}, {30, 32}, {38, 35}, {-1, -31}, {-21, -32}, {-29, -33}, {-17, 
               34}, {-34, -35}, {-30, -36}, {-28, -37}, {-7, -38}, {-3, \
-39}}], "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0, 
             "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 5762, 7463,
                9708, 4351, 4302, 4528, 4717, 6865, 5571, 7561, 4717, 5571, 
               1322, 5571, 9086, 9866, 4528, 4158, 4951, 6876, 6540, 6865, 
               9708, 6876, 5307, 10117, 10115, 6876, 9866, 8627, 7561, 10115, 
               6865, 6876, 10116}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.05483130365610123, \
-0.08851413428783417, -0.0641283318400383, -9.999999682655225*^-21, \
-0.25303465127944946`, -0.03938329964876175, -0.044189415872097015`, \
-0.017286919057369232`, -0.119712695479393, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.03808106482028961, -9.999999682655225*^-21, \
-0.08622151613235474, -0.09210039675235748, -0.15825799107551575`, \
-0.07542958855628967, -0.05574360489845276, -0.36605125665664673`, \
-0.42219841480255127`, -0.08429481089115143, -0.03330753743648529, \
-0.12412932515144348`, -0.3715690076351166, -0.049029506742954254`, 
               9.999999682655225*^-21, 
               0.38923919200897217`, -0.31862738728523254`, \
-0.06374698132276535, -0.08941143751144409, -0.09301909804344177, \
-0.050373055040836334`, -0.08063556253910065, -0.364515483379364, 
               0.16606731712818146`}], "LeafValues" -> 
             RawArray["Real32",{-0.0063647134229540825`, -0.01446946244686842,
                0.0014929687604308128`, 
               0.004567693918943405, -0.00012010118371108547`, 
               0.005696190521121025, 
               0.017191311344504356`, -0.008401989936828613, \
-0.0004708160413429141, 
               0.011445214971899986`, -0.010227055288851261`, \
-0.002104981569573283, 0.005271421279758215, -0.005057381000369787, 
               0.009482483379542828, -0.005753922276198864, 
               0.00241783051751554, 
               0.010086704976856709`, -0.013972308486700058`, 
               0.010579807683825493`, 0.014211123809218407`, 
               0.01667320728302002, -0.0012801174307242036`, \
-0.016839569434523582`, 
               0.0031885383650660515`, -0.00793219543993473, \
-0.005140125285834074, -0.0008117202087305486, -0.014916566200554371`, \
-0.01567147672176361, 0.016396120190620422`, 0.01029653288424015, 
               0.008051952347159386, -0.00248607131652534, \
-0.006470129359513521, -0.014379831030964851`, 0.016379976645112038`, 
               0.01308032963424921, 
               0.01642986200749874, -0.010833324864506721`, \
-0.014758770354092121`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 11}, {14, 6}, {15, 
               12}, {28, 7}, {10, 8}, {-8, -9}, {-2, 13}, {-7, -11}, {22, 
               26}, {-6, 17}, {20, -14}, {29, 21}, {36, 16}, {19, 25}, {-13, 
               18}, {-18, -19}, {-16, -20}, {27, 31}, {38, 24}, {23, 30}, {-4,
                40}, {-22, -25}, {-17, -26}, {-12, 34}, {-10, -28}, {-5, 
               39}, {32, 
               33}, {-23, -31}, {-21, -32}, {-1, -33}, {-30, -34}, {-27, 
               35}, {-35, -36}, {
               37, -37}, {-3, -38}, {-15, -39}, {-29, -40}, {-24, -41}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]], 
           MachineLearning`DecisionTree[
            Association[
            "FeatureIndices" -> 
             RawArray["Integer16",{10117, 10117, 6865, 4528, 6865, 6876, 5940,
                2936, 4351, 6766, 4528, 6865, 5571, 7561, 4717, 4528, 5571, 
               5571, 10116, 6865, 1800, 9086, 10115, 6876, 10116, 4528, 6865, 
               10116, 4158, 3462, 6876, 10117, 6876, 10115, 1026, 9866, 7561, 
               10115, 10115}], "NumericalThresholds" -> 
             RawArray["Real32",{-0.22387510538101196`, 
               0.19273358583450317`, -0.029438268393278122`, \
-0.09327687323093414, -0.02756432257592678, -0.23562836647033691`, \
-9.999999682655225*^-21, -0.25578245520591736`, -9.999999682655225*^-21, \
-0.1015896275639534, -0.03205364570021629, -0.017286919057369232`, \
-0.119712695479393, -9.999999682655225*^-21, -9.999999682655225*^-21, \
-9.999999682655225*^-21, -0.030474426224827766`, -0.08622151613235474, 
               0.7201182246208191, -0.5883604288101196, \
-9.999999682655225*^-21, -0.09210039675235748, -0.15434935688972473`, \
-0.3715690076351166, 
               0.3376719355583191, -0.10004036128520966`, \
-0.02459155023097992, 
               9.999999682655225*^-21, -0.049278780817985535`, \
-9.999999682655225*^-21, -0.3715690076351166, 
               9.999999682655225*^-21, -0.31862738728523254`, 
               0.38923919200897217`, -0.09435421973466873, \
-0.06374698132276535, -0.09301909804344177, -0.050373055040836334`, 
               0.024014312773942947`}], "LeafValues" -> 
             RawArray["Real32",{-0.006305760703980923, -0.014405257999897003`,
                0.001478190766647458, 0.01312874536961317, 
               0.009746325202286243, 0.009576408192515373, 
               0.0059510814025998116`, 
               0.011440176516771317`, -0.006536525208503008, \
-0.006212928798049688, 0.011547323316335678`, 
               0.002724908059462905, -0.005010735709220171, \
-0.012302788905799389`, -0.00569807318970561, 
               0.0045376988127827644`, -0.003532739821821451, 
               0.0010352885583415627`, 
               0.010493949986994267`, -0.011613202281296253`, 
               0.00752090523019433, 0.0007599126547574997, 
               0.014145610854029655`, 0.009897882118821144, 
               0.008252211846411228, 
               0.002928804373368621, -0.0069402228109538555`, \
-0.015530726872384548`, -0.004419949371367693, 
               0.00921308808028698, -0.013151556253433228`, \
-0.015583842061460018`, 0.010224631987512112`, -0.0024613328278064728`, 
               
               0.00797817949205637, -0.005093427840620279, \
-0.014172252267599106`, 0.01627737283706665, 0.012987330555915833`, 
               0.016591854393482208`}], "Children" -> 
             RawArray["Integer16",{{3, 2}, {9, 5}, {4, 10}, {13, 6}, {14, 
               11}, {7, 19}, {39, 8}, {-8, -9}, {-2, 12}, {-4, 16}, {-6, 
               17}, {22, -13}, {31, 23}, {37, 15}, {18, 26}, {21, 35}, {-12, 
               30}, {-15, -19}, {28, 20}, {-20, -21}, {-11, 27}, {29, 32}, {
               24, 25}, {-14, -25}, {-24, -26}, {-16, -27}, {-22, -28}, {-7, \
-29}, {-10, -30}, {-18, -31}, {34, 
               33}, {-23, -33}, {-32, -34}, {-1, -35}, {-17, 
               36}, {-36, -37}, {38, -38}, {-3, -39}, {-5, -40}}], 
             "NominalSplits" -> {}, "RootIndex" -> 1, "NominalDimension" -> 0,
              "NominalNodeNumber" -> 0]]}, "ClassNumber" -> 2, 
         "IterationsNumber" -> 50, "Processor" -> 
         MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAABcBnDKXKFv4OfwSJ2hTWMJCYQKXXGEGiNIHirrlunOvUJFn6
ZN+OdbjaYtu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu27X+e1/n5Lg/puSnu

                 "], "Type" -> "NumericalVector"]], "Output" -> 
            Association[
             "(f1f2f3)" -> 
              Association[
               "Type" -> "NumericalVector", "Weight" -> 2.999999999999989]], 
            "Processors" -> {
              MachineLearning`MLProcessor["DensifyNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "(f1f2f3)" -> Association["Weight" -> CompressedData["
1:eJztxbENQFAABcBnDKXKFv4OfwSJ2hTWMJCYQKXXGEGiNIHirrlunOvUJFn6
ZN+OdbjaYtu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2
bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu2bdu27X+e1/n5Lg/puSnu

                    "], "Type" -> "NumericalVector"]], "Version" -> {11.3, 0},
                 "ID" -> 5853706460650246025, "Output" -> 
                Association[
                 "(f1f2f3)" -> 
                  Association[
                   "Type" -> "NumericalVector", "Weight" -> 
                    2.999999999999989]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 2.999999999999989], 
                "Key" -> "(f1f2f3)", "Invertibility" -> "Perfect", "Missing" -> 
                "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "Method" -> "GradientBoostedTrees", "Options" -> 
         Association[
          "BoostingMethod" -> 
           Association["Value" -> "Gradient", "Options" -> Association[]], 
           MaxTrainingRounds -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "LeavesNumber" -> 
           Association["Value" -> 110, "Options" -> Association[]], 
           "LearningRate" -> 
           Association["Value" -> 0.01, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "MaxBinNumber" -> 
           Association["Value" -> 255, "Options" -> Association[]], 
           "ThreadNumber" -> 
           Association["Value" -> 2, "Options" -> Association[]], "MaxDepth" -> 
           Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
           Association["Value" -> 7, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFrequency" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "MinGainToSplit" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "LossFunction" -> 
           Association["Value" -> Automatic, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.5060504485967252, 0.010575589262120802`], "Accuracy" -> 
            PlusMinus[0.8317124486514206, 0.021900915115162237`], 
            "EvaluationTime" -> 0.0018316533333333333`, "TestSize" -> 300, 
            "TrainingSize" -> 3200, "TrainingTime" -> 3.281506, 
            "TrainingMemory" -> 1036813464, "ModelMemory" -> 623104, 
            "ExperimentCount" -> 1, "ModelUtility" -> 0.7595639717676009, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.5060504485967252, 0.010575589262120802`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.8317124486514206, 0.021900915115162237`]}, 
            "Configuration" -> {
             "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
              MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
              0.01, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
              "ThreadNumber" -> 2, "MaxDepth" -> 6, "LeafSize" -> 7, 
              "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
              "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
              "L1Regularization" -> 0, "L2Regularization" -> 0, 
              "LossFunction" -> Automatic}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 17]}], 
           Association["ID" -> 274199444811556]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7103362298345132, 0.0134547761818646], 
                 "Accuracy" -> 
                 PlusMinus[0.4627845587258604, 0.040515449391942626`], 
                 "EvaluationTime" -> 0.00014588000000000003`, "TestSize" -> 
                 300, "TrainingSize" -> 10, "TrainingTime" -> 0.360914, 
                 "TrainingMemory" -> 5436488, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6024590578577611,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7103362298345132, 0.009513963477543703]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4627845587258604, 0.028648749007863013`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6808533832566114, 0.0067993542003725324`], 
                 "Accuracy" -> 
                 PlusMinus[0.5604148116752478, 0.04042205960025746], 
                 "EvaluationTime" -> 0.00010875666666666668`, "TestSize" -> 
                 300, "TrainingSize" -> 40, "TrainingTime" -> 0.146059, 
                 "TrainingMemory" -> 19885120, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6296707070879572,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6808533832566114, 0.004807869462772653]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5604148116752478, 0.02858271245286883]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6767233206027792, 0.008243097023932385], 
                 "Accuracy" -> 
                 PlusMinus[0.5572218146380753, 0.04033346105447162], 
                 "EvaluationTime" -> 0.00010396333333333334`, "TestSize" -> 
                 300, "TrainingSize" -> 150, "TrainingTime" -> 0.40375, 
                 "TrainingMemory" -> 66392464, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6332362511133883,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6767233206027792, 0.005828749803601238]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5572218146380753, 0.028520063820340398`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010396333333333334`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6767233206027792, 0.008243097023932385], 
                "ModelMemory" -> 297064, "TrainingMemory" -> 66392464, 
                "TrainingTime" -> 11.127580666666667`], "Index" -> 1], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7194345920495708, 0.16467199782388042`], 
                 "Accuracy" -> 
                 PlusMinus[0.6683170319846272, 0.06686570287200874], 
                 "EvaluationTime" -> 0.0016142300000000001`, "TestSize" -> 
                 100, "TrainingSize" -> 10, "TrainingTime" -> 0.512412, 
                 "TrainingMemory" -> 8788920, "ModelMemory" -> 5113360, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4361527539858625,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7194345920495708, 0.11644068633280223`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6683170319846272, 0.04728119192960219]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6478894117156915, 0.21981001728325172`], 
                 "Accuracy" -> 
                 PlusMinus[0.826732873568786, 0.05430594453599856], 
                 "EvaluationTime" -> 0.0017407, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.924282, 
                 "TrainingMemory" -> 21156640, "ModelMemory" -> 5276592, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.46840498406267517`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6478894117156915, 0.1554291537937195]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.826732873568786, 0.038400101640145116`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7301739616989222, 0.20327380287194208`], 
                 "Accuracy" -> 
                 PlusMinus[0.7376239626776967, 0.06266969912114659], 
                 "EvaluationTime" -> 0.00192868, "TestSize" -> 100, 
                 "TrainingSize" -> 150, "TrainingTime" -> 2.334414, 
                 "TrainingMemory" -> 53045856, "ModelMemory" -> 5604280, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.41252528688123064`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7301739616989222, 0.14373628444832773`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7376239626776967, 0.04431416922348337]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00192868, "MeanCrossEntropy" -> 
                PlusMinus[0.7301739616989222, 0.20327380287194208`], 
                "ModelMemory" -> 5604280, "TrainingMemory" -> 53045856, 
                "TrainingTime" -> 62.76345200000001], "Index" -> 2], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7078845143934611, 0.013500228143082372`], 
                 "Accuracy" -> 
                 PlusMinus[0.5000002003014584, 0.03535189031810231], 
                 "EvaluationTime" -> 0.0020425866666666666`, "TestSize" -> 
                 200, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.04105266666666667, "TrainingMemory" -> 
                 1.3589573333333333`*^6, "ModelMemory" -> 327912., 
                 "ExperimentCount" -> 2, "ModelUtility" -> 0.5521409332545696,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7057681302136795, 0.018074578613429138`], 
                   PlusMinus[0.7103847857401784, 0.019645563925520262`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000002003014584, 0.0499951227433864], 
                   PlusMinus[0.5000002003014584, 0.0499951227433864]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.693916447346747, 0.011733755145309235`], 
                 "Accuracy" -> 
                 PlusMinus[0.5000002003014584, 0.07070378063620462], 
                 "EvaluationTime" -> 0.00218753, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044996, 
                 "TrainingMemory" -> 4985584, "ModelMemory" -> 327912, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5588339963428564,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.693916447346747, 0.008297017832030703]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000002003014584, 0.0499951227433864]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931794955643081, 0.012420774060626662`], 
                 "Accuracy" -> 
                 PlusMinus[0.5000002003014584, 0.07070378063620462], 
                 "EvaluationTime" -> 0.00219468, "TestSize" -> 100, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.056745, 
                 "TrainingMemory" -> 18348552, "ModelMemory" -> 327976, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5590903272731396,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931794955643081, 0.008782813565855082]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000002003014584, 0.0499951227433864]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6195934792474617, 0.014957588345872479`], 
                 "Accuracy" -> 
                 PlusMinus[0.717821982479677, 0.0452890581247049], 
                 "EvaluationTime" -> 0.00229792, "TestSize" -> 100, 
                 "TrainingSize" -> 700, "TrainingTime" -> 0.306059, 
                 "TrainingMemory" -> 85148584, "ModelMemory" -> 330632, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6210572096371108,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6195934792474617, 0.014957588345872479`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.717821982479677, 0.0452890581247049]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5832037561354543, 0.01646838046151549], 
                 "Accuracy" -> 
                 PlusMinus[0.6966930868206325, 0.026614459968530162`], 
                 "EvaluationTime" -> 0.001999316666666667, "TestSize" -> 300, 
                 "TrainingSize" -> 3200, "TrainingTime" -> 2.120496, 
                 "TrainingMemory" -> 388870144, "ModelMemory" -> 355112, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.668660162442181, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5832037561354543, 0.01646838046151549]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6966930868206325, 0.026614459968530162`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.001999316666666667, "MeanCrossEntropy" -> 
                PlusMinus[0.5832037561354543, 0.01646838046151549], 
                "ModelMemory" -> 355112, "TrainingMemory" -> 388870144, 
                "TrainingTime" -> 2.6916726666666673`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7949802879524245, 0.23827208869097197`], 
                 "Accuracy" -> 
                 PlusMinus[0.4695975506941125, 0.020504363497497322`], 
                 "EvaluationTime" -> 0.00005184777777777778, "TestSize" -> 
                 600, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.024808333333333335`, "TrainingMemory" -> 2.511552*^6, 
                 "ModelMemory" -> 1.058176*^6, "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.47689759349387184`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.2241211204605742`, 0.05984310475101461], 
                   PlusMinus[0.7490327598050556, 0.019581469199765337`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4666307221312403, 0.028740155746711512`], 
                   PlusMinus[0.4725455374989883, 0.028648748785816535`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.740672721055067, 0.04944107562093404], 
                 "Accuracy" -> 
                 PlusMinus[0.5693410221597353, 0.04048091645502671], 
                 "EvaluationTime" -> 0.00006793666666666668, "TestSize" -> 
                 300, "TrainingSize" -> 40, "TrainingTime" -> 0.019254, 
                 "TrainingMemory" -> 9896432, "ModelMemory" -> 3486528, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4824485086268756,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.740672721055067, 0.03496011984071935]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5693410221597353, 0.02862433053399548]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7002415326550797, 0.04421614145183475], 
                 "Accuracy" -> 
                 PlusMinus[0.5552480413672188, 0.04954854932424755], 
                 "EvaluationTime" -> 0.00010726, "TestSize" -> 200, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.058578, 
                 "TrainingMemory" -> 36451984, "ModelMemory" -> 12390584, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.4440924055514126,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7002415326550797, 0.03126553345849595]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5552480413672188, 0.035036115225131566`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6696066359310376, 0.04073081369512506], 
                 "Accuracy" -> 
                 PlusMinus[0.6226845443173914, 0.0396360522749294], 
                 "EvaluationTime" -> 0.00030852, "TestSize" -> 300, 
                 "TrainingSize" -> 700, "TrainingTime" -> 0.366041, 
                 "TrainingMemory" -> 170000672, "ModelMemory" -> 56910312, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.38418418639526863`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6696066359310376, 0.028801034567068826`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6226845443173914, 0.02802692134306706]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00030852, "MeanCrossEntropy" -> 
                PlusMinus[0.6696066359310376, 0.04073081369512506], 
                "ModelMemory" -> 56910312, "TrainingMemory" -> 170000672, 
                "TrainingTime" -> 2.116471190476191], "Index" -> 4], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0648151014485372`, 0.07632911451743131], 
                 "Accuracy" -> 
                 PlusMinus[0.5033269555689651, 0.0407429416760608], 
                 "EvaluationTime" -> 0.00002981, "TestSize" -> 300, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.061191, 
                 "TrainingMemory" -> 2271136, "ModelMemory" -> 248368, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.3998256361268606,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0648151014485372`, 0.053972834477240224`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5033269555689651, 0.02880961034463059]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0081945861781478`, 0.09339960650627042], 
                 "Accuracy" -> 
                 PlusMinus[0.5737503166222438, 0.04027519025856665], 
                 "EvaluationTime" -> 0.000025500000000000003`, "TestSize" -> 
                 300, "TrainingSize" -> 40, "TrainingTime" -> 0.07792, 
                 "TrainingMemory" -> 6541704, "ModelMemory" -> 248368, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 0.42054218053265446`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0081945861781478`, 0.066043495120739]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5737503166222438, 0.028478860145410855`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7061807365761662, 0.10742842117632576`], 
                 "Accuracy" -> 
                 PlusMinus[0.7914160543898323, 0.03341997088421695], 
                 "EvaluationTime" -> 0.00002083, "TestSize" -> 300, 
                 "TrainingSize" -> 150, "TrainingTime" -> 0.532795, 
                 "TrainingMemory" -> 24371016, "ModelMemory" -> 248496, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.5934642870753662,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7061807365761662, 0.07596336510594444]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7914160543898323, 0.02363148803928678]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6262192751567842, 0.0849697333490053], 
                 "Accuracy" -> 
                 PlusMinus[0.7559816249401023, 0.035134775492932376`], 
                 "EvaluationTime" -> 0.00002052, "TestSize" -> 300, 
                 "TrainingSize" -> 700, "TrainingTime" -> 2.928631, 
                 "TrainingMemory" -> 113576552, "ModelMemory" -> 249648, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6713853249681158,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6262192751567842, 0.06008267464669438]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7559816249401023, 0.024844038006519402`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00002052, "MeanCrossEntropy" -> 
                PlusMinus[0.6262192751567842, 0.0849697333490053], 
                "ModelMemory" -> 249648, "TrainingMemory" -> 113576552, 
                "TrainingTime" -> 16.79622528571429], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931978668030144, 0.0045817034022360235`], 
                 "Accuracy" -> 
                 PlusMinus[0.4627845587258604, 0.040515449391942626`], 
                 "EvaluationTime" -> 0.00010415666666666669`, "TestSize" -> 
                 300, "TrainingSize" -> 10, "TrainingTime" -> 0.1131, 
                 "TrainingMemory" -> 5322288, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6188746742777085,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931978668030144, 0.0032397535451065677`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4627845587258604, 0.028648749007863013`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6930005101174215, 0.004578428061256456], 
                 "Accuracy" -> 
                 PlusMinus[0.5034505393101978, 0.040693515588268996`], 
                 "EvaluationTime" -> 0.00011328000000000001`, "TestSize" -> 
                 300, "TrainingSize" -> 40, "TrainingTime" -> 0.191147, 
                 "TrainingMemory" -> 19905688, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6190512669862743,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6930005101174215, 0.003237437529289218]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5034505393101978, 0.028774660822785483`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00011328000000000001`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6930005101174215, 0.004578428061256456], 
                "ModelMemory" -> 297064, "TrainingMemory" -> 19905688, 
                "TrainingTime" -> 7.758980000000001], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7096351510257853, 0.013062610037040576`], 
                 "Accuracy" -> 
                 PlusMinus[0.4627845587258604, 0.040515449391942626`], 
                 "EvaluationTime" -> 0.00010409333333333334`, "TestSize" -> 
                 300, "TrainingSize" -> 10, "TrainingTime" -> 0.109052, 
                 "TrainingMemory" -> 5311216, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6031184380928735,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7096351510257853, 0.00923666013718685]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4627845587258604, 0.028648749007863013`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6819130384638427, 0.006778935169338023], 
                 "Accuracy" -> 
                 PlusMinus[0.5368052976932705, 0.04062655585583601], 
                 "EvaluationTime" -> 0.00010297000000000001`, "TestSize" -> 
                 300, "TrainingSize" -> 40, "TrainingTime" -> 0.160329, 
                 "TrainingMemory" -> 19906056, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6286979422260391,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6819130384638427, 0.004793431027462892]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5368052976932705, 0.02872731314191568]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010297000000000001`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6819130384638427, 0.006778935169338023], 
                "ModelMemory" -> 297064, "TrainingMemory" -> 19906056, 
                "TrainingTime" -> 6.522212000000001], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.693140340769074, 0.004579368183436897], 
                 "Accuracy" -> 
                 PlusMinus[0.5402654930880483, 0.040529868669785016`], 
                 "EvaluationTime" -> 0.00015669666666666667`, "TestSize" -> 
                 300, "TrainingSize" -> 40, "TrainingTime" -> 0.172637, 
                 "TrainingMemory" -> 19796536, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6189263529122859,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.693140340769074, 0.0032381022960581516`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5402654930880483, 0.028658944977005177`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931480226512614, 0.004579443792981804], 
                 "Accuracy" -> 
                 PlusMinus[0.4627845587258604, 0.040515449391942626`], 
                 "EvaluationTime" -> 0.00014642666666666668`, "TestSize" -> 
                 300, "TrainingSize" -> 10, "TrainingTime" -> 0.121038, 
                 "TrainingMemory" -> 5316320, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6189194955221885,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931480226512614, 0.0032381557600800774`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4627845587258604, 0.028648749007863013`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931467524813593, 0.004579430764648902], 
                 "Accuracy" -> 
                 PlusMinus[0.5398950035177195, 0.04063898387608408], 
                 "EvaluationTime" -> 0.00010617666666666668`, "TestSize" -> 
                 300, "TrainingSize" -> 700, "TrainingTime" -> 1.430069, 
                 "TrainingMemory" -> 289258304, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.618920655411438, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931467524813593, 0.003238146547657535]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5398950035177195, 0.028736101079309816`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010617666666666668`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6931467524813593, 0.004579430764648902], 
                "ModelMemory" -> 297064, "TrainingMemory" -> 289258304, 
                "TrainingTime" -> 8.344459857142857], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6935624783560991, 0.004689936069727446], 
                 "Accuracy" -> 
                 PlusMinus[0.45917805838230685`, 0.04045302499644721], 
                 "EvaluationTime" -> 0.00011073, "TestSize" -> 300, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.100075, 
                 "TrainingMemory" -> 5322184, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6185304726780312,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6935624783560991, 0.003316285598235661]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.45917805838230685`, 0.02860460829449673]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6923788055183756, 0.004601826101219699], 
                 "Accuracy" -> 
                 PlusMinus[0.5099114645440351, 0.04079968684499781], 
                 "EvaluationTime" -> 0.00010729666666666665`, "TestSize" -> 
                 300, "TrainingSize" -> 40, "TrainingTime" -> 0.162424, 
                 "TrainingMemory" -> 19905864, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6196022162573163,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6923788055183756, 0.0032539824420137007`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5099114645440351, 0.028849735238385528`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010729666666666665`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6923788055183756, 0.004601826101219699], 
                "ModelMemory" -> 297064, "TrainingMemory" -> 19905864, 
                "TrainingTime" -> 6.597035000000001], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.700756803162236, 0.007227545957320064], 
                 "Accuracy" -> 
                 PlusMinus[0.5127532364890223, 0.05394814423359888], 
                 "EvaluationTime" -> 0.00010651777777777778`, "TestSize" -> 
                 600, "TrainingSize" -> 10, "TrainingTime" -> 
                 0.11659766666666667`, "TrainingMemory" -> 5.32236*^6, 
                 "ModelMemory" -> 297064., "ExperimentCount" -> 2, 
                 "ModelUtility" -> 0.6117463521498924, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7104150732735632, 0.009462774009968054], 
                   PlusMinus[0.6985178477820185, 0.004556081814487729]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4627845587258604, 0.028648749007863013`], 
                   PlusMinus[0.5627803032753406, 0.028665482331271874`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6808693908911159, 0.007173482529099038], 
                 "Accuracy" -> 
                 PlusMinus[0.5233221672491021, 0.04068752775226506], 
                 "EvaluationTime" -> 0.00010225, "TestSize" -> 300, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.156857, 
                 "TrainingMemory" -> 19906104, "ModelMemory" -> 297064, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6295868848239772,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6808693908911159, 0.0050724181410491545`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5233221672491021, 0.028770426783342466`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010225, "MeanCrossEntropy" -> 
                PlusMinus[0.6808693908911159, 0.007173482529099038], 
                "ModelMemory" -> 297064, "TrainingMemory" -> 19906104, 
                "TrainingTime" -> 6.3908776666666665`], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.01], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 7], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6075692199156848, 0.04284136262958795], 
                 "Accuracy" -> 
                 PlusMinus[0.6683170319846272, 0.06686570287200874], 
                 "EvaluationTime" -> 0.0026154100000000003`, "TestSize" -> 
                 100, "TrainingSize" -> 40, "TrainingTime" -> 0.201503, 
                 "TrainingMemory" -> 10485040, "ModelMemory" -> 595840, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.6014507644014278,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6075692199156848, 0.03029341803065358]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6683170319846272, 0.04728119192960219]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5350208823700366, 0.017655616078808056`], 
                 "Accuracy" -> 
                 PlusMinus[0.7858304324992255, 0.033786602159638524`], 
                 "EvaluationTime" -> 0.0018483899999999999`, "TestSize" -> 
                 300, "TrainingSize" -> 700, "TrainingTime" -> 0.836632, 
                 "TrainingMemory" -> 227406784, "ModelMemory" -> 616704, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7163263543686459,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5350208823700366, 0.012484405855351417`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.7858304324992255, 0.023890735500332452`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.5060504485967252, 0.010575589262120802`], 
                 "Accuracy" -> 
                 PlusMinus[0.8317124486514206, 0.021900915115162237`], 
                 "EvaluationTime" -> 0.0018316533333333333`, "TestSize" -> 
                 300, "TrainingSize" -> 3200, "TrainingTime" -> 3.281506, 
                 "TrainingMemory" -> 1036813464, "ModelMemory" -> 623104, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 0.7595639717676009,
                  "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.5060504485967252, 0.010575589262120802`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.8317124486514206, 0.021900915115162237`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0018316533333333333`, "MeanCrossEntropy" -> 
                PlusMinus[0.5060504485967252, 0.010575589262120802`], 
                "ModelMemory" -> 623104, "TrainingMemory" -> 1036813464, 
                "TrainingTime" -> 4.3033855], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 274195149844260]], "MaxTrainingSize" -> 4000, 
         "LastReportingTime" -> 3.740223523823656`16.325472546510813*^9, 
         "PreprocessorEvaluationTime" -> 5.15966796875`2.*^-6, 
         "PreprocessorMemory" -> 747248, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 3.372993127586295, 
             "ElapsedTimes" -> 3.777105, "ExperimentCounts" -> 13], 
            Association[
            "TrainingSizes" -> 40, "TimeBudgets" -> 4.216241409482871, 
             "ElapsedTimes" -> 4.883285, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 150, "TimeBudgets" -> 5.270301761853585, 
             "ElapsedTimes" -> 5.529966, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 700, "TimeBudgets" -> 6.587877202316982, 
             "ElapsedTimes" -> 7.247559000000001, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 3200, "TimeBudgets" -> 8.234846502896227, 
             "ElapsedTimes" -> 6.7769960000000005`, "ExperimentCounts" -> 2]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 5], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[274203739778852]], "ID" -> 
            274208034746148]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {"I got your number Mister Man. Anyway.."}, "ID" -> 
              1701647139666863241], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{11, 15, 11, 7, 12, 12, 13, 2, 13, 13}}, "ID" -> 
              2224475813358149678], "f3" -> 
            Association[
             "Type" -> "Numerical", "Weight" -> 1, "Values" -> {0}, "ID" -> 
              7653724838730018861]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 40.667002, "MaxTrainingMemory" -> 
         1406179976, "DataMemory" -> 2687040, "FunctionMemory" -> 1555760, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 10, 14, 58, 43.954847`8.395581750112958}, 
           "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{
        "How do I integrate the Stanford parser in a Java program.", {2, 15, 
         11, 15, 4, 12, 7, 10, 4, 12, 7, 13}, 1}, {
        "A wino.", {4, 7, 13}, 0}, {"Okay by you.", {5, 10, 11, 13}, 0}, {
        "Politics of India: How do you differentiate between an article and a \
schedule of the Indian Constitution.", {7, 10, 12, 13}, 4}, {
        "The girl's dryin' up!", {4, 7, 7, 13, 2, 13}, 0}, {
        "Historically, banks sought to ensure that they could always pay \
customers in coins when they presented banknotes for payment.", {12, 13, 7, 
         15, 10, 15, 10, 11, 15, 2, 15, 7, 10, 7, 2, 11, 15, 7, 10, 7, 13}, 
         14}, {"Participants then have the opportunity to evaluate their \
behavior, reflect on how the past incident is getting played out in the \
present and more deeply understand particular situations in their lives.", {7,
          2, 15, 4, 7, 10, 15, 11, 7, 13, 15, 10, 2, 4, 1, 7, 15, 15, 15, 9, 
         10, 4, 1, 3, 2, 2, 15, 1, 7, 10, 11, 7, 13}, 12}, {
        "What other measures can be taken to curb pollution in Delhi.", {4, 1,
          7, 15, 15, 15, 10, 15, 7, 10, 12, 13}, 1}, {
        "Thanks Harry really but..", {7, 12, 2, 3, 13, 13}, 0}, {
        "Really What exactly are you working on.", {2, 11, 2, 15, 11, 15, 10, 
         13}, 2}, {
        "You know what you look like.", {11, 15, 11, 11, 15, 10, 13}, 3}, {
        "Will there ever be another Witcher game.", {15, 11, 2, 15, 4, 12, 7, 
         13}, 0}, {
        "How can I delete my Quora account in one minute.", {2, 15, 11, 15, 
         11, 12, 7, 10, 8, 7, 13}, 1}, {
        "Well he was a flashback.", {2, 11, 15, 4, 7, 13}, 0}, {
        "This does not include the hundreds of moonlets in the rings.", {4, 
         15, 2, 15, 4, 7, 10, 7, 10, 4, 7, 13}, 0}, {
        "A typeface without serifs is called sans-serif or sans serif, from \
the French sans, meaning \"without\".", {4, 7, 10, 7, 15, 15, 1, 3, 1, 7, 13, 
         10, 4, 1, 7, 13, 15, 13, 10, 13, 13}, 0}, {
        "Is it OK if a teacher says, \"\"I don't know\"\" to students.", {15, 
         11, 1, 10, 4, 7, 15, 13, 13, 13, 11, 15, 2, 15, 13, 13, 10, 7, 13}, 
         0}, {"What was I supposed to do.", {11, 15, 11, 15, 10, 15, 13}, 
         1}, {"Now that he's pulled this stunt he'll stick his nose in my oil \
scheme and ruin that one too!", {2, 10, 11, 15, 15, 4, 7, 11, 15, 15, 11, 7, 
         10, 11, 7, 7, 3, 15, 10, 8, 2, 13}, 0}, {
        "Scooter may refer to:", {7, 15, 15, 10, 13}, 0}, {
        "Of course -- You saw West's body.", {10, 7, 13, 11, 15, 12, 7, 13}, 
         0}, {"My computer has got a folder virus. Whenever I connect a USB \
all files are turning into shortcuts. What should I do.", {11, 7, 15, 15, 4, 
         7, 7, 13}, 8}, {
        "What are the best industrial application washing machines. Where can \
I buy them in India.", {11, 15, 4, 1, 1, 7, 15, 7, 13}, 1}, {
        "The poems are in Homeric Greek, also known as Epic Greek, a literary \
language which shows a mixture of features of the Ionic and Aeolic dialects \
from different centuries; the predominant influence is Eastern Ionic.", {4, 7,
          15, 10, 1, 1, 13, 2, 15, 10, 12, 1, 13, 4, 1, 7, 4, 15, 4, 7, 10, 7,
          10, 4, 1, 3, 1, 7, 10, 1, 7, 13, 4, 1, 7, 15, 12, 12, 13}, 15}, {
        "Eight bodies have been stolen in New York within the last eighteen \
months.", {8, 7, 15, 15, 15, 10, 12, 12, 10, 4, 1, 8, 7, 13}, 0}, {
        "She brought me my fan mail.", {11, 15, 11, 11, 7, 7, 13}, 0}, {
        "Campaign or The Campaign may refer to:\nAdvertising campaign\nCivil \
society campaign\nMilitary campaign\nPolitical campaign\nIn agriculture, the \
period during which sugar beets are harvested and processed", {7, 3, 4, 7, 15,
          15, 10, 13, 12, 7, 1, 7, 7, 1, 7, 1, 7, 10, 7, 13, 4, 7, 10, 4, 7, 
         7, 15, 15, 3, 15}, 22}, {
        "There is a broad grey area between the two divisions.", {11, 15, 4, 
         1, 1, 7, 10, 4, 8, 7, 13}, 0}, {
        "A bomb with enough radiation to incinerate an average man like . . . \
 that.", {4, 7, 10, 1, 7, 10, 15, 4, 1, 7, 10, 13, 4, 13}, 0}, {
        "Which music do you like best.", {4, 7, 15, 11, 10, 1, 13}, 1}, {
        "What's the problem.", {11, 15, 4, 7, 13}, 1}, {
        "Can you love someone without a reason.", {15, 11, 15, 7, 10, 4, 7, 
         13}, 0}, {
        "These processes can lead some people to experience changes in mental \
operation defining their self-identity (whether in momentary acuity or \
chronic development) different enough from their previous normal state that \
it can excite feelings of newly formed understanding such as revelation, \
enlightenment, confusion, and psychosis.", {4, 7, 15, 15, 4, 7, 10, 15, 7, 10,
          1, 7, 15, 11, 7, 13, 10, 10, 1, 7, 3, 1, 7, 13, 1, 2, 10, 11, 1, 1, 
         7, 10, 11, 15, 15, 7, 10, 2, 15, 15, 1, 10, 7, 13, 7, 13, 7, 13, 3, 
         7, 13}, 16}, {
        "Purple drank, a recreational drug", {12, 15, 13, 4, 1, 7}, 0}, {
        "Nobody saw you bring her in.", {7, 15, 11, 15, 11, 10, 13}, 0}, {
        "Fantasy is a genre of speculative fiction set in a fictional \
universe, often without any locations, events, or people referencing the real \
world.", {12, 15, 4, 7, 10, 1, 7, 15, 10, 4, 1, 7, 13, 2, 10, 4, 7, 13, 7, 13,
          3, 7, 15, 4, 1, 7, 13}, 0}, {
        "How can I know someones password without changing it.", {2, 15, 11, 
         15, 7, 7, 10, 15, 11, 13}, 1}, {
        "Dadthere was no bomb.", {12, 15, 4, 7, 13}, 0}, {
        "As a child I never had no room all to myself we were awful poor.", {
         10, 4, 7, 11, 2, 15, 4, 7, 4, 10, 11, 11, 15, 1, 1, 13}, 0}, {
        "The Archbishop would like a word.", {4, 12, 15, 15, 4, 7, 13}, 0}, {
        "I'm sorry talk.", {11, 15, 1, 7, 13}, 0}, {
        "The killer leaves a newspaper clipping at each murder Sidney.", {4, 
         7, 15, 4, 7, 1, 10, 4, 7, 12, 13}, 0}, {
        "What is it this time.", {11, 15, 11, 4, 7, 13}, 1}, {
        "They have distinctly white bellies, thicker and longer bills than \
Cepphus, and form very dense colonies on cliffs during the reproductive \
season.", {11, 15, 2, 1, 7, 13, 1, 3, 1, 7, 10, 12, 13, 3, 7, 2, 1, 7, 10, 7, 
         10, 4, 1, 7, 13}, 0}, {
        "The town isn't much.", {4, 7, 15, 2, 2, 13}, 0}, {
        "Song pitching can be done on a songwriter's behalf by their \
publisher or independently using tip sheets like RowFax, the MusicRow \
publication and SongQuarters.", {7, 7, 15, 15, 15, 10, 4, 7, 7, 10, 11, 7, 3, 
         2, 15, 7, 7, 10, 12, 13, 4, 12, 7, 3, 7, 13}, 0}, {
        "However, most ancient sculpture was brightly painted, and this has \
been lost.", {2, 13, 2, 1, 7, 15, 2, 15, 13, 3, 4, 15, 15, 15, 13}, 1}, {
        "Where can I get Jon after completing MSc.", {2, 15, 11, 15, 12, 10, 
         15, 12, 13}, 1}, {
        "Do you personally believe Hillary Clinton has committed voter \
fraud.", {15, 11, 2, 15, 12, 12, 15, 15, 7, 7, 13}, 0}, {
        "By the time we return there all the preparations for the blood \
transfusion are completed.", {10, 4, 7, 11, 15, 11, 4, 4, 7, 10, 4, 7, 7, 15, 
         15, 13}, 0}, {
        "You're my eternal favorite.", {11, 15, 11, 1, 7, 13}, 0}, {
        "What is a ventilation system.", {11, 15, 4, 7, 7, 13}, 1}, {
        "Catalonia consists of four provinces: Barcelona, Girona, Lleida, and \
Tarragona.", {12, 15, 10, 8, 7, 13, 12, 13, 12, 13, 12, 13, 3, 12, 13}, 0}, {
        "Hang on get it up go on higher.", {12, 10, 15, 11, 9, 15, 10, 1, 13},
          0}, {"The third type is an oxygen powered resuscitator.", {4, 1, 7, 
         15, 4, 7, 15, 7, 13}, 0}, {
        "Infetic World the game development, what would you like to add to \
the game.", {12, 12, 4, 7, 7, 13, 11, 15, 11, 15, 10, 15, 10, 4, 7, 13}, 6}, {
        "How do I can whole tomatoes.", {2, 15, 11, 15, 1, 7, 13}, 1}, {
        "Or do you think you can find the airport by yourself.", {3, 15, 11, 
         15, 11, 15, 15, 4, 7, 10, 11, 13}, 0}, {
        "Bed bugs are not known to transmit any pathogens as disease \
vectors.", {15, 7, 15, 2, 15, 10, 15, 4, 7, 10, 7, 7, 13}, 0}, {
        "How much do Uber drivers make in Austin.", {2, 2, 15, 12, 7, 15, 10, 
         12, 13}, 1}, {
        "How to get into Kean University.", {2, 10, 15, 10, 12, 12, 13}, 1}, {
        "I'll call the coroner.", {11, 15, 15, 4, 7, 13}, 0}, {
        "Evolution (process): From which animal have monkeys evolved.", {7, 
         13, 7, 13, 13}, 4}, {
        "When two quantities are measured with the same unit, as is often the \
case, their ratio is a dimensionless number.", {2, 8, 7, 15, 15, 10, 4, 1, 7, 
         13, 2, 15, 2, 4, 7, 13, 11, 7, 15, 4, 1, 7, 13}, 1}, {
        "Why do people study mathematical cognition.", {2, 15, 7, 15, 1, 7, 
         13}, 1}, {
        "Umm that also has already happened.", {7, 4, 2, 15, 2, 15, 13}, 0}, {
        "Look you're a player...", {15, 11, 15, 4, 7, 13}, 0}, {
        "What should I do to avoid being jealous of someone.", {11, 15, 11, 
         15, 10, 15, 15, 1, 10, 7, 13}, 1}, {
        "Raytheon later licensed its patents for a home-use microwave oven \
that was first introduced by Tappan in 1955, but these units were still too \
large and expensive for general home use.", {12, 2, 15, 11, 7, 10, 4, 7, 7, 7,
          4, 15, 1, 15, 10, 12, 10, 8, 13, 3, 4, 7, 15, 2, 2, 1, 3, 1, 10, 1, 
         7, 7, 13}, 0}, {"I'm right this time.", {11, 15, 2, 4, 7, 13}, 0}, {
        "In mathematics, the intersection of two or more objects is another, \
usually \"smaller\" object.", {10, 7, 13, 4, 7, 10, 8, 3, 1, 7, 15, 4, 13, 2, 
         13, 1, 13, 7, 13}, 0}, {"The truck.", {4, 7, 13}, 0}, {
        "Sometimes so I could kill him myself.", {2, 10, 11, 15, 15, 11, 11, 
         13}, 0}, {
        "They don't expect anyone to try getting in!", {11, 15, 2, 15, 7, 10, 
         15, 15, 10, 13}, 0}, {
        "How reliable are property management service providers like renteazy \
or realtykart in Bangalore.", {2, 1, 15, 7, 7, 7, 7, 10, 7, 3, 7, 10, 12, 13},
          1}, {"She wants revenge!", {11, 15, 7, 13}, 0}, {
        "Gooden is pitching and Strawberry is ready to break out.", {12, 15, 
         15, 3, 12, 15, 1, 10, 15, 9, 13}, 0}, {
        "Grant may refer to:", {12, 15, 15, 10, 13}, 0}, {
        "How do you think consumers have changed as a result of 9/11.", {2, 
         15, 11, 15, 7, 15, 15, 10, 4, 7, 10, 8, 13}, 1}, {
        "Yeah but if I win this trip Mama'll kill me.", {5, 3, 10, 11, 15, 4, 
         7, 7, 15, 15, 11, 13}, 0}, {
        "Examples of punishment by death for apostates can be seen under the \
Sharia law found in certain Islamic countries.", {7, 10, 7, 10, 7, 10, 7, 15, 
         15, 15, 10, 4, 12, 7, 15, 10, 1, 1, 7, 13}, 0}, {
        "You're.", {11, 15, 13}, 0}, {
        "Must have been my cheap-ass answering machine.", {15, 15, 15, 11, 1, 
         7, 7, 13}, 0}, {
        "For example feral animals are domesticated, but not tamed.", {10, 7, 
         1, 7, 15, 15, 13, 3, 2, 15, 13}, 0}, {
        "Do you how do you get meth out of your system.", {15, 11, 2, 15, 11, 
         15, 7, 10, 10, 11, 7, 13}, 3}, {
        "I hear Twombley got shot.", {11, 15, 12, 15, 15, 13}, 0}, {
        "I'm here to pick up Captain Kramer.", {11, 15, 2, 10, 15, 9, 12, 12, 
         13}, 0}, {
        "It is commonly used to flavor foods and to tenderize tougher cuts of \
meat.", {11, 15, 2, 15, 10, 7, 7, 3, 10, 15, 1, 7, 10, 7, 13}, 0}, {
        "Which leads us to..", {4, 15, 11, 10, 13, 13}, 1}, {
        "He just <u>appeared</u>.", {11, 2, 7, 15, 7, 13}, 0}, {
        "Will the requests module ever replace urllib2 in the Python standard \
library.", {15, 4, 7, 7, 2, 15, 7, 10, 4, 12, 1, 7, 13}, 0}, {
        "Styrian Coarse Haired Hound, a rough coated, hardy hunting dog used \
by Austrians and Slovenians to hunt Wild Boar.", {1, 12, 12, 12, 13, 4, 1, 1, 
         13, 1, 7, 7, 15, 10, 12, 3, 12, 10, 7, 12, 12, 13}, 0}, {
        "They normally travel on a rail between stockpiles in the \
stockyard.", {11, 2, 15, 10, 4, 7, 10, 7, 10, 4, 7, 13}, 0}, {
        "Reproduction usually occurs from November to February and is \
oviparous.", {12, 2, 15, 10, 12, 10, 12, 3, 15, 1, 13}, 0}, {
        "What do you get out of it.", {11, 15, 11, 15, 10, 10, 11, 13}, 1}, {
        "What would it take to reverse an atheist's or theist's position on \
the existence of God.", {11, 15, 11, 15, 10, 15, 4, 7, 3, 7, 6, 7, 10, 4, 7, 
         10, 12, 13}, 1}, {
        "As such, it continues to generate extensive and highly contested \
debate with regard to its therapeutic efficacy, its scientific status, and \
whether it advances or is detrimental to the feminist cause.", {10, 1, 13, 11,
          15, 10, 15, 1, 3, 2, 15, 7, 10, 7, 10, 11, 1, 7, 13, 11, 1, 7, 13, 
         3, 10, 11, 7, 3, 15, 1, 10, 4, 1, 7, 13}, 22}, {
        "Is he your entertainment for tonight.", {15, 11, 11, 7, 10, 7, 13}, 
         0}, {"Some colloids are translucent because of the Tyndall effect, \
which is the scattering of light by particles in the colloid.", {4, 7, 15, 1, 
         10, 10, 4, 12, 7, 13, 4, 15, 4, 7, 10, 7, 10, 7, 10, 4, 7, 13}, 
         10}, {"What was your favorite movie of 2015.", {11, 15, 11, 1, 7, 10,
          8, 13}, 1}, {
        "A \"military citizenship\" arose in which all citizens were involved \
with the military in some manner during the war.", {4, 13, 1, 7, 13, 15, 10, 
         4, 4, 7, 15, 15, 10, 4, 1, 10, 4, 7, 10, 4, 7, 13}, 6}, {
        "This might be from one to another denomination within the same \
religion, for example, from Baptist to Catholic Christianity or from Shia to \
Sunni Islam.", {4, 15, 15, 10, 8, 10, 4, 7, 10, 4, 1, 7, 13, 10, 7, 13, 10, 
         12, 10, 12, 12, 3, 10, 1, 10, 12, 12, 13}, 0}, {
        "They can put him where they will; he won't be bothered I won't be \
bothered and everyone's conscience can remain free and untroubled.", {11, 15, 
         15, 11, 2, 11, 15, 13, 11, 15, 2, 15, 15, 11, 15, 2, 15, 15, 3, 7, 7,
          15, 15, 1, 3, 1, 13}, 5}, {
        "An overdraft occurs when money is withdrawn from a bank account and \
the available balance goes below zero.", {4, 7, 15, 2, 7, 15, 15, 10, 4, 7, 7,
          3, 4, 1, 7, 15, 10, 8, 13}, 4}, {
        "being denied those Hungry Hungry Hippos.", {15, 15, 4, 12, 12, 12, 
         13}, 0}, {
        "When will Cognizant start off campus for 2016 for developer post.", {
         2, 15, 1, 7, 10, 7, 10, 8, 10, 7, 7, 13}, 1}, {
        "The areas that constituted the Danelaw lie in northern and eastern \
England.", {4, 7, 4, 15, 4, 12, 7, 10, 1, 3, 1, 12, 13}, 0}, {
        "What are some of the best gadgets of 2016.", {11, 15, 4, 10, 4, 1, 7,
          10, 8, 13}, 1}, {
        "You didn't want to farm.", {11, 15, 2, 15, 10, 7, 13}, 0}, {
        "The typical abbreviation and mathematical variable name for radius \
is r.", {4, 1, 7, 3, 1, 1, 7, 10, 7, 15, 10}, 0}, {
        "In the case of physical ionization in a medium, such as a gas,  \
\"ion pairs\" are created by ion collisions, where each generated pair \
consists of a free electron and a positive ion.", {10, 4, 7, 10, 1, 7, 10, 4, 
         7, 13, 1, 10, 4, 7, 13, 13, 7, 7, 13, 15, 15, 10, 7, 7, 13, 2, 4, 15,
          7, 15, 10, 4, 1, 7, 3, 4, 1, 7, 13}, 21}, {
        "If this thing is contagious -- What.", {10, 4, 7, 15, 1, 13, 11, 13},
          7}, {"Is there any site for online sweatshirt shopping in India.", {
         15, 11, 4, 7, 10, 1, 7, 7, 10, 12, 13}, 0}, {
        "Non loquis Latinum.", {1, 7, 7, 13}, 0}, {
        "How can I repair corrupt JPEG files. I deleted a folder with many \
JPEG files. After I restored it, many of the images were corrupt and would \
not open. Is there any way to recover them.", {2, 15, 11, 15, 1, 12, 7, 13}, 
         1}, {"You've been here before.", {11, 15, 15, 2, 10, 13}, 0}, {
        "This is Cooper what the hell do you do on this ship anyway.", {4, 15,
          12, 11, 4, 7, 15, 11, 15, 10, 4, 7, 2, 13}, 4}, {
        "Where can I get very innovative technology for floor polishing in \
Rydalmere.", {2, 15, 11, 15, 2, 1, 7, 10, 7, 7, 10, 12, 13}, 1}, {
        "What is the best digital marketing course available online and \
offline in India and Why.", {11, 15, 4, 1, 1, 7, 7, 1, 7, 3, 7, 10, 12, 3, 2, 
         13}, 1}, {
        "An accident is an attribute which may or may not belong to a \
subject.", {4, 7, 15, 4, 7, 4, 15, 3, 15, 2, 15, 10, 4, 7, 13}, 6}, {
        "And that CICI chick wasn't that bad either but I'm really concerned \
about my safety now.", {3, 4, 7, 7, 15, 2, 10, 1, 3, 3, 11, 15, 2, 15, 10, 11,
          7, 2, 13}, 0}, {
        "Did I give you a job this mornin.", {15, 11, 15, 11, 4, 7, 4, 7, 13},
          0}, {"Dunn.", {12, 13}, 0}, {
        "At the end of the Cold War and the dissolution of the Soviet Union \
in 1991, only the United States appeared to fulfill the criteria of being a \
world superpower.", {10, 4, 7, 10, 4, 12, 12, 3, 4, 7, 10, 4, 12, 12, 10, 8, 
         13, 2, 4, 12, 12, 15, 10, 15, 4, 7, 10, 15, 4, 7, 7, 13}, 0}, {
        "In its standard appearance it has a teat, mouth shield, and \
handle.", {10, 11, 1, 7, 11, 15, 4, 7, 13, 7, 7, 13, 3, 15, 13}, 0}, {
        "Remarkable.", {1, 13}, 0}, {
        "They will drive out good ideas.\"", {11, 15, 15, 2, 1, 7, 13, 13}, 
         0}, {"The most common form of the slave trade is now commonly \
referred to as human trafficking.", {4, 2, 1, 7, 10, 4, 7, 7, 15, 2, 2, 15, 
         10, 10, 1, 7, 13}, 0}, {
        "Art thou not Romeo and a Montague.", {12, 11, 2, 12, 3, 4, 12, 13}, 
         0}, {"Harry D'Amour.", {12, 12, 13}, 0}, {
        "By 1897, spiritualism was said to have more than eight million \
followers in the United States and Europe, mostly drawn from the middle and \
upper classes.", {10, 8, 13, 7, 15, 15, 10, 15, 1, 10, 8, 8, 7, 10, 4, 12, 12,
          3, 12, 13, 2, 15, 10, 4, 1, 3, 1, 7, 13}, 0}, {
        "Come work for me.", {15, 7, 10, 11, 13}, 0}, {
        "That's five thousand dollars.", {4, 15, 8, 8, 7, 13}, 0}, {
        "They are most plainly evident in fully developed hypomanic states; \
in full-blown mania, however, they undergo progressively severe exacerbations \
and become more and more obscured by other signs and symptoms, such as \
delusions and fragmentation of behavior.Mania is a syndrome with multiple \
causes.", {11, 15, 2, 2, 1, 10, 2, 15, 1, 7, 13, 10, 1, 7, 13, 2, 13, 11, 15, 
         2, 1, 7, 3, 15, 2, 3, 2, 15, 10, 1, 7, 3, 7, 13, 1, 10, 7, 3, 7, 10, 
         7, 15, 4, 7, 10, 1, 7, 13}, 14}, {
        "What are you talking about Erik.", {11, 15, 11, 15, 10, 12, 13}, 
         1}, {"Where're the others.", {2, 15, 4, 7, 13}, 1}, {
        "The commercial use of tanning beds was banned entirely in Brazil in \
2009 and Australia in 2015.", {4, 1, 7, 10, 1, 7, 15, 15, 2, 10, 12, 10, 8, 3,
          12, 10, 8, 13}, 0}, {
        "Do you have any relatives in jail.", {15, 11, 15, 4, 7, 10, 7, 13}, 
         0}, {"How's the case going.", {2, 4, 7, 15, 13}, 1}, {
        "Do you really think I'm mad.", {15, 11, 2, 15, 11, 15, 1, 13}, 0}, {
        "You think we're gonna let Zimmermann haul it onto <U>our</U> streets \
on the Fourth-of-fucking-July!", {11, 15, 11, 15, 15, 10, 15, 12, 15, 11, 10, 
         12, 11, 12, 7, 10, 4, 7, 13}, 0}, {
        "So you got cozy with she who stings.", {10, 11, 15, 1, 10, 11, 11, 
         15, 13}, 7}, {
        "Nobody special enough Curly.", {7, 1, 1, 12, 13}, 0}, {
        "An example of all of these types of coating is a product label on \
many drinks bottles- one side has an all-over functional coating (the \
adhesive) and the other side has one or more decorative coatings in an \
appropriate pattern (the printing) to form the words and images.", {4, 7, 10, 
         4, 10, 4, 7, 10, 7, 15, 4, 7, 7, 10, 1, 7, 7, 13, 8, 7, 15, 4, 1, 1, 
         7, 13, 4, 7, 13, 3, 4, 1, 7, 15, 8, 3, 1, 1, 7, 10, 4, 1, 7, 13, 4, 
         7, 13, 10, 15, 4, 7, 3, 7, 13}, 0}, {
        "When a student graduates without attending the ceremony, then it is \
called graduation in absentia.", {2, 4, 7, 15, 10, 15, 4, 7, 13, 2, 11, 15, 
         15, 7, 10, 7, 13}, 1}, {
        "I am writing a book and want to get it published. How do I go about \
it.", {11, 15, 15, 4, 7, 3, 15, 10, 15, 11, 15, 13}, 12}, {
        "They are sometimes called \"red-tasseled Manchus\", a reference to \
the ornamentation on traditional Manchu hats.", {11, 15, 2, 15, 13, 1, 12, 13,
          13, 4, 7, 10, 4, 7, 10, 1, 12, 7, 13}, 0}, {
        "How do I control my emotion and sadness.", {2, 15, 11, 15, 11, 7, 3, 
         7, 13}, 1}, {
        "How are they treating you.", {2, 15, 11, 15, 11, 13}, 1}, {
        "Or Reno.", {3, 12, 13}, 0}, {
        "I never said they were boring.", {11, 2, 15, 11, 15, 15, 13}, 0}, {
        "Austin was the most loyal and caring friend I ever had.", {12, 15, 4,
          2, 1, 3, 15, 7, 11, 2, 15, 13}, 0}, {
        "What are some real life examples of \
\[OpenCurlyDoubleQuote]Karma\"\".", {11, 15, 4, 1, 7, 7, 10, 13, 7, 13, 13, 
         13}, 1}, {
        "What is the Lewis structure for BBr3.", {11, 15, 4, 12, 7, 10, 7, 
         13}, 1}, {
        "Heathers is a 1988 American black comedy film written by Daniel \
Waters and directed by Michael Lehmann.", {12, 15, 4, 8, 1, 1, 7, 7, 15, 10, 
         12, 12, 3, 15, 10, 12, 12, 13}, 0}, {
        "The vice-president and treasurer is Gordon LaRiviere.", {4, 7, 3, 7, 
         15, 12, 12, 13}, 0}, {
        "What are some of the most famous European anime series.", {11, 15, 4,
          10, 4, 2, 1, 1, 7, 7, 13}, 1}, {
        "Each suit has 14 cards, ten pip cards numbering from one (or Ace) to \
ten and four face cards (King, Queen, Knight, and Jack/Knave).", {4, 7, 15, 8,
          7, 13, 8, 7, 7, 7, 10, 8, 13, 3, 7, 13, 10, 8, 3, 8, 7, 7, 13, 12, 
         13, 12, 13, 12, 13, 3, 12, 13, 13}, 0}, {
        "Is she always like this.", {15, 11, 2, 10, 4, 13}, 0}, {
        "The person holding the office is typically elected or appointed by \
the members of the group.", {4, 7, 15, 4, 7, 15, 2, 15, 3, 15, 10, 4, 7, 10, 
         4, 7, 13}, 0}, {
        "At the end of 'Cast Away' (movie) where does chuck (Tom Hanks) head \
towards.", {10, 4, 7, 10, 13, 15, 2, 13, 13, 7, 13, 2, 15, 12, 13, 12, 12, 13,
          7, 10, 13}, 8}, {
        "Also, argumentation scholars study the post hoc rationalizations by \
which organizational actors try to justify decisions they have made \
irrationally.", {2, 13, 7, 7, 15, 4, 7, 6, 7, 10, 4, 1, 7, 15, 10, 15, 7, 11, 
         15, 15, 2, 13}, 10}, {
        "The amusing house wine....", {4, 1, 7, 7, 13}, 0}, {
        "Syringes are frequently used in clinical medicine to administer \
injections, infuse intravenous therapy into the bloodstream, apply compounds \
such as glue or lubricant, and draw/measure liquids.", {7, 15, 2, 15, 10, 1, 
         7, 10, 15, 7, 13, 15, 1, 7, 10, 4, 7, 13, 15, 7, 1, 10, 7, 3, 7, 13, 
         3, 7, 7, 13}, 0}, {
        "Because of the nature of its business, as stated in the corporate \
charter, Teletype Corporation was allowed a unique mode of operation within \
Western Electric.", {10, 10, 4, 7, 10, 11, 7, 13, 10, 15, 10, 4, 1, 7, 13, 12,
          12, 15, 15, 4, 1, 7, 10, 7, 10, 12, 12, 13}, 0}, {
        "I'm a saloon keeper.", {11, 15, 4, 7, 7, 13}, 0}, {
        "So where are you from.", {10, 2, 15, 11, 10, 13}, 2}, {
        "Why is Kim Jong-un considered to be funny.", {2, 15, 12, 1, 15, 10, 
         15, 1, 13}, 1}, {"Take the squad ahead.", {15, 4, 7, 2, 13}, 0}, {
        "Does the EM Drive work.", {15, 4, 12, 12, 7, 13}, 0}, {
        "There was a partial print they tracked it back to Treadstone!", {11, 
         15, 4, 1, 7, 11, 15, 11, 2, 10, 7, 13}, 0}, {
        "Physiologically, the function of the brain is to exert centralized \
control over the other organs of the body.", {2, 13, 4, 7, 10, 4, 7, 15, 10, 
         15, 1, 7, 10, 4, 1, 7, 10, 4, 7, 13}, 0}, {
        "After the Spanish Civil War, the Francoist dictatorship enacted \
repressive measures, abolishing Catalan institutions and banning the official \
use of the Catalan language again.", {10, 4, 12, 12, 12, 13, 4, 1, 7, 15, 1, 
         7, 13, 15, 1, 7, 3, 15, 4, 1, 7, 10, 4, 1, 7, 2, 13}, 0}, {
        "Why did computers get faster.", {2, 15, 7, 15, 1, 13}, 1}, {
        "Like other symphyses in the body, this is a midline articulation \
where the bones are joined by fibrocartilage, but this articulation fuses \
together in early childhood.", {10, 1, 7, 10, 4, 7, 13, 4, 15, 4, 7, 7, 2, 4, 
         7, 15, 15, 10, 7, 13, 3, 4, 7, 15, 2, 10, 1, 7, 13}, 12}, {
        "You are torn by grief not only for Raoul but for d'Artagnan whom you \
love and now treat as an enemy.", {11, 15, 15, 10, 7, 2, 2, 10, 12, 3, 10, 12,
          11, 11, 15, 3, 2, 15, 10, 4, 7, 13}, 13}, {
        "Heifetz, American leadership teacher\nYuri Heifetz, Russian poet and \
singer-songwriter\nGrigory Kheifets, Soviet KGB agent\nIosif Kheifits, Soviet \
film director", {12, 13, 12, 7, 7, 12, 12, 13, 12, 7, 3, 7, 12, 12, 13, 12, 
         12, 7, 12, 12, 13, 12, 7, 7}, 0}, {
        "It is priced between $6 USD for lower end models, and $20 USD for \
higher end models, such as special editions.", {11, 15, 15, 10, 6, 8, 7, 10, 
         1, 7, 7, 13, 3, 6, 8, 7, 10, 1, 7, 7, 13, 1, 10, 1, 7, 13}, 0}, {
        "Everyone concerned thought..", {7, 1, 7, 13, 13}, 0}, {
        "Did you make anything of the tooth.", {15, 11, 15, 7, 10, 4, 7, 13}, 
         0}, {"You know what we do to welchers Cluett don't you.", {11, 15, 
         11, 11, 15, 10, 7, 12, 15, 2, 11, 13}, 3}, {
        "What're these.", {4, 15, 4, 13}, 1}, {
        "What are some lesser-known sights to see when visiting Amersfoort, \
Netherlands.", {11, 15, 4, 1, 7, 10, 15, 2, 15, 12, 13, 12, 13}, 1}, {
        "I miss things.", {11, 15, 7, 13}, 0}, {
        "Is that possible to live without money Can you live without money.", \
{15, 10, 1, 10, 15, 10, 7, 15, 11, 15, 10, 7, 13}, 0}, {
        "No really one of them marries me and then leaves me quicker than you \
can say Indiana Jones -- and the other who seriously ought to have known \
better casually marries my best friend.", {4, 2, 8, 10, 11, 15, 11, 3, 2, 15, 
         11, 1, 10, 11, 15, 15, 12, 12, 13, 3, 4, 1, 11, 2, 15, 10, 15, 15, 2,
          2, 15, 11, 1, 7, 13}, 23}, {
        "Today most mews stables have been converted into dwellings.", {7, 2, 
         7, 7, 15, 15, 15, 10, 7, 13}, 0}, {
        "How do I prepare for IIM Indore IPM Aptitude Test and Personal \
Interview.", {2, 15, 11, 15, 10, 12, 12, 12, 12, 12, 3, 12, 12, 13}, 1}, {
        "Will we be in this war.", {15, 11, 15, 10, 4, 7, 13}, 0}, {
        "This left only a trio of Lennon, McCartney, and Harrison, who \
performed under several other names, including Johnny and the Moondogs and \
Japage 3 before returning to the Quarrymen name in 1959.", {4, 15, 2, 4, 7, 
         10, 12, 13, 12, 13, 3, 12, 13, 11, 15, 10, 1, 1, 7, 13, 15, 12, 3, 4,
          12, 3, 12, 8, 10, 15, 10, 4, 12, 7, 10, 8, 13}, 11}, {
        "What are considered the best movies about the Holocaust.", {11, 15, 
         15, 4, 1, 7, 10, 4, 12, 13}, 1}, {
        "How do letters of recommendation work for college admissions.", {2, 
         15, 7, 10, 7, 7, 10, 7, 7, 13}, 1}, {
        "What the hell is this Marvosa!", {11, 4, 7, 15, 4, 7, 13}, 1}, {
        "Prof Charles Hermite (French pronunciation: [al mit]) FRS FRSE MIAS \
(24 December 1822  14 January 1901) was a French mathematician who did \
research concerning number theory, quadratic forms, invariant theory, \
orthogonal polynomials, elliptic functions, and algebra.", {12, 12, 12, 13, 
         12, 7, 13, 13, 12, 7, 13, 13, 7, 7, 7, 13, 8, 12, 8, 8, 12, 8, 13, 
         15, 4, 1, 7, 11, 15, 7, 15, 7, 7, 13, 1, 7, 13, 1, 7, 13, 1, 7, 13, 
         1, 7, 13, 3, 7, 13}, 21}, {
        "How do I compare the universal and relativist positions with regard \
to ethical intercultural interaction.", {2, 15, 11, 15, 4, 1, 3, 1, 7, 10, 7, 
         10, 1, 1, 7, 13}, 1}, {
        "Going out as friends.", {15, 9, 10, 7, 13}, 0}, {
        "How do I reduce body fat by working out only 30 minutes daily. After \
how many months will it start showing some effects.", {2, 15, 11, 15, 7, 7, 
         10, 15, 9, 2, 8, 7, 2, 13}, 1}, {
        "Such actions are used as leverage, to force the victim to act in a \
way contrary to their own interests.", {1, 7, 15, 15, 10, 7, 13, 10, 15, 4, 7,
          10, 15, 10, 4, 7, 1, 10, 11, 1, 7, 13}, 0}, {
        "Todd.", {12, 13}, 0}, {
        "I'm just weak Sister; I'm so weak.", {11, 15, 2, 1, 7, 13, 11, 15, 2,
          1, 13}, 0}, {
        "Ain't gonna be moved.", {12, 2, 15, 10, 15, 15, 13}, 0}, {
        "Who is Pamela Landy.", {11, 15, 12, 12, 13}, 1}, {
        "The foreskin of adults is typically retractable over the glans.", {4,
          7, 10, 7, 15, 2, 1, 10, 4, 7, 13}, 0}, {
        "How do you unlock an iPad.", {2, 15, 11, 15, 4, 7, 13}, 1}, {
        "No I don't want to bug you if you're trying to -- I mean it's okay \
if you want to sit down here.", {4, 11, 15, 2, 15, 10, 7, 11, 10, 11, 15, 15, 
         10, 13, 11, 15, 11, 15, 1, 10, 11, 15, 10, 15, 9, 2, 13}, 0}, {
        "What do you miss the most from your childhood.", {11, 15, 11, 15, 4, 
         2, 10, 11, 7, 13}, 1}, {
        "They ever love you back.", {11, 2, 15, 11, 2, 13}, 0}, {
        "What are the questions asked in campus interviews to a civil \
engineer.", {11, 15, 4, 7, 15, 10, 7, 7, 10, 4, 1, 7, 13}, 1}, {
        "And the Argies.", {3, 4, 12, 13}, 0}, {
        "Right Clarence.", {2, 12, 13}, 0}, {
        "Attitudes toward suffering may vary widely, in the sufferer or other \
people, according to how much it is regarded as avoidable or unavoidable, \
useful or useless, deserved or undeserved.", {7, 10, 7, 15, 15, 2, 13, 10, 4, 
         7, 3, 1, 7, 13, 15, 10, 2, 1, 11, 15, 15, 10, 1, 3, 1, 13, 1, 3, 1, 
         13, 15, 3, 1, 13}, 15}, {"You bastard!", {11, 15, 13}, 0}, {
        "Space suits are often worn inside spacecraft as a safety precaution \
in case of loss of cabin pressure, and are necessary for extravehicular \
activity (EVA), work done outside spacecraft.", {7, 7, 15, 2, 1, 10, 7, 10, 4,
          7, 7, 10, 7, 10, 7, 10, 7, 7, 13, 3, 15, 1, 10, 1, 7, 13, 7, 13, 13,
          7, 15, 10, 7, 13}, 0}, {
        "This is another one of your schemes to get me off alone..", {4, 15, 
         4, 8, 10, 11, 7, 10, 15, 11, 9, 2, 13, 13}, 0}, {
        "I am looking for website promotion. How can I find Best SEO company \
in Delhi for my website promotion.", {11, 15, 15, 10, 7, 7, 13}, 7}, {
        "AOL also used a GUI-based client, and while such systems existed for \
CIS, it only supported a subset of the system's functionality and was \
purchased separately.", {12, 2, 15, 4, 1, 7, 13, 3, 10, 1, 7, 15, 10, 7, 13, 
         11, 2, 15, 4, 7, 10, 4, 7, 7, 3, 15, 15, 2, 13}, 0}, {
        "We can get out of the apartment.", {11, 15, 15, 10, 10, 4, 7, 13}, 
         0}, {"I -- How did you -- You blush!", {11, 13, 2, 15, 11, 13, 11, 
         15, 13}, 3}, {
        "Another distinction should be made between a remix, which recombines \
audio pieces from a recording to create an altered version of a song, and a \
cover: a re-recording of someone else's song like Mike D's remix of Moby's \
\"Natural Blues\".", {4, 7, 15, 15, 15, 10, 4, 7, 13, 4, 15, 1, 7, 10, 4, 15, 
         10, 15, 4, 1, 7, 10, 4, 7, 13, 3, 4, 7, 13, 4, 7, 10, 7, 2, 7, 10, 
         12, 12, 6, 7, 10, 12, 6, 13, 1, 7, 13, 13}, 9}, {
        "You like Huey Lewis and the News.", {11, 10, 12, 12, 3, 4, 12, 13}, 
         0}, {"Which universities for MS in CS should I apply to.", {4, 7, 10,
          7, 10, 12, 15, 11, 15, 10, 13}, 1}, {
        "Today wiped me out.", {7, 15, 11, 9, 13}, 0}, {
        "You called it in.", {11, 15, 11, 10, 13}, 0}, {
        "Was it alright.", {15, 11, 7, 13}, 0}, {
        "So...you...survived the blast did you.", {2, 13, 11, 13, 15, 4, 7, 
         15, 11, 13}, 0}, {
        "The villain usually is the antagonist (though can be the \
protagonist), the character who tends to have a negative effect on other \
characters.", {4, 7, 2, 15, 4, 7, 13, 10, 15, 15, 4, 7, 13, 13, 4, 7, 11, 15, 
         10, 15, 4, 1, 7, 10, 1, 7, 13}, 14}, {
        "Believe me Rick it's true.", {15, 11, 12, 11, 15, 1, 13}, 0}, {
        "Three subspecies are usually recognized; one of the former \
subspecies, cristatus, has recently been given full species status and is \
referred to as the eastern osprey.", {8, 7, 15, 2, 15, 13, 8, 10, 4, 1, 7, 13,
          7, 13, 15, 2, 15, 15, 1, 7, 7, 3, 15, 15, 10, 10, 4, 1, 7, 13}, 
         0}, {"The grains are made to germinate by soaking in water, and are \
then halted from germinating further by drying with hot air.", {4, 7, 15, 15, 
         10, 15, 10, 15, 10, 7, 13, 3, 15, 2, 15, 10, 15, 2, 10, 15, 10, 1, 7,
          13}, 0}, {
        "Which candidate in the 2016 U.S. presidential election do you \
support.", {4, 7, 10, 4, 8, 12, 1, 7, 15, 11, 15, 13}, 1}, {
        "Why are separatists burning schools in Kashmir.", {2, 15, 7, 15, 7, 
         10, 12, 13}, 1}, {
        "Is it true that they say the moon pulls the water up due to gravity, \
even though they have never found any gravitons.", {15, 11, 1, 10, 11, 15, 4, 
         7, 15, 4, 7, 9, 1, 10, 7, 13, 2, 10, 11, 15, 2, 15, 4, 7, 13}, 0}, {
        "Don't make any trouble.", {15, 2, 15, 4, 7, 13}, 0}, {
        "If every brother married separately and had children, family land \
would be split into unsustainable small plots.", {10, 4, 7, 15, 2, 3, 15, 7, 
         13, 7, 7, 15, 15, 15, 10, 1, 1, 7, 13}, 0}, {
        "Contact fungicides are not taken up into the plant tissue and \
protect only the plant where the spray is deposited.", {7, 7, 15, 2, 15, 9, 
         10, 4, 7, 7, 3, 15, 2, 4, 7, 2, 4, 7, 15, 15, 13}, 16}, {
        "From a legal point of view, a merger is a legal consolidation of two \
entities into one entity, whereas an acquisition occurs when one entity takes \
ownership of another entity's stock, equity interests or assets.", {10, 4, 1, 
         7, 10, 7, 13, 4, 7, 15, 4, 1, 7, 10, 8, 7, 10, 8, 7, 13, 10, 4, 7, 
         15, 2, 8, 7, 15, 7, 10, 4, 7, 7, 13, 7, 7, 3, 7, 13}, 19}, {
        "Well maybe it was.", {2, 2, 11, 15, 13}, 0}, {
        "What are the best laptops under 50K in India presently.", {11, 15, 4,
          1, 7, 10, 8, 10, 12, 2, 13}, 1}, {"You bet.", {11, 15, 13}, 0}, {
        "What would be impact on India if Donald Trump becomes President.", {
         11, 15, 15, 7, 10, 12, 10, 12, 12, 15, 12, 13}, 1}, {
        "But that's cheating!", {3, 4, 15, 7, 13}, 0}, {
        "Why does yellow mustard relieve a burn.", {2, 15, 1, 7, 15, 4, 15, 
         13}, 1}, {
        "Honey I have survived a host of things.", {12, 11, 15, 15, 4, 7, 10, 
         7, 13}, 0}, {
        "What is the difference between class and structure.", {11, 15, 4, 7, 
         10, 7, 3, 7, 13}, 1}, {
        "What is it like to work in CERN's Large Hadron Collider.", {11, 15, 
         11, 10, 10, 15, 10, 12, 1, 12, 12, 13}, 1}, {
        "You put it all in the computer and smoke comes out.", {11, 15, 11, 4,
          10, 4, 7, 3, 7, 15, 9, 13}, 0}, {
        "How 'bout we check with Eve first.", {2, 13, 7, 11, 15, 10, 12, 2, 
         13}, 1}, {
        "What is your greatest regret in life.", {11, 15, 11, 1, 7, 10, 7, 
         13}, 1}, {
        "My right eye turned red although it's not itchy or pain. What's \
happening.", {11, 1, 7, 15, 1, 10, 11, 15, 2, 1, 3, 7, 13}, 12}, {
        "You can ask anyone in town.", {11, 15, 15, 7, 10, 7, 13}, 0}, {
        "This developed into the word caballicare, \"to ride horseback,\" \
which in Italian became cavalcare.", {4, 15, 10, 4, 7, 7, 13, 13, 10, 15, 7, 
         13, 13, 4, 10, 1, 15, 7, 13}, 10}, {
        "Examples of psychiatric conditions where such 'sameness' is broken \
include depersonalization, which sometimes occur in schizophrenia: the self \
appears different to the subject.", {7, 10, 1, 7, 2, 1, 13, 7, 13, 15, 15, 15,
          7, 13, 4, 2, 15, 10, 7, 13, 4, 7, 15, 1, 10, 4, 7, 13}, 5}, {
        "Shrikes () are carnivorous passerine birds of the family Laniidae.", \
{7, 13, 13, 15, 1, 7, 7, 10, 4, 7, 12, 13}, 0}, {
        "What is the highest frame rate (fps) that can be recognized by human \
perception.", {11, 15, 4, 1, 7, 7, 13, 7, 13, 4, 15, 15, 15, 10, 1, 7, 13}, 
         1}, {"Would you mind.", {15, 11, 15, 13}, 0}, {
        "Is  'Dabiq' magazine an effective recruitment tool for ISIS. If yes, \
why is it easily available.", {15, 13, 12, 13, 7, 4, 1, 7, 7, 10, 12, 13}, 
         12}, {"What is the best sport bike.", {11, 15, 4, 1, 7, 7, 13}, 1}, {
        "Sometimes you can hear it like a buzzing the things that happen in \
their heads.", {2, 11, 15, 15, 11, 10, 4, 15, 4, 7, 4, 15, 10, 11, 7, 13}, 
         0}, {"You expect *her* to be responsible.", {11, 15, 14, 11, 7, 10, 
         15, 1, 13}, 0}, {
        "In logic, it is the practice of treating two distinct concepts as if \
they were one, which produces errors or misunderstandings as a fusion of \
distinct subjects tends to obscure analysis of relationships which are \
emphasized by contrasts.", {10, 7, 13, 11, 15, 4, 7, 10, 15, 8, 1, 7, 10, 10, 
         11, 15, 8, 13, 4, 15, 7, 3, 7, 10, 4, 7, 10, 1, 7, 15, 10, 1, 7, 10, 
         7, 4, 15, 15, 10, 15, 13}, 17}, {
        "Are personality disorders mental illnesses by definition.", {15, 7, 
         7, 1, 7, 10, 7, 13}, 0}, {
        "Instead of reviving Outlooks, however, Mint Media has since \
repositioned its other publication, the local Toronto magazine In Toronto, \
into a national magazine branded as In Magazine.", {2, 10, 15, 7, 13, 2, 13, 
         12, 12, 15, 10, 15, 11, 1, 7, 13, 4, 1, 12, 7, 10, 12, 13, 10, 4, 1, 
         7, 15, 10, 12, 12, 13}, 5}, {
        "Are you alright.", {15, 11, 1, 13}, 0}, {
        "Could you explain the Datum concept that is used in engineering \
drawing.", {15, 11, 15, 4, 12, 7, 4, 15, 15, 10, 7, 7, 13}, 0}, {
        "But chickens.", {3, 7, 13}, 0}, {
        "The period when a culture is written about by others, but has not \
developed its own writing is often known as the protohistory of the \
culture.", {4, 7, 2, 4, 7, 15, 15, 10, 10, 7, 13, 3, 15, 2, 15, 11, 1, 7, 15, 
         2, 15, 10, 4, 7, 10, 4, 7, 13}, 3}, {
        "What about our grenades.", {11, 10, 11, 7, 13}, 1}, {
        "Which motor has high starting torque AC or DC.", {4, 7, 15, 1, 15, 7,
          7, 3, 7, 13}, 1}, {"Cash or check.", {7, 3, 7, 13}, 0}, {
        "Still makin' jokes.", {2, 15, 13, 7, 13}, 0}, {
        "Is that your idea of a winner.", {15, 10, 11, 7, 10, 4, 7, 13}, 0}, {
        "I accidentally waived my rights to Jury Duty compensation in the \
online questionnaire; how do I undo this.", {11, 2, 15, 11, 7, 10, 12, 12, 7, 
         10, 4, 7, 7, 13, 2, 15, 11, 15, 4, 13}, 14}, {
        "Harvard University in Cambridge is the oldest institution of higher \
learning in the United States, with the largest financial endowment of any \
university, and Harvard Law School has educated a contemporaneous majority of \
Justices of the Supreme Court of the United States.", {12, 12, 10, 12, 15, 4, 
         1, 7, 10, 1, 7, 10, 4, 12, 12, 13, 10, 4, 1, 1, 7, 10, 4, 7, 13, 3, 
         12, 12, 12, 15, 15, 4, 1, 7, 10, 12, 10, 4, 12, 12, 10, 4, 12, 12, 
         13}, 0}, {"I love Quora.", {11, 15, 12, 13}, 0}, {
        "I learned your language you have to learn mine!", {11, 15, 11, 7, 11,
          15, 10, 15, 1, 13}, 0}, {
        "These positions may be paid or unpaid and are temporary.", {4, 7, 15,
          15, 15, 3, 1, 3, 15, 1, 13}, 0}, {
        "Hey I invented fake I.D.s alright.", {5, 11, 15, 1, 7, 1, 13}, 0}, {
        "You are Cassandra.", {11, 15, 12, 13}, 0}, {
        "Which is better modern education system or ancient education \
system.", {4, 15, 2, 1, 7, 7, 3, 1, 7, 7, 13}, 1}, {
        "Preservative food additives reduce the risk of foodborne infections, \
decrease microbial spoilage, and preserve fresh attributes and nutritional \
quality.", {1, 7, 7, 15, 4, 7, 10, 1, 7, 13, 15, 1, 7, 13, 3, 15, 1, 7, 3, 1, 
         7, 13}, 0}, {
        "When you got a chance you better take it.", {2, 11, 15, 4, 7, 11, 1, 
         15, 11, 13}, 1}, {
        "Pestles and mortars have been used in cooking up to the present day; \
they are frequently also associated with the profession of pharmacy due to \
their historical use in preparing medicines.", {12, 3, 7, 15, 15, 15, 10, 7, 
         10, 10, 4, 1, 7, 13, 11, 15, 2, 2, 15, 10, 4, 7, 10, 7, 1, 10, 11, 1,
          7, 10, 15, 7, 13}, 0}, {
        "What if Samsung buys Apple.", {11, 10, 12, 15, 12, 13}, 1}, {
        "Now then Mr. O'Connor how long did Ted Kramer work for you.", {2, 2, 
         12, 12, 2, 2, 15, 12, 12, 7, 10, 11, 13}, 5}, {
        "What's it all about.", {11, 15, 11, 4, 2, 13}, 1}, {
        "This outflow of cash is generally one side of a trade for products \
or services that have equal or better current or future value to the buyer \
than to the seller.", {4, 7, 10, 7, 15, 2, 8, 7, 10, 4, 7, 10, 7, 3, 7, 4, 15,
          1, 3, 1, 1, 3, 1, 7, 10, 4, 7, 10, 10, 4, 7, 13}, 0}, {
        "What are some local laws in regards to nudity in Vermont, and how do \
they differ from nudity laws in Indiana.", {11, 15, 4, 1, 7, 10, 15, 10, 7, 
         10, 12, 13, 3, 2, 15, 11, 15, 10, 7, 7, 10, 12, 13}, 1}, {
        "My truck.", {11, 7, 13}, 0}, {"Guess who.", {15, 11, 13}, 2}, {
        "Elaine!", {12, 13}, 0}, {
        "The Visigoths emerged from earlier Gothic groups (possibly the \
Thervingi) who had invaded the Roman Empire beginning in 376 and had defeated \
the Romans at the Battle of Adrianople in 378.", {4, 12, 15, 10, 1, 1, 7, 13, 
         2, 4, 12, 13, 11, 15, 15, 4, 12, 12, 15, 10, 8, 3, 15, 15, 4, 12, 10,
          4, 7, 10, 12, 10, 8, 13}, 11}, {
        "In this sense, it is similar to the pejorative connotations that are \
associated with the terms tyrant and dictator.", {10, 4, 7, 13, 11, 15, 1, 10,
          4, 1, 7, 4, 15, 15, 10, 4, 7, 7, 3, 7, 13}, 0}, {
        "Specialists who focus on diseases of the heart are called \
cardiologists, although many specialties of medicine may be involved in \
treatment.", {7, 11, 15, 10, 7, 10, 4, 7, 15, 15, 7, 13, 10, 1, 7, 10, 7, 15, 
         15, 15, 10, 7, 13}, 2}, {
        "Why do girls like bad boys.", {2, 15, 7, 10, 1, 7, 13}, 1}, {
        "In 1998, she signed to ForeFront Records when she was 12 years old, \
and recorded her first album, Genuine (2000), which sold 13,000 units in its \
first week of release.", {10, 8, 13, 11, 15, 10, 12, 12, 2, 11, 15, 8, 7, 1, 
         13, 3, 15, 11, 1, 7, 13, 7, 13, 8, 13, 13, 4, 15, 8, 7, 10, 11, 1, 7,
          10, 7, 13}, 8}, {
        "In Korean cuisine, a soup made with oxtail is called kkori gomtang \
(see gomguk).", {10, 1, 7, 13, 4, 7, 15, 10, 7, 15, 15, 1, 7, 13, 15, 7, 13, 
         13}, 0}, {
        "Suits also come with different numbers of pieces: a two-piece suit \
has a jacket and the trousers; a three-piece adds a waistcoat (known as a \
vest in North America); further pieces might include a flat cap made from the \
same cloth.", {7, 2, 15, 10, 1, 7, 10, 7, 13, 4, 1, 7, 15, 4, 7, 3, 4, 7, 13, 
         4, 1, 15, 4, 7, 13, 15, 10, 4, 7, 10, 12, 12, 13, 13, 2, 7, 15, 15, 
         4, 1, 7, 15, 10, 4, 1, 7, 13}, 0}, {
        "What are the benefits of using quora.", {11, 15, 4, 7, 10, 15, 7, 
         13}, 1}, {
        "What are the top/best restaurants in London.", {11, 15, 4, 1, 7, 10, 
         12, 13}, 1}, {
        "Vultures also use urine as a way to keep themselves cool by \
urinating on themselves.", {7, 2, 15, 7, 10, 4, 7, 10, 15, 11, 15, 10, 15, 10,
          11, 13}, 0}, {
        "The concept is most often applied in the United Kingdom and, to a \
lesser degree, Australia, Canada, Ireland, New Zealand, the United States, \
and other English-speaking countries.", {4, 7, 15, 2, 2, 15, 10, 4, 12, 12, 3,
          13, 10, 4, 1, 7, 13, 12, 13, 12, 13, 12, 13, 12, 12, 13, 4, 12, 12, 
         13, 3, 1, 1, 7, 13}, 0}, {
        "You'll like him.", {11, 15, 15, 11, 13}, 0}, {
        "One: how did a celebrated life of the mind bring me  to this \
particular switching station.", {8, 13, 2, 15, 4, 1, 7, 10, 4, 7, 15, 11, 10, 
         4, 1, 7, 7, 13}, 2}, {
        "How can one prevent chicken pox.", {2, 15, 11, 15, 7, 7, 13}, 1}, {
        "What are the easy ways to earn money online.", {11, 15, 4, 1, 7, 10, 
         15, 7, 7, 13}, 1}, {
        "How are reservations helping Indian societies.", {2, 15, 7, 15, 1, 7,
          13}, 1}, {
        "In geometry and topology, crumpling is the process whereby a sheet \
of paper or other two-dimensional manifold undergoes disordered deformation \
to yield a three-dimensional structure comprising a random network of ridges \
and facets with variable density.", {10, 7, 3, 7, 13, 7, 15, 4, 7, 2, 4, 7, 
         10, 7, 3, 1, 1, 7, 15, 15, 7, 10, 15, 4, 1, 7, 15, 4, 1, 7, 10, 7, 3,
          7, 10, 1, 7, 13}, 9}, {
        "Members of the Bundestag (Mitglieder des Bundestages) are usually \
elected every four years by all adult German citizens in a mixed system of \
constituency voting and list voting.", {7, 10, 4, 12, 13, 12, 6, 12, 13, 15, 
         2, 15, 4, 8, 7, 10, 4, 1, 1, 7, 10, 4, 1, 7, 10, 7, 7, 3, 7, 7, 13}, 
         0}, {"That should give you ample time.", {4, 15, 15, 11, 1, 7, 13}, 
         0}, {"Home Box Office (HBO) is an American premium cable and \
satellite television network of Home Box Office, Inc..", {12, 12, 12, 13, 12, 
         13, 15, 4, 1, 7, 7, 3, 7, 7, 7, 10, 12, 12, 12, 13, 12, 13, 13}, 
         0}, {"Sexual partners from the last 2 months should also be \
treated.Gonorrhea affects about 0.8% of women and 0.6% of men.", {1, 7, 10, 4,
          1, 8, 7, 15, 2, 15, 7, 15, 10, 8, 7, 10, 7, 3, 8, 7, 10, 7, 13}, 
         0}, {"I was...", {11, 15, 13}, 0}, {
        "In large bilaterians, the gastrointestinal tract generally also has \
an exit, the anus, by which the animal disposes of feces (solid wastes).", {
         10, 1, 7, 13, 4, 1, 7, 2, 2, 15, 4, 7, 13, 4, 7, 13, 10, 4, 4, 7, 15,
          10, 7, 13, 1, 7, 13, 13}, 15}, {
        "Where are your children Of course.", {2, 15, 11, 7, 10, 7, 13}, 1}, {
        "This is in contrast to partisanship, where an individual or \
political party only adheres to their interests without compromise.", {4, 15, 
         10, 7, 10, 7, 13, 2, 4, 1, 3, 1, 7, 2, 15, 10, 11, 7, 10, 7, 13}, 
         7}, {"You slept too near where you got in.", {11, 15, 2, 10, 2, 11, 
         15, 10, 13}, 5}, {
        "In modern times, it is mainly a competitive sport and recreational \
activity.", {10, 1, 7, 13, 11, 15, 2, 4, 1, 7, 3, 1, 7, 13}, 0}, {
        "Like many other prey species, Tommies and springboks (as they are \
familiarly called) exhibit a distinctive behaviour of stotting (running and \
jumping high before fleeing) when they are threatened by predators, such as \
cheetahs.", {10, 1, 1, 7, 7, 13, 12, 3, 7, 13, 10, 11, 15, 2, 15, 13, 15, 4, 
         1, 7, 10, 7, 13, 7, 3, 15, 1, 10, 15, 13, 2, 11, 15, 15, 10, 7, 13, 
         1, 10, 7, 13}, 26}, {
        "With Wittingham, who chose her few races carefully, she won four \
turf stakes in a row.", {10, 12, 13, 11, 15, 11, 1, 7, 2, 13, 11, 15, 8, 1, 7,
          10, 4, 7, 13}, 3}, {
        "How do I keep a relationship when I can't talk to them everyday.", {
         2, 15, 11, 15, 4, 7, 2, 11, 15, 2, 15, 10, 11, 1, 13}, 1}, {
        "I think it's a crochet hook.", {11, 15, 11, 15, 4, 7, 7, 13}, 0}, {
        "What the hell happened to you.", {11, 4, 7, 15, 10, 11, 13}, 1}, {
        "He also arranged the independence of Burma (Myanmar), and Ceylon \
(Sri Lanka).", {11, 2, 15, 4, 7, 10, 7, 13, 7, 13, 13, 3, 12, 13, 12, 12, 13, 
         13}, 0}, {"So how is she.", {2, 2, 15, 11, 13}, 2}, {
        "Historically, goldsmiths also have made silverware, platters, \
goblets, decorative and serviceable utensils, ceremonial or religious items, \
and rarely using Kintsugi, but the rising prices of precious metals have \
curtailed the making of such items to a large degree.", {12, 13, 7, 2, 15, 15,
          7, 13, 7, 13, 7, 13, 1, 3, 1, 7, 13, 1, 3, 1, 7, 13, 3, 2, 15, 12, 
         13, 3, 4, 15, 7, 10, 1, 7, 15, 15, 4, 7, 10, 1, 7, 10, 4, 1, 7, 13}, 
         0}, {"Is the Emperor angry with me.", {15, 4, 12, 1, 10, 11, 13}, 
         0}, {"Circus folk.", {12, 7, 13}, 0}, {
        "You planning on being a bachelor your whole life Jesse James.", {11, 
         15, 10, 15, 4, 7, 11, 1, 7, 12, 12, 13}, 8}, {
        "And I have to use it.", {3, 11, 15, 10, 15, 11, 13}, 0}, {
        "A coulis ( koo-LEE; French) is a form of thick sauce made from pured \
and strained vegetables or fruits.", {4, 7, 13, 7, 13, 12, 13, 15, 4, 7, 10, 
         1, 7, 15, 10, 1, 3, 1, 7, 3, 7, 13}, 0}, {
        "I've also heard of the emperor.", {11, 15, 2, 15, 10, 4, 7, 13}, 
         0}, {"How does an oscillator work.", {2, 15, 4, 7, 7, 13}, 1}, {
        "Both sexes are similar in size and plumage, and plumage does not \
vary throughout the year.", {4, 7, 15, 1, 10, 7, 3, 7, 13, 3, 7, 15, 2, 15, 
         10, 4, 7, 13}, 0}, {
        "Newel posts turned on a lathe are solid pieces that can be highly \
decorative, they typically need to be fixed to a square newel base for \
installation.", {1, 7, 15, 9, 4, 7, 15, 1, 7, 4, 15, 15, 2, 1, 13, 11, 2, 15, 
         10, 15, 15, 10, 4, 1, 1, 7, 10, 7, 13}, 0}, {
        "Why do some people hate Shahrukh Khan so much.", {2, 15, 4, 7, 15, 
         12, 12, 2, 2, 13}, 1}, {
        "What do you have here Billy.", {11, 15, 11, 15, 2, 12, 13}, 1}, {
        "The term \"rapture\" is especially useful in discussing or disputing \
the exact timing or the scope of the event, particularly when asserting the \
\"pre-tribulation\" view that the rapture will occur before, not during, the \
Second Coming, with or without an extended Tribulation period.", {4, 7, 13, 7,
          13, 15, 2, 1, 10, 15, 3, 15, 4, 1, 7, 3, 4, 7, 10, 4, 7, 13, 2, 2, 
         15, 4, 13, 1, 13, 7, 10, 4, 7, 15, 15, 2, 13, 2, 10, 13, 4, 1, 7, 13,
          10, 3, 10, 4, 1, 7, 7, 13}, 21}, {
        "Activated oncogenes can cause those cells designated for apoptosis \
to survive and proliferate instead.", {15, 7, 15, 15, 4, 7, 15, 10, 7, 10, 15,
          3, 15, 2, 13}, 0}, {
        "I always forget to put the sign on but we do have vacancy.", {11, 2, 
         15, 10, 15, 4, 7, 10, 3, 11, 15, 15, 7, 13}, 0}, {
        "Ingratiation has been confused with another social psychological \
term, Impression management.", {12, 15, 15, 15, 10, 4, 1, 1, 7, 13, 7, 7, 13},
          0}, {"It is too rash too unadvised too sudden; Too like the \
lightning which doth cease to be Ere one can say 'It lightens.' Sweet good \
night!", {11, 15, 2, 1, 2, 1, 2, 1, 13, 2, 10, 4, 7, 4, 15, 15, 10, 15, 1, 7, 
         15, 15, 13, 11, 15, 13, 13, 1, 1, 7, 13}, 13}, {
        "How can I download a video from this website.", {2, 15, 11, 15, 4, 7,
          10, 4, 7, 13}, 1}, {
        "I'll be back next Thursday we'll talk the whole thing over then.", {
         11, 15, 15, 2, 1, 12, 11, 15, 15, 4, 1, 7, 10, 2, 13}, 9}, {
        "Logical axioms are usually statements that are taken to be true \
within the system of logic they define (e.g., (A and B) implies A), often \
shown in symbolic form, while non-logical axioms (e.g., a + b = b + a) are \
actually substantive assertions about the elements of the domain of a \
specific mathematical theory (such as arithmetic).", {1, 7, 15, 2, 7, 4, 15, 
         15, 10, 15, 1, 10, 4, 7, 10, 7, 11, 15, 13, 6, 13, 13, 7, 3, 7, 13, 
         15, 7, 13, 13, 2, 15, 10, 1, 7, 13, 10, 1, 7, 13, 6, 13, 4, 3, 7, 1, 
         7, 3, 4, 13, 15, 2, 1, 7, 10, 4, 7, 10, 4, 7, 10, 4, 1, 1, 7, 13, 1, 
         10, 7, 13, 13}, 26}, {
        "In this case, the migrations were themselves facilitated by the \
innovation of clothing.", {10, 4, 7, 13, 4, 7, 15, 11, 15, 10, 4, 7, 10, 7, 
         13}, 0}, {
        "What are the best study strategies.", {11, 15, 4, 1, 7, 7, 13}, 1}, {
        "Assassins falling from the sky now.", {7, 15, 10, 4, 7, 2, 13}, 0}, {
        "We were only supposed to scare him!", {11, 15, 2, 15, 10, 15, 11, 
         13}, 0}, {
        "Marriage has added forty years to my life.", {7, 15, 15, 8, 7, 10, 
         11, 7, 13}, 0}, {"In there sir.", {10, 11, 6, 13}, 0}, {
        "You will never ever go back to the workhouse..", {11, 15, 2, 2, 15, 
         2, 10, 4, 7, 13, 13}, 0}, {
        "How much did he give you how much did he keep for himself.", {2, 2, 
         15, 11, 15, 11, 2, 1, 15, 11, 15, 10, 11, 13}, 1}, {
        "And that's a form of time travel right.", {3, 4, 15, 4, 7, 10, 7, 15,
          2, 13}, 0}, {"'ve seen you.", {15, 15, 11, 13}, 0}, {
        "Still you serve him loyally -- though people hurl rotten eggs at his \
royal emblem.", {2, 11, 15, 11, 2, 13, 10, 7, 15, 1, 7, 10, 11, 1, 7, 13}, 
         0}, {"How do one can call Ayurveda scientific when scientific \
methods are not used in it.", {2, 15, 11, 15, 15, 12, 1, 2, 1, 7, 15, 2, 15, 
         10, 11, 13}, 1}, {
        "How do I hack WhatsApp online.", {2, 15, 11, 15, 12, 7, 13}, 1}, {
        "I have a masters in English from India and I want to become a \
doctor. Can I apply for the post-bacc pre-med programmes in USA.", {11, 15, 4,
          7, 10, 12, 10, 12, 3, 11, 15, 10, 15, 4, 7, 13}, 0}, {
        "Besides it's twelve in the afternoon.", {10, 11, 15, 8, 10, 4, 7, 
         13}, 0}, {"What do I think.", {11, 15, 11, 15, 13}, 1}, {
        "No.  I'm sorry.", {4, 13, 11, 15, 1, 13}, 0}, {
        "The earliest sunset and latest sunrise dates outside the polar \
regions differ from the date of the winter solstice, however, and these \
depend on latitude, due to the variation in the solar day throughout the year \
caused by the Earth's elliptical orbit (see earliest and latest sunrise and \
sunset).", {4, 1, 7, 3, 1, 7, 7, 10, 4, 1, 7, 15, 10, 4, 7, 10, 4, 7, 7, 13, 
         2, 13, 3, 4, 15, 10, 7, 13, 1, 10, 4, 7, 10, 4, 1, 7, 10, 4, 7, 15, 
         10, 4, 12, 1, 7, 13, 15, 1, 3, 1, 7, 3, 7, 13, 13}, 20}, {
        "How strict are hostels.", {2, 1, 15, 7, 13}, 1}, {
        "But doesn't the Son of Sam Law prevent criminals from profiting from \
their crimes.", {3, 15, 2, 4, 12, 10, 12, 12, 15, 7, 10, 15, 10, 11, 7, 13}, 
         0}, {"People who act in a way characteristic of mental disorder; \
this is often used pejoratively.", {7, 11, 15, 10, 4, 7, 7, 10, 1, 7, 13, 4, 
         15, 2, 15, 2, 13}, 2}, {
        "They were valued as a source of meat, fat and for the ability to \
turn inedible food into meat, and often fed household food waste if kept on a \
homestead.", {11, 15, 15, 10, 4, 7, 10, 7, 13, 1, 3, 10, 4, 7, 10, 15, 1, 7, 
         10, 7, 13, 3, 2, 15, 7, 7, 7, 10, 15, 10, 4, 7, 13}, 0}, {
        "Why do you not like Hillary Clinton.", {2, 15, 11, 2, 15, 12, 12, 
         13}, 1}, {
        "Majesty may I ask you to do me the greatest favour.", {12, 15, 11, 
         15, 11, 10, 15, 11, 4, 1, 7, 13}, 0}, {
        "An incantation, enchantment, or magic spell is a set of words, \
spoken or unspoken, which are considered by its user to invoke some magical \
effect.", {4, 7, 13, 7, 13, 3, 1, 7, 15, 4, 7, 10, 7, 13, 15, 3, 1, 13, 4, 15,
          15, 10, 11, 7, 10, 15, 4, 1, 7, 13}, 15}, {
        "How do I know that she like me.", {2, 15, 11, 15, 10, 11, 10, 11, 
         13}, 1}, {
        "Lisa's an extremely valuable member of the Skywire team.", {12, 4, 2,
          1, 7, 10, 4, 12, 7, 13}, 0}, {
        "What are the main branches of science. How do they compare.", {11, 
         15, 4, 1, 7, 10, 7, 13}, 1}, {
        "How do I delete my questions off Quora.", {2, 15, 11, 15, 11, 7, 10, 
         12, 13}, 1}, {"my car.", {11, 7, 13}, 0}, {
        "For five bucks.", {10, 8, 7, 13}, 0}, {
        "Those Hoyt kids are just out to get in trouble.", {4, 12, 7, 15, 2, 
         2, 10, 15, 10, 7, 13}, 0}, {
        "How do I reset my password to Gmail without my recovery \
information.", {2, 15, 11, 15, 11, 7, 10, 12, 10, 11, 7, 7, 13}, 1}, {
        "Athena was regarded as the patron and protectress of various cities \
across Greece, particularly the city of Athens, from which she most likely \
received her name.", {12, 15, 15, 10, 4, 7, 3, 7, 10, 1, 7, 10, 12, 13, 2, 4, 
         7, 10, 12, 13, 10, 4, 11, 2, 1, 15, 11, 7, 13}, 20}, {
        "Well, she's not local.", {2, 13, 11, 15, 2, 1, 13}, 0}, {
        "Which one is the best Digital marketing course in India.", {4, 7, 15,
          4, 1, 12, 7, 7, 10, 12, 13}, 1}, {
        "Is it easy/hard for international students to get a job in Dublin, \
Ireland.", {15, 11, 7, 10, 1, 7, 10, 15, 4, 7, 10, 12, 13, 12, 13}, 0}, {
        "Does stretching your spine gives you permanent height.", {15, 15, 11,
          7, 15, 11, 1, 7, 13}, 0}, {"All right.", {4, 7, 13}, 0}, {
        "poor Dorothy.", {1, 12, 13}, 0}, {
        "This usage is now obsolete.", {4, 7, 15, 2, 1, 13}, 0}, {
        "How could Quora attract initial users.", {2, 15, 12, 15, 1, 7, 13}, 
         1}, {"Listen to her.", {15, 10, 11, 13}, 0}, {
        "The upper floors often have balconies overlooking the street that \
are shielded by latticed screens carved in stone called jalis which keep the \
area cool and give privacy.", {4, 1, 7, 2, 15, 7, 15, 4, 7, 4, 15, 15, 10, 1, 
         7, 15, 10, 7, 15, 7, 4, 15, 4, 7, 7, 3, 15, 7, 13}, 21}, {
        "Woodhull, Illinois\nWoodhull, New York\nWoodhull Lake (New York)", {
         12, 13, 12, 12, 13, 12, 12, 12, 12, 13, 12, 12, 13}, 0}, {
        "How'd you do that.", {2, 15, 11, 15, 4, 13}, 1}, {
        "It was estimated in 2014 that the number of cars was over 1.25 \
billion vehicles, up from the 500 million of 1986.", {11, 15, 15, 10, 8, 10, 
         4, 7, 10, 7, 15, 10, 8, 8, 7, 13, 2, 10, 4, 8, 8, 10, 8, 13}, 0}, {
        "It is ethically and medically the only proper decision in this case \
and I suspect your husband agrees with me.", {11, 15, 2, 3, 2, 4, 1, 1, 7, 10,
          4, 7, 3, 11, 15, 11, 7, 15, 10, 11, 13}, 0}, {
        "He looks Vietnamese.", {11, 15, 1, 13}, 0}, {
        "The beaches are always being closed because of waste spills right.", \
{4, 7, 15, 2, 15, 15, 10, 10, 7, 15, 7, 13}, 0}, {
        "What would you call her.", {11, 15, 11, 15, 11, 13}, 1}, {
        "It comprised three departments: Corrze, Creuse, and Haute-Vienne.", {
         11, 15, 8, 7, 13, 7, 13, 12, 13, 3, 12, 13}, 0}, {
        "Tickling is the act of touching a part of a body in a way that \
causes involuntary twitching movements or laughter.", {15, 15, 4, 7, 10, 15, 
         4, 7, 10, 4, 7, 10, 4, 7, 10, 15, 1, 15, 7, 3, 7, 13}, 0}, {
        "Oh is he.", {5, 15, 11, 13}, 0}, {
        "Extractors is a video game developed by Millennium Interactive Ltd. \
and published by Psygnosis for the PC.", {7, 15, 4, 7, 7, 15, 10, 12, 12, 12, 
         3, 15, 10, 12, 10, 4, 7, 13}, 0}, {
        "What's a cool gift for a guy who's the groom in a gay wedding.", {11,
          15, 4, 1, 7, 10, 4, 7, 11, 15, 4, 7, 10, 4, 1, 7, 13}, 1}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Question", "Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Question", "Not a Question", "Not a Question", 
        "Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", "Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Question", "Not a Question", 
        "Question", "Question", "Not a Question", "Not a Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Not a Question", "Question", "Question", "Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Question", 
        "Question", "Question", "Not a Question", "Not a Question", 
        "Question", "Question", "Not a Question", "Not a Question", 
        "Question", "Not a Question", "Question", "Not a Question", 
        "Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Question", "Not a Question", "Question", 
        "Question", "Not a Question", "Question", "Not a Question", 
        "Question", "Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Question", "Question", "Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Question", "Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Question", "Not a Question", "Question", "Not a Question", 
        "Question", "Question", "Not a Question", "Question", "Question", 
        "Question", "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Question", "Question", "Question", 
        "Not a Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Question", "Question", "Question", 
        "Not a Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Not a Question", "Not a Question", "Not a Question", 
        "Question", "Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Question", "Not a Question", "Question", "Not a Question", 
        "Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Question", "Not a Question", 
        "Not a Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Question", "Not a Question", "Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Not a Question", "Question", "Question", 
        "Not a Question", "Question", "Not a Question", "Question", 
        "Question", "Question", "Not a Question", "Not a Question", 
        "Question", "Not a Question", "Not a Question", "Question", 
        "Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Not a Question", 
        "Not a Question", "Question", "Question", "Not a Question", 
        "Not a Question", "Question", "Not a Question", "Question"}], 
    "Predictions" -> {
     "Question", "Not a Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Question", "Question", "Not a Question", "Question", "Not a Question", 
      "Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Question", "Not a Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Not a Question", 
      "Question", "Not a Question", "Not a Question", "Not a Question", 
      "Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Question", "Question", "Question", "Question", 
      "Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Question", "Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Question", "Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Question", "Not a Question", "Question", "Question", "Not a Question", 
      "Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Question", "Question", 
      "Question", "Question", "Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Question", "Not a Question", "Question", "Question", "Not a Question", 
      "Question", "Question", "Not a Question", "Question", "Not a Question", 
      "Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question", "Question", "Question", "Not a Question", 
      "Question", "Not a Question", "Question", "Question", "Not a Question", 
      "Question", "Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Question", "Not a Question", "Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Question", "Not a Question", "Not a Question", "Not a Question", 
      "Question", "Question", "Not a Question", "Not a Question", "Question", 
      "Question", "Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Not a Question", 
      "Question", "Not a Question", "Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Not a Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Question", "Question", "Question", "Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Question", 
      "Not a Question", "Question", "Not a Question", "Not a Question", 
      "Question", "Not a Question", "Question", "Question", "Not a Question", 
      "Not a Question", "Not a Question", "Question", "Not a Question", 
      "Not a Question", "Question", "Not a Question", "Question", 
      "Not a Question", "Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Question", 
      "Not a Question", "Not a Question", "Not a Question", "Not a Question", 
      "Question", "Not a Question", "Not a Question", "Not a Question", 
      "Not a Question", "Question"}, "LogProbabilities" -> CompressedData["
1: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
     "], 
    "CountMatrix" -> {{197, 26, 0}, {45, 132, 0}}, 
    "IndicesMatrix" -> {{CompressedData["
1:eJwV0rtKFQAAANAbmKGDFBr4KtQkNTRBS4nokoWJlpKv1PBBiUUFSjRkXdNC
rYTEwiGhkAgVwsTKRRKCJCNoilSCwKFyKG0IocWCTsP5g5N8uq2idUMgEJhj
I+FsIoIoNhNNDLHEEU8CiWwjmRRS2Uka6WSwi0yy2E02Oewlj3yCHOQQhRyh
iGJKOEYpZRynnEqqOEENtZykngYaOUUzLZzhAq200c4VQnRwjU66uE43PfRy
kz76GeAu9xjkPkM84CHDPOIxI4wyxhPGecoEkzzjOS+YYpqXzPCK18zyhre8
4z0f+Mg8Cyzyic8s8YWvfGOZ7/xghVV+8os1frPOH/4SJkM4kWwhmhi2Eksc
8WwniRR2kEoa6WSQSRa57CGPfPaxnwMEKeAwhRRRTAlHKaWMciqopIpqaqil
jnoaaKSJs5zjPP9zX+QSl2nnKiFu0EMvt7hNH3foZ4B/unhVsw==
       "], {15, 21, 51, 
       59, 67, 82, 89, 103, 104, 130, 205, 217, 218, 239, 250, 258, 293, 302, 
       309, 312, 314, 319, 354, 355, 365, 384}, {}}, {{2, 12, 17, 63, 72, 91, 
       98, 105, 113, 114, 122, 129, 140, 150, 159, 161, 163, 181, 189, 199, 
       201, 210, 224, 232, 256, 261, 265, 269, 270, 271, 274, 284, 320, 326, 
       347, 353, 358, 364, 368, 374, 381, 383, 387, 394, 398}, CompressedData["
1:eJwV0DsoBAAAgOETRR4lA4O8EoMbPDIgBrpBUaQYLC5R8jp5pmSQkCtJDJSZ
DCaRUpQsEjYLycImibDgu+Hr3/+C7kjbcFwgEJgn1ngSSCKZFNLIIJMscskj
n0KKCFJGOZVUUU0NtdRRT4gmWminizA99DPIECOMMc4Ek0yxyBLLRFlhjXU2
2GSLbXbYZY99DjjkiGNOOOWMcy645IprbrjljnseeOSJZ1545Y13Pvjki29+
+OUv9tbceBJJIoVU0skki2xyyKOAYkoIUkoZ5VRQSwMhGmmmhVY66CRMD730
MUCEUcaZYJoZZpljgSir/AN75TtO
       "], {}}}, 
    "ExtendedClasses" -> {"Not a Question", "Question"}, "Weights" -> 
    SparseArray[Automatic, {400}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00393949, "SingleEvaluationTime" -> 
    0.011573`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellEditDuplicate->True,
 CellChangeTimes->{{3.740237970183696*^9, 3.740237984276257*^9}},
 CellLabel->"Out[40]=",ExpressionUUID->"46e0e853-c080-449c-8611-8833d146b084"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{917, 825},
WindowMargins->{{Automatic, 39}, {Automatic, 0}},
WindowStatusArea->None,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 178, 2, 45, "Subsubsection",ExpressionUUID->"5302f39c-3660-4acc-b9b2-0f8436153de1"],
Cell[761, 26, 6347, 139, 430, "Input",ExpressionUUID->"08bad5e3-7483-4bc7-8b03-c86855f6a042"],
Cell[7111, 167, 1406, 38, 136, "Input",ExpressionUUID->"b92cadde-ea69-4f2c-9251-ed4d2d0d940c"],
Cell[8520, 207, 224, 5, 35, "Text",ExpressionUUID->"fc16104e-fc1f-4d17-98bd-cf9d015117e6"],
Cell[CellGroupData[{
Cell[8769, 216, 212, 3, 30, "Input",ExpressionUUID->"4010deeb-f308-4a4b-a232-fa3762034273"],
Cell[8984, 221, 177, 2, 34, "Output",ExpressionUUID->"27a304bb-6266-4c83-a7c5-4e539d6ae721"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9198, 228, 212, 4, 30, "Input",ExpressionUUID->"6a9da494-48e0-4fa8-9208-cfa95c851bfa"],
Cell[9413, 234, 157, 3, 34, "Output",ExpressionUUID->"7d3a119e-544b-406d-acfe-56ffc4329205"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9607, 242, 216, 4, 30, "Input",ExpressionUUID->"5bec4431-0bc3-4093-912c-cfce30f5856b"],
Cell[9826, 248, 159, 3, 34, "Output",ExpressionUUID->"f1211b6b-0de0-4cfc-ae5c-ccbc6a521da8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[10034, 257, 139, 1, 45, "Subsubsection",ExpressionUUID->"c18f356c-250e-4723-bf55-1a1d3d53ac68"],
Cell[CellGroupData[{
Cell[10198, 262, 794, 16, 73, "Input",ExpressionUUID->"757faebf-554c-49ea-80ed-1863100a06f5"],
Cell[10995, 280, 1056, 20, 77, "Output",ExpressionUUID->"b80802a8-9f5b-4c7f-82cb-1c6b5e3bae9a"]
}, Open  ]],
Cell[12066, 303, 643, 12, 52, "Input",ExpressionUUID->"6d32f185-1917-4908-acc4-781537df203b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12746, 320, 139, 1, 45, "Subsubsection",ExpressionUUID->"4f127c50-da6a-4647-b38a-d8499a04f014"],
Cell[12888, 323, 2611, 64, 243, "Code",ExpressionUUID->"3858494d-99ad-48e2-8ce2-1ec79120c73b"],
Cell[15502, 389, 1636, 35, 148, "Code",ExpressionUUID->"ab891b51-e553-4c17-aef9-b548085c2aec"],
Cell[CellGroupData[{
Cell[17163, 428, 557, 11, 73, "Input",ExpressionUUID->"621753e3-5192-426f-9d3e-a5389c16577f"],
Cell[17723, 441, 270575, 4677, 39368, "Output",ExpressionUUID->"00159c7c-460d-47c5-9c34-be38657edb1e"],
Cell[288301, 5120, 410915, 6538, 81620, "Output",ExpressionUUID->"661d721c-73d0-45e7-9811-17cf5653e3ae"]
}, Closed]],
Cell[CellGroupData[{
Cell[699253, 11663, 550, 8, 26, "Input",ExpressionUUID->"acc5da05-a365-477f-ae92-e56a51691613"],
Cell[699806, 11673, 9012, 235, 184, "Output",ExpressionUUID->"1d434127-c03c-49b1-b3c3-73baa1654308"]
}, Closed]],
Cell[CellGroupData[{
Cell[708855, 11913, 268, 4, 26, "Input",ExpressionUUID->"ea6b8975-9f0e-406a-aba9-9e0b42017dca"],
Cell[709126, 11919, 7504, 200, 97, "Output",ExpressionUUID->"239106b5-5e45-48ae-883e-e74296ce8cde"]
}, Open  ]],
Cell[CellGroupData[{
Cell[716667, 12124, 883, 22, 94, "Input",ExpressionUUID->"f396e2c8-171e-47cb-9d07-66cd33c817a6"],
Cell[717553, 12148, 10163, 257, 310, "Output",ExpressionUUID->"b0060f1e-0151-407d-909b-19caef69237b"],
Cell[727719, 12407, 9858, 245, 310, "Output",ExpressionUUID->"93e29bf7-90c6-4acd-84ba-6928f759815d"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[737626, 12658, 137, 1, 45, "Subsubsection",ExpressionUUID->"cab4ee65-639b-4750-a1e4-975f2577e569"],
Cell[CellGroupData[{
Cell[737788, 12663, 274, 5, 30, "Input",ExpressionUUID->"d71059b3-665b-4950-867f-9bf72a6d367d"],
Cell[738065, 12670, 243, 3, 34, "Output",ExpressionUUID->"d07504cd-4cf9-458b-bdb7-008023386f33"]
}, Open  ]],
Cell[738323, 12676, 449, 11, 30, "Input",ExpressionUUID->"8413af67-812f-44eb-acb6-871039fc40cf"],
Cell[738775, 12689, 479, 14, 30, "Input",ExpressionUUID->"18054f2b-965c-49cb-8804-2a7fbfca729b"],
Cell[739257, 12705, 384, 9, 30, "Input",ExpressionUUID->"6106833c-4a76-4063-a956-dec4209f4060"],
Cell[739644, 12716, 173, 3, 30, "Input",ExpressionUUID->"eb2ff9fe-4247-4574-abae-11656fdb5bbb"],
Cell[CellGroupData[{
Cell[739842, 12723, 255, 4, 30, "Input",ExpressionUUID->"14e880f6-e239-45e4-9145-3be8f2c8060e"],
Cell[740100, 12729, 225, 3, 34, "Output",ExpressionUUID->"2dd5deed-1af9-4aab-bf7e-c1bae71d6c03"]
}, Open  ]],
Cell[740340, 12735, 243, 6, 30, "Input",ExpressionUUID->"3fd53a69-1c65-49c9-91ca-518a28b4a4dd"]
}, Closed]],
Cell[CellGroupData[{
Cell[740620, 12746, 149, 1, 37, "Subsubsection",ExpressionUUID->"b49d2da7-adc3-45f2-b7b6-c68f0e7ec730"],
Cell[740772, 12749, 219, 2, 35, "Text",ExpressionUUID->"92a8c79e-daf1-4081-b17e-f49b05eabc91"],
Cell[CellGroupData[{
Cell[741016, 12755, 393, 8, 30, "Input",ExpressionUUID->"dedd85af-eeb0-43cf-80b7-74bc2f15bb0a"],
Cell[741412, 12765, 8130, 211, 163, "Output",ExpressionUUID->"1cd8f8d6-5d36-4fe5-9e2b-af900e0ba35d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[749579, 12981, 565, 14, 30, "Input",ExpressionUUID->"c5e8a140-ec24-4682-b35a-20a6f28713cc"],
Cell[750147, 12997, 8154, 211, 163, "Output",ExpressionUUID->"fbe5d00d-94d5-4e4c-b98b-102d3458e57d"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[758350, 13214, 156, 1, 37, "Subsubsection",ExpressionUUID->"7b6c53ad-8577-466a-bfed-e5f158adc6fb"],
Cell[CellGroupData[{
Cell[758531, 13219, 477, 10, 30, "Input",ExpressionUUID->"a7b6d6cc-7ef0-467e-9dde-60e19e6c7fe6"],
Cell[759011, 13231, 8217, 213, 163, "Output",ExpressionUUID->"9a4341fb-1f3f-4ad4-81f1-7ccd6cf748df"]
}, Open  ]],
Cell[CellGroupData[{
Cell[767265, 13449, 216, 4, 30, "Input",ExpressionUUID->"262ad8a5-14f2-4740-b5c7-783cf07c0df5"],
Cell[767484, 13455, 7895, 206, 142, "Output",ExpressionUUID->"c540d6ec-14c7-46f2-9753-7539db0ebb43"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[775428, 13667, 117, 1, 37, "Subsubsection",ExpressionUUID->"df29d1d5-fc99-48cd-ba8c-31b7c9564335"],
Cell[CellGroupData[{
Cell[775570, 13672, 350, 7, 30, "Input",ExpressionUUID->"f5a5e964-4f0a-4b95-af97-34c669344325"],
Cell[775923, 13681, 8064, 210, 121, "Output",ExpressionUUID->"9254a232-b237-409f-82e1-f249b2e9a6da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[784024, 13896, 288, 6, 30, "Input",ExpressionUUID->"d2d17123-2450-4c92-8bfd-9e4f335ae4d6"],
Cell[784315, 13904, 8044, 209, 121, "Output",ExpressionUUID->"9d0c226a-1f98-46de-8e8b-e53c969185f2"]
}, Open  ]],
Cell[792374, 14116, 511, 11, 30, "Input",ExpressionUUID->"e9a06111-4bd6-4f73-a69f-7b65f263d0ed"],
Cell[792888, 14129, 471, 11, 30, "Input",ExpressionUUID->"e81c76ef-496b-451f-8f6b-f779b847fb8c"],
Cell[793362, 14142, 554, 12, 30, "Input",ExpressionUUID->"f56e3b0e-2dc7-4fd9-ae0b-89a1a7a7f4f5"],
Cell[793919, 14156, 497, 12, 30, "Input",ExpressionUUID->"cf5afbb1-9047-4c6c-8417-4e467840f6f3"]
}, Closed]],
Cell[CellGroupData[{
Cell[794453, 14173, 112, 1, 37, "Subsubsection",ExpressionUUID->"c3e68d7b-1c05-456d-a16e-0a3835c9a007"],
Cell[794568, 14176, 1193, 32, 136, "Input",ExpressionUUID->"ed243bc7-b166-488c-96c2-e32ab1bcf9e8"],
Cell[795764, 14210, 3422, 81, 661, "Code",ExpressionUUID->"f24b21c2-f4e4-4ce9-adab-28ec9139ee26"],
Cell[CellGroupData[{
Cell[799211, 14295, 1417, 38, 115, "Input",ExpressionUUID->"e5881c42-c5f6-4ba6-a1de-87adfe55fb2f"],
Cell[800631, 14335, 2301, 60, 161, "Output",ExpressionUUID->"bf186162-f187-4f7b-a97d-bf9ad8f4bfd7"]
}, Open  ]],
Cell[802947, 14398, 5903, 150, 451, "Input",ExpressionUUID->"54f1815f-e286-4c78-b929-24096a8edd1c"],
Cell[CellGroupData[{
Cell[808875, 14552, 6111, 154, 451, "Input",ExpressionUUID->"dd5bebd2-95f7-460e-81d7-b41b2e84a9a0"],
Cell[814989, 14708, 11109, 224, 120, "Output",ExpressionUUID->"6b90ff0b-125c-4cbf-9b27-462161bafb5a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[826135, 14937, 3175, 79, 220, "Input",ExpressionUUID->"92773ba6-c513-48fc-b7e8-6215dd347448"],
Cell[829313, 15018, 8721, 177, 119, "Output",ExpressionUUID->"f4d27a2a-681d-4304-90a6-cddc7955eef6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[838071, 15200, 226, 3, 30, "Input",ExpressionUUID->"e12b0564-1f3c-4105-a841-3f359f8fa3f0"],
Cell[838300, 15205, 9618, 251, 321, "Output",ExpressionUUID->"b7314f76-072f-4d8c-b6f1-700665964a8f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[847967, 15462, 167, 3, 54, "Subsection",ExpressionUUID->"4f87d1e5-e9c2-400c-b56b-14ca6ccffed4"],
Cell[CellGroupData[{
Cell[848159, 15469, 795, 16, 73, "Input",ExpressionUUID->"ab593a78-068a-4748-ad79-479c6bfcab2b"],
Cell[848957, 15487, 1008, 19, 77, "Output",ExpressionUUID->"da6a0587-bc3d-4810-b62f-a1e1ad284771"]
}, Open  ]],
Cell[CellGroupData[{
Cell[850002, 15511, 6418, 159, 451, "Input",ExpressionUUID->"7c99db0d-c727-4d26-826f-ec0910fc5904"],
Cell[856423, 15672, 92403, 1669, 93, "Output",ExpressionUUID->"6c670d68-be30-4e1a-9524-065c42da0c60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[948863, 17346, 3148, 79, 220, "Input",ExpressionUUID->"d078db54-3fb5-4f7d-a830-7291119b8496"],
Cell[952014, 17427, 119272, 2069, 92, "Output",ExpressionUUID->"e5cc3856-4b2d-4dc7-a1be-ea3687cbe143"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1071323, 19501, 160, 2, 30, "Input",ExpressionUUID->"76f749cb-8628-4673-a9de-a9c265a377e4"],
Cell[1071486, 19505, 9602, 251, 321, "Output",ExpressionUUID->"4abb7f32-3900-4a1a-8331-9545f2c51f6d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1081137, 19762, 190, 3, 54, "Subsection",ExpressionUUID->"442669c2-296c-487d-933d-58838e62affc"],
Cell[1081330, 19767, 353, 7, 30, "Input",ExpressionUUID->"05a4d2b2-86a2-487b-b829-35fa2b7bc77f"],
Cell[CellGroupData[{
Cell[1081708, 19778, 2166, 43, 283, "Input",ExpressionUUID->"4a77f52a-47fc-426a-8bb2-14b305238994"],
Cell[1083877, 19823, 11179, 226, 120, "Output",ExpressionUUID->"1bdcb11f-61c2-446e-9d92-9fffae167afb"]
}, Open  ]],
Cell[1095071, 20052, 157, 3, 30, "Input",ExpressionUUID->"4f5700aa-442d-48ee-a951-c2cd0b983e3a"],
Cell[CellGroupData[{
Cell[1095253, 20059, 878, 20, 52, "Input",ExpressionUUID->"8934d3ef-dd87-4142-8bed-ceca9391344b"],
Cell[1096134, 20081, 8717, 177, 119, "Output",ExpressionUUID->"8f05786e-4d35-4ea5-a1c6-ddb2c4c49d78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1104888, 20263, 228, 3, 30, "Input",ExpressionUUID->"57535679-2960-420a-8ceb-6b07723069ad"],
Cell[1105119, 20268, 18642, 399, 321, 9467, 248, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"08a5ca49-d4a9-4876-bad7-b433fea73cd8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1123810, 20673, 155, 3, 54, "Subsection",ExpressionUUID->"91183821-3108-44aa-a87f-8a7c1fe0310e"],
Cell[1123968, 20678, 2197, 44, 262, "Input",ExpressionUUID->"20ce2fee-f182-4a76-8ef1-f2420b0008d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1126202, 20727, 203, 4, 54, "Subsection",ExpressionUUID->"0c2cda38-6288-407b-b6e4-407de0a266a2"],
Cell[CellGroupData[{
Cell[1126430, 20735, 2179, 44, 220, "Input",ExpressionUUID->"0699803f-03ac-4b06-b522-2b05fb15ab8a"],
Cell[1128612, 20781, 74663, 1379, 93, "Output",ExpressionUUID->"e6a6149c-29f2-4424-94c0-f516ca1c9f4f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1203312, 22165, 771, 18, 52, "Input",ExpressionUUID->"c88b7817-10bf-4c38-8017-f8f1193ed1f7"],
Cell[1204086, 22185, 90393, 1615, 92, "Output",ExpressionUUID->"96549ca8-5001-4e69-b5ba-12f1ae4e3c56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1294516, 23805, 160, 2, 30, "Input",ExpressionUUID->"6cfdd4a1-d410-4d1f-8ed6-4fbf050556f7"],
Cell[1294679, 23809, 9583, 251, 321, "Output",ExpressionUUID->"a914b72a-70f2-4af1-9e0f-187b994358e8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1304311, 24066, 252, 4, 54, "Subsection",ExpressionUUID->"aa2ca46c-0868-46f9-9183-0ab00f37703b"],
Cell[CellGroupData[{
Cell[1304588, 24074, 2199, 43, 220, "Input",ExpressionUUID->"3e953368-3ba7-48e4-9f56-3cd26b2f2974"],
Cell[1306790, 24119, 104033, 1860, 65, "Output",ExpressionUUID->"bf9e3740-1061-453f-bc41-e36d43b8ba70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1410860, 25984, 874, 20, 52, "Input",ExpressionUUID->"ff3e3682-e8a6-4fab-a152-1dffd7dd02f9"],
Cell[1411737, 26006, 243772, 3996, 92, "Output",ExpressionUUID->"7a329f44-a841-4e2a-9c9d-6cc60b045aec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1655546, 30007, 160, 2, 30, "Input",ExpressionUUID->"a28f438c-b49b-4104-a35a-3130cb085a1f"],
Cell[1655709, 30011, 9627, 250, 321, "Output",ExpressionUUID->"2ff93e4d-7ab4-43cd-b9e3-5ab0f946d6b6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1665385, 30267, 190, 3, 54, "Subsection",ExpressionUUID->"8c8c4504-2f1d-43ec-95ba-13964edcd4f7"],
Cell[1665578, 30272, 757, 14, 52, "Input",ExpressionUUID->"2c39e4b2-e44e-4951-a038-6f2d45c565eb"],
Cell[CellGroupData[{
Cell[1666360, 30290, 312, 5, 30, "Input",ExpressionUUID->"8ffd62dc-42f0-4668-98ee-f7ee71c8aef2"],
Cell[1666675, 30297, 152, 2, 34, "Output",ExpressionUUID->"7276e46d-bd20-462d-90b4-aa990e1d8d55"]
}, Open  ]],
Cell[1666842, 30302, 1481, 38, 167, "Code",ExpressionUUID->"b05ded02-c2b4-4cfe-b820-81ccea690354"],
Cell[CellGroupData[{
Cell[1668348, 30344, 521, 13, 30, "Input",ExpressionUUID->"2e8f4877-cfc2-4e55-833b-a6cd59c8c11f"],
Cell[1668872, 30359, 1307, 20, 77, "Output",ExpressionUUID->"007e139a-ba5d-40c2-bba4-d6b60ac6e021"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1670228, 30385, 249, 4, 54, "Subsection",ExpressionUUID->"e1bfd86c-b4d9-4adb-ab28-100e769c4867"],
Cell[CellGroupData[{
Cell[1670502, 30393, 2347, 46, 241, "Input",ExpressionUUID->"2fa3af23-900f-4dfb-b4da-54d74ec65c98"],
Cell[1672852, 30441, 11278, 230, 120, "Output",ExpressionUUID->"df4306c6-f894-4f11-9c3e-2f4b711cf376"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1684167, 30676, 863, 21, 52, "Input",ExpressionUUID->"b6d3bf9f-acfc-4af8-b284-392b2d2d911a"],
Cell[1685033, 30699, 149711, 2554, 92, "Output",ExpressionUUID->"56daeab6-970f-4540-9c3d-5f354b7675a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1834781, 33258, 164, 3, 30, "Input",ExpressionUUID->"d28206d5-a1db-4b18-95a0-545724d10c77"],
Cell[1834948, 33263, 9377, 243, 321, "Output",ExpressionUUID->"cdc81bd9-a871-4ad4-8cd2-04a7a030c728"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[1844374, 33512, 302, 5, 54, "Subsection",ExpressionUUID->"2288b0f8-e3ba-4450-b920-1b5299f6b207"],
Cell[CellGroupData[{
Cell[1844701, 33521, 2369, 46, 241, "Input",ExpressionUUID->"e8e6a9d9-f107-4823-9ebf-2bb0f0877576"],
Cell[1847073, 33569, 927, 20, 110, "Message",ExpressionUUID->"606f3cee-4934-4088-9042-53ea0ceb1eeb"],
Cell[1848003, 33591, 613, 13, 59, "Message",ExpressionUUID->"5808ba42-816f-43cd-b483-43b839a774c9"],
Cell[1848619, 33606, 223740, 3857, 93, "Output",ExpressionUUID->"3cc3eea0-8d0b-4f7d-91f0-d4e5ef96dfba"]
}, Open  ]],
Cell[2072374, 37466, 126, 2, 30, "Input",ExpressionUUID->"57cab30a-2b88-4a46-9b94-4a8b098b6a50"],
Cell[CellGroupData[{
Cell[2072525, 37472, 909, 21, 52, "Input",ExpressionUUID->"62f46b42-ed9a-43b6-b3ba-cec748b2d139"],
Cell[2073437, 37495, 234463, 3861, 92, "Output",ExpressionUUID->"c184602a-b01f-44df-acf8-2315027aa312"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2307937, 41361, 164, 3, 30, "Input",ExpressionUUID->"35bdf15f-09a1-4d42-addf-77b85136d58a"],
Cell[2308104, 41366, 9712, 253, 321, "Output",ExpressionUUID->"034ae511-7fce-4269-88b6-bfae1686d8dd"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2317865, 41625, 169, 3, 54, "Subsection",ExpressionUUID->"2298f457-5436-4d6a-9745-8ff50e9c541e"],
Cell[CellGroupData[{
Cell[2318059, 41632, 1242, 20, 30, "Input",ExpressionUUID->"100815b3-0c1c-4255-a438-8e4d81573b71"],
Cell[2319304, 41654, 390516, 6588, 65, "Output",ExpressionUUID->"52511c1b-2fe5-4b52-8146-9b6169d5c0eb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2709857, 48247, 292, 5, 30, "Input",ExpressionUUID->"0ebe265f-65f5-43f3-bc60-c54c05c3fd1c"],
Cell[2710152, 48254, 476458, 7840, 92, "Output",ExpressionUUID->"46e0e853-c080-449c-8611-8833d146b084"]
}, Open  ]]
}, Open  ]]
}
]
*)

