(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    457666,       9423]
NotebookOptionsPosition[    448785,       9267]
NotebookOutlinePosition[    449140,       9283]
CellTagsIndexPosition[    449097,       9280]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Extracting all lines from scripts", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"cab4ee65-639b-4750-a1e4-975f2577e569"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.740083890074869*^9, 3.74008389667279*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"d71059b3-665b-4950-867f-9bf72a6d367d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"StringSplit", "[", 
   RowBox[{
    RowBox[{"Import", "[", 
     RowBox[{"\"\<movie_lines.tsv\>\"", ",", "\"\<Text\>\""}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<\\t\>\"", ",", "\"\<\\n\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.740084055896326*^9},
 CellLabel->"In[10]:=",ExpressionUUID->"8413af67-812f-44eb-acb6-871039fc40cf"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"L1045\"\>", ",", "\<\"u0\"\>", ",", "\<\"m0\"\>", 
           ",", "\<\"BIANCA\"\>", ",", "\<\"They do not!\"\>", 
           ",", "\<\"L1044\"\>", ",", "\<\"u2\"\>", ",", "\<\"m0\"\>", 
           ",", "\<\"CAMERON\"\>", ",", "\<\"They do to!\"\>", 
           ",", "\<\"L985\"\>", ",", 
           TemplateBox[{"1524452"},
            "OutputSizeLimit`Skeleton"], ",", "\<\"L666257\"\>", 
           ",", "\<\"u9030\"\>", ",", "\<\"m616\"\>", ",", "\<\"DURNFORD\"\>",
            ",", "\<\"Good ones yes Mr Vereker. Gentlemen who can ride and \
shoot\"\>", ",", "\<\"L666256\"\>", ",", "\<\"u9034\"\>", ",", "\<\"m616\"\>",
            ",", "\<\"VEREKER\"\>", 
           ",", "\<\"Colonel Durnford... William Vereker. I hear you 've been \
seeking Officers?\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 30943663018284057872, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 30943663018284057872, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 10, 30943663018284057872, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30943663018284057872 === $SessionID, 
   Out[10], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084060021996*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"d801c6bc-803e-40c6-a4f6-59d99fe9aac4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"lines", "=", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Partition", "[", 
       RowBox[{"data", ",", "5"}], "]"}], "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", 
        RowBox[{"-", "1"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\\\"\>\"", "\[Rule]", "\"\<\>\""}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->"In[11]:=",ExpressionUUID->"18054f2b-965c-49cb-8804-2a7fbfca729b"],

Cell[BoxData[
 RowBox[{"linesJoined", "=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"Riffle", "[", 
    RowBox[{"lines", ",", "\"\< \>\""}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.740083962319407*^9, {3.740084014544158*^9, 3.740084017213212*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"6106833c-4a76-4063-a956-dec4209f4060"],

Cell[BoxData[
 RowBox[{"Riffle", "[", 
  RowBox[{"lines", ",", "\"\< \>\""}], "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"eb2ff9fe-4247-4574-abae-11656fdb5bbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lines", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.740084019805112*^9, 3.740084041028945*^9}, {
  3.7400840985562553`*^9, 3.740084099470685*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"14e880f6-e239-45e4-9145-3be8f2c8060e"],

Cell[BoxData["304894"], "Output",
 CellChangeTimes->{{3.740084025857532*^9, 3.74008404152601*^9}, {
  3.74008409311901*^9, 3.740084099902487*^9}},
 CellLabel->"Out[15]=",ExpressionUUID->"2dd5deed-1af9-4aab-bf7e-c1bae71d6c03"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"sentences", "=", 
   RowBox[{"TextCases", "[", 
    RowBox[{"linesJoined", ",", "\"\<Sentence\>\""}], "]"}]}], ";"}]], "Input",\

 CellLabel->"In[17]:=",ExpressionUUID->"3fd53a69-1c65-49c9-91ca-518a28b4a4dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extracting and modifying questions from lines", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"b49d2da7-adc3-45f2-b7b6-c68f0e7ec730"],

Cell["Replacing \[OpenCurlyDoubleQuote]?\[CloseCurlyDoubleQuote] for \
\[OpenCurlyDoubleQuote].\[CloseCurlyDoubleQuote] and making letters of lower \
case", "Text",ExpressionUUID->"92a8c79e-daf1-4081-b17e-f49b05eabc91"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"questions", "=", 
  RowBox[{"ToLowerCase", "[", 
   RowBox[{"StringReplace", "[", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"sentences", ",", 
       RowBox[{
        RowBox[{"StringContainsQ", "[", 
         RowBox[{"#", ",", "\"\<?\>\""}], "]"}], "&"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<?\>\"", "\[Rule]", "\"\<.\>\""}], "}"}]}], "]"}], 
   "]"}]}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"c5e8a140-ec24-4682-b35a-20a6f28713cc"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"she okay.\"\>", 
           ",", "\<\"you know how sometimes you just become this \
persona.\"\>", ",", "\<\"and you don't know how to quit.\"\>", 
           ",", "\<\"like my fear of wearing pastels.\"\>", 
           ",", "\<\"what good stuff.\"\>", ",", "\<\"what crap.\"\>", ",", 
           TemplateBox[{"19642"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"well what's the point of waiting.\"\>", 
           ",", "\<\"it's sixth century b.c.  do you like the period.\"\>", 
           ",", "\<\"dance.\"\>", ",", "\<\"okay.\"\>", 
           ",", "\<\"what are you going to do.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 18, 30943663018284057872, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 18, 30943663018284057872, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 18, 30943663018284057872, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30943663018284057872 === $SessionID, 
   Out[18], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084173714202*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"179933b8-bbcf-4b48-990a-7491128e8d7e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Extracting and modifying normal sentences from lines", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"7b6c53ad-8577-466a-bfed-e5f158adc6fb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"normalLines", "=", 
  RowBox[{"ToLowerCase", "[", 
   RowBox[{
    RowBox[{"Complement", "[", 
     RowBox[{"sentences", ",", "questions"}], "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"80", ";;", "64213"}], "]"}], "]"}], "]"}]}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"a7b6d6cc-7ef0-467e-9dde-60e19e6c7fe6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"a.\"\>", ",", "\<\"a..\"\>", 
           ",", "\<\"a .45-- colt peacemaker.\"\>", ",", "\<\"aaa!\"\>", 
           ",", "\<\"aaaaaaaaaa!\"\>", ",", 
           TemplateBox[{"64125"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"wade i got a message for you.\"\>", 
           ",", "\<\"wade it's late.\"\>", 
           ",", "\<\"wade sarge corporal insect all of us hell i'll bet even \
the captain has a mother.\"\>", 
           ",", "\<\"wade's right it's some kind of scientific magnetic thing \
i can't explain it but i've seen it.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 19, 30943663018284057872, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 19, 30943663018284057872, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 19, 30943663018284057872, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30943663018284057872 === $SessionID, 
   Out[19], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.74008417904668*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"1cd94f8e-d8aa-4ca9-832d-8b4599fdb08e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"normalLines1", "=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"normalLines", ",", "19653"}], "]"}]}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"262ad8a5-14f2-4740-b5c7-783cf07c0df5"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"coppers figured he laundered money for the mob before \
getting into real estate.\"\>", 
           ",", "\<\"make it fast i'm expecting someone.\"\>", 
           ",", "\<\"here's the deal:\"\>", 
           ",", "\<\"how do you know how bad it was?\"\>", ",", 
           TemplateBox[{"19645"},
            "OutputSizeLimit`Skeleton"], ",", "\<\"hey-ho..\"\>", 
           ",", "\<\"did you come here with wally--to *not* watch \
movies?\"\>", ",", "\<\"a hospital is no place for secrecy, mr. treves.\"\>", 
           ",", "\<\"no time.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 20, 30943663018284057872, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 20, 30943663018284057872, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 20, 30943663018284057872, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30943663018284057872 === $SessionID, 
   Out[20], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084182989924*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"4ce013f6-4960-4a66-9654-333227236ad0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Random Sample", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"df29d1d5-fc99-48cd-ba8c-31b7c9564335"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"trainquestions1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"questions", ",", "13757"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7400792720916224`*^9, 3.740079273377097*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"f5a5e964-4f0a-4b95-af97-34c669344325"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"did ya get the license number.\"\>", 
           ",", "\<\"you gonna pull.\"\>", 
           ",", "\<\"we've known debbie what since the eighth grade.\"\>", 
           ",", "\<\"joyce give the assistant chief inspector a drink would \
you.\"\>", ",", 
           TemplateBox[{"13749"},
            "OutputSizeLimit`Skeleton"], 
           ",", "\<\"miss wollsten shares the room with you.\"\>", 
           ",", "\<\"what do you want to know evan.\"\>", 
           ",", "\<\"will these boards hold.\"\>", 
           ",", "\<\"like my fear of wearing pastels.\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 21, 30943663018284057872, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 21, 30943663018284057872, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 21, 30943663018284057872, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30943663018284057872 === $SessionID, 
   Out[21], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084189185034*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"9278c83f-d7b1-473c-be17-9c6f44c6f180"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"trainnonquestions1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"normalLines1", ",", "13757"}], "]"}]}]}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"d2d17123-2450-4c92-8bfd-9e4f335ae4d6"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"{", 
          
          RowBox[{"\<\"i sat on his lap and got ahold of him and wiggled and \
wiggled my ass on him and was worse'n you could know a child like you.\"\>", 
           ",", "\<\"i can't follow you.\"\>", 
           ",", "\<\"how long have you been here?\"\>", 
           ",", "\<\"just to see if i could do it.\"\>", ",", 
           TemplateBox[{"13749"},
            "OutputSizeLimit`Skeleton"], ",", "\<\"she's upset.\"\>", 
           ",", "\<\"are you fuckin' kidding me?\"\>", 
           ",", "\<\"it's alright janet.\"\>", 
           ",", "\<\"how do you know how bad it was?\"\>"}], "}"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          TagBox[
           TooltipBox[
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "FEStrings", "sizeBriefExplanation"], StandardForm],
               ImageSizeCache->{58., {2., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLText",
             StripOnInput->False],
            StyleBox[
             DynamicBox[
              ToBoxes[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
               StandardForm]], DynamicUpdating -> True, StripOnInput -> 
             False]],
           Annotation[#, 
            Style[
             Dynamic[
              FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
             DynamicUpdating -> True], "Tooltip"]& ], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{50., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 22, 30943663018284057872, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{56., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 22, 30943663018284057872, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{42., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 22, 30943663018284057872, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{74., {0., 8.}}],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, 25}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxDividers->{
      "Columns" -> {{False}}, "ColumnsIndexed" -> {}, "Rows" -> {{False}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[30943663018284057872 === $SessionID, 
   Out[22], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellChangeTimes->{3.740084191268667*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"f75bad94-222c-4711-9a4b-2f5daa450d7c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"validationq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"questions", ",", "trainquestions1"}], "]"}], ",", "2000"}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7400792151545753`*^9, 3.740079215829104*^9}, {
  3.740079284827704*^9, 3.740079285582086*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"e9a06111-4bd6-4f73-a69f-7b65f263d0ed"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"validationnonq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"normalLines1", ",", "trainnonquestions1"}], "]"}], ",", 
     "2000"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.740079217560535*^9, 3.740079218146028*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"e81c76ef-496b-451f-8f6b-f779b847fb8c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"testq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{"questions", ",", "trainquestions1", ",", "validationq1"}], 
      "]"}], ",", "2600"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.740079220841104*^9, 3.7400792214794273`*^9}, {
  3.7400792915082273`*^9, 3.740079292142103*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"f56e3b0e-2dc7-4fd9-ae0b-89a1a7a7f4f5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1234", "]"}], ";", 
  RowBox[{"testnonq1", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{
     RowBox[{"Complement", "[", 
      RowBox[{
      "normalLines1", ",", "trainnonquestions1", ",", "validationnonq1"}], 
      "]"}], ",", "2600"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.740079223822283*^9, 3.740079224376918*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"cf5afbb1-9047-4c6c-8417-4e467840f6f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"Riffle", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"TextStructure", "[", 
      RowBox[{
      "\"\<like my fear of wearing pastels.\>\"", ",", 
       "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
     RowBox[{"[", 
      RowBox[{
      "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1", ",", "2"}], 
      "]"}], "]"}], ",", "\"\< \>\""}], "]"}], "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"c0e9c824-4063-4809-bfe4-82caa47c669d"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.740084234751684*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"a376fbf2-3691-4a53-bf5c-3005f1e8af29"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Changing parts of speech to numbers", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"0ef2d266-dca6-4b95-9309-5085c4fdc9e4"],

Cell[BoxData[
 RowBox[{"(", 
  RowBox[{
   RowBox[{"TextStructure", "[", 
    RowBox[{",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
   RowBox[{"[", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1", ",", "2"}], 
    "]"}], "]"}], ")"}]], "Input",ExpressionUUID->"0fdb2830-5dff-4190-ba92-\
2f22c2ae7221"],

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{"{", 
   RowBox[{
   "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"", ",", 
    "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", "\"\<Noun\>\"", ",", 
    "\"\<Punctuation\>\""}], "}"}], "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"24dadab7-aeb2-4403-b47d-9d7a7da9c011"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "\"\<Noun\>\"", ",", "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", 
    "\"\<Punctuation\>\"", ",", "\"\<Verb\>\""}], "}"}], "//", 
  "Length"}]], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"db28260a-8059-40e1-84dc-31617d67aa11"],

Cell[BoxData["5"], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"54e31492-7cab-4948-85ca-3768dae23336"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", " ", "=", " ", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", " ", "\[Rule]", 
      RowBox[{"First", "[", "#2", " ", "]"}]}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adjective\>\"", ",", "\"\<Adverb\>\"", ",", "\"\<Conjunction\>\"", 
      ",", "\"\<Determiner\>\"", ",", "\"\<Interjection\>\"", ",", 
      "\"\<Missing\>\"", ",", "\"\<Noun\>\"", ",", "\"\<Numeral\>\"", ",", 
      "\"\<Particle\>\"", ",", "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", 
      ",", "\"\<ProperNoun\>\"", ",", "\"\<Punctuation\>\"", ",", 
      "\"\<Symbol\>\"", ",", "\"\<Verb\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.740085705554276*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"2e3d1310-7455-4cb5-b6e5-7872be0dac8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Adjective\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Adverb\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"Conjunction\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"Determiner\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"Interjection\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"Missing\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"Noun\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"Numeral\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"Particle\"\>", "\[Rule]", "9"}], ",", 
   RowBox[{"\<\"Preposition\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"Pronoun\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"ProperNoun\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"Punctuation\"\>", "\[Rule]", "13"}], ",", 
   RowBox[{"\<\"Symbol\"\>", "\[Rule]", "14"}], ",", 
   RowBox[{"\<\"Verb\"\>", "\[Rule]", "15"}]}], "}"}]], "Output",
 CellChangeTimes->{3.740085709225148*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"15ef5f23-2edb-42d7-a53b-c52a79317990"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"", ",", 
    "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", "\"\<Noun\>\"", ",", 
    "\"\<Punctuation\>\""}], "}"}], "/.", " ", "rules"}]], "Input",
 CellLabel->"In[33]:=",ExpressionUUID->"90b3345f-14bd-4fb9-b650-31515b62f882"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "1", ",", "2", ",", "5", ",", "1", ",", "4"}], 
  "}"}]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"c37abec4-ef50-40b4-b10f-1eb70d445709"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classify", "Subsubsection",
 TextAlignment->Center,ExpressionUUID->"c3e68d7b-1c05-456d-a16e-0a3835c9a007"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Classify", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Not a question\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<like my fear of wearing pastels.\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"",
             ",", "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", 
            "\"\<Noun\>\"", ",", "\"\<Punctuation\>\""}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<like your fear of wearing pastels.\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"",
             ",", "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", 
            "\"\<Noun\>\"", ",", "\"\<Punctuation\>\""}], "}"}]}], "}"}]}], 
       "}"}]}], ",", 
     RowBox[{"\"\<Question\>\"", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<like my fer of wearing pastels.\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"",
             ",", "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", 
            "\"\<Noun\>\"", ",", "\"\<Punctuation\>\""}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<like your fear of pearing pastels.\>\"", ",", 
          RowBox[{"{", 
           RowBox[{
           "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", ",", "\"\<Noun\>\"",
             ",", "\"\<Preposition\>\"", ",", "\"\<Verb\>\"", ",", 
            "\"\<Noun\>\"", ",", "\"\<Punctuation\>\""}], "}"}]}], "}"}]}], 
       "}"}]}]}], "|>"}], ",", 
   RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], "]"}]], "Input",\

 CellLabel->"In[24]:=",ExpressionUUID->"16520970-9419-43f2-9f32-e3c5b48f5c56"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", 
                    TemplateBox[{"\"NominalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "7", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not a question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", 
                    TemplateBox[{"\"NominalVector\"", 
                    StyleBox[
                    TemplateBox[{"\" (\"", "7", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}], 
                    "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not a question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 4, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NominalVector", "Length" -> 7]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NominalVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NominalVector"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
           "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], 
                 "VectorLength" -> 7, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NominalVector", "Weight" -> 1]], "Type" -> 
                 "NominalVector", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3139720177438361802, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5643421565728107793, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["TextToNominalSequence", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Forbidden", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Tokens" -> {{
               " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", ":", ";", "\"", 
                "'", "(", ")", "$", "%", "&", "@", "*", "-", "+", "=", "[", 
                "]", "{", "}", "\\", "|", "\\", "<", ">", "/", "~", "`", "#", 
                "^"}}, "Method" -> "WordSegment", "Version" -> {11.3, 0}, 
             "ID" -> 3051290048872824615, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Forbidden", 
             "Input" -> Association[
              "f1" -> Association[
                "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
             MachineLearning`SortedHashAssociation[
               Association[
               "KeyHashes" -> {-8848930558111478767, -2320075283768740418, \
-2159536488856785732, 2935186855750808727, 3054608430639883892, 
                 3266755832598616625, 3287432777910049379, 
                 5538390546289211935, 5771009867652686929, 
                 6180448655478833230, 7843075611497459573}, "Values" -> None, 
                "DefaultValue" -> -1, "HashFunction" -> 
                Function[{
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$}, 
                  Switch[
                  MachineLearning`file132SortedHashAssociation`PackagePrivate`\
keys$, {
                    BlankSequence[String]}, 
                   Data`StringHash[
                   MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                   PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                   
                   Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                   Blank[List], 
                   Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
             "InverseDocumentFrequency" -> {-2.3978952727983707`, \
-1.2992829841302609`, -1.0116009116784799`, -1.0116009116784799`, \
-1.2992829841302609`, -1.0116009116784799`, -1.0116009116784799`, \
-1.7047480922384253`, -1.7047480922384253`, -1.0116009116784799`, \
-2.3978952727983707`}, "Version" -> {11.3, 0}, "ID" -> 24534574848248429, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Preposition" -> 1], 
               Association["Pronoun" -> 1], 
               Association["Noun" -> 1], 
               Association["Preposition" -> 1], 
               Association["Verb" -> 1], 
               Association["Noun" -> 1], 
               Association["Punctuation" -> 1]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 162007647621428153, "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]]}, 
         "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6693038715456136576]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not a question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             6697000108911617603, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4810585743643111211]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association["Not a question" -> 0.5, "Question" -> 0.5]], "Prior" -> 
    Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Speed", "BatchProcessing" -> Automatic, "Model" -> 
    Association["LogProbabilitiesFunction" -> LinearLayer[
        Association[
        "Type" -> "Linear", "Arrays" -> 
         Association[
          "Weights" -> 
           RawArray["Real32",{{
             0.00019817041174974293`, -0.00010737776756286621`, \
-3.8641170818642934`*^-10, -3.8641170818642934`*^-10, \
-0.00010737776756286621`, -3.8641170818642934`*^-10, -1.932058513176571*^-9, \
-3.255901659393601*^-10, -3.255901659393601*^-10, -3.8641170818642934`*^-10, 
             0.00019817041174974293`, -4.554690846703124*^-9, \
-4.909905371164314*^-9, 6.5709335750341324`*^-9, -4.659931107653392*^-9, 
             6.45454783371191*^-12, -3.0385724492099087`*^-10, \
-1.5827114063782233`*^-9}}], "Biases" -> 
           RawArray["Real32",{4.621962368389632*^-9}]], "Parameters" -> 
         Association[
          "OutputDimensions" -> {1}, "$OutputSize" -> 1, "$InputSize" -> 18, 
           "$InputDimensions" -> {18}], "Inputs" -> 
         Association[
          "Input" -> NeuralNetworks`TensorT[{18}, NeuralNetworks`RealT]], 
         "Outputs" -> 
         Association[
          "Output" -> NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
        Association["Version" -> "11.3.5"]], "Processor" -> 
      MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1], "f1" -> 
           Association["Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
         Association[
          "(f1f2)" -> 
           Association[
            "Weight" -> {0.09090909090909091, 0.09090909090909091, 
              0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 
              0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 
              0.09090909090909091, 0.09090909090909091, 0.09090909090909091, 
              0.14285714285714285`, 0.14285714285714285`, 
              0.14285714285714285`, 0.14285714285714285`, 
              0.14285714285714285`, 0.14285714285714285`, 
              0.14285714285714285`}, "Type" -> "NumericalVector"]], 
         "Processors" -> {
           MachineLearning`MLProcessor["EmbedNominalVector", 
            Association[
            "Invertibility" -> "Impossible", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1], 
               Association[1 -> 1]}, "Output" -> 
             Association[
              "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], 
             "EmbeddingVectors" -> {{{0.}, {-0.9854452013969421}}, {{
              0.}, {-1.0622987747192383`}}, {{0.}, {1.4216760396957397`}}, {{
              0.}, {-1.0082148313522339`}}, {{0.}, {
              0.0013964950339868665`}}, {{0.}, {-0.06574203819036484}}, {{
              0.}, {-0.34243276715278625`}}}, "Version" -> {11.3, 0}, "ID" -> 
             2333481148792975998]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Weight" -> 1, "Type" -> "NumericalVector"]], "Spans" -> {
               Span[1, 11], 
               Span[12, 18]}, "Wrappers" -> {SparseArray, Identity}, "Output" -> 
             Association[
              "(f1f2)" -> 
               Association[
                "Weight" -> {0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.09090909090909091, 
                  0.09090909090909091, 0.14285714285714285`, 
                  0.14285714285714285`, 0.14285714285714285`, 
                  0.14285714285714285`, 0.14285714285714285`, 
                  0.14285714285714285`, 0.14285714285714285`}, "Type" -> 
                 "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             4285093444708854555]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Weight" -> {0.5000000000000001, 0.06313131313131312, 
                0.06313131313131312, 0.06313131313131312, 0.06313131313131312,
                 0.06313131313131312, 0.06313131313131312, 
                0.06313131313131312, 0.06313131313131312, 0.06313131313131312,
                 0.06313131313131312, 0.06313131313131312, 
                0.11507936507936506`, 0.11507936507936506`, 
                0.11507936507936506`, 0.11507936507936506`, 
                0.11507936507936506`, 0.11507936507936506`, 
                0.11507936507936506`}, "Type" -> "NumericalVector"], "Key" -> 
             "(f1f2)", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
         "Allowed"]], "Method" -> "LogisticRegression", "Options" -> 
      Association[
       "L1Regularization" -> 
        Association["Value" -> 0, "Options" -> Association[]], 
        "L2Regularization" -> 
        Association["Value" -> 1000., "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association["Value" -> "LBFGS", "Options" -> Association[]], 
        MaxIterations -> 
        Association["Value" -> 30, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.695598380709432, 0.14342257826175991`], "Accuracy" -> 
         PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
         0.00037425, "TestSize" -> 3, "TrainingSize" -> 3, "TrainingTime" -> 
         0.015543000000000001`, "TrainingMemory" -> 79996., "ModelMemory" -> 
         25720., "ExperimentCount" -> 3, "ModelUtility" -> 
         2.7538591986148355`, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.6953357751419658, 0.2482276752359793], 
           PlusMinus[0.6964306140523696, 0.24900283531371764`], 
           PlusMinus[0.6950348929414186, 0.2480150689783879]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`], 
           PlusMinus[0.25, 0.25000000000000006`]}, 
         "Configuration" -> {
          "LogisticRegression", "L1Regularization" -> 0, "L2Regularization" -> 
           1000., "OptimizationMethod" -> Automatic, MaxIterations -> 30}, 
         "FinalTrainingSize" -> 4], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Vector[TypeSystem`AnyType, 3], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 39221783820242]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7995360840040289, 0.6378232507658711], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.0005005, "TestSize" -> 3, "TrainingSize" -> 3, "TrainingTime" -> 
              0.0424635, "TrainingMemory" -> 129888., "ModelMemory" -> 25720.,
               "ExperimentCount" -> 3, "ModelUtility" -> 1.9740864104797267`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7329711260403222, 0.27611873193017594`], 
                PlusMinus[2.465639503708361, 1.9536841463046588`], 
                PlusMinus[2.4653026850917605`, 1.9533486907634487`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0005005, "MeanCrossEntropy" -> 
             PlusMinus[0.7995360840040289, 0.6378232507658711], "ModelMemory" -> 
             25720., "TrainingMemory" -> 129888., "TrainingTime" -> 
             0.04416204], "Index" -> 1], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.165335455020172, 0.7373003995764799], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00041075, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.01443275, "TrainingMemory" -> 128042., 
              "ModelMemory" -> 35680., "ExperimentCount" -> 3, "ModelUtility" -> 
              1.4781300968889908`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.9977154585647222, 0.5090882411578134], 
                PlusMinus[2.669205911874957, 2.156504476797367], 
                PlusMinus[2.669205911874957, 2.156504476797367]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00041075, "MeanCrossEntropy" -> 
             PlusMinus[1.165335455020172, 0.7373003995764799], "ModelMemory" -> 
             35680., "TrainingMemory" -> 128042., "TrainingTime" -> 
             0.015010059999999999`], "Index" -> 2], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8047189562170501, 0.19319228048029433`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00048425000000000003`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.025072249999999997`, "TrainingMemory" -> 
              376602., "ModelMemory" -> 20072., "ExperimentCount" -> 3, 
              "ModelUtility" -> 2.1914557357709175`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`], 
                PlusMinus[0.8047189562170501, 0.33461884542196685`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00048425000000000003`, "MeanCrossEntropy" -> 
             PlusMinus[0.8047189562170501, 0.19319228048029433`], 
             "ModelMemory" -> 20072., "TrainingMemory" -> 376602., 
             "TrainingTime" -> 0.026075139999999997`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8149596418465576, 0.3210937508932569], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00048824999999999997`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.011786000000000001`, "TrainingMemory" -> 
              78392., "ModelMemory" -> 23120., "ExperimentCount" -> 3, 
              "ModelUtility" -> 2.0970453976402053`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7135581778200729, 0.26142723870256185`], 
                PlusMinus[1.354025100551105, 0.8524412814527432], 
                PlusMinus[1.354025100551105, 0.8524412814527432]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00048824999999999997`, "MeanCrossEntropy" -> 
             PlusMinus[0.8149596418465576, 0.3210937508932569], "ModelMemory" -> 
             23120., "TrainingMemory" -> 78392., "TrainingTime" -> 
             0.012257440000000001`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8083657905927571, 0.22200612985620763`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.0031752500000000006`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.03160325, "TrainingMemory" -> 
              128439.99999999999`, "ModelMemory" -> 55944., "ExperimentCount" -> 
              3, "ModelUtility" -> 1.2352270563361794`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.724084882418989, 0.26931953425155675`], 
                PlusMinus[0.8714846525293116, 0.3930203449888541], 
                PlusMinus[1.020110414263277, 0.5301655003041122]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0031752500000000006`, "MeanCrossEntropy" -> 
             PlusMinus[0.8083657905927571, 0.22200612985620763`], 
             "ModelMemory" -> 55944., "TrainingMemory" -> 128439.99999999999`,
              "TrainingTime" -> 0.03286738], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.695598380709432, 0.14342257826175991`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00037425, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.015543000000000001`, "TrainingMemory" -> 
              79996., "ModelMemory" -> 25720., "ExperimentCount" -> 3, 
              "ModelUtility" -> 2.7538591986148355`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6953357751419658, 0.2482276752359793], 
                PlusMinus[0.6964306140523696, 0.24900283531371764`], 
                PlusMinus[0.6950348929414186, 0.2480150689783879]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00037425, "MeanCrossEntropy" -> 
             PlusMinus[0.695598380709432, 0.14342257826175991`], 
             "ModelMemory" -> 25720., "TrainingMemory" -> 79996., 
             "TrainingTime" -> 0.01616472], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.1], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.9514444696616864, 0.2757461820927579], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00036024999999999995`, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.0348825, "TrainingMemory" -> 93718., 
              "ModelMemory" -> 25720., "ExperimentCount" -> 3, "ModelUtility" -> 
              2.0039225527996862`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.87784884774458, 0.39872434777991117`], 
                PlusMinus[1.014909473068421, 0.525260854753658], 
                PlusMinus[1.015935630418495, 0.5262281017347197]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00036024999999999995`, "MeanCrossEntropy" -> 
             PlusMinus[0.9514444696616864, 0.2757461820927579], "ModelMemory" -> 
             25720., "TrainingMemory" -> 93718., "TrainingTime" -> 0.0362778],
            "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.00001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1420190587082646`, 1.5460008116363808`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00033425, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.034795999999999994`, "TrainingMemory" -> 
              93752., "ModelMemory" -> 25720., "ExperimentCount" -> 3, 
              "ModelUtility" -> 1.4209844611790323`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0305768472925478`, 0.5400524703976681], 
                PlusMinus[4.317349661617614, 3.8015457605020577`], 
                PlusMinus[5.969480428595851, 5.452447522107792]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00033425, "MeanCrossEntropy" -> 
             PlusMinus[1.1420190587082646`, 1.5460008116363808`], 
             "ModelMemory" -> 25720., "TrainingMemory" -> 93752., 
             "TrainingTime" -> 0.03618783999999999], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7865475065939536, 0.18535327474502863`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00035775, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.0198905, "TrainingMemory" -> 85278., 
              "ModelMemory" -> 25720., "ExperimentCount" -> 3, "ModelUtility" -> 
              2.454150101879178, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7837188940725727, 0.3169332405150179], 
                PlusMinus[0.8172208431792554, 0.34532391778413923`], 
                PlusMinus[0.7656485831037451, 0.30205496929468423`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00035775, "MeanCrossEntropy" -> 
             PlusMinus[0.7865475065939536, 0.18535327474502863`], 
             "ModelMemory" -> 25720., "TrainingMemory" -> 85278., 
             "TrainingTime" -> 0.02068612], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931750900460314, 0.14243519403056443`], "Accuracy" -> 
              PlusMinus[0.25, 0.14433756729740646`], "EvaluationTime" -> 
              0.00041575, "TestSize" -> 3, "TrainingSize" -> 3, 
              "TrainingTime" -> 0.015983, "TrainingMemory" -> 78412., 
              "ModelMemory" -> 25720., "ExperimentCount" -> 3, "ModelUtility" -> 
              2.679310603674436, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931746745353708, 0.24670470033331182`], 
                PlusMinus[0.6931887323578674, 0.24671457639790279`], 
                PlusMinus[0.6931618653018429, 0.24669570179518652`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`], 
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00041575, "MeanCrossEntropy" -> 
             PlusMinus[0.6931750900460314, 0.14243519403056443`], 
             "ModelMemory" -> 25720., "TrainingMemory" -> 78412., 
             "TrainingTime" -> 0.01662232], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 13], "LearningRate" -> 
             Association["Value" -> 0.04], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 35], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471805599452, 0.34886581868923816`], "Accuracy" -> 
              PlusMinus[0.25, 0.35355339059327384`], "EvaluationTime" -> 
              0.000477, "TestSize" -> 1, "TrainingSize" -> 3, "TrainingTime" -> 
              0.050269, "TrainingMemory" -> 96704, "ModelMemory" -> 33552, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.4333568497561187`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471805599452, 0.24668538611935686`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.25, 0.25000000000000006`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000477, "MeanCrossEntropy" -> 
             PlusMinus[0.6931471805599452, 0.34886581868923816`], 
             "ModelMemory" -> 33552, "TrainingMemory" -> 96704, 
             "TrainingTime" -> 0.05227976], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 39217488852946]], "MaxTrainingSize" -> 4, 
      "LastReportingTime" -> 3.739996369297718`16.325446169757566*^9, 
      "PreprocessorEvaluationTime" -> 7.45751953125`2.*^-6, 
      "PreprocessorMemory" -> 40584, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 3, "TimeBudgets" -> 1.1, "ElapsedTimes" -> 
          1.465705, "ExperimentCounts" -> 31]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[39226078787538]], "ID" -> 39230373754834]]], 
    "Log" -> Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {"like your fear of wearing pastels."}, "ID" -> 
           7806654962102425149], "f2" -> 
         Association[
          "Type" -> "NominalVector", "Weight" -> 1, 
           "Values" -> {{
             "Preposition", "Pronoun", "Noun", "Preposition", "Verb", "Noun", 
              "Punctuation"}}, "ID" -> 5814909113149441914]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 2.983102, "MaxTrainingMemory" -> 23050696, 
      "DataMemory" -> 2512, "FunctionMemory" -> 198176, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 7, 23, 52, 49.529395`8.447437998916495}, "Instant",
         "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"6fc05414-ce14-4584-bdf7-97ac005af35e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"categories", " ", "=", " ", 
  RowBox[{"Union", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"TextStructure", "[", 
               RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{
               "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
               "]"}], "]"}], ")"}], "/.", 
            RowBox[{
             RowBox[{"Missing", "[", "]"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}], 
          ")"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", ",", 
      RowBox[{"questions", "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740085609136063*^9, 
  3.74008565224747*^9}},ExpressionUUID->"ed243bc7-b166-488c-96c2-\
e32ab1bcf9e8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Adjective\"\>", ",", "\<\"Adverb\"\>", 
   ",", "\<\"Conjunction\"\>", ",", "\<\"Determiner\"\>", 
   ",", "\<\"Interjection\"\>", ",", "\<\"Missing\"\>", ",", "\<\"Noun\"\>", 
   ",", "\<\"Numeral\"\>", ",", "\<\"Particle\"\>", 
   ",", "\<\"Preposition\"\>", ",", "\<\"Pronoun\"\>", 
   ",", "\<\"ProperNoun\"\>", ",", "\<\"Punctuation\"\>", 
   ",", "\<\"Symbol\"\>", ",", "\<\"Verb\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.740085687052244*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"fc6e4659-0fd7-4e8c-a1a7-8b0df7c6aeb1"]
}, Open  ]],

Cell[BoxData[
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"partsOfSpeechNumbers", " ", "[", " ", "x_", "]"}], " ", ":=", 
    " ", 
    RowBox[{"Transpose", "[", "\n", 
     RowBox[{"{", " ", 
      RowBox[{"x", ",", "\n", 
       RowBox[{
        RowBox[{"Map", "[", "\n", 
         RowBox[{
          RowBox[{
           RowBox[{"(", "\n", " ", 
            RowBox[{
             RowBox[{"(", "\n", "  ", 
              RowBox[{"(", "\n", "   ", 
               RowBox[{
                RowBox[{"(", "\n", "     ", 
                 RowBox[{
                  RowBox[{"TextStructure", "[", 
                   RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{
                   "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
                   "]"}], "]"}], "\n", "    ", ")"}], "/.", 
                RowBox[{
                 RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
               "\n", "   ", ")"}], "\n", "  ", ")"}], "\n", "  ", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "\n", ")"}], " ", "\n",
            "&"}], " ", ",", " ", "x"}], " ", "]"}], "\n", "/.", " ", 
        "rules"}]}], "}"}], "]"}]}], " ", ";"}], "Code"]], "Code",
 CellChangeTimes->{{3.740085880916667*^9, 3.7400861347557087`*^9}, {
  3.740086331080839*^9, 3.740086334656097*^9}, {3.740086948951529*^9, 
  3.740086952140627*^9}, {3.740087333034587*^9, 3.740087340185684*^9}},
 CellLabel->"In[62]:=",ExpressionUUID->"f24b21c2-f4e4-4ce9-adab-28ec9139ee26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"questions", "[", 
     RowBox[{"[", 
      RowBox[{"1", ";;", "10"}], "]"}], "]"}], ",", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"TextStructure", "[", 
                RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}], 
                "]"}], "]"}], ")"}], "/.", 
             RowBox[{
              RowBox[{"Missing", "[", "]"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], ")"}],
            ")"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", ",", 
       RowBox[{"questions", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", "10"}], "]"}], "]"}]}], "]"}], "/.", "rules"}]}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.7400842525186567`*^9, 3.740084280645115*^9}, {
  3.740084314312044*^9, 3.740084317173037*^9}, {3.7400857395478888`*^9, 
  3.740085759673088*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"e5881c42-c5f6-4ba6-a1de-87adfe55fb2f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"she okay.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "1", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"you know how sometimes you just become this persona.\"\>", 
     ",", 
     RowBox[{"{", 
      RowBox[{
      "11", ",", "15", ",", "2", ",", "2", ",", "11", ",", "2", ",", "15", 
       ",", "4", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"and you don't know how to quit.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "11", ",", "15", ",", "2", ",", "15", ",", "2", ",", "10", 
       ",", "15", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"like my fear of wearing pastels.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "10", ",", "11", ",", "7", ",", "10", ",", "15", ",", "7", ",", "13"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"what good stuff.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "1", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"what crap.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "7", ",", "13"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"do you listen to this crap.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "15", ",", "11", ",", "15", ",", "10", ",", "4", ",", "7", ",", "13"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"you always been this selfish.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "2", ",", "15", ",", "4", ",", "1", ",", "13"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"you never wanted to go out with 'me did you.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{
      "11", ",", "2", ",", "15", ",", "10", ",", "15", ",", "9", ",", "10", 
       ",", "13", ",", "11", ",", "15", ",", "11", ",", "13"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"i was.\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"6", ",", "15", ",", "13"}], "}"}]}], "}"}]}], "}"}]], "Output",\

 CellChangeTimes->{
  3.740084286458425*^9, 3.7400843179520197`*^9, {3.7400857441644163`*^9, 
   3.740085760682178*^9}},
 CellLabel->"Out[45]=",ExpressionUUID->"6685630e-0cec-450f-87e7-0a4cb856556b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "1000"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"questions", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "1000"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"normalLines1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "1000"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}]}], " ", "|>"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"54f1815f-e286-4c78-b929-24096a8edd1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"questions", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"normalLines1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"validationnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}]}], "}"}], 
         "]"}]}]}], " ", "|>"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
  3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
  3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"dd5bebd2-95f7-460e-81d7-b41b2e84a9a0"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NominalSequence\""}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NominalSequence\""}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 14240096, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10529582893065609946752054009641029904123381341629919333888, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904123381341629919333888,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740085352583025*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"6b90ff0b-125c-4cbf-9b27-462161bafb5a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"testq1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testnonq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                  RowBox[{
                   RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                 ")"}], ")"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
            ",", 
            RowBox[{"testnonq1", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}]}], "}"}], 
        "]"}]}]}], " ", "|>"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740084572853097*^9, 3.740084657768157*^9}, {
  3.740084695059907*^9, 3.7400846987130327`*^9}, {3.7400848003789387`*^9, 
  3.740084802640071*^9}, {3.740085174101098*^9, 3.74008519280921*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"92773ba6-c513-48fc-b7e8-6215dd347448"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["200", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["200", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.6500000000000000222`3.9561720165653536", 
                    "\[PlusMinus]", "0.0338114785302568513`2."}], 
                    "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierMeasurementsObject, 14378040, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierMeasurementsObject, 
            10529582893065609946752054009641029904141828085704066753744, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904141828085704066753744,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740084662824913*^9, 3.7400847033442373`*^9, 
  3.74008538891745*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"f4d27a2a-681d-4304-90a6-cddc7955eef6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.740084702672556*^9, 3.740084741556716*^9}},
 CellLabel->"In[39]:=",ExpressionUUID->"e12b0564-1f3c-4105-a841-3f359f8fa3f0"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.9163480218129639, 0.8023450701347736, 0.4932672899550227}, {
   1., 0.42, 0.}}, {{0.9016438148630552, 0.5177044980841545, 
   0.004896879264460649}, {0.8796675025019278, 0.6437767836873812, 
   0.1740093775089338}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["57", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "57", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6785714285714286`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.57`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6195652173913043`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{57, " examples of ", "Not Question", " correctly classified"}], 
         
         Row[{"Precision = ", 0.6785714285714286}], 
         Row[{"Recall = ", 0.57}], 
         Row[{"FScore = ", 0.6195652173913043}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["27", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "27", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.32142857142857145`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.27`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          27, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.32142857142857145`}], 
         Row[{"Row fraction = ", 0.27}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["43", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "43", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.3706896551724138`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.43`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          43, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.3706896551724138}], 
         Row[{"Row fraction = ", 0.43}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["73", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "73", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.6293103448275862`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.73`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.6759259259259258`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{73, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.6293103448275862}], 
         Row[{"Recall = ", 0.73}], 
         Row[{"FScore = ", 0.6759259259259258}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.57`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.57}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.73`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.73}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "84", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6785714285714286`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{84, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.6785714285714286}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "116", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.6293103448275862`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{116, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.6293103448275862}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["100", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["84", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["116", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7400847419678593`*^9, 3.740085395517992*^9},
 CellLabel->"Out[39]=",ExpressionUUID->"b7314f76-072f-4d8c-b6f1-700665964a8f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["With Vector Numbers", "Subsection",
 CellChangeTimes->{{3.740085570283942*^9, 
  3.740085575475913*^9}},ExpressionUUID->"4f87d1e5-e9c2-400c-b56b-\
14ca6ccffed4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"rules", " ", "=", " ", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#1", " ", "\[Rule]", 
      RowBox[{"First", "[", "#2", " ", "]"}]}], "&"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Adjective\>\"", ",", "\"\<Adverb\>\"", ",", "\"\<Conjunction\>\"", 
      ",", "\"\<Determiner\>\"", ",", "\"\<Interjection\>\"", ",", 
      "\"\<Missing\>\"", ",", "\"\<Noun\>\"", ",", "\"\<Numeral\>\"", ",", 
      "\"\<Particle\>\"", ",", "\"\<Preposition\>\"", ",", "\"\<Pronoun\>\"", 
      ",", "\"\<ProperNoun\>\"", ",", "\"\<Punctuation\>\"", ",", 
      "\"\<Symbol\>\"", ",", "\"\<Verb\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.740085705554276*^9},
 CellLabel->"In[43]:=",ExpressionUUID->"ab593a78-068a-4748-ad79-479c6bfcab2b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"Adjective\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Adverb\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"Conjunction\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"Determiner\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"Interjection\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"Missing\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"Noun\"\>", "\[Rule]", "7"}], ",", 
   RowBox[{"\<\"Numeral\"\>", "\[Rule]", "8"}], ",", 
   RowBox[{"\<\"Particle\"\>", "\[Rule]", "9"}], ",", 
   RowBox[{"\<\"Preposition\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"Pronoun\"\>", "\[Rule]", "11"}], ",", 
   RowBox[{"\<\"ProperNoun\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"Punctuation\"\>", "\[Rule]", "13"}], ",", 
   RowBox[{"\<\"Symbol\"\>", "\[Rule]", "14"}], ",", 
   RowBox[{"\<\"Verb\"\>", "\[Rule]", "15"}]}], "}"}]], "Output",
 CellChangeTimes->{3.740085709225148*^9},
 CellLabel->"Out[43]=",ExpressionUUID->"da6a0587-bc3d-4810-b62f-a1e1ad284771"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"questions", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"questions", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"normalLines1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "500"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"normalLines1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "500"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}]}], "|>"}], " ", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                   ")"}], ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
              ",", 
              RowBox[{"validationq1", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}], "/.", 
            "rules"}]}], "}"}], "]"}]}], ",", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"validationnonq1", "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "50"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                    RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                   ")"}], ")"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
              ",", 
              RowBox[{"validationnonq1", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "50"}], "]"}], "]"}]}], "]"}], "/.", 
            "rules"}]}], "}"}], "]"}]}]}], " ", "|>"}]}], ",", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
  3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
  3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
  3.7400857914195538`*^9, 3.740085833656323*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"7c99db0d-c727-4d26-826f-ec0910fc5904"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                   "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  TemplateBox[{
                   ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1000", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1000, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text"], "f2" -> 
           Association["Type" -> "NumericalSequence"]], "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["Transpose", 
               Association["FeatureNumber" -> 2]], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
         False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
           Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
         "Output" -> 
         Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
              "], "Type" -> 
             "NumericalVector"]], "Processors" -> {
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Processors" -> {
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Fill" -> "", "Output" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                 7263179337424669307]], 
               MachineLearning`MLProcessor["ImputeMissing", 
                Association[
                "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                 "Fill" -> {}, "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                 "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                 114010418416267986]]}, "Invertibility" -> "Perfect", 
             "Missing" -> "Imputed"]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
             9.465786466929034, "StandardDeviation" -> 4.511821128433264, 
             "Output" -> 
             Association[
              "f2" -> Association[
                "Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
           MachineLearning`MLProcessor["ToLowerCase", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["RemoveDiacritics", 
            Association[
            "Invertibility" -> "Approximate", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["Threads", 
            Association[
            "Input" -> Association[
              "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
               Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Processors" -> {
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                 "Output" -> 
                 Association[
                  "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", ":", ";", 
                    "\"", "'", "(", ")", "$", "%", "&", "@", "*", "-", "+", 
                    "=", "[", "]", "{", "}", "\\", "|", "\\", "<", ">", "/", 
                    "~", "`", "#", "^"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUnONjtShe8AMafZAAtAct8soSRGLIEBEiMGsDM2yHlOOuL9qSqqbvh7
M512ONoT4X/5j//+9//8v7//66//+bu//vrr3/7rf/73b/+s//Gvt9V66rz3
zlPHXbOUN1DXGWu3WVdbrfVabw70tU8f7cxzxjwzB8Ztc+j/9mij3dl/A+us
XmYvRX+/9A8xUE/vd5x9jyYx6t45UEZfpe5zbr+39vhFuWeJMsfdS7/oI6Zb
jh7V6tj7lNP0g/PHQNFHMNJXq6vmwNIHltY13db7Lr9H6a/G1ufV0vUxN1++
m758TP13PbPulb9oPL/xrHluPS1fXvup+3b9+4y2yo4lKaXrA8rSJ6za9olZ
He3EaZqzxrQ09e4cWFtjRSt2u6a3+o6BUbTwRf8959pVU4gBNq2XzSqOMrVb
MdBGnVouvWhqd1e+49xdZpl3bL18ztpLDLBWp3Z2uO6q/8TAKmVv9muxGefG
O2COPke5Wzs1tCa/AX2IFn5oZepuZ+U7xDW1tLt701DTnr0BHn+GFmoPkfW2
eDn/855ZxLtzLL3lxsDQamgHNxs1xKs9Bqq46ex15p5VXFJirZa+vY5T5u5i
Em3kygFNS3OpYpetCbabA9pVcdSY4hE98MSsxN9d+zTmGlXL1kv+Qg+ZdTb9
n14g9v4NFK1V0VIO7Zh4tMXAvGVoJfpdlwOx8xf9lMKbzuy7ajdrDmgq9Vy+
Q8tVxvoNNFh6rMk2aslioG3xgNj8NHGQViRfXsvW09vUNtY1/5gVm61Xa2Mk
BEqZIwb046Xjqe/QYSi3999A1RqKu25bc/ZkhrnhTB3mAeuWVuIX2k9OoFa8
w/XawxjoeoO4QQu5Kv8zZjXb0KHRrusUnDLKiv0Qsx598Gj6wSn1zpIDElE6
hbtKqExtef5Cf6VVmRcReEev+YvCqdR6HO2sREfyrhZPKzeGBMfRV7QafDV2
FdM1SSbRYKAcGLuwkvqgzt/niRo6l10yY1Z99tSux9ZKpOqPR2dpJCBWyF0N
iBuQYlMf0bX7sR/iJi13sXg/rWk1Y0D7cMWGlTO1YNQcgN936TojkhI9uUQL
NeBGydipRf/Jq64dLUvcXuF2sW+8QwJvF8mRdiSEmj48HyU5NvmP1gmJkWsl
idikVvrUTPUOidscGPpHHbap/4i1cj86B2DoLIupmza55Dv0Eu2S2FFHR5w4
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

                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJzFGn1o1VX0bW8fbe4939x8usbCTBglFUQW8aCFOYeSyIRl5SS1JxkmQW2y
wlCHlSvCzGXLxMfqGWKCSyFSCd/STbZHNgqD0fpY1lZKwaLCFbX+eef34Pw4
nHPuvW/9dbj397v3fNzzfe+NG55atTEvEAicLAoEwrXdO8YGalL7ur5PNd07
NwVjDOH70Le9824oqPYgfH9g7I/Rq/Eq3zwFuf9OvNCxeHJ4JksHhyeciLbf
lIimPjl3OP/Lh+ew/wMfHN1S/GPrrtscf6lCjZeig6PPll7p+Uj/o/QK86Gl
T0oPuW9GLyh6OHtwBaMrPtpZW1fO/tdxePn9E1OV7LniMccHJR+8jtpXq49t
r1VeWpYX9c1Ptf/12Fe/z/LhWXrf6a4vloTJdVJ9wPLDY60/0PKt9Y+m9ujK
fgD+k/fg7FOtEXYd6MPSReOL6y9m9XnTK6PJljsqSXnhc6D8PpZjU2Nw/att
s0m75uzCVp5tnx56Pp0/yxtDfAFI2Z0xXuSvpH4VQ6Dvs+6TZx7/JiTWW8D3
7MWaa4eGi631lMofOLvh9qf8OLU/PjdKr6X+ltRL5P+eLp/3VnJohtp/YLo9
/4j0Uep3bf2E1p9QcmX3R/rvmn4Yc3K0jQPavCK4tWbhmZ5SnxynKx5gfdPK
V00n4b+l+KV+/9EXiyuSPWFj+lyfsynU6t9I+plfR/eXpBYuya8/9mQ5Kaf1
ex9q3h6KiOMJjHH81vp5GOM8Qqt/pnpiWl/h+TmlC/L6TmT9CM5zGjp/u7Zl
T+m02S+GEKe0dTHkc5zeU/UDZxeAB8PNVeMfd8ey8RLopuIazLuyww9XPnHX
yoO0vWDI2YGtHQNfXekD57c2BXOuL+WxHR3NR+X5CsDYskWtO2PZ/seq8XcT
PS3++KrNz6Fe5OTJ2bltHcjpt+m547wb72N6Hhz92nho2leDdaZ4KbvX7ofp
6tuyILm2pUCel1pCSn6AB9cTnLwpfzc8WT94YUXItz9nJ6Z8H6m6ecbB3ghr
p9Q5eGOUbwEdUr2T1uGX3hu8sqnx77O25ymNj1J/ZeuXAJ9p/Qf7Y3mnC++8
5+tgodoflG249erItlBq17b+d0KdlT5+W9cd3dX3M5934nN8/4PBs3Wfl6jt
FdNr26fDMF73b/qNEj9dGM9U7enrBxv5Ppv23PC5Y7zUd0qPYB3Ecan+SeOs
9Lxd7cP1a7T7UXUEJ1dKLyn9oSCum6T4PJjxt5RctPkMxTfOC7Xn3lK2PVb0
nL9+l+oH9tMU3ZQ/x3jmv3lud/xKwDpvuBBPJP88IPd/UnlBPcrlp9gfYjuR
1vMAcd0krcfAX0jvs7h8xtSOpets76fwPCVvDmJ5g51I10vfAYA+UfTZ6q/a
b2UglVeY7iv1Z2oo7CMOrb57/pphv58Euil75fTMFR9gp6D/ua6b4L5Dm/9j
u+bu3aXy8exeeT/BykOqH5Z9S+hTua5rKbrw/HcN+5svd/3g1V17C/ujE6sv
++owjs+XHzm1u6AhW4/Y9v2k8qDqB+n/HD6uz6F9N+ThyegX5GF4Xsu3a70x
xuv4npCUn5BeWz/bG6suqLjdXxe6el8wtDbRHr0l2/ew7T9wfX6o//F3rb1i
Ojk7ocbc+URGZvZPRvj8SZp3cvGx+ra5xb0/hcXyoOwBz0PcpPjm6Mf9Wufv
W5h9AL+pPeH7JNf+AeM58vrE+c63y4z9HP4O/RbX+RVV73D0e+uJ/JSyR9fy
p97X2srDFX14P7Bvbp20j++afnx/a/ruhOPT24/QH4ofiB/4P3iv4OqcbNfb
2il7/5npF2vpdtWHxX2x6X6PRMmb48/VewAcr6Fvh/0c1Fdcn1eKN1fv5m3l
AH0X032ouPB/8wdw+cbGfQM/Fqn5kN6PePxm/OEvewbWHC8KenLl7oFd3Vvh
vh7XVwX64V2ZFI9W73P9ni5XeSFlr5C3UOf1H3AqPUk=
                    "], 
                    "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
               
               MachineLearning`MLProcessor["Sequence", 
                Association[
                "Input" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                 Association[
                  "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                 "Processors" -> {
                   MachineLearning`MLProcessor["NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                   MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                 "Invertibility" -> "Impossible", "Missing" -> "Imputed"]]}, 
             "Invertibility" -> "Impossible", "Missing" -> "Forbidden"]], 
           MachineLearning`MLProcessor["MergeVectors", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
                "f2" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Spans" -> {
               Span[1, 1715], 
               Span[1716, 1716]}, "Wrappers" -> {SparseArray, Identity}, 
             "Output" -> 
             Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                  "], "Type" -> 
                 "NumericalVector"]], "Version" -> {11.3, 0}, "ID" -> 
             821998144885263164]]}, "Invertibility" -> "Impossible", 
         "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 4779017560470115588]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association["Not Question" -> 1, "Question" -> 2]}, 
             "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
             2739954230257633601, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 7071693056549462440]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[
       "Not Question" -> 0.49999999999999994`, "Question" -> 
        0.49999999999999994`]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    "Speed", "BatchProcessing" -> Automatic, "Model" -> 
    Association["Tree" -> MachineLearning`DecisionTree[
        Association[
        "FeatureIndices" -> 
         RawArray["Integer16",{20, 20, 29, 77, 96, 113, 118, 211, 246, 256, 
           256, 263, 313, 373, 373, 447, 496, 536, 556, 556, 569, 569, 569, 
           589, 619, 632, 632, 632, 632, 675, 675, 675, 675, 675, 733, 738, 
           738, 738, 738, 751, 776, 776, 776, 813, 818, 818, 840, 881, 885, 
           928, 938, 938, 938, 938, 938, 938, 973, 1019, 1111, 1153, 1169, 
           1169, 1169, 1169, 1169, 1169, 1169, 1171, 1171, 1171, 1171, 1171, 
           1171, 1171, 1171, 1171, 1171, 1171, 1178, 1178, 1178, 1243, 1281, 
           1295, 1317, 1317, 1388, 1398, 1463, 1475, 1484, 1484, 1498, 1578, 
           1581, 1638, 1638, 1652, 1652, 1674, 1716, 1716, 1716, 1716, 1716, 
           1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
           1716, 1716, 1716, 1716, 1716, 1716}], 
         "NumericalThresholds" -> CompressedData["
1:eJwdkFtIEwAYhdfQtSgTI8NSgzmaLRXGMnFTtqZ7qKwlTseESKcoodOhXYbT
6IJhtsJmcxv2IDirSZqDHhpr/xEmTDCTYGCBZoXOVmbTdVGELtsevsM55+Hn
53BqdGX1TAaDcZEdkTKNXtbaqmlTsqKhTqM9KtRui1hDhLjmDGhdFlKqE8eF
yfNoTEnDy5UMzLlvwawI0oW0vXjyrhLbxUokc6yo2K0Cy5uA1VA/LfzZosyk
BHza8sNuyEeDPUgfvTbkcgXIr3pN9Z9tCIgZ403lvYjyMEeA96E9+F2txsyY
CMVZm2Rc+0a5VQ76XtOP0QM5MLge0eKwlkY8a5547wZ1+CQoV6SjXDVLu4Jq
YvPMEPKYKAp8id1eH5mkIV8W4kNNEFWrkL4uxPme/dhsZ2GiVk7HSty4tjCA
n3YrDYivYqrwBjoauPgXZkKJQTrXeZPeGvlU8ZfjKXp1G6XO6zhx6DKe1+rw
TFYXY1FwBtPhU5H+F02Hp+jSrI2OHHQg9bAMga5OOr60Qj3yZRp7+oIqd+hg
0ktxutQa+1FecBYzSQ8gmp9AX4cdVW+GoYAFjn1JYKSYwN6ZF9nGAp4rG/da
SmC+kjcuVz3GV54Npo1u6O7r0X0nER+a/NTm7KfGvl4a9XVR5nIxTS41e+62
bxbwnT8KtwZ5kihzAbnEcNIjca/6JTUtcVIjN1XK52dL/wNL/RDu
          "], 
         "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVkVOUFQAARG/ebNu23Xay283eajM3959t27Zt27Ztd3t9zMy5Z/5mMrbt
GdIhMtAnKGAhYQOCIyLCBoXGDED1Hn3DO4ZHFCzW6X8/OKD/WZ/4bDcmf03N
ShPxx9/OsRCVGEQsSrHR0lz3mnFpRD8O+8yn9iYBt8zLSU+YkUwsMj87TUMw
KelLf36ZgeKk54yZGWkqRtiWKuRgk+HssSlXvGwHFvvFMhwwLQWpyDHrcc6z
tiIeJcjFDjvz0ZL89IdhlOeJj41GMi543osmZK4dWW0XdpuYSYbwyIf2YZjV
+e4Kl7vUJeYhCm9tzVXbsMoYvLM9LyzMTW/YnAb04rijHWX2wBLZ0IUusBs1
+ewnt7rFiU7wg+99bh2mOdUgulKWN5bjgUc94n6bcMfbjnWMLYjNV0NJx10b
0pgI8rHLZlSlHdtsyTe788pabHC9WUhBbrJSlzjkpCjDLcJmB/DSSKwxOfPs
QTVmGpVidKIAy+zJfe85w+nWDjw321lWJimHPOhpT1mBSw51iFOc7D73moSB
rHOt4x1ndOZbg9f+A4C//o8=
          "], "LeafValues" -> 
         RawArray["UnsignedInteger8",{{101, 1}, {3, 1}, {2, 2}, {1, 8}, {1, 
           5}, {1, 4}, {3, 1}, {1, 58}, {1, 11}, {1, 12}, {1, 3}, {3, 1}, {1, 
           2}, {3, 1}, {1, 3}, {2, 1}, {1, 3}, {3, 1}, {5, 23}, {1, 4}, {1, 
           4}, {1, 3}, {4, 2}, {1, 3}, {3, 1}, {1, 9}, {1, 3}, {4, 1}, {3, 
           1}, {17, 30}, {8, 10}, {1, 4}, {7, 2}, {4, 2}, {3, 1}, {1, 3}, {2, 
           2}, {12, 1}, {7, 4}, {1, 3}, {2, 1}, {2, 2}, {2, 2}, {1, 7}, {1, 
           5}, {1, 6}, {2, 2}, {18, 1}, {1, 4}, {3, 1}, {2, 2}, {4, 1}, {1, 
           2}, {3, 1}, {1, 14}, {2, 2}, {2, 2}, {3, 2}, {4, 1}, {75, 1}, {1, 
           3}, {2, 1}, {6, 1}, {2, 2}, {2, 2}, {7, 1}, {3, 1}, {7, 1}, {2, 
           2}, {3, 1}, {1, 4}, {1, 3}, {2, 2}, {3, 1}, {1, 2}, {3, 3}, {3, 
           1}, {1, 3}, {2, 2}, {1, 172}, {2, 13}, {2, 2}, {3, 1}, {1, 3}, {1, 
           3}, {1, 3}, {1, 4}, {2, 1}, {12, 1}, {3, 1}, {1, 3}, {1, 10}, {1, 
           3}, {1, 3}, {3, 1}, {1, 2}, {3, 8}, {1, 3}, {2, 2}, {5, 1}, {1, 
           4}, {2, 3}, {6, 1}, {1, 2}, {2, 7}, {2, 1}, {1, 3}, {5, 1}, {2, 
           2}, {9, 3}, {9, 3}, {1, 6}, {6, 1}, {2, 2}, {80, 1}, {3, 1}, {1, 
           3}, {2, 2}, {2, 2}, {2, 2}, {28, 1}, {2, 2}, {6, 1}}], "RootIndex" -> 
         67, "NominalDimension" -> 0]], "Processor" -> 
      MachineLearning`MLProcessor["Values", 
        Association[
        "Info" -> Association[
          "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
              "], "Type" -> 
             "NumericalVector"]], "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "DecisionTree", "Options" -> 
      Association[
       "DistributionSmoothing" -> 
        Association["Value" -> 1, "Options" -> Association[]], 
        "FeatureFraction" -> 
        Association["Value" -> 1, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
         PlusMinus[0.5000000000000003, 0.07070378035792256], "EvaluationTime" -> 
         9.430000000000001*^-6, "TestSize" -> 100, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.007552, "TrainingMemory" -> 335168, 
         "ModelMemory" -> 61032, "ExperimentCount" -> 1, "ModelUtility" -> 
         7.558128955599508, "MeanCrossEntropyHistory" -> {
           PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.5000000000000003, 0.04999512254661126]}, 
         "Configuration" -> {
          "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
           1}, "FinalTrainingSize" -> 1000], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 115637842022351]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 1.*^-6], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[2.3537612653541005`, 0.4268209940989989], "Accuracy" -> 
              PlusMinus[0.4504950495049506, 0.07029074724332993], 
              "EvaluationTime" -> 0.00017394, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.049436, 
              "TrainingMemory" -> 1798504, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.0277203671043191`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[2.3537612653541005`, 0.30180801928018547`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4504950495049506, 0.04970306403042821]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.9460780805399367`, 0.4700942872939521], "Accuracy" -> 
              PlusMinus[0.5495049504950499, 0.07042869408830647], 
              "EvaluationTime" -> 0.00007187, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044369, 
              "TrainingMemory" -> 2623752, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.5857390060963248`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.9460780805399367`, 0.3324068583426106]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007187, "MeanCrossEntropy" -> 
             PlusMinus[1.9460780805399367`, 0.4700942872939521], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2623752, 
             "TrainingTime" -> 0.493126], "Index" -> 1], 
         Association[
          "Value" -> "DecisionTree", "Options" -> 
           Association[
            "DistributionSmoothing" -> Association["Value" -> 1], 
             "FeatureFraction" -> Association["Value" -> 1]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
              "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
              "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8989142600866946, 0.13704963816025623`], "Accuracy" -> 
              PlusMinus[0.5792079207920797, 0.06993081195248246], 
              "EvaluationTime" -> 0.0000132, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.025237, 
              "TrainingMemory" -> 1173760, "ModelMemory" -> 61288, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.41050219998442, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8989142600866946, 0.09690872850227981]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792079207920797, 0.049448551345481616`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8839677178889411, 0.1363000854895791], "Accuracy" -> 
              PlusMinus[0.5891089108910896, 0.06970838956395264], 
              "EvaluationTime" -> 9.05*^-6, "TestSize" -> 100, "TrainingSize" -> 
              200, "TrainingTime" -> 0.105235, "TrainingMemory" -> 5610600, 
              "ModelMemory" -> 61672, "ExperimentCount" -> 1, "ModelUtility" -> 
              5.9552267103014485`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8839677178889411, 0.09637871472598751]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5891089108910896, 0.04929127496626447]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8790576051810061, 0.1391686208427838], "Accuracy" -> 
              PlusMinus[0.6980198019801988, 0.04615937631985702], 
              "EvaluationTime" -> 9.67*^-6, "TestSize" -> 100, "TrainingSize" -> 
              800, "TrainingTime" -> 0.366333, "TrainingMemory" -> 22203896, 
              "ModelMemory" -> 62184, "ExperimentCount" -> 1, "ModelUtility" -> 
              5.9046782235633435`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8790576051810061, 0.1391686208427838]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6980198019801988, 0.04615937631985702]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 9.67*^-6, "MeanCrossEntropy" -> 
             PlusMinus[0.8790576051810061, 0.1391686208427838], "ModelMemory" -> 
             62184, "TrainingMemory" -> 22203896, "TrainingTime" -> 
             0.46546825000000003`], "Index" -> 2], 
         Association[
          "Value" -> "NaiveBayes", "Options" -> 
           Association["SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.1957511596862074`, 0.1977836145849986], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00027889, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.095126, 
              "TrainingMemory" -> 1509424, "ModelMemory" -> 907992, 
              "ExperimentCount" -> 1, "ModelUtility" -> 1.7442260702596155`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.1957511596862074`, 0.13985413508063904`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7828022084623473, 0.11953129778999334`], "Accuracy" -> 
              PlusMinus[0.6188118811881194, 0.06886790804030904], 
              "EvaluationTime" -> 0.00031985, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.123381, 
              "TrainingMemory" -> 3615960, "ModelMemory" -> 930576, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.558301033503622, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7828022084623473, 0.08452139123133287]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6188118811881194, 0.04869696478143408]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.8893877217879478, 0.14717185742548708`], "Accuracy" -> 
              PlusMinus[0.6089108910891095, 0.06917727028697561], 
              "EvaluationTime" -> 0.00027361000000000003`, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.35569, 
              "TrainingMemory" -> 14782992, "ModelMemory" -> 1002280, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.3349029480800123`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.8893877217879478, 0.10406621838538166`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00027361000000000003`, "MeanCrossEntropy" -> 
             PlusMinus[0.8893877217879478, 0.14717185742548708`], 
             "ModelMemory" -> 1002280, "TrainingMemory" -> 14782992, 
             "TrainingTime" -> 1.8735760000000001`], "Index" -> 3], 
         Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.0877927578820954`, 0.11578452595789275`], 
              "Accuracy" -> 
              PlusMinus[0.4405940594059407, 0.07012485283032993], 
              "EvaluationTime" -> 0.00001992, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.005608, 
              "TrainingMemory" -> 441360, "ModelMemory" -> 194904, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.098094668170411, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.0877927578820954`, 0.0818720234612958]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.4405940594059407, 0.049585758966034954`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.697264809214688, 0.016444209057147805`], "Accuracy" -> 
              PlusMinus[0.49009900990099037`, 0.07067631991204443], 
              "EvaluationTime" -> 0.00001918, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.006398, 
              "TrainingMemory" -> 1719984, "ModelMemory" -> 607016, 
              "ExperimentCount" -> 1, "ModelUtility" -> 6.558222836541349, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.697264809214688, 0.011627811735558456`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.49009900990099037`, 0.049975705079116424`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6752594838450804, 0.017892797895458255`], 
              "Accuracy" -> 
              PlusMinus[0.5594059405940598, 0.07029074724332998], 
              "EvaluationTime" -> 0.00003977, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.021239, 
              "TrainingMemory" -> 8369328, "ModelMemory" -> 2805008, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.907995567002972, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6752594838450804, 0.012652118726278918`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5594059405940598, 0.04970306403042825]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6664964540845267, 0.024419892990284724`], 
              "Accuracy" -> PlusMinus[0.53960396039604, 0.04987850435483753], 
              "EvaluationTime" -> 0.00009492, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.1285, 
              "TrainingMemory" -> 40493304, "ModelMemory" -> 11047408, 
              "ExperimentCount" -> 1, "ModelUtility" -> 3.3088928276812233`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6664964540845267, 0.024419892990284724`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00009492, "MeanCrossEntropy" -> 
             PlusMinus[0.6664964540845267, 0.024419892990284724`], 
             "ModelMemory" -> 11047408, "TrainingMemory" -> 40493304, 
             "TrainingTime" -> 0.16623300000000002`], "Index" -> 4], 
         Association[
          "Value" -> "RandomForest", "Options" -> 
           Association[
            "FeatureFraction" -> Association["Value" -> Automatic], 
             "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
             Association["Value" -> Automatic], "DistributionSmoothing" -> 
             Association["Value" -> 0.5], "Implementation" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.7006895037945174, 0.01809996825054025], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00005207, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.009567, 
              "TrainingMemory" -> 275728, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.02624508864541, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7006895037945174, 0.01279861028921822]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931471805599441, 0.007931464032162798], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00005703, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.012973, 
              "TrainingMemory" -> 892576, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.968608843187345, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931471805599441, 0.005608392001879511]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6853665275369779, 0.008626479616410363], "Accuracy" -> 
              PlusMinus[0.5990099009900995, 0.06945731300787833], 
              "EvaluationTime" -> 0.0000532, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.018989, 
              "TrainingMemory" -> 4195256, "ModelMemory" -> 90760, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.121708545780134, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6853665275369779, 0.006099842234531295]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6640144502285039, 0.012013546486100838`], 
              "Accuracy" -> 
              PlusMinus[0.6188118811881194, 0.04869696478143408], 
              "EvaluationTime" -> 0.000056449999999999997`, "TestSize" -> 100,
               "TrainingSize" -> 800, "TrainingTime" -> 0.089167, 
              "TrainingMemory" -> 16575312, "ModelMemory" -> 94856, 
              "ExperimentCount" -> 1, "ModelUtility" -> 5.194467022712934, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6640144502285039, 0.012013546486100838`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6188118811881194, 0.04869696478143408]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000056449999999999997`, "MeanCrossEntropy" -> 
             PlusMinus[0.6640144502285039, 0.012013546486100838`], 
             "ModelMemory" -> 94856, "TrainingMemory" -> 16575312, 
             "TrainingTime" -> 0.12102575], "Index" -> 5], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6930015408367505, 0.008033609595306624], "Accuracy" -> 
              PlusMinus[0.5099009900990102, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007264, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.020734, 
              "TrainingMemory" -> 2047584, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.643378809353513, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6930015408367505, 0.005680619822246629]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6774722561923496, 0.007949511510513176], "Accuracy" -> 
              PlusMinus[0.5792079207920797, 0.049448551345481616`], 
              "EvaluationTime" -> 0.00007502, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.142276, 
              "TrainingMemory" -> 33037040, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.706532734515695, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6774722561923496, 0.007949511510513176]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5792079207920797, 0.049448551345481616`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007502, "MeanCrossEntropy" -> 
             PlusMinus[0.6774722561923496, 0.007949511510513176], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 33037040, 
             "TrainingTime" -> 0.198579], "Index" -> 6], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 100000.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931473692179523, 0.007931467415980243], "Accuracy" -> 
              PlusMinus[0.5099009900990102, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007371, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.012086, 
              "TrainingMemory" -> 819128, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.6233731878017, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931473692179523, 0.005608394394599773]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931470003552032, 0.007931461097753533], "Accuracy" -> 
              PlusMinus[0.5000000000000003, 0.07070378035792256], 
              "EvaluationTime" -> 0.00007227, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.01372, 
              "TrainingMemory" -> 1719016, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.649251627473916, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931470003552032, 0.005608389926938821]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931429420431708, 0.007931391729037679], "Accuracy" -> 
              PlusMinus[0.5990099009900995, 0.06945731300787833], 
              "EvaluationTime" -> 0.00006929000000000001, "TestSize" -> 100, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.024599, 
              "TrainingMemory" -> 8312392, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.704885827765168, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931429420431708, 0.005608340875849439]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6931250973081593, 0.005608132011087476], "Accuracy" -> 
              PlusMinus[0.5891089108910896, 0.04929127496626447], 
              "EvaluationTime" -> 0.00007280000000000001, "TestSize" -> 100, 
              "TrainingSize" -> 800, "TrainingTime" -> 0.076196, 
              "TrainingMemory" -> 33036976, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.642906850599569, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6931250973081593, 0.005608132011087476]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5891089108910896, 0.04929127496626447]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007280000000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.6931250973081593, 0.005608132011087476], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 33036976, 
             "TrainingTime" -> 0.107331], "Index" -> 7], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.0001], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.386515473602657, 0.2997892319886574], "Accuracy" -> 
              PlusMinus[0.5495049504950499, 0.07042869408830647], 
              "EvaluationTime" -> 0.00007381, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044131, 
              "TrainingMemory" -> 2623816, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.219730236973486, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.386515473602657, 0.2119829988658867]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007381, "MeanCrossEntropy" -> 
             PlusMinus[1.386515473602657, 0.2997892319886574], "ModelMemory" -> 
             67960, "TrainingMemory" -> 2623816, "TrainingTime" -> 
             0.48544099999999996`], "Index" -> 8], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 0.01], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[1.089296570443798, 0.14314641718813728`], "Accuracy" -> 
              PlusMinus[0.47029702970297055`, 0.0705388573294967], 
              "EvaluationTime" -> 0.00007462, "TestSize" -> 100, 
              "TrainingSize" -> 10, "TrainingTime" -> 0.042066, 
              "TrainingMemory" -> 1798608, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.8632244547037793`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[1.089296570443798, 0.10121980229629043`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.47029702970297055`, 0.04987850435483752]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.923233311946536, 0.13899405586179253`], "Accuracy" -> 
              PlusMinus[0.53960396039604, 0.07053885732949673], 
              "EvaluationTime" -> 0.00006934, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.044614, 
              "TrainingMemory" -> 2624112, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 3.43622132558719, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.923233311946536, 0.09828363944449528]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00006934, "MeanCrossEntropy" -> 
             PlusMinus[0.923233311946536, 0.13899405586179253`], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2624112, 
             "TrainingTime" -> 0.48820600000000003`], "Index" -> 9], 
         Association[
          "Value" -> "LogisticRegression", "Options" -> 
           Association[
            "L1Regularization" -> Association["Value" -> 0], 
             "L2Regularization" -> Association["Value" -> 10.], 
             "OptimizationMethod" -> Association["Value" -> Automatic], 
             MaxIterations -> Association["Value" -> 30]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.6921895658482664, 0.009975115719036007], "Accuracy" -> 
              PlusMinus[0.5594059405940598, 0.07029074724332998], 
              "EvaluationTime" -> 0.00007347, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.030915, 
              "TrainingMemory" -> 2566128, "ModelMemory" -> 67960, 
              "ExperimentCount" -> 1, "ModelUtility" -> 4.631302998719581, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.6921895658482664, 0.007053471968050884]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.5594059405940598, 0.04970306403042825]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.00007347, "MeanCrossEntropy" -> 
             PlusMinus[0.6921895658482664, 0.009975115719036007], 
             "ModelMemory" -> 67960, "TrainingMemory" -> 2566128, 
             "TrainingTime" -> 0.340065], "Index" -> 10], 
         Association[
          "Value" -> "GradientBoostedTrees", "Options" -> 
           Association[
            "BoostingMethod" -> Association["Value" -> "Gradient"], 
             MaxTrainingRounds -> Association["Value" -> 50], "LeavesNumber" -> 
             Association["Value" -> 110], "LearningRate" -> 
             Association["Value" -> 0.2], ValidationSet -> 
             Association["Value" -> Automatic], "MaxBinNumber" -> 
             Association["Value" -> 255], "ThreadNumber" -> 
             Association["Value" -> 2], "MaxDepth" -> 
             Association["Value" -> 6], "LeafSize" -> 
             Association["Value" -> 15], "FeatureFraction" -> 
             Association["Value" -> 1], "BaggingFraction" -> 
             Association["Value" -> 1], "BaggingFrequency" -> 
             Association["Value" -> 0], "MinGainToSplit" -> 
             Association["Value" -> 0], "L1Regularization" -> 
             Association["Value" -> 0], "L2Regularization" -> 
             Association["Value" -> 0], "LossFunction" -> 
             Association["Value" -> Automatic]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.665745175663856, 0.028409115411534402`], "Accuracy" -> 
              PlusMinus[0.6089108910891095, 0.06917727028697561], 
              "EvaluationTime" -> 0.0006139100000000001, "TestSize" -> 100, 
              "TrainingSize" -> 40, "TrainingTime" -> 0.398711, 
              "TrainingMemory" -> 1816256, "ModelMemory" -> 214576, 
              "ExperimentCount" -> 1, "ModelUtility" -> 2.5686112991718506`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.665745175663856, 0.02008827815500723]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.0006139100000000001, "MeanCrossEntropy" -> 
             PlusMinus[0.665745175663856, 0.028409115411534402`], 
             "ModelMemory" -> 214576, "TrainingMemory" -> 1816256, 
             "TrainingTime" -> 4.385821], "Index" -> 11]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration[
            "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
             "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
            TypeSystem`AnyLength]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 11], 
        Association["ID" -> 115633547055055]], "MaxTrainingSize" -> 1000, 
      "LastReportingTime" -> 3.740068046705079`16.325454492975325*^9, 
      "PreprocessorEvaluationTime" -> 4.68115234375`2.*^-6, 
      "PreprocessorMemory" -> 195984, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.5120000000000001, 
          "ElapsedTimes" -> 0.49161, "ExperimentCounts" -> 7], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.64, "ElapsedTimes" -> 
          1.467996, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 200, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
          0.866427, "ExperimentCounts" -> 5], 
         Association[
         "TrainingSizes" -> 800, "TimeBudgets" -> 1., "ElapsedTimes" -> 
          0.95418, "ExperimentCounts" -> 5]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[115642136989647]], "ID" -> 
         115646431956943]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "Text", "Weight" -> 1, 
           "Values" -> {
            "would you rather be ravished by a pirate or a british rear \
admiral."}, "ID" -> 2944923201742380288], "f2" -> 
         Association[
          "Type" -> "NumericalSequence", "Weight" -> 1, 
           "Values" -> {{15, 11, 2, 15, 15, 10, 4, 7, 3, 4, 1, 1, 7, 13}}, 
           "ID" -> 1880470000636944807]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 5.895246, "MaxTrainingMemory" -> 58779792, 
      "DataMemory" -> 356264, "FunctionMemory" -> 431496, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 8, 19, 47, 27.511215`8.192084752706696}, "Instant",
         "Gregorian", -5.], "ProcessorCount" -> 2, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740086047537242*^9},
 CellLabel->"Out[46]=",ExpressionUUID->"6c670d68-be30-4e1a-9524-065c42da0c60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"testq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"testnonq1", "[", 
           RowBox[{"[", 
            RowBox[{"1", ";;", "100"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"TextStructure", "[", 
                    RowBox[{"#", ",", "\"\<PartsOfSpeech\>\""}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{
                    "1", ",", "1", ",", "1", ",", "All", ",", "2", ",", "1"}],
                     "]"}], "]"}], ")"}], "/.", 
                   RowBox[{
                    RowBox[{"Missing", "[", "]"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\>\"", ",", "\"\<Missing\>\""}], "}"}]}]}], 
                  ")"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", "2"}], "]"}], "]"}], ")"}], "&"}], " ", 
             ",", 
             RowBox[{"testnonq1", "[", 
              RowBox[{"[", 
               RowBox[{"1", ";;", "100"}], "]"}], "]"}]}], "]"}], "/.", 
           "rules"}]}], "}"}], "]"}]}]}], " ", "|>"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.740086199001491*^9, 3.7400862121608133`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"d078db54-3fb5-4f7d-a830-7291119b8496"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierMeasurementsObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{0.8564437870801482, 0.8967071593761374, 
              0.4746151541446917}, {0.7191592194171378, 0.5062062867304069, 
              0.8158644505878024}, {0.47333333333333333`, 0.7727052229508918, 
              0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
             ImagePadding -> 0.2, 
             PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
             PlotRangePadding -> Automatic, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"DecisionTree\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of test examples: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["200", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Number of classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  
                  RowBox[{
                   "0.7199999999999999734`4.118883216782667", "\[PlusMinus]", 
                    "0.0318286871647759928`2."}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierMeasurementsObject[
   Association["Model" -> ClassifierFunction[
      Association[
      "ExampleNumber" -> 1000, "ClassNumber" -> 2, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text"], "f2" -> 
              Association["Type" -> "NumericalSequence"]], "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["Transpose", 
                  Association["FeatureNumber" -> 2]], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Text", "NumericalSequence"}, 
                   "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> 
                   Automatic, "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            False, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
              Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
            "Output" -> 
            Association["(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                 "], "Type" -> 
                "NumericalVector"]], "Processors" -> {
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Fill" -> "", "Output" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Type" -> "Text", "Version" -> {11.3, 0}, "ID" -> 
                    7263179337424669307]], 
                  MachineLearning`MLProcessor["ImputeMissing", 
                   Association[
                   "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "Fill" -> {}, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Type" -> 
                    "NumericalSequence", "Version" -> {11.3, 0}, "ID" -> 
                    114010418416267986]]}, "Invertibility" -> "Perfect", 
                "Missing" -> "Imputed"]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], "Mean" -> 
                9.465786466929034, "StandardDeviation" -> 4.511821128433264, 
                "Output" -> 
                Association[
                 "f2" -> Association[
                   "Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4587732669917548767]], 
              MachineLearning`MLProcessor["ToLowerCase", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 3536038817027957252, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["RemoveDiacritics", 
               Association[
               "Invertibility" -> "Approximate", "Missing" -> "Allowed", 
                "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7781765399750625279, "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["Threads", 
               Association[
               "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Text", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalSequence", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Processors" -> {
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor["TextToNominalSequence", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Forbidden", 
                    "Input" -> 
                    Association[
                    "f1" -> Association["Type" -> "Text", "Weight" -> 1]], 
                    "Tokens" -> {{
                    " ", "\n", "\t", "\:f39f", ",", ".", "!", "?", ":", ";", 
                    "\"", "'", "(", ")", "$", "%", "&", "@", "*", "-", "+", 
                    "=", "[", "]", "{", "}", "\\", "|", "\\", "<", ">", "/", 
                    "~", "`", "#", "^"}}, "Method" -> "WordSegment", 
                    "Version" -> {11.3, 0}, "ID" -> 3291958198718934834, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor[
                    "NominalSequenceToTFIDFVector", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Forbidden",
                     "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NominalSequence", "Weight" -> 1]], "Index" -> 
                    MachineLearning`SortedHashAssociation[
                    Association["KeyHashes" -> CompressedData["
1:eJxNnUnONjtShe8AMafZAAtAct8soSRGLIEBEiMGsDM2yHlOOuL9qSqqbvh7
M512ONoT4X/5j//+9//8v7//66//+bu//vrr3/7rf/73b/+s//Gvt9V66rz3
zlPHXbOUN1DXGWu3WVdbrfVabw70tU8f7cxzxjwzB8Ztc+j/9mij3dl/A+us
XmYvRX+/9A8xUE/vd5x9jyYx6t45UEZfpe5zbr+39vhFuWeJMsfdS7/oI6Zb
jh7V6tj7lNP0g/PHQNFHMNJXq6vmwNIHltY13db7Lr9H6a/G1ufV0vUxN1++
m758TP13PbPulb9oPL/xrHluPS1fXvup+3b9+4y2yo4lKaXrA8rSJ6za9olZ
He3EaZqzxrQ09e4cWFtjRSt2u6a3+o6BUbTwRf8959pVU4gBNq2XzSqOMrVb
MdBGnVouvWhqd1e+49xdZpl3bL18ztpLDLBWp3Z2uO6q/8TAKmVv9muxGefG
O2COPke5Wzs1tCa/AX2IFn5oZepuZ+U7xDW1tLt701DTnr0BHn+GFmoPkfW2
eDn/855ZxLtzLL3lxsDQamgHNxs1xKs9Bqq46ex15p5VXFJirZa+vY5T5u5i
Em3kygFNS3OpYpetCbabA9pVcdSY4hE98MSsxN9d+zTmGlXL1kv+Qg+ZdTb9
n14g9v4NFK1V0VIO7Zh4tMXAvGVoJfpdlwOx8xf9lMKbzuy7ajdrDmgq9Vy+
Q8tVxvoNNFh6rMk2aslioG3xgNj8NHGQViRfXsvW09vUNtY1/5gVm61Xa2Mk
BEqZIwb046Xjqe/QYSi3999A1RqKu25bc/ZkhrnhTB3mAeuWVuIX2k9OoFa8
w/XawxjoeoO4QQu5Kv8zZjXb0KHRrusUnDLKiv0Qsx598Gj6wSn1zpIDElE6
hbtKqExtef5Cf6VVmRcReEev+YvCqdR6HO2sREfyrhZPKzeGBMfRV7QafDV2
FdM1SSbRYKAcGLuwkvqgzt/niRo6l10yY1Z99tSux9ZKpOqPR2dpJCBWyF0N
iBuQYlMf0bX7sR/iJi13sXg/rWk1Y0D7cMWGlTO1YNQcgN936TojkhI9uUQL
NeBGydipRf/Jq64dLUvcXuF2sW+8QwJvF8mRdiSEmj48HyU5NvmP1gmJkWsl
idikVvrUTPUOidscGPpHHbap/4i1cj86B2DoLIupmza55Dv0Eu2S2FFHR5w4
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

                    "], "Values" -> None, "DefaultValue" -> -1, 
                    "HashFunction" -> 
                    Function[{
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$}, 
                    Switch[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, {
                    BlankSequence[String]}, 
                    Data`StringHash[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, "Murmur3-64"], 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    1]& ], MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 
                    PatternTest[
                    Blank[], 
                    MachineLearning`PackageScope`PackedArrayQ[#, Integer, 
                    2]& ], 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^48], 2^32], 
                    Quotient[
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^32], 2^16], 
                    Mod[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    MachineLearning`PackageScope`ToPackedArray[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q], {1, 3, 2}]; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = Transpose[
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q, 1]]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[List], 
                    Map[Switch[#, 
                    Blank[String], 
                    Data`StringHash[#, "Murmur3-64"], 
                    PatternTest[
                    Blank[], Developer`MachineIntegerQ], #, {
                    PatternTest[
                    BlankSequence[], Developer`MachineIntegerQ]}, 
                    
                    Block[{MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q}, 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = {
                    Quotient[#, 2^48], 
                    Quotient[
                    Mod[#, 2^48], 2^32], 
                    Quotient[
                    Mod[#, 2^32], 2^16], 
                    Mod[#, 2^16]}; 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q = 
                    Flatten[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]; Data`StringHash[
                    FromCharacterCode[
                    Abs[
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`q]], "Murmur3-64"]], 
                    Blank[], 
                    Data`StringHash[
                    StringJoin[
                    ToString[#, InputForm], "Cn.i9)P$"], "Murmur3-64"]]& , 
                    MachineLearning`file132SortedHashAssociation`\
PackagePrivate`keys$]]], "Version" -> {11.3, 0}]], 
                    "InverseDocumentFrequency" -> CompressedData["
1:eJzFGn1o1VX0bW8fbe4939x8usbCTBglFUQW8aCFOYeSyIRl5SS1JxkmQW2y
wlCHlSvCzGXLxMfqGWKCSyFSCd/STbZHNgqD0fpY1lZKwaLCFbX+eef34Pw4
nHPuvW/9dbj397v3fNzzfe+NG55atTEvEAicLAoEwrXdO8YGalL7ur5PNd07
NwVjDOH70Le9824oqPYgfH9g7I/Rq/Eq3zwFuf9OvNCxeHJ4JksHhyeciLbf
lIimPjl3OP/Lh+ew/wMfHN1S/GPrrtscf6lCjZeig6PPll7p+Uj/o/QK86Gl
T0oPuW9GLyh6OHtwBaMrPtpZW1fO/tdxePn9E1OV7LniMccHJR+8jtpXq49t
r1VeWpYX9c1Ptf/12Fe/z/LhWXrf6a4vloTJdVJ9wPLDY60/0PKt9Y+m9ujK
fgD+k/fg7FOtEXYd6MPSReOL6y9m9XnTK6PJljsqSXnhc6D8PpZjU2Nw/att
s0m75uzCVp5tnx56Pp0/yxtDfAFI2Z0xXuSvpH4VQ6Dvs+6TZx7/JiTWW8D3
7MWaa4eGi631lMofOLvh9qf8OLU/PjdKr6X+ltRL5P+eLp/3VnJohtp/YLo9
/4j0Uep3bf2E1p9QcmX3R/rvmn4Yc3K0jQPavCK4tWbhmZ5SnxynKx5gfdPK
V00n4b+l+KV+/9EXiyuSPWFj+lyfsynU6t9I+plfR/eXpBYuya8/9mQ5Kaf1
ex9q3h6KiOMJjHH81vp5GOM8Qqt/pnpiWl/h+TmlC/L6TmT9CM5zGjp/u7Zl
T+m02S+GEKe0dTHkc5zeU/UDZxeAB8PNVeMfd8ey8RLopuIazLuyww9XPnHX
yoO0vWDI2YGtHQNfXekD57c2BXOuL+WxHR3NR+X5CsDYskWtO2PZ/seq8XcT
PS3++KrNz6Fe5OTJ2bltHcjpt+m547wb72N6Hhz92nho2leDdaZ4KbvX7ofp
6tuyILm2pUCel1pCSn6AB9cTnLwpfzc8WT94YUXItz9nJ6Z8H6m6ecbB3ghr
p9Q5eGOUbwEdUr2T1uGX3hu8sqnx77O25ymNj1J/ZeuXAJ9p/Qf7Y3mnC++8
5+tgodoflG249erItlBq17b+d0KdlT5+W9cd3dX3M5934nN8/4PBs3Wfl6jt
FdNr26fDMF73b/qNEj9dGM9U7enrBxv5Ppv23PC5Y7zUd0qPYB3Ecan+SeOs
9Lxd7cP1a7T7UXUEJ1dKLyn9oSCum6T4PJjxt5RctPkMxTfOC7Xn3lK2PVb0
nL9+l+oH9tMU3ZQ/x3jmv3lud/xKwDpvuBBPJP88IPd/UnlBPcrlp9gfYjuR
1vMAcd0krcfAX0jvs7h8xtSOpets76fwPCVvDmJ5g51I10vfAYA+UfTZ6q/a
b2UglVeY7iv1Z2oo7CMOrb57/pphv58Euil75fTMFR9gp6D/ua6b4L5Dm/9j
u+bu3aXy8exeeT/BykOqH5Z9S+hTua5rKbrw/HcN+5svd/3g1V17C/ujE6sv
++owjs+XHzm1u6AhW4/Y9v2k8qDqB+n/HD6uz6F9N+ThyegX5GF4Xsu3a70x
xuv4npCUn5BeWz/bG6suqLjdXxe6el8wtDbRHr0l2/ew7T9wfX6o//F3rb1i
Ojk7ocbc+URGZvZPRvj8SZp3cvGx+ra5xb0/hcXyoOwBz0PcpPjm6Mf9Wufv
W5h9AL+pPeH7JNf+AeM58vrE+c63y4z9HP4O/RbX+RVV73D0e+uJ/JSyR9fy
p97X2srDFX14P7Bvbp20j++afnx/a/ruhOPT24/QH4ofiB/4P3iv4OqcbNfb
2il7/5npF2vpdtWHxX2x6X6PRMmb48/VewAcr6Fvh/0c1Fdcn1eKN1fv5m3l
AH0X032ouPB/8wdw+cbGfQM/Fqn5kN6PePxm/OEvewbWHC8KenLl7oFd3Vvh
vh7XVwX64V2ZFI9W73P9ni5XeSFlr5C3UOf1H3AqPUk=
                    "], 
                    "Version" -> {11.3, 0}, "ID" -> 8271446901366827342, 
                    "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Forbidden"]], 
                  MachineLearning`MLProcessor["Sequence", 
                   Association[
                   "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Processors" -> {
                    MachineLearning`MLProcessor[
                    "NumericalSequencePartition", 
                    Association[
                    "Invertibility" -> "Impossible", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalSequence", "Weight" -> 1]], 
                    "WindowSize" -> 1, "Offset" -> 1, "Version" -> {11.3, 0}, 
                    "ID" -> 3563207022348402352, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]]]], 
                    MachineLearning`MLProcessor["MeanSequenceVector", 
                    Association[
                    "Invertibility" -> "Approximate", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVectorSequence", "Weight" -> 1]], 
                    "vectorLength" -> 1, "Version" -> {11.3, 0}, "ID" -> 
                    7053621659941054987, "Output" -> 
                    Association[
                    "f2" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]]}, 
                    "Invertibility" -> "Impossible", "Missing" -> 
                    "Imputed"]]}, "Invertibility" -> "Impossible", "Missing" -> 
                "Forbidden"]], 
              MachineLearning`MLProcessor["MergeVectors", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1], "f2" -> 
                  Association["Type" -> "NumericalVector", "Weight" -> 1]], 
                "Spans" -> {
                  Span[1, 1715], 
                  Span[1716, 1716]}, "Wrappers" -> {SparseArray, Identity}, 
                "Output" -> 
                Association[
                 "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                    "], 
                    "Type" -> "NumericalVector"]], "Version" -> {11.3, 0}, 
                "ID" -> 821998144885263164]]}, "Invertibility" -> 
            "Impossible", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 4779017560470115588]], 
              MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Index" -> {
                  Association["Not Question" -> 1, "Question" -> 2]}, 
                "MissingCode" -> 0, "Version" -> {11.3, 0}, "ID" -> 
                2739954230257633601, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NominalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 7071693056549462440]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
                "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]},
             "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "ProbabilityPostprocessor" -> Identity, "Name" -> "class", 
         "Marginal" -> 
         Association[
          "Not Question" -> 0.49999999999999994`, "Question" -> 
           0.49999999999999994`]], "Prior" -> Automatic, "Utility" -> 
       SparseArray[
        Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
       "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
       "Speed", "BatchProcessing" -> Automatic, "Model" -> 
       Association["Tree" -> MachineLearning`DecisionTree[
           Association[
           "FeatureIndices" -> 
            RawArray["Integer16",{20, 20, 29, 77, 96, 113, 118, 211, 246, 256,
               256, 263, 313, 373, 373, 447, 496, 536, 556, 556, 569, 569, 
              569, 589, 619, 632, 632, 632, 632, 675, 675, 675, 675, 675, 733,
               738, 738, 738, 738, 751, 776, 776, 776, 813, 818, 818, 840, 
              881, 885, 928, 938, 938, 938, 938, 938, 938, 973, 1019, 1111, 
              1153, 1169, 1169, 1169, 1169, 1169, 1169, 1169, 1171, 1171, 
              1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1178, 
              1178, 1178, 1243, 1281, 1295, 1317, 1317, 1388, 1398, 1463, 
              1475, 1484, 1484, 1498, 1578, 1581, 1638, 1638, 1652, 1652, 
              1674, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
              1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 
              1716, 1716, 1716}], "NumericalThresholds" -> CompressedData["
1:eJwdkFtIEwAYhdfQtSgTI8NSgzmaLRXGMnFTtqZ7qKwlTseESKcoodOhXYbT
6IJhtsJmcxv2IDirSZqDHhpr/xEmTDCTYGCBZoXOVmbTdVGELtsevsM55+Hn
53BqdGX1TAaDcZEdkTKNXtbaqmlTsqKhTqM9KtRui1hDhLjmDGhdFlKqE8eF
yfNoTEnDy5UMzLlvwawI0oW0vXjyrhLbxUokc6yo2K0Cy5uA1VA/LfzZosyk
BHza8sNuyEeDPUgfvTbkcgXIr3pN9Z9tCIgZ403lvYjyMEeA96E9+F2txsyY
CMVZm2Rc+0a5VQ76XtOP0QM5MLge0eKwlkY8a5547wZ1+CQoV6SjXDVLu4Jq
YvPMEPKYKAp8id1eH5mkIV8W4kNNEFWrkL4uxPme/dhsZ2GiVk7HSty4tjCA
n3YrDYivYqrwBjoauPgXZkKJQTrXeZPeGvlU8ZfjKXp1G6XO6zhx6DKe1+rw
TFYXY1FwBtPhU5H+F02Hp+jSrI2OHHQg9bAMga5OOr60Qj3yZRp7+oIqd+hg
0ktxutQa+1FecBYzSQ8gmp9AX4cdVW+GoYAFjn1JYKSYwN6ZF9nGAp4rG/da
SmC+kjcuVz3GV54Npo1u6O7r0X0nER+a/NTm7KfGvl4a9XVR5nIxTS41e+62
bxbwnT8KtwZ5kihzAbnEcNIjca/6JTUtcVIjN1XK52dL/wNL/RDu
             "], 
            "NominalSplits" -> {}, "Children" -> CompressedData["
1:eJwVkVOUFQAARG/ebNu23Xay283eajM3959t27Zt27Ztd3t9zMy5Z/5mMrbt
GdIhMtAnKGAhYQOCIyLCBoXGDED1Hn3DO4ZHFCzW6X8/OKD/WZ/4bDcmf03N
ShPxx9/OsRCVGEQsSrHR0lz3mnFpRD8O+8yn9iYBt8zLSU+YkUwsMj87TUMw
KelLf36ZgeKk54yZGWkqRtiWKuRgk+HssSlXvGwHFvvFMhwwLQWpyDHrcc6z
tiIeJcjFDjvz0ZL89IdhlOeJj41GMi543osmZK4dWW0XdpuYSYbwyIf2YZjV
+e4Kl7vUJeYhCm9tzVXbsMoYvLM9LyzMTW/YnAb04rijHWX2wBLZ0IUusBs1
+ewnt7rFiU7wg+99bh2mOdUgulKWN5bjgUc94n6bcMfbjnWMLYjNV0NJx10b
0pgI8rHLZlSlHdtsyTe788pabHC9WUhBbrJSlzjkpCjDLcJmB/DSSKwxOfPs
QTVmGpVidKIAy+zJfe85w+nWDjw321lWJimHPOhpT1mBSw51iFOc7D73moSB
rHOt4x1ndOZbg9f+A4C//o8=
             "], "LeafValues" -> 
            RawArray["UnsignedInteger8",{{101, 1}, {3, 1}, {2, 2}, {1, 8}, {1,
               5}, {1, 4}, {3, 1}, {1, 58}, {1, 11}, {1, 12}, {1, 3}, {3, 
              1}, {1, 2}, {3, 1}, {1, 3}, {2, 1}, {1, 3}, {3, 1}, {5, 23}, {1,
               4}, {1, 4}, {1, 3}, {4, 2}, {1, 3}, {3, 1}, {1, 9}, {1, 3}, {4,
               1}, {3, 1}, {17, 30}, {8, 10}, {1, 4}, {7, 2}, {4, 2}, {3, 
              1}, {1, 3}, {2, 2}, {12, 1}, {7, 4}, {1, 3}, {2, 1}, {2, 2}, {2,
               2}, {1, 7}, {1, 5}, {1, 6}, {2, 2}, {18, 1}, {1, 4}, {3, 1}, {
              2, 2}, {4, 1}, {1, 2}, {3, 1}, {1, 14}, {2, 2}, {2, 2}, {3, 
              2}, {4, 1}, {75, 1}, {1, 3}, {2, 1}, {6, 1}, {2, 2}, {2, 2}, {7,
               1}, {3, 1}, {7, 1}, {2, 2}, {3, 1}, {1, 4}, {1, 3}, {2, 2}, {3,
               1}, {1, 2}, {3, 3}, {3, 1}, {1, 3}, {2, 2}, {1, 172}, {2, 
              13}, {2, 2}, {3, 1}, {1, 3}, {1, 3}, {1, 3}, {1, 4}, {2, 1}, {
              12, 1}, {3, 1}, {1, 3}, {1, 10}, {1, 3}, {1, 3}, {3, 1}, {1, 
              2}, {3, 8}, {1, 3}, {2, 2}, {5, 1}, {1, 4}, {2, 3}, {6, 1}, {1, 
              2}, {2, 7}, {2, 1}, {1, 3}, {5, 1}, {2, 2}, {9, 3}, {9, 3}, {1, 
              6}, {6, 1}, {2, 2}, {80, 1}, {3, 1}, {1, 3}, {2, 2}, {2, 2}, {2,
               2}, {28, 1}, {2, 2}, {6, 1}}], "RootIndex" -> 67, 
            "NominalDimension" -> 0]], "Processor" -> 
         MachineLearning`MLProcessor["Values", 
           Association[
           "Info" -> Association[
             "(f1f2)" -> Association["Weight" -> CompressedData["
1:eJztxTENgDAABMBnYUMBE0o6VAGV0IQZc4hhJUEAEkhQgIC75Za+t21IcozJ
fV7TOtdi27Zt27Zt27Zt27Zt27Zt27Zt2/53Pk95AXMlGEQ=
                 "], "Type" -> 
                "NumericalVector"]], "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "Method" -> "DecisionTree", "Options" -> 
         Association[
          "DistributionSmoothing" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.7070931592563307, 0.02504363914845967], "Accuracy" -> 
            PlusMinus[0.5000000000000003, 0.07070378035792256], 
            "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100, 
            "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
            "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
            "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
            "AccuracyHistory" -> {
              PlusMinus[0.5000000000000003, 0.04999512254661126]}, 
            "Configuration" -> {
             "DecisionTree", "DistributionSmoothing" -> 1, "FeatureFraction" -> 
              1}, "FinalTrainingSize" -> 1000], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
             "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
             "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
             "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType}], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 115637842022351]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.*^-6], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[2.3537612653541005`, 0.4268209940989989], 
                 "Accuracy" -> 
                 PlusMinus[0.4504950495049506, 0.07029074724332993], 
                 "EvaluationTime" -> 0.00017394, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.049436, 
                 "TrainingMemory" -> 1798504, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.0277203671043191`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[2.3537612653541005`, 0.30180801928018547`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4504950495049506, 0.04970306403042821]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.9460780805399367`, 0.4700942872939521], 
                 "Accuracy" -> 
                 PlusMinus[0.5495049504950499, 0.07042869408830647], 
                 "EvaluationTime" -> 0.00007187, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044369, 
                 "TrainingMemory" -> 2623752, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.5857390060963248`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.9460780805399367`, 0.3324068583426106]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007187, "MeanCrossEntropy" -> 
                PlusMinus[1.9460780805399367`, 0.4700942872939521], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2623752, 
                "TrainingTime" -> 0.493126], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7070931592563307, 0.02504363914845967], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 9.430000000000001*^-6, "TestSize" -> 100,
                  "TrainingSize" -> 10, "TrainingTime" -> 0.007552, 
                 "TrainingMemory" -> 335168, "ModelMemory" -> 61032, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 7.558128955599508, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7070931592563307, 0.017708527067464726`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8989142600866946, 0.13704963816025623`], 
                 "Accuracy" -> 
                 PlusMinus[0.5792079207920797, 0.06993081195248246], 
                 "EvaluationTime" -> 0.0000132, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.025237, 
                 "TrainingMemory" -> 1173760, "ModelMemory" -> 61288, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.41050219998442, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8989142600866946, 0.09690872850227981]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5792079207920797, 0.049448551345481616`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8839677178889411, 0.1363000854895791], 
                 "Accuracy" -> 
                 PlusMinus[0.5891089108910896, 0.06970838956395264], 
                 "EvaluationTime" -> 9.05*^-6, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.105235, 
                 "TrainingMemory" -> 5610600, "ModelMemory" -> 61672, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 5.9552267103014485`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8839677178889411, 0.09637871472598751]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5891089108910896, 0.04929127496626447]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8790576051810061, 0.1391686208427838], 
                 "Accuracy" -> 
                 PlusMinus[0.6980198019801988, 0.04615937631985702], 
                 "EvaluationTime" -> 9.67*^-6, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.366333, 
                 "TrainingMemory" -> 22203896, "ModelMemory" -> 62184, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 5.9046782235633435`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8790576051810061, 0.1391686208427838]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6980198019801988, 0.04615937631985702]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 9.67*^-6, "MeanCrossEntropy" -> 
                PlusMinus[0.8790576051810061, 0.1391686208427838], 
                "ModelMemory" -> 62184, "TrainingMemory" -> 22203896, 
                "TrainingTime" -> 0.46546825000000003`], "Index" -> 2], 
            Association[
             "Value" -> "NaiveBayes", "Options" -> 
              Association[
               "SmoothingParameter" -> Association["Value" -> 0.2]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.1957511596862074`, 0.1977836145849986], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00027889, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.095126, 
                 "TrainingMemory" -> 1509424, "ModelMemory" -> 907992, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 1.7442260702596155`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.1957511596862074`, 0.13985413508063904`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7828022084623473, 0.11953129778999334`], 
                 "Accuracy" -> 
                 PlusMinus[0.6188118811881194, 0.06886790804030904], 
                 "EvaluationTime" -> 0.00031985, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.123381, 
                 "TrainingMemory" -> 3615960, "ModelMemory" -> 930576, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 2.558301033503622, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7828022084623473, 0.08452139123133287]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6188118811881194, 0.04869696478143408]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.8893877217879478, 0.14717185742548708`], 
                 "Accuracy" -> 
                 PlusMinus[0.6089108910891095, 0.06917727028697561], 
                 "EvaluationTime" -> 0.00027361000000000003`, "TestSize" -> 
                 100, "TrainingSize" -> 200, "TrainingTime" -> 0.35569, 
                 "TrainingMemory" -> 14782992, "ModelMemory" -> 1002280, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.3349029480800123`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.8893877217879478, 0.10406621838538166`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00027361000000000003`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.8893877217879478, 0.14717185742548708`], 
                "ModelMemory" -> 1002280, "TrainingMemory" -> 14782992, 
                "TrainingTime" -> 1.8735760000000001`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.0877927578820954`, 0.11578452595789275`], 
                 "Accuracy" -> 
                 PlusMinus[0.4405940594059407, 0.07012485283032993], 
                 "EvaluationTime" -> 0.00001992, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.005608, 
                 "TrainingMemory" -> 441360, "ModelMemory" -> 194904, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.098094668170411, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.0877927578820954`, 0.0818720234612958]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.4405940594059407, 0.049585758966034954`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.697264809214688, 0.016444209057147805`], 
                 "Accuracy" -> 
                 PlusMinus[0.49009900990099037`, 0.07067631991204443], 
                 "EvaluationTime" -> 0.00001918, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.006398, 
                 "TrainingMemory" -> 1719984, "ModelMemory" -> 607016, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 6.558222836541349, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.697264809214688, 0.011627811735558456`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.49009900990099037`, 0.049975705079116424`]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6752594838450804, 0.017892797895458255`], 
                 "Accuracy" -> 
                 PlusMinus[0.5594059405940598, 0.07029074724332998], 
                 "EvaluationTime" -> 0.00003977, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.021239, 
                 "TrainingMemory" -> 8369328, "ModelMemory" -> 2805008, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.907995567002972, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6752594838450804, 0.012652118726278918`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5594059405940598, 0.04970306403042825]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6664964540845267, 0.024419892990284724`], 
                 "Accuracy" -> 
                 PlusMinus[0.53960396039604, 0.04987850435483753], 
                 "EvaluationTime" -> 0.00009492, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.1285, 
                 "TrainingMemory" -> 40493304, "ModelMemory" -> 11047408, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 3.3088928276812233`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6664964540845267, 0.024419892990284724`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00009492, "MeanCrossEntropy" -> 
                PlusMinus[0.6664964540845267, 0.024419892990284724`], 
                "ModelMemory" -> 11047408, "TrainingMemory" -> 40493304, 
                "TrainingTime" -> 0.16623300000000002`], "Index" -> 4], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.7006895037945174, 0.01809996825054025], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00005207, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.009567, 
                 "TrainingMemory" -> 275728, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.02624508864541, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.7006895037945174, 0.01279861028921822]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931471805599441, 0.007931464032162798], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00005703, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.012973, 
                 "TrainingMemory" -> 892576, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.968608843187345, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931471805599441, 0.005608392001879511]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6853665275369779, 0.008626479616410363], 
                 "Accuracy" -> 
                 PlusMinus[0.5990099009900995, 0.06945731300787833], 
                 "EvaluationTime" -> 0.0000532, "TestSize" -> 100, 
                 "TrainingSize" -> 200, "TrainingTime" -> 0.018989, 
                 "TrainingMemory" -> 4195256, "ModelMemory" -> 90760, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.121708545780134, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6853665275369779, 0.006099842234531295]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6640144502285039, 0.012013546486100838`], 
                 "Accuracy" -> 
                 PlusMinus[0.6188118811881194, 0.04869696478143408], 
                 "EvaluationTime" -> 0.000056449999999999997`, "TestSize" -> 
                 100, "TrainingSize" -> 800, "TrainingTime" -> 0.089167, 
                 "TrainingMemory" -> 16575312, "ModelMemory" -> 94856, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 5.194467022712934, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6640144502285039, 0.012013546486100838`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6188118811881194, 0.04869696478143408]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000056449999999999997`, 
                "MeanCrossEntropy" -> 
                PlusMinus[0.6640144502285039, 0.012013546486100838`], 
                "ModelMemory" -> 94856, "TrainingMemory" -> 16575312, 
                "TrainingTime" -> 0.12102575], "Index" -> 5], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6930015408367505, 0.008033609595306624], 
                 "Accuracy" -> 
                 PlusMinus[0.5099009900990102, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007264, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.020734, 
                 "TrainingMemory" -> 2047584, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.643378809353513, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6930015408367505, 0.005680619822246629]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6774722561923496, 0.007949511510513176], 
                 "Accuracy" -> 
                 PlusMinus[0.5792079207920797, 0.049448551345481616`], 
                 "EvaluationTime" -> 0.00007502, "TestSize" -> 100, 
                 "TrainingSize" -> 800, "TrainingTime" -> 0.142276, 
                 "TrainingMemory" -> 33037040, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.706532734515695, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6774722561923496, 0.007949511510513176]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5792079207920797, 0.049448551345481616`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007502, "MeanCrossEntropy" -> 
                PlusMinus[0.6774722561923496, 0.007949511510513176], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 33037040, 
                "TrainingTime" -> 0.198579], "Index" -> 6], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931473692179523, 0.007931467415980243], 
                 "Accuracy" -> 
                 PlusMinus[0.5099009900990102, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007371, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.012086, 
                 "TrainingMemory" -> 819128, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.6233731878017, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931473692179523, 0.005608394394599773]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5099009900990102, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931470003552032, 0.007931461097753533], 
                 "Accuracy" -> 
                 PlusMinus[0.5000000000000003, 0.07070378035792256], 
                 "EvaluationTime" -> 0.00007227, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.01372, 
                 "TrainingMemory" -> 1719016, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.649251627473916, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931470003552032, 0.005608389926938821]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5000000000000003, 0.04999512254661126]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931429420431708, 0.007931391729037679], 
                 "Accuracy" -> 
                 PlusMinus[0.5990099009900995, 0.06945731300787833], 
                 "EvaluationTime" -> 0.00006929000000000001, "TestSize" -> 
                 100, "TrainingSize" -> 200, "TrainingTime" -> 0.024599, 
                 "TrainingMemory" -> 8312392, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.704885827765168, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931429420431708, 0.005608340875849439]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5990099009900995, 0.04911373703086736]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6931250973081593, 0.005608132011087476], 
                 "Accuracy" -> 
                 PlusMinus[0.5891089108910896, 0.04929127496626447], 
                 "EvaluationTime" -> 0.00007280000000000001, "TestSize" -> 
                 100, "TrainingSize" -> 800, "TrainingTime" -> 0.076196, 
                 "TrainingMemory" -> 33036976, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.642906850599569, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6931250973081593, 0.005608132011087476]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5891089108910896, 0.04929127496626447]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007280000000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.6931250973081593, 0.005608132011087476], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 33036976, 
                "TrainingTime" -> 0.107331], "Index" -> 7], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.386515473602657, 0.2997892319886574], "Accuracy" -> 
                 PlusMinus[0.5495049504950499, 0.07042869408830647], 
                 "EvaluationTime" -> 0.00007381, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044131, 
                 "TrainingMemory" -> 2623816, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 2.219730236973486, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.386515473602657, 0.2119829988658867]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5495049504950499, 0.049800607179954416`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007381, "MeanCrossEntropy" -> 
                PlusMinus[1.386515473602657, 0.2997892319886574], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2623816, 
                "TrainingTime" -> 0.48544099999999996`], "Index" -> 8], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[1.089296570443798, 0.14314641718813728`], 
                 "Accuracy" -> 
                 PlusMinus[0.47029702970297055`, 0.0705388573294967], 
                 "EvaluationTime" -> 0.00007462, "TestSize" -> 100, 
                 "TrainingSize" -> 10, "TrainingTime" -> 0.042066, 
                 "TrainingMemory" -> 1798608, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.8632244547037793`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[1.089296570443798, 0.10121980229629043`]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.47029702970297055`, 0.04987850435483752]}], 
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.923233311946536, 0.13899405586179253`], 
                 "Accuracy" -> 
                 PlusMinus[0.53960396039604, 0.07053885732949673], 
                 "EvaluationTime" -> 0.00006934, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.044614, 
                 "TrainingMemory" -> 2624112, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 3.43622132558719, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.923233311946536, 0.09828363944449528]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.53960396039604, 0.04987850435483753]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006934, "MeanCrossEntropy" -> 
                PlusMinus[0.923233311946536, 0.13899405586179253`], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2624112, 
                "TrainingTime" -> 0.48820600000000003`], "Index" -> 9], 
            Association[
             "Value" -> "LogisticRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.6921895658482664, 0.009975115719036007], 
                 "Accuracy" -> 
                 PlusMinus[0.5594059405940598, 0.07029074724332998], 
                 "EvaluationTime" -> 0.00007347, "TestSize" -> 100, 
                 "TrainingSize" -> 40, "TrainingTime" -> 0.030915, 
                 "TrainingMemory" -> 2566128, "ModelMemory" -> 67960, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 4.631302998719581, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.6921895658482664, 0.007053471968050884]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.5594059405940598, 0.04970306403042825]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00007347, "MeanCrossEntropy" -> 
                PlusMinus[0.6921895658482664, 0.009975115719036007], 
                "ModelMemory" -> 67960, "TrainingMemory" -> 2566128, 
                "TrainingTime" -> 0.340065], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.2], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 2], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 15], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.665745175663856, 0.028409115411534402`], 
                 "Accuracy" -> 
                 PlusMinus[0.6089108910891095, 0.06917727028697561], 
                 "EvaluationTime" -> 0.0006139100000000001, "TestSize" -> 100,
                  "TrainingSize" -> 40, "TrainingTime" -> 0.398711, 
                 "TrainingMemory" -> 1816256, "ModelMemory" -> 214576, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 2.5686112991718506`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.665745175663856, 0.02008827815500723]}, 
                 "AccuracyHistory" -> {
                   PlusMinus[0.6089108910891095, 0.04891571692389512]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0006139100000000001, "MeanCrossEntropy" -> 
                PlusMinus[0.665745175663856, 0.028409115411534402`], 
                "ModelMemory" -> 214576, "TrainingMemory" -> 1816256, 
                "TrainingTime" -> 4.385821], "Index" -> 11]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LogisticRegression", 
                "NaiveBayes", "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
                 "TrainingSize", "TrainingTime", "TrainingMemory", 
                 "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "AccuracyHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
               TypeSystem`AnyLength], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 11], 
           Association["ID" -> 115633547055055]], "MaxTrainingSize" -> 1000, 
         "LastReportingTime" -> 3.740068046705079`16.325454492975325*^9, 
         "PreprocessorEvaluationTime" -> 4.68115234375`2.*^-6, 
         "PreprocessorMemory" -> 195984, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 10, "TimeBudgets" -> 0.5120000000000001, 
             "ElapsedTimes" -> 0.49161, "ExperimentCounts" -> 7], 
            Association[
            "TrainingSizes" -> 40, "TimeBudgets" -> 0.64, "ElapsedTimes" -> 
             1.467996, "ExperimentCounts" -> 11], 
            Association[
            "TrainingSizes" -> 200, "TimeBudgets" -> 0.8, "ElapsedTimes" -> 
             0.866427, "ExperimentCounts" -> 5], 
            Association[
            "TrainingSizes" -> 800, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             0.95418, "ExperimentCounts" -> 5]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 4], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[115642136989647]], "ID" -> 
            115646431956943]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "Text", "Weight" -> 1, 
              "Values" -> {
               "would you rather be ravished by a pirate or a british rear \
admiral."}, "ID" -> 2944923201742380288], "f2" -> 
            Association[
             "Type" -> "NumericalSequence", "Weight" -> 1, 
              "Values" -> {{15, 11, 2, 15, 15, 10, 4, 7, 3, 4, 1, 1, 7, 13}}, 
              "ID" -> 1880470000636944807]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 5.895246, "MaxTrainingMemory" -> 
         58779792, "DataMemory" -> 356264, "FunctionMemory" -> 431496, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 7, 8, 19, 47, 27.511215`8.192084752706696}, 
           "Instant", "Gregorian", -5.], "ProcessorCount" -> 2, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], "TestSet" -> 
    Association[
     "Input" -> {{"you dumb bitch.", {11, 1, 7, 13}}, {
        "and you could stand to get a little smarter ain't that right you \
dumb blonde fuck.", {3, 11, 15, 15, 10, 15, 4, 1, 2, 15, 2, 10, 7, 11, 1, 1, 
         7, 13}}, {"an italian right.", {4, 1, 7, 13}}, {
        "major what do you think could have done this.", {1, 11, 15, 11, 15, 
         15, 15, 15, 4, 13}}, {"you saw this.", {11, 15, 4, 13}}, {
        "how can you be here and say this.", {2, 15, 11, 15, 2, 3, 15, 4, 
         13}}, {"natalie who.", {7, 11, 13}}, {
        "where will my toys be.", {2, 15, 11, 7, 15, 13}}, {
        "the car or debbie.", {4, 7, 3, 7, 13}}, {
        "that ' s who you want me to bend my rules for.", {10, 13, 7, 11, 11, 
         15, 11, 10, 15, 11, 7, 10, 13}}, {
        "i've never gotten a letter like this have you.", {6, 15, 2, 15, 4, 7,
          10, 4, 15, 11, 13}}, {
        "you don't think so.", {11, 15, 2, 15, 2, 13}}, {
        "i believe we share an art instructor you know chastity.", {6, 15, 11,
          15, 4, 7, 7, 11, 15, 7, 13}}, {"call that fresh.", {7, 4, 1, 13}}, {
        "oh shut up huh.", {5, 15, 9, 2, 13}}, {"the poet.", {4, 7, 13}}, {
        "why doesn't she just hang up and call the police.", {2, 15, 2, 11, 2,
          15, 9, 3, 15, 4, 7, 13}}, {
        "if you need to come to where i live ok.", {10, 11, 15, 10, 15, 10, 2,
          6, 1, 7, 13}}, {"who will you kill.", {11, 15, 11, 15, 13}}, {
        "who is dead.", {11, 15, 1, 13}}, {
        "you remember him from high school.", {11, 15, 11, 10, 1, 7, 13}}, {
        "you hungry or thirsty or both.", {11, 1, 3, 1, 3, 4, 13}}, {
        "how often do you see mr. kramer and his son.", {2, 2, 15, 11, 15, 12,
          12, 3, 11, 7, 13}}, {
        "who's mr. jocularity.", {11, 15, 12, 7, 13}}, {
        "so now where were we here.", {2, 2, 2, 15, 11, 2, 13}}, {
        "charge set.", {7, 7, 13}}, {
        "you serve martinis doncha.", {11, 15, 7, 7, 13}}, {
        "goin' dove huntin'.", {7, 13, 15, 7, 13, 13}}, {
        "and mademoiselle.", {3, 7, 13}}, {
        "is it that bad.", {15, 11, 10, 1, 13}}, {
        "they're trying to unnerve us. why did they do that.", {11, 15, 15, 
         10, 15, 11, 13, 2, 15, 11, 15, 4, 13}}, {
        "what number did you tear out.", {4, 7, 15, 11, 15, 9, 13}}, {
        "just a little joke miss farmer. ...did you really say that.", {2, 4, 
         1, 7, 15, 7, 13, 13, 15, 11, 2, 15, 10, 13}}, {
        "hi viv.  carlos you know my roommate viv. you spent it on drugs \
didn't you.", {5, 7, 13, 7, 11, 15, 11, 7, 7, 13, 11, 15, 11, 10, 7, 15, 2, 
         11, 13}}, {
        "what have you got to do.", {4, 15, 11, 15, 10, 15, 13}}, {
        "do you know her.", {15, 11, 15, 11, 13}}, {
        "what the hell is a treadstone.", {11, 4, 7, 15, 4, 7, 13}}, {
        "papa.", {7, 13}}, {"as a plumber.", {10, 4, 7, 13}}, {
        "what ten thousand pounds.", {4, 8, 8, 7, 13}}, {
        "up get it.", {2, 15, 11, 13}}, {
        "are you declaring an emergency.", {15, 11, 15, 4, 7, 13}}, {
        "shall i remain here in our hotel room hiding or shall i carry on the \
best i can.", {15, 6, 15, 2, 10, 11, 7, 7, 7, 3, 15, 6, 15, 10, 4, 1, 6, 15, 
         13}}, {"whatsamatter.", {7, 13}}, {
        "what was i gonna say.", {11, 15, 6, 15, 10, 15, 13}}, {
        "and those were the guys who went on the exercise with you.", {3, 4, 
         15, 4, 7, 11, 15, 10, 4, 7, 10, 11, 13}}, {
        "i want the money asshole what do you think.", {6, 15, 4, 7, 7, 11, 
         15, 11, 15, 13}}, {
        "i mean what kind of people do well at this stuff.", {6, 15, 11, 7, 
         10, 7, 15, 2, 10, 4, 7, 13}}, {
        "how are they treating you.", {2, 15, 11, 15, 11, 13}}, {
        "wanna stay with me tonight.", {7, 10, 15, 10, 11, 2, 13}}, {
        "at what exactly.", {10, 4, 2, 13}}, {
        "do you think it's done.", {15, 11, 15, 11, 15, 15, 13}}, {
        "what is so goddamn valuable in your life that you're worried about \
losing.", {11, 15, 2, 1, 1, 10, 11, 7, 10, 11, 15, 15, 10, 15, 13}}, {
        "pittsburgh.", {7, 13}}, {
        "[was it] &quot;meirschultz&quot;.", {13, 15, 11, 13, 13, 7, 13, 
         13}}, {"i know you're expecting some kind of -- extravagant behavior \
but believe me -- do you believe me.", {6, 15, 11, 15, 15, 4, 7, 10, 13, 1, 7,
          3, 15, 11, 13, 15, 11, 15, 11, 13}}, {
        "what's a lunch cost these days.", {11, 15, 4, 7, 7, 4, 7, 13}}, {
        "where is inner space.", {2, 15, 1, 7, 13}}, {
        "why won't you check out lv-426. ...because just one of those things \
managed to kill my entire crew within twelve hours of hatching...", {2, 15, 2,
          11, 15, 9, 7, 13, 13, 2, 2, 8, 10, 4, 7, 15, 10, 15, 11, 1, 7, 10, 
         8, 7, 10, 15, 13}}, {
        "look butthead i'll treat you so nice you'll never want to let me go \
okay.", {7, 7, 6, 15, 15, 11, 2, 1, 11, 15, 2, 15, 10, 15, 11, 15, 1, 13}}, {
        "that obvious huh.", {10, 1, 7, 13}}, {"permission.", {7, 13}}, {
        "okay miss starling.", {1, 15, 7, 13}}, {
        "what's dr. gillman say.", {11, 15, 7}}, {
        "why did they turn back.", {2, 15, 11, 15, 9, 13}}, {
        "what's she doing.", {11, 15, 11, 15, 13}}, {
        "how you doing sam.", {2, 11, 15, 7, 13}}, {
        "why do you eat that stuff.", {2, 15, 11, 15, 4, 7, 13}}, {
        "what exactly did he call out.", {4, 2, 15, 11, 15, 9, 13}}, {
        "say---you think that's the same guy who was in the accident with \
lucy.", {15, 13, 11, 15, 4, 15, 4, 1, 7, 11, 15, 10, 4, 7, 10, 7, 13}}, {
        "and you sven aren't you afraid of crossing the rainbow bridge to \
asgaard.", {3, 11, 15, 15, 2, 11, 1, 10, 15, 4, 7, 7, 10, 15, 13}}, {
        "not great.", {2, 1, 13}}, {
        "running out of time are we.", {15, 10, 10, 7, 15, 11, 13}}, {
        "you're not using the same guy who tried to fix it.", {11, 15, 2, 15, 
         4, 1, 7, 11, 15, 10, 15, 11, 13}}, {
        "to you ... .", {10, 11, 13, 13}}, {
        "did you know you shouldn't light three cigarettes with a match.", {
         15, 11, 15, 11, 15, 2, 15, 8, 7, 10, 4, 7, 13}}, {
        "my my my how did things turn so hostile so quickly.", {11, 11, 11, 2,
          15, 7, 15, 2, 1, 2, 2, 13}}, {
        "no but my dog he's a got millions of them -- have you got a \
license.", {4, 3, 11, 7, 11, 15, 4, 15, 7, 10, 11, 13, 15, 11, 15, 4, 7, 
         13}}, {"this this happened.", {4, 4, 15, 13}}, {
        "how did you manage it.", {2, 15, 11, 15, 11, 13}}, {
        "whose justice.", {11, 7, 13}}, {
        "did they tell you to sleep with me.", {15, 11, 15, 11, 10, 15, 10, 
         11, 13}}, {"max, what is it.", {7, 13, 11, 15, 11, 13}}, {
        "will you come see her with me.", {15, 11, 15, 15, 11, 10, 11, 13}}, {
        "how you feeling all right.", {2, 11, 15, 4, 7, 13}}, {
        "is it inevitable that the game plays you.", {15, 11, 1, 10, 4, 7, 15,
          11, 13}}, {"you found anyone in yours.", {11, 15, 7, 10, 11, 13}}, {
        "don't you want to see what daddy does for a living.", {15, 2, 11, 15,
          10, 15, 11, 7, 15, 10, 4, 7, 13}}, {
        "well could you lend me some money till you have one.", {2, 15, 11, 
         15, 11, 4, 7, 10, 11, 15, 8, 13}}, {
        "i'm just here shooting this band what about you.", {6, 15, 2, 2, 15, 
         4, 7, 4, 10, 11, 13}}, {
        "it's your bank as well as mine isn't it.", {11, 15, 11, 7, 2, 2, 10, 
         7, 15, 2, 11, 13}}, {"vasquez how you doing.", {7, 2, 11, 15, 13}}, {
        "you don't like me.", {11, 15, 2, 15, 11, 13}}, {
        "philip swann.", {7, 7, 13}}, {
        "the police always do don't they.", {4, 7, 2, 15, 15, 2, 11, 13}}, {
        "people are gonna be thinking the younger james gang.", {7, 15, 15, 
         10, 15, 15, 4, 1, 7, 7, 13}}, {
        "so why isn't it all bloody.", {2, 2, 15, 2, 11, 4, 1, 13}}, {
        "is that all there is.", {15, 10, 4, 11, 15, 13}}, {
        "then we'll go dancin' okay.", {2, 11, 15, 15, 7, 13, 1, 13}}, {
        "you're not from l.a. huh.", {11, 15, 2, 10, 12, 2, 13}}, {
        "the skipper.", {4, 7, 13}}, {
        "little details little inconsistencies designed to bounce us back \
from one of you to the other asking questions killing time until the \
transport arrives and whisks you away to where senator daddy can protect \
you.", {1, 7, 1, 7, 15, 10, 15, 11, 2, 10, 8, 10, 11, 10, 4, 1, 15, 7, 15, 7, 
         10, 4, 7, 15, 3, 15, 11, 2, 10, 2, 7, 7, 15, 15, 11, 13}}, {
        "and back.", {3, 2, 13}}, {
        "and he loves you back doesn't he?", {3, 11, 15, 11, 2, 15, 2, 11, 
         13}}, {"he weighted her down.", {11, 15, 11, 2, 13}}, {
        "move your ass! shit.", {15, 11, 7, 13}}, {
        "do you have any sort of guns or ammunition here?", {15, 11, 15, 4, 7,
          10, 7, 3, 7, 2, 13}}, {
        "how did you get all of this stuff into the country?", {2, 15, 11, 15,
          4, 10, 4, 7, 10, 4, 7, 13}}, {
        "it wasn't that bad.", {11, 15, 2, 10, 1, 13}}, {
        "i have to.", {6, 15, 10, 13}}, {
        "say it backwards.", {15, 11, 2, 13}}, {
        "try a strawberry.", {15, 4, 7, 13}}, {"since when?", {10, 2, 13}}, {
        "i have my own warrant.", {6, 15, 11, 1, 7, 13}}, {
        "truth is...", {7, 15, 13}}, {
        "he puts human life at risk and-- <u>no</u> <u>i</u> <u>did</u> \
<u>not</u>.", {11, 15, 1, 7, 10, 7, 3, 13, 15, 4, 7, 7, 6, 6, 7, 15, 1, 7, 2, 
         15, 13}}, {
        "listen to it for christsake.", {15, 10, 11, 10, 7, 13}}, {
        "uh look..", {5, 15, 13, 13}}, {"free admission.", {1, 7, 13}}, {
        "back in the sixties i had a weather changing machine that was in \
essence a sophisticated heat beam which we called a laser.", {2, 10, 4, 7, 6, 
         15, 4, 7, 15, 7, 4, 15, 10, 7, 4, 1, 7, 7, 4, 11, 15, 4, 7, 13}}, {
        "so anyway these two federal marshals meet the plane and they take \
our address and they ask us never to fly with 'friendly skies' again.", {2, 2,
          4, 8, 1, 7, 15, 4, 7, 3, 11, 15, 11, 7, 3, 11, 15, 11, 2, 10, 15, 
         10, 13, 1, 7, 2, 13}}, {"that thing's dead.", {10, 7, 1, 13}}, {
        "i am not a doll.", {6, 15, 2, 4, 7, 13}}, {
        "i just went upstairs to see this man lacerda.", {6, 2, 15, 2, 10, 15,
          4, 7, 7, 13}}, {
        "i want you to help me help my husband.", {6, 15, 11, 10, 15, 11, 15, 
         11, 7, 13}}, {"- give it to me!", {13, 15, 11, 10, 11, 13}}, {
        "renault or yourself?", {7, 3, 11, 13}}, {
        "i've seen a few.", {6, 15, 15, 4, 1, 13}}, {
        "i've been through this.", {6, 15, 15, 10, 4, 13}}, {
        "out with it.", {10, 10, 11, 13}}, {
        "oh matt you must be mistaken.", {5, 15, 11, 15, 15, 15, 13}}, {
        "might.", {15, 13}}, {"lost in the storm?", {15, 10, 4, 7, 13}}, {
        "too bad ...", {2, 1, 13}}, {
        "fenrir the wolf covers the sun -- men fight and kill each other the \
whole time.", {15, 4, 7, 15, 4, 7, 13, 7, 7, 3, 15, 4, 1, 4, 1, 7, 13}}, {
        "that will make it even more official.", {4, 15, 15, 11, 2, 2, 1, 
         13}}, {"she just farted.", {11, 2, 15, 13}}, {
        "shrimp and fries.", {7, 3, 7, 13}}, {
        "i've got three satchel charges six gammon grenades a dozen- \
and-a-half pineapples and all my regular gear.", {6, 15, 15, 8, 7, 7, 8, 7, 
         15, 4, 7, 13, 7, 7, 3, 4, 11, 1, 7, 13}}, {
        "if he was so good why's he so dead?", {10, 11, 15, 2, 1, 2, 11, 2, 1,
          13}}, {"best to keep your sight fixed on our duty.", {2, 10, 15, 11,
          7, 15, 10, 11, 7, 13}}, {"mr. cole...", {12, 7, 13}}, {
        "david let's go now.", {7, 15, 15, 2, 13}}, {
        "all right you raise the kids -- i'll raise the roof.", {4, 7, 11, 15,
          4, 7, 13, 6, 15, 15, 4, 7, 13}}, {
        "'guess i was worried we didn't have anything to talk about since \
work was off-limits.", {13, 15, 6, 15, 15, 11, 15, 2, 15, 7, 10, 15, 10, 10, 
         7, 15, 1, 13}}, {
        "i know we banned this play but frankly i can't remember why.", {6, 
         15, 11, 15, 4, 7, 3, 2, 6, 15, 2, 15, 2, 13}}, {
        "i still can't accept the world as it is!", {6, 2, 15, 2, 15, 4, 7, 
         10, 11, 15, 13}}, {
        "he's at the ministry.", {11, 15, 10, 4, 7, 13}}, {
        "don't turn out the hall light.", {15, 2, 15, 9, 4, 7, 7, 13}}, {
        "ira?", {7, 13}}, {
        "can you drive this car?", {15, 11, 15, 4, 7, 13}}, {
        "i told you what to do.", {6, 15, 11, 11, 10, 15, 13}}, {
        "i can't do it again.", {6, 15, 2, 15, 11, 2, 13}}, {
        "and you must be steed.", {3, 11, 15, 15, 15, 13}}, {
        "it may interest you to know that at this very moment he is on his \
way here.", {11, 15, 15, 11, 10, 15, 4, 10, 4, 1, 7, 11, 15, 10, 11, 7, 2, 
         13}}, {"so i met a new friend.", {2, 6, 15, 4, 1, 7, 13}}, {
        "i'll tell you what kiddo--why don't i fix us some french toast?", {6,
          15, 15, 11, 4, 7, 13, 2, 15, 2, 6, 15, 11, 4, 1, 7, 13}}, {
        "and still we know in secret that nothing is more important to us.", {
         3, 2, 11, 15, 10, 7, 4, 7, 15, 2, 1, 10, 11, 13}}, {
        "i don't even bother with guests registering any more..", {6, 15, 2, 
         2, 15, 10, 7, 15, 4, 1, 13, 13}}, {
        "i suspected that he -- well.", {6, 15, 10, 11, 13, 2, 13}}, {
        "it's a question.", {11, 15, 4, 7, 13}}, {
        "a man like that would want to lay low if he was planning some kind \
of damn sabotage mission!", {4, 7, 10, 4, 15, 15, 10, 15, 1, 10, 11, 15, 15, 
         4, 7, 10, 7, 7, 7, 13}}, {
        "here are the pistols.", {2, 15, 4, 7, 13}}, {
        "good afternoon mr. harris.", {1, 7, 12, 12, 13}}, {
        "the food lines took forever.", {4, 7, 7, 15, 2, 13}}, {
        "don't you like girls mr. cunningham?", {15, 2, 11, 10, 7, 12, 12, 
         13}}, {"i love you harry.", {6, 7, 11, 15, 13}}, {
        "please have a seat lieutenant..", {15, 15, 4, 7, 7, 13, 13}}, {
        "anybody usin' these drawers here?", {7, 7, 13, 4, 7, 2, 13}}, {
        "churchill vit his cigars and his brandy and his rotten paintings.", {
         1, 7, 11, 7, 3, 11, 7, 3, 11, 1, 7, 13}}, {
        "sometimes you think they've betrayed you.", {2, 11, 15, 11, 15, 15, 
         11, 13}}, {
        "i should have got rid of you long ago!", {6, 15, 15, 15, 1, 10, 11, 
         2, 2, 13}}, {"i chant.", {6, 7, 13}}, {
        "i'm crazy about you sid.", {6, 15, 1, 10, 11, 15, 13}}, {
        "thank you for correcting my ignorance.", {15, 11, 10, 15, 11, 7, 
         13}}, {"goddamn you to hell!", {1, 11, 10, 7, 13}}, {
        "i survived.", {6, 15, 13}}, {
        "it's not too late to keep going up to vancouver?", {11, 15, 2, 2, 1, 
         10, 15, 15, 2, 10, 7, 13}}, {
        "jesus christ i used to have to listen to my old man use that every \
morning.", {7, 7, 6, 15, 10, 15, 10, 15, 10, 11, 1, 7, 15, 10, 4, 7, 13}}, {
        "he <u>has</u> been going after everything.", {11, 15, 15, 2, 15, 15, 
         10, 7, 13}}, {
        "i have a plan which i think will work.", {6, 15, 4, 7, 4, 6, 15, 15, 
         15, 13}}, {
        "i can't get it until monday.", {6, 15, 2, 15, 11, 10, 12, 13}}, {
        "only way you're ever gonna find out is reincarnation...", {2, 7, 11, 
         15, 2, 15, 10, 15, 9, 15, 7, 13}}, {
        "i asked her if you were happy to see us.", {6, 15, 11, 10, 11, 15, 1,
          10, 15, 11, 13}}, {"it blew up.", {11, 15, 9, 13}}, {
        "so what's your excuse?", {2, 11, 15, 11, 7, 13}}, {
        "poofs.", {7, 13}}, {
        "i want to go back to the clock people.", {6, 15, 10, 15, 2, 10, 4, 7,
          7, 13}}, {
        "that's a fairly crummy way to start a morning.", {4, 15, 4, 2, 1, 7, 
         10, 15, 4, 7, 13}}, {"i think that's it.", {6, 15, 4, 15, 11, 13}}, {
        "forty- five minutes on your knees with the dry heaves..", {8, 13, 8, 
         7, 10, 11, 7, 10, 4, 1, 7, 13, 13}}, {
        "i was ready for the next step you weren't ergo i walked.", {6, 15, 1,
          10, 4, 1, 7, 11, 15, 2, 15, 6, 15, 13}}, {
        "interred parkside repository little chute wisconsin.", {1, 7, 1, 1, 
         7, 7, 13}}, {"i'd love some.", {6, 15, 15, 4, 13}}, {
        "and drive an old jalopy?", {3, 15, 4, 1, 7, 13}}, {
        "how much for the week?", {2, 2, 10, 4, 7, 13}}, {
        "i didn't take you to raise.", {6, 15, 2, 15, 11, 10, 15, 13}}, {
        "mom i just finished the third movement of that concerto i was \
working on.", {7, 6, 2, 15, 4, 1, 7, 10, 4, 7, 6, 15, 15, 10, 13}}, {
        "i'll just get used to it.", {6, 15, 2, 15, 15, 10, 11, 13}}, {
        "she didn't seem the type to lam out--even if she got the chance.", {
         11, 15, 2, 15, 4, 7, 10, 15, 9, 13, 2, 10, 11, 15, 4, 7, 13}}}, 
      "Output" -> {
       "Question", "Question", "Question", "Question", "Question", "Question",
         "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Question", 
        "Question", "Question", "Question", "Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question", "Not Question", 
        "Not Question", "Not Question", "Not Question"}], 
    "Predictions" -> {
     "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Question", "Not Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Question", 
      "Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Question", "Not Question", "Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Question", "Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Question", "Not Question", 
      "Question", "Question", "Not Question", "Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Question", "Not Question", "Not Question", "Question", 
      "Not Question", "Not Question", "Not Question", "Not Question", 
      "Question", "Not Question", "Not Question", "Not Question"}, 
    "LogProbabilities" -> CompressedData["
1:eJyVVm1Ik1EUXttM0j9O1KhEpxGWS6GyD6kwg8QfWk4oJCRSMBChrJCcYGIo
Is5FFFES0tefHA6mlubUe53BCo3E+mG4yC+GlkMt0TlifZDX4LnB4f0xLnf3
nuec85znnPvGFV7KLVKrVKrXv39/1rqKV+W+BxF866ZRb2ffNYb7O2MpusLi
ETaf6g8cT15eWz3rK2Vf2fy+J2pCw+M85pbzGS/Y18BcduXKIxYbeDt4aCGE
I36oprXiy+1FlnWPzW3//nH9f3EP8fEc8a539w62VnYwo3mPQVur5abJ3WP5
JxaYe3hnx32HmxnMQcX+0vo1vzqu1if6Q60/WNndaV3OGZfk78lLi6k2RsU/
9Tgm9EYnmT/FR+Tp5w57iZoXpIfEzfi6GcYn4ZX0H83RN7DwGe605uqkfDC+
vLN7bVfif7KnI+kP9zsGJLzYzOzUqJYgPm+xn6x5Zlecj2mXa7XoVBjPN0yp
UqpvrdVtlg0sjvp3vJtc51HwivdRD1R9ER/PpXyKMz1tNitLatduPGAJ5lhv
9IfxYLyo//imJtfKzSG2r9G7ks5XpfgE76IOGA/iY/0ErvCD9hQ/MbPusvYw
H1u2NUfXRw5L/KM+8Fxp/al+Rb2i/pXqUfS16POsg1WdU8kaPpRxxJR2oUvK
H+1xPlD5Ke0P3ON8k+5DfbHfKXyBK/ygPeof70vzDexxvlLzCs8vb9k2WppU
w3pddZ99VeESHs5fvI977Mer1sNpbY9VvGI64YZlc7/Uz9hPiIf2qA/kD/Gp
96axxLjkfrPEnOeinQ0FH6T3xxhR7bfljbPy8fGFY7le8j7qheJL0hPsqXlM
8Yd6wnix3tK8Bb5EHURd0B/Fv5Qv8R7g/FLKH8W/9H1B9DfGg3pAfOxf5AP5
wv5BPKFDoUusD9aTmmeUP+p9puaHND8Je+SHioean+S8hvjw++D//fTvPaf0
iv2C+f2128A93xIvBif0yfVTqGfEk+pHvD+/AMp56rg=
     "], 
    "CountMatrix" -> {{69, 31, 0}, {25, 75, 0}}, 
    "IndicesMatrix" -> {{{104, 105, 107, 108, 111, 113, 115, 116, 117, 118, 
       121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 
       139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 157, 
       159, 160, 162, 165, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 
       179, 180, 181, 182, 184, 185, 186, 188, 190, 191, 193, 194, 195, 196, 
       198, 199, 200}, {101, 102, 103, 106, 109, 110, 112, 114, 119, 120, 123,
        131, 132, 138, 146, 152, 154, 155, 156, 158, 161, 163, 164, 166, 171, 
       175, 183, 187, 189, 192, 197}, {}}, {{3, 8, 9, 14, 15, 17, 28, 39, 41, 
       47, 48, 50, 53, 55, 56, 60, 81, 90, 91, 94, 95, 96, 97, 99, 100}, {1, 
       2, 4, 5, 6, 7, 10, 11, 12, 13, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 
       27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 49,
        51, 52, 54, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 
       72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 92,
        93, 98}, {}}}, "ExtendedClasses" -> {"Not Question", "Question"}, 
    "Weights" -> SparseArray[Automatic, {200}, 1., {1, {{0, 0}, {}}, {}}], 
    "BatchEvaluationTime" -> 0.00032245500000000003`, "SingleEvaluationTime" -> 
    0.0041395`3., "Version" -> {11.3, 0}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.740086225009004*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"e5cc3856-4b2d-4dc7-a1be-ea3687cbe143"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"76f749cb-8628-4673-a9de-a9c265a377e4"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.918764360245441, 0.8114757915891664, 0.5170170835843346}, {
   1., 0.42, 0.}}, {{0.9308204233591533, 0.48872120755758486`, 
   0.0034442575614848777`}, {0.8936386975647902, 0.7048745705442823, 
   0.29416204775797117`}}}, {{0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["69", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "69", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7340425531914894`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.69`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.711340206185567`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{69, " examples of ", "Not Question", " correctly classified"}], 
         
         Row[{"Precision = ", 0.7340425531914894}], 
         Row[{"Recall = ", 0.69}], 
         Row[{"FScore = ", 0.711340206185567}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["25", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "25", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.26595744680851063`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.25`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          25, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.26595744680851063`}], 
         Row[{"Row fraction = ", 0.25}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["31", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "31", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.29245283018867924`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.31`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          31, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.29245283018867924`}], 
         Row[{"Row fraction = ", 0.31}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["75", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "75", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.7075471698113207`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.75`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7281553398058254`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{75, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.7075471698113207}], 
         Row[{"Recall = ", 0.75}], 
         Row[{"FScore = ", 0.7281553398058254}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.69`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.69}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "100", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.75`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{100, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.75}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "94", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7340425531914894`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{94, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.7340425531914894}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "106", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.7075471698113207`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{106, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.7075471698113207}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["100", TraditionalForm]}, {0.5, 
       FormBox["100", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["94", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["106", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.7400862456922197`*^9},
 CellLabel->"Out[48]=",ExpressionUUID->"4abb7f32-3900-4a1a-8331-9545f2c51f6d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Classify with 1000 sentences per class", "Subsection",
 CellChangeTimes->{{3.7400862648808203`*^9, 
  3.7400862891752462`*^9}},ExpressionUUID->"442669c2-296c-487d-933d-\
58838e62affc"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getClassFormat", " ", "[", " ", "x_", " ", "]"}], " ", ":=", " ", 
   
   RowBox[{"Transpose", " ", "[", "\n", "                                   ", 
    RowBox[{"{", " ", 
     RowBox[{"x", " ", ",", "\n", "                                    ", 
      RowBox[{"partsOfSpeechNumbers", " ", "[", " ", "x", " ", "]"}]}], "\n", 
     "                                    ", "}"}], "\n", 
    "                                  ", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.740086387294783*^9, 3.740086569024702*^9}, {
  3.740086712838089*^9, 3.740086713715331*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"65df7634-8169-4ddd-9b1a-9fae4d0158f6"],

Cell[BoxData[
 RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
  RowBox[{"questions", "[", 
   RowBox[{"[", 
    RowBox[{"1", ";;", "100"}], "]"}], "]"}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.7400871541627293`*^9, 3.7400871651133204`*^9}, 
   3.7400873601446047`*^9},
 CellLabel->"In[63]:=",ExpressionUUID->"05a4d2b2-86a2-487b-b829-35fa2b7bc77f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cl1000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "2000"}], "]"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "2000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "200"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}]}],
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"4a77f52a-47fc-426a-8bb2-14b305238994"],

Cell[BoxData[
 TemplateBox[{
  "Java","excptn",
   "\"A Java exception occurred: \
\\!\\(\\*RowBox[{\\\"\\\\\\\"java.lang.OutOfMemoryError: Java heap \
space\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.ling.CoreLabel$CoreLabelFactory.newLabel(CoreLabel.java:218)\
\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.trees.LabeledScoredTreeFactory.newTreeNode(\
LabeledScoredTreeFactory.java:56)\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.parser.common.ParserUtils.xTree(ParserUtils.java:41)\\\\\\\\\
n\\\\\\\\tat \
edu.stanford.nlp.parser.lexparser.LexicalizedParser.parse(LexicalizedParser.\
java:313)\\\\\\\\n\\\\\\\\tat \
edu.stanford.nlp.parser.common.ParserGrammar.parse(ParserGrammar.java:84)\\\\\
\\\\n\\\\\\\\tat sun.reflect.GeneratedMethodAccessor8.invoke(Unknown \
Source)\\\\\\\"\\\"}]\\).\"",2,67,16,30943663018284057872,"Local",
   "JLink`Java"},
  "MessageTemplate2"]], "Message", "MSG",
 CellChangeTimes->{3.740087928117969*^9},
 CellLabel->
  "During evaluation of \
In[67]:=",ExpressionUUID->"402d88ff-ef64-4a98-9ee6-8cce25d68448"],

Cell[BoxData[
 TemplateBox[{
  "Table","iterb",
   "\"Iterator \\!\\(\\*RowBox[{\\\"{\\\", \
RowBox[{\\\"MachineLearning`Models`GrammaticalParser`Private`i\\\", \
\\\",\\\", RowBox[{\\\"$Failed\\\", \\\"[\\\", \
RowBox[{\\\"MachineLearning`Models`GrammaticalParser`Private`numChildren\\\", \
\\\"[\\\", \\\"]\\\"}], \\\"]\\\"}]}], \\\"}\\\"}]\\) does not have \
appropriate bounds.\"",2,67,17,30943663018284057872,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.740087928156039*^9},
 CellLabel->
  "During evaluation of \
In[67]:=",ExpressionUUID->"3dec0770-cdaa-49da-9e2a-1570209a9498"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierFunction", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[{{
                    PointSize[0.13], 
                    GrayLevel[0.45], 
                    
                    PointBox[{{0.9821769431797024, -0.440194219686987}, {
                    1.1339776261519132`, 0.8056918676854272}, {
                    0.5279892326667741, 0.6574306661126254}, {
                    0.022147046479890797`, 1.4937877187998898`}}], 
                    GrayLevel[0.7], 
                    
                    PointBox[{{-0.9815166384819979, 
                    0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
                    GrayLevel[0.55], 
                    AbsoluteThickness[1.5], 
                    LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
                  Axes -> {False, False}, AxesLabel -> {None, None}, 
                   AxesOrigin -> {0, 0}, 
                   BaseStyle -> {FontFamily -> "Arial", 
                    AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
                   Frame -> {{True, True}, {True, True}}, 
                   FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                   Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], 
                   FrameTicks -> {{None, None}, {None, None}}, 
                   GridLines -> {None, None}, 
                   LabelStyle -> {FontFamily -> "Arial"}, 
                   Method -> {"ScalingFunctions" -> None}, 
                   PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> 
                   True, PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
                   Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
                  GrayLevel[0.94]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"NumericalSequence\""}], "}"}],
                     "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    TemplateBox[{
                    ",", "\",\"", "\"Not Question\"", "\"Question\""}, 
                    "RowWithSeparators"], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of training examples: \"", 
                    "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                    TagBox["4000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[ClassifierFunction, 1061968, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierFunction, 
            10529582893065609946752054009641029904160274829777827873888, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierFunction[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904160274829777827873888,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7400869273112173`*^9, 3.7400874209055862`*^9, 
  3.740088128068754*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"1bdcb11f-61c2-446e-9d92-9fffae167afb"]
}, Open  ]],

Cell[BoxData["cl1000"], "Input",
 CellChangeTimes->{{3.74008745999564*^9, 
  3.740087465485717*^9}},ExpressionUUID->"4f5700aa-442d-48ee-a951-\
c2cd0b983e3a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", " ", "=", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"cl1000", ",", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", " ", "[", " ", 
        RowBox[{"testq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", " ", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", "  ", 
       RowBox[{"partsOfSpeechNumbers", "[", 
        RowBox[{"testnonq1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], "|>"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740087499437152*^9, 3.7400875576166143`*^9}, {
  3.740087609923555*^9, 3.7400876131367607`*^9}, {3.740088147785582*^9, 
  3.7400881664146214`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"8934d3ef-dd87-4142-8bed-ceca9391344b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ClassifierMeasurementsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{0.8564437870801482, 0.8967071593761374, 
                   0.4746151541446917}, {0.7191592194171378, 
                   0.5062062867304069, 0.8158644505878024}, {
                   0.47333333333333333`, 0.7727052229508918, 
                   0.7191592194171378}}, {{-0.03479955456570183, \
-0.055679287305122394`}, {3.055679287305122, 3.041759465478842}}, {0, 1}], 
                  ImagePadding -> 0.2, 
                  PlotRange -> {{-0.0625, 3.0625}, {-0.06, 3.06}}, 
                  PlotRangePadding -> Automatic, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, 
                  ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], Frame -> True, 
                  FrameTicks -> None, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]]], 
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Classifier: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"LogisticRegression\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of test examples: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["1000", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox[
                    "\"Number of classes: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Accuracy: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    
                    RowBox[{
                    "0.759000000000000008`5.026979811276751", "\[PlusMinus]", 
                    "0.0135315225345157188`2."}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
          "SummaryPanel"], 
         ButtonBox[
          DynamicBox[
           ToBoxes[
            If[
             
             Or[$VersionNumber < 11.2, CurrentValue["RunningEvaluator"] =!= 
              "Local"], 
             Style["This object cannot be used as input.", "SummaryEmbed"], 
             BoxForm`EmbedSummaryLabel[
             ClassifierMeasurementsObject, 1575752, 
              Dynamic[Typeset`embedState$$]]], StandardForm]], ButtonFunction :> 
          BoxForm`EmbedSummaryInterpretation[
           ClassifierMeasurementsObject, 
            10529582893065609946752054009641029904178721573851498598656, 
            EvaluationBox[], 
            Dynamic[Typeset`embedState$$], StandardForm], DefaultBaseStyle -> 
          "SummaryEmbedButton", BaseStyle -> {"DialogStyle"}, Enabled -> 
          Dynamic[
            
            And[$VersionNumber >= 11.2, CurrentValue["RunningEvaluator"] === 
             "Local", Typeset`embedState$$ === "Ready"]], Appearance -> 
          Inherited, Method -> Inherited, Evaluator -> Automatic]}, 
        "SummaryEmbedGrid"], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ClassifierMeasurementsObject[\[Ellipsis]]"& )],
  False,
  BoxID -> 10529582893065609946752054009641029904178721573851498598656,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7400875603210583`*^9, 3.74008817049942*^9, 
  3.740088233211849*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"8f05786e-4d35-4ea5-a1c6-ddb2c4c49d78"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cm", "[", "\"\<ConfusionMatrixPlot\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7400875661705217`*^9, 3.740087581144607*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"57535679-2960-420a-8ceb-6b07723069ad"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{{0.8993928272988664, 0.7300381009693961, 0.3436477252106045}, {
   0.9331888196910629, 0.48636850371337426`, 0.003326341734721111}}, {{1., 
   0.42, 0.}, {0.9228038878539331, 0.82674012745567, 0.5567209370562367}}}, {{
   0, 0}, {2, 2}}, {0, 1}],
  Epilog->{{
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["393", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "393", "\" examples of \"", "\"Not Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.74573055028463`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.786`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.765335929892892`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{393, " examples of ", "Not Question", " correctly classified"}], 
         Row[{"Precision = ", 0.74573055028463}], 
         Row[{"Recall = ", 0.786}], 
         Row[{"FScore = ", 0.765335929892892}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["134", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "134", "\" examples of \"", "\"Question\"", 
             "\" misclassified as \"", "\"Not Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.25426944971537`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.268`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          134, " examples of ", "Question", " misclassified as ", 
           "Not Question"}], 
         Row[{"Column fraction = ", 0.25426944971537}], 
         Row[{"Row fraction = ", 0.268}]}], "Tooltip"]& ]}, {
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["107", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "107", "\" examples of \"", "\"Not Question\"", 
             "\" misclassified as \"", "\"Question\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Column fraction = \"", "0.226215644820296`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Row fraction = \"", "0.214`"}, "RowDefault"]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{
          107, " examples of ", "Not Question", " misclassified as ", 
           "Question"}], 
         Row[{"Column fraction = ", 0.226215644820296}], 
         Row[{"Row fraction = ", 0.214}]}], "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       InsetBox[
        GraphicsBox[{
          Opacity[1.], 
          InsetBox[
           FormBox["366", TraditionalForm], {0.5, 0.5}], 
          Opacity[0.], 
          RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
       TagBox[
        GridBox[{{
           
           TemplateBox[{
            "366", "\" examples of \"", "\"Question\"", 
             "\" correctly classified\""}, "RowDefault"]}, {
           
           TemplateBox[{"\"Precision = \"", "0.773784355179704`"}, 
            "RowDefault"]}, {
           TemplateBox[{"\"Recall = \"", "0.732`"}, "RowDefault"]}, {
           
           TemplateBox[{"\"FScore = \"", "0.7523124357656732`"}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
      Annotation[#, 
       Column[{
         Row[{366, " examples of ", "Question", " correctly classified"}], 
         Row[{"Precision = ", 0.773784355179704}], 
         Row[{"Recall = ", 0.732}], 
         Row[{"FScore = ", 0.7523124357656732}]}], "Tooltip"]& ]}, 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.786`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Not Question"}], 
        Row[{"Recall = ", 0.786}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "500", "\" example\"", "\"s\"", "\" of class \"", "\"Question\""}, 
           "RowDefault"]}, {
          TemplateBox[{"\"Recall = \"", "0.732`"}, "RowDefault"]}}, 
        GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
        "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{500, " example", "s", " of class ", "Question"}], 
        Row[{"Recall = ", 0.732}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "527", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Not Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.74573055028463`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{527, " example", "s", " classified as ", "Not Question"}], 
        Row[{"Precision = ", 0.74573055028463}]}], "Tooltip"]& ], 
    TagBox[
     TooltipBox[
      InsetBox[
       GraphicsBox[{
         Opacity[0.], 
         RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
      TagBox[
       GridBox[{{
          
          TemplateBox[{
           "473", "\" example\"", "\"s\"", "\" classified as \"", 
            "\"Question\""}, "RowDefault"]}, {
          
          TemplateBox[{"\"Precision = \"", "0.773784355179704`"}, 
           "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
        DefaultBaseStyle -> "Column", 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]], 
     Annotation[#, 
      Column[{
        Row[{473, " example", "s", " classified as ", "Question"}], 
        Row[{"Precision = ", 0.773784355179704}]}], "Tooltip"]& ]},
  Frame->True,
  FrameLabel->{
    FormBox["\"predicted class\"", TraditionalForm], 
    FormBox["\"actual class\"", TraditionalForm]},
  FrameTicks->{{{{1.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 0.], 
        TraditionalForm]}, {0.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 0.], TraditionalForm]}}, {{
      1.5, 
       FormBox["500", TraditionalForm]}, {0.5, 
       FormBox["500", TraditionalForm]}}}, {{{0.5, 
       FormBox[
        RotationBox["527", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["473", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}, {{0.5, 
       FormBox[
        RotationBox["\"Not Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}, {1.5, 
       FormBox[
        RotationBox["\"Question\"", BoxRotation -> 1.5707963267948966`], 
        TraditionalForm]}}}},
  FrameTicksStyle->12,
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->300,
  Method->{
   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
    "RangePadding" -> Scaled[0.05]},
  PlotRangePadding->None]], "Output",
 CellChangeTimes->{3.740087581820541*^9, 3.740088240232705*^9},
 CellLabel->"Out[70]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
AfxX21Y=\
\>"],ExpressionUUID->"08a5ca49-d4a9-4876-bad7-b433fea73cd8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["5000 ", "Subsection",
 CellChangeTimes->{{3.740088317224325*^9, 
  3.7400883194708557`*^9}},ExpressionUUID->"91183821-3108-44aa-a87f-\
8a7c1fe0310e"],

Cell[BoxData[
 RowBox[{"cl5000", "=", 
  RowBox[{"Classify", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Question\>\"", "\[Rule]", " ", "\[IndentingNewLine]", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"questions", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}], ",", " ", 
      "\[IndentingNewLine]", 
      RowBox[{"\"\<Not Question\>\"", "\[Rule]", " ", 
       RowBox[{"partsOfSpeechNumbers", "[", " ", 
        RowBox[{"normalLines1", "[", 
         RowBox[{"[", 
          RowBox[{"1", ";;", "5000"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}], 
    " ", ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Question\>\"", "\[Rule]", " ", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
       RowBox[{"\"\<Not Question\>\"", "\[Rule]", 
        RowBox[{"partsOfSpeechNumbers", "[", " ", 
         RowBox[{"validationnonq1", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "500"}], "]"}], "]"}], "]"}]}]}], " ", "|>"}]}],
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.740084345647468*^9, 3.740084474253017*^9}, {
   3.7400845306920023`*^9, 3.740084541816677*^9}, {3.740084756287476*^9, 
   3.740084781028084*^9}, {3.740085114537529*^9, 3.74008514109368*^9}, {
   3.7400857914195538`*^9, 3.740085833656323*^9}, {3.740086361553349*^9, 
   3.740086372254513*^9}, {3.7400865810819483`*^9, 3.740086702771391*^9}, 
   3.7400867523482924`*^9, {3.740086795724475*^9, 3.7400868747444267`*^9}, {
   3.740087386367126*^9, 3.7400874049101677`*^9}, {3.74008759400392*^9, 
   3.740087603897298*^9}, {3.740088323962701*^9, 3.740088333887694*^9}, 
   3.74009614841433*^9},ExpressionUUID->"20ce2fee-f182-4a76-8ef1-\
f2420b0008d3"]
}, Open  ]]
},
WindowSize->{808, 755},
WindowMargins->{{Automatic, 30}, {-34, Automatic}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 137, 1, 45, "Subsubsection",ExpressionUUID->"cab4ee65-639b-4750-a1e4-975f2577e569"],
Cell[720, 25, 266, 5, 30, "Input",ExpressionUUID->"d71059b3-665b-4950-867f-9bf72a6d367d"],
Cell[CellGroupData[{
Cell[1011, 34, 400, 9, 30, "Input",ExpressionUUID->"8413af67-812f-44eb-acb6-871039fc40cf"],
Cell[1414, 45, 8334, 214, 184, "Output",ExpressionUUID->"d801c6bc-803e-40c6-a4f6-59d99fe9aac4"]
}, Open  ]],
Cell[9763, 262, 479, 14, 30, "Input",ExpressionUUID->"18054f2b-965c-49cb-8804-2a7fbfca729b"],
Cell[10245, 278, 337, 7, 30, "Input",ExpressionUUID->"6106833c-4a76-4063-a956-dec4209f4060"],
Cell[10585, 287, 173, 3, 30, "Input",ExpressionUUID->"eb2ff9fe-4247-4574-abae-11656fdb5bbb"],
Cell[CellGroupData[{
Cell[10783, 294, 255, 4, 30, "Input",ExpressionUUID->"14e880f6-e239-45e4-9145-3be8f2c8060e"],
Cell[11041, 300, 225, 3, 34, "Output",ExpressionUUID->"2dd5deed-1af9-4aab-bf7e-c1bae71d6c03"]
}, Open  ]],
Cell[11281, 306, 243, 6, 30, "Input",ExpressionUUID->"3fd53a69-1c65-49c9-91ca-518a28b4a4dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11561, 317, 149, 1, 45, "Subsubsection",ExpressionUUID->"b49d2da7-adc3-45f2-b7b6-c68f0e7ec730"],
Cell[11713, 320, 219, 2, 35, "Text",ExpressionUUID->"92a8c79e-daf1-4081-b17e-f49b05eabc91"],
Cell[CellGroupData[{
Cell[11957, 326, 499, 13, 52, "Input",ExpressionUUID->"c5e8a140-ec24-4682-b35a-20a6f28713cc"],
Cell[12459, 341, 8034, 209, 184, "Output",ExpressionUUID->"179933b8-bbcf-4b48-990a-7491128e8d7e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[20542, 556, 156, 1, 45, "Subsubsection",ExpressionUUID->"7b6c53ad-8577-466a-bfed-e5f158adc6fb"],
Cell[CellGroupData[{
Cell[20723, 561, 343, 8, 30, "Input",ExpressionUUID->"a7b6d6cc-7ef0-467e-9dde-60e19e6c7fe6"],
Cell[21069, 571, 8080, 211, 184, "Output",ExpressionUUID->"1cd94f8e-d8aa-4ca9-832d-8b4599fdb08e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[29186, 787, 216, 4, 30, "Input",ExpressionUUID->"262ad8a5-14f2-4740-b5c7-783cf07c0df5"],
Cell[29405, 793, 8018, 209, 184, "Output",ExpressionUUID->"4ce013f6-4960-4a66-9654-333227236ad0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[37472, 1008, 117, 1, 45, "Subsubsection",ExpressionUUID->"df29d1d5-fc99-48cd-ba8c-31b7c9564335"],
Cell[CellGroupData[{
Cell[37614, 1013, 350, 7, 30, "Input",ExpressionUUID->"f5a5e964-4f0a-4b95-af97-34c669344325"],
Cell[37967, 1022, 7991, 209, 184, "Output",ExpressionUUID->"9278c83f-d7b1-473c-be17-9c6f44c6f180"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45995, 1236, 288, 6, 30, "Input",ExpressionUUID->"d2d17123-2450-4c92-8bfd-9e4f335ae4d6"],
Cell[46286, 1244, 7993, 208, 184, "Output",ExpressionUUID->"f75bad94-222c-4711-9a4b-2f5daa450d7c"]
}, Open  ]],
Cell[54294, 1455, 481, 11, 52, "Input",ExpressionUUID->"e9a06111-4bd6-4f73-a69f-7b65f263d0ed"],
Cell[54778, 1468, 440, 10, 52, "Input",ExpressionUUID->"e81c76ef-496b-451f-8f6b-f779b847fb8c"],
Cell[55221, 1480, 500, 11, 52, "Input",ExpressionUUID->"f56e3b0e-2dc7-4fd9-ae0b-89a1a7a7f4f5"],
Cell[55724, 1493, 466, 11, 73, "Input",ExpressionUUID->"cf5afbb1-9047-4c6c-8417-4e467840f6f3"],
Cell[CellGroupData[{
Cell[56215, 1508, 500, 13, 73, "Input",ExpressionUUID->"c0e9c824-4063-4809-bfe4-82caa47c669d"],
Cell[56718, 1523, 156, 2, 34, "Output",ExpressionUUID->"a376fbf2-3691-4a53-bf5c-3005f1e8af29"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[56923, 1531, 139, 1, 45, "Subsubsection",ExpressionUUID->"0ef2d266-dca6-4b95-9309-5085c4fdc9e4"],
Cell[57065, 1534, 326, 9, 30, "Input",ExpressionUUID->"0fdb2830-5dff-4190-ba92-2f22c2ae7221"],
Cell[57394, 1545, 349, 7, 30, "Input",ExpressionUUID->"24dadab7-aeb2-4403-b47d-9d7a7da9c011"],
Cell[CellGroupData[{
Cell[57768, 1556, 295, 7, 30, "Input",ExpressionUUID->"db28260a-8059-40e1-84dc-31617d67aa11"],
Cell[58066, 1565, 107, 1, 34, "Output",ExpressionUUID->"54e31492-7cab-4948-85ca-3768dae23336"]
}, Open  ]],
Cell[CellGroupData[{
Cell[58210, 1571, 795, 16, 94, "Input",ExpressionUUID->"2e3d1310-7455-4cb5-b6e5-7872be0dac8b"],
Cell[59008, 1589, 1008, 19, 77, "Output",ExpressionUUID->"15ef5f23-2edb-42d7-a53b-c52a79317990"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60053, 1613, 350, 7, 52, "Input",ExpressionUUID->"90b3345f-14bd-4fb9-b650-31515b62f882"],
Cell[60406, 1622, 205, 4, 34, "Output",ExpressionUUID->"c37abec4-ef50-40b4-b10f-1eb70d445709"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60660, 1632, 112, 1, 45, "Subsubsection",ExpressionUUID->"c3e68d7b-1c05-456d-a16e-0a3835c9a007"],
Cell[CellGroupData[{
Cell[60797, 1637, 1896, 43, 262, "Input",ExpressionUUID->"16520970-9419-43f2-9f32-e3c5b48f5c56"],
Cell[62696, 1682, 53845, 1029, 93, "Output",ExpressionUUID->"6fc05414-ce14-4584-bdf7-97ac005af35e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[116578, 2716, 1174, 33, 136, "Input",ExpressionUUID->"ed243bc7-b166-488c-96c2-e32ab1bcf9e8"],
Cell[117755, 2751, 576, 10, 56, "Output",ExpressionUUID->"fc6e4659-0fd7-4e8c-a1a7-8b0df7c6aeb1"]
}, Open  ]],
Cell[118346, 2764, 1670, 38, 319, "Code",ExpressionUUID->"f24b21c2-f4e4-4ce9-adab-28ec9139ee26"],
Cell[CellGroupData[{
Cell[120041, 2806, 1417, 38, 115, "Input",ExpressionUUID->"e5881c42-c5f6-4ba6-a1de-87adfe55fb2f"],
Cell[121461, 2846, 2272, 60, 203, "Output",ExpressionUUID->"6685630e-0cec-450f-87e7-0a4cb856556b"]
}, Open  ]],
Cell[123748, 2909, 5903, 150, 514, "Input",ExpressionUUID->"54f1815f-e286-4c78-b929-24096a8edd1c"],
Cell[CellGroupData[{
Cell[129676, 3063, 6111, 154, 514, "Input",ExpressionUUID->"dd5bebd2-95f7-460e-81d7-b41b2e84a9a0"],
Cell[135790, 3219, 11031, 221, 112, "Output",ExpressionUUID->"6b90ff0b-125c-4cbf-9b27-462161bafb5a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[146858, 3445, 3175, 79, 262, "Input",ExpressionUUID->"92773ba6-c513-48fc-b7e8-6215dd347448"],
Cell[150036, 3526, 8629, 173, 111, "Output",ExpressionUUID->"f4d27a2a-681d-4304-90a6-cddc7955eef6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158702, 3704, 226, 3, 30, "Input",ExpressionUUID->"e12b0564-1f3c-4105-a841-3f359f8fa3f0"],
Cell[158931, 3709, 9618, 251, 321, "Output",ExpressionUUID->"b7314f76-072f-4d8c-b6f1-700665964a8f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168598, 3966, 167, 3, 54, "Subsection",ExpressionUUID->"4f87d1e5-e9c2-400c-b56b-14ca6ccffed4"],
Cell[CellGroupData[{
Cell[168790, 3973, 795, 16, 94, "Input",ExpressionUUID->"ab593a78-068a-4748-ad79-479c6bfcab2b"],
Cell[169588, 3991, 1008, 19, 77, "Output",ExpressionUUID->"da6a0587-bc3d-4810-b62f-a1e1ad284771"]
}, Open  ]],
Cell[CellGroupData[{
Cell[170633, 4015, 6394, 159, 556, "Input",ExpressionUUID->"7c99db0d-c727-4d26-826f-ec0910fc5904"],
Cell[177030, 4176, 92323, 1665, 93, "Output",ExpressionUUID->"6c670d68-be30-4e1a-9524-065c42da0c60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[269390, 5846, 3148, 79, 283, "Input",ExpressionUUID->"d078db54-3fb5-4f7d-a830-7291119b8496"],
Cell[272541, 5927, 119192, 2065, 92, "Output",ExpressionUUID->"e5cc3856-4b2d-4dc7-a1be-ea3687cbe143"]
}, Open  ]],
Cell[CellGroupData[{
Cell[391770, 7997, 160, 2, 30, "Input",ExpressionUUID->"76f749cb-8628-4673-a9de-a9c265a377e4"],
Cell[391933, 8001, 9602, 251, 321, "Output",ExpressionUUID->"4abb7f32-3900-4a1a-8331-9545f2c51f6d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[401584, 8258, 190, 3, 54, "Subsection",ExpressionUUID->"442669c2-296c-487d-933d-58838e62affc"],
Cell[401777, 8263, 694, 13, 129, "Code",ExpressionUUID->"65df7634-8169-4ddd-9b1a-9fae4d0158f6"],
Cell[402474, 8278, 353, 7, 30, "Input",ExpressionUUID->"05a4d2b2-86a2-487b-b829-35fa2b7bc77f"],
Cell[CellGroupData[{
Cell[402852, 8289, 2166, 43, 283, "Input",ExpressionUUID->"4a77f52a-47fc-426a-8bb2-14b305238994"],
Cell[405021, 8334, 1027, 22, 127, "Message",ExpressionUUID->"402d88ff-ef64-4a98-9ee6-8cce25d68448"],
Cell[406051, 8358, 611, 13, 42, "Message",ExpressionUUID->"3dec0770-cdaa-49da-9e2a-1570209a9498"],
Cell[406665, 8373, 11087, 222, 112, "Output",ExpressionUUID->"1bdcb11f-61c2-446e-9d92-9fffae167afb"]
}, Open  ]],
Cell[417767, 8598, 157, 3, 30, "Input",ExpressionUUID->"4f5700aa-442d-48ee-a951-c2cd0b983e3a"],
Cell[CellGroupData[{
Cell[417949, 8605, 878, 20, 73, "Input",ExpressionUUID->"8934d3ef-dd87-4142-8bed-ceca9391344b"],
Cell[418830, 8627, 8625, 173, 111, "Output",ExpressionUUID->"8f05786e-4d35-4ea5-a1c6-ddb2c4c49d78"]
}, Open  ]],
Cell[CellGroupData[{
Cell[427492, 8805, 228, 3, 30, "Input",ExpressionUUID->"57535679-2960-420a-8ceb-6b07723069ad"],
Cell[427723, 8810, 18642, 399, 321, 9467, 248, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"08a5ca49-d4a9-4876-bad7-b433fea73cd8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[446414, 9215, 155, 3, 54, "Subsection",ExpressionUUID->"91183821-3108-44aa-a87f-8a7c1fe0310e"],
Cell[446572, 9220, 2197, 44, 262, "Input",ExpressionUUID->"20ce2fee-f182-4a76-8ef1-f2420b0008d3"]
}, Open  ]]
}
]
*)

